
// SPDX-License-Identifier: Apache-2.0


// Generated from SubstraitPlanLexer.g4 by ANTLR 4.13.2


#include "SubstraitPlanLexer.h"


#ifndef _WIN32
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif


using namespace antlr4;

using namespace io::substrait::textplan;


using namespace antlr4;

namespace {

struct SubstraitPlanLexerStaticData final {
  SubstraitPlanLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SubstraitPlanLexerStaticData(const SubstraitPlanLexerStaticData&) = delete;
  SubstraitPlanLexerStaticData(SubstraitPlanLexerStaticData&&) = delete;
  SubstraitPlanLexerStaticData& operator=(const SubstraitPlanLexerStaticData&) = delete;
  SubstraitPlanLexerStaticData& operator=(SubstraitPlanLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag substraitplanlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<SubstraitPlanLexerStaticData> substraitplanlexerLexerStaticData = nullptr;

void substraitplanlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (substraitplanlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(substraitplanlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SubstraitPlanLexerStaticData>(
    std::vector<std::string>{
      "EXTENSION_SPACE", "FUNCTION", "AS", "NAMED", "SCHEMA", "RELATION", 
      "PIPELINES", "COMMON", "BASE_SCHEMA", "FILTER", "PROJECTION", "EXPRESSION", 
      "ADVANCED_EXTENSION", "GROUPING", "MEASURE", "INVOCATION", "SORT", 
      "BY", "COUNT", "TYPE", "EMIT", "SUBQUERY", "EXISTS", "UNIQUE", "IN", 
      "ALL", "ANY", "COMPARISON", "VIRTUAL_TABLE", "LOCAL_FILES", "NAMED_TABLE", 
      "EXTENSION_TABLE", "SOURCE", "ROOT", "ITEMS", "NAMES", "URI_FILE", 
      "URI_PATH", "URI_PATH_GLOB", "URI_FOLDER", "PARTITION_INDEX", "START", 
      "LENGTH", "ORC", "PARQUET", "NULLVAL", "TRUEVAL", "FALSEVAL", "LIST", 
      "MAP", "STRUCT", "ARROW", "COLON", "SEMICOLON", "LEFTBRACE", "RIGHTBRACE", 
      "LEFTPAREN", "RIGHTPAREN", "QUOTE", "COMMA", "PERIOD", "EQUAL", "LEFTBRACKET", 
      "RIGHTBRACKET", "UNDERSCORE", "MINUS", "LEFTANGLEBRACKET", "RIGHTANGLEBRACKET", 
      "QUESTIONMARK", "ATSIGN", "IDENTIFIER", "NUMBER", "STRING", "ESCAPEDQUOTE", 
      "HEX", "DIGIT", "RAW_LITERAL_SINGLE_BACKTICK", "RAW_LITERAL_DOUBLE_BACKTICK", 
      "RAW_LITERAL_TRIPLE_BACKTICK", "SINGLE_LINE_COMMENT", "SPACES", "SCHEME", 
      "HOSTNAME", "FILENAME", "PATH", "URI", "EXTENSIONS_LEFTBRACE", "EXTENSIONS_SPACES"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE", "EXTENSIONS"
    },
    std::vector<std::string>{
      "", "", "'EXTENSION_SPACE'", "'FUNCTION'", "'AS'", "'NAMED'", "'SCHEMA'", 
      "'RELATION'", "'PIPELINES'", "'COMMON'", "'BASE_SCHEMA'", "'FILTER'", 
      "'PROJECTION'", "'EXPRESSION'", "'ADVANCED_EXTENSION'", "'GROUPING'", 
      "'MEASURE'", "'INVOCATION'", "'SORT'", "'BY'", "'COUNT'", "'TYPE'", 
      "'EMIT'", "'SUBQUERY'", "'EXISTS'", "'UNIQUE'", "'IN'", "'ALL'", "'ANY'", 
      "", "'VIRTUAL_TABLE'", "'LOCAL_FILES'", "'NAMED_TABLE'", "'EXTENSION_TABLE'", 
      "'SOURCE'", "'ROOT'", "'ITEMS'", "'NAMES'", "'URI_FILE'", "'URI_PATH'", 
      "'URI_PATH_GLOB'", "'URI_FOLDER'", "'PARTITION_INDEX'", "'START'", 
      "'LENGTH'", "'ORC'", "'PARQUET'", "'NULL'", "'TRUE'", "'FALSE'", "'LIST'", 
      "'MAP'", "'STRUCT'", "'->'", "':'", "';'", "'{'", "'}'", "'('", "')'", 
      "','", "'.'", "'='", "'['", "']'", "'_'", "'-'", "'<'", "'>'", "'\\u003F'", 
      "'@'"
    },
    std::vector<std::string>{
      "", "SPACES", "EXTENSION_SPACE", "FUNCTION", "AS", "NAMED", "SCHEMA", 
      "RELATION", "PIPELINES", "COMMON", "BASE_SCHEMA", "FILTER", "PROJECTION", 
      "EXPRESSION", "ADVANCED_EXTENSION", "GROUPING", "MEASURE", "INVOCATION", 
      "SORT", "BY", "COUNT", "TYPE", "EMIT", "SUBQUERY", "EXISTS", "UNIQUE", 
      "IN", "ALL", "ANY", "COMPARISON", "VIRTUAL_TABLE", "LOCAL_FILES", 
      "NAMED_TABLE", "EXTENSION_TABLE", "SOURCE", "ROOT", "ITEMS", "NAMES", 
      "URI_FILE", "URI_PATH", "URI_PATH_GLOB", "URI_FOLDER", "PARTITION_INDEX", 
      "START", "LENGTH", "ORC", "PARQUET", "NULLVAL", "TRUEVAL", "FALSEVAL", 
      "LIST", "MAP", "STRUCT", "ARROW", "COLON", "SEMICOLON", "LEFTBRACE", 
      "RIGHTBRACE", "LEFTPAREN", "RIGHTPAREN", "COMMA", "PERIOD", "EQUAL", 
      "LEFTBRACKET", "RIGHTBRACKET", "UNDERSCORE", "MINUS", "LEFTANGLEBRACKET", 
      "RIGHTANGLEBRACKET", "QUESTIONMARK", "ATSIGN", "IDENTIFIER", "NUMBER", 
      "STRING", "SINGLE_LINE_COMMENT", "URI"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,75,819,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
  	2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
  	13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,
  	20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,
  	27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
  	34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
  	41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,
  	48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
  	55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,
  	62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
  	69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
  	76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,
  	83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,406,8,27,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
  	1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,
  	1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
  	1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,
  	1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,
  	1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,5,70,643,8,70,10,70,12,70,646,
  	9,70,1,71,3,71,649,8,71,1,71,4,71,652,8,71,11,71,12,71,653,1,71,1,71,
  	4,71,658,8,71,11,71,12,71,659,3,71,662,8,71,1,71,3,71,665,8,71,1,71,4,
  	71,668,8,71,11,71,12,71,669,1,71,1,71,4,71,674,8,71,11,71,12,71,675,3,
  	71,678,8,71,1,71,1,71,1,71,3,71,683,8,71,1,71,4,71,686,8,71,11,71,12,
  	71,687,3,71,690,8,71,1,72,1,72,1,72,5,72,695,8,72,10,72,12,72,698,9,72,
  	1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,4,76,711,8,76,
  	11,76,12,76,712,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,4,77,723,8,77,
  	11,77,12,77,724,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,4,78,
  	737,8,78,11,78,12,78,738,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,
  	1,79,5,79,751,8,79,10,79,12,79,754,9,79,1,79,3,79,757,8,79,1,79,1,79,
  	3,79,761,8,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,4,81,770,8,81,11,81,
  	12,81,771,1,82,4,82,775,8,82,11,82,12,82,776,1,83,4,83,780,8,83,11,83,
  	12,83,781,1,84,1,84,1,84,5,84,787,8,84,10,84,12,84,790,9,84,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,3,85,800,8,85,1,85,1,85,1,85,3,85,805,8,
  	85,1,85,3,85,808,8,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,
  	87,3,712,724,738,0,88,2,2,4,3,6,4,8,5,10,6,12,7,14,8,16,9,18,10,20,11,
  	22,12,24,13,26,14,28,15,30,16,32,17,34,18,36,19,38,20,40,21,42,22,44,
  	23,46,24,48,25,50,26,52,27,54,28,56,29,58,30,60,31,62,32,64,33,66,34,
  	68,35,70,36,72,37,74,38,76,39,78,40,80,41,82,42,84,43,86,44,88,45,90,
  	46,92,47,94,48,96,49,98,50,100,51,102,52,104,53,106,54,108,55,110,56,
  	112,57,114,58,116,59,118,0,120,60,122,61,124,62,126,63,128,64,130,65,
  	132,66,134,67,136,68,138,69,140,70,142,71,144,72,146,73,148,0,150,0,152,
  	0,154,0,156,0,158,0,160,74,162,1,164,0,166,0,168,0,170,0,172,75,174,0,
  	176,0,2,0,1,33,2,0,69,69,101,101,2,0,88,88,120,120,2,0,84,84,116,116,
  	2,0,78,78,110,110,2,0,83,83,115,115,2,0,73,73,105,105,2,0,79,79,111,111,
  	2,0,80,80,112,112,2,0,65,65,97,97,2,0,67,67,99,99,2,0,70,70,102,102,2,
  	0,85,85,117,117,2,0,77,77,109,109,2,0,68,68,100,100,2,0,72,72,104,104,
  	2,0,82,82,114,114,2,0,76,76,108,108,2,0,66,66,98,98,2,0,74,74,106,106,
  	2,0,86,86,118,118,2,0,71,71,103,103,2,0,89,89,121,121,2,0,81,81,113,113,
  	2,0,65,90,97,122,4,0,36,36,48,57,65,90,97,122,1,0,48,57,1,0,34,34,3,0,
  	48,57,65,70,97,102,1,0,96,96,2,0,10,10,13,13,3,0,9,11,13,13,32,32,4,0,
  	45,46,48,57,65,90,97,122,5,0,45,46,48,57,65,90,95,95,97,122,841,0,2,1,
  	0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,
  	14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,
  	0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,
  	0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,
  	46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,
  	0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,
  	0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,
  	78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,
  	0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,
  	0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,
  	0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,120,1,0,0,
  	0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,130,1,0,0,
  	0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,0,138,1,0,0,0,0,140,1,0,0,
  	0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,
  	0,0,158,1,0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,1,172,1,0,0,0,1,174,1,0,0,
  	0,1,176,1,0,0,0,2,178,1,0,0,0,4,196,1,0,0,0,6,205,1,0,0,0,8,208,1,0,0,
  	0,10,214,1,0,0,0,12,221,1,0,0,0,14,230,1,0,0,0,16,240,1,0,0,0,18,247,
  	1,0,0,0,20,259,1,0,0,0,22,266,1,0,0,0,24,277,1,0,0,0,26,288,1,0,0,0,28,
  	307,1,0,0,0,30,316,1,0,0,0,32,324,1,0,0,0,34,335,1,0,0,0,36,340,1,0,0,
  	0,38,343,1,0,0,0,40,349,1,0,0,0,42,354,1,0,0,0,44,359,1,0,0,0,46,368,
  	1,0,0,0,48,375,1,0,0,0,50,382,1,0,0,0,52,385,1,0,0,0,54,389,1,0,0,0,56,
  	405,1,0,0,0,58,407,1,0,0,0,60,421,1,0,0,0,62,433,1,0,0,0,64,445,1,0,0,
  	0,66,461,1,0,0,0,68,468,1,0,0,0,70,473,1,0,0,0,72,479,1,0,0,0,74,485,
  	1,0,0,0,76,494,1,0,0,0,78,503,1,0,0,0,80,517,1,0,0,0,82,528,1,0,0,0,84,
  	544,1,0,0,0,86,550,1,0,0,0,88,557,1,0,0,0,90,561,1,0,0,0,92,569,1,0,0,
  	0,94,574,1,0,0,0,96,579,1,0,0,0,98,585,1,0,0,0,100,590,1,0,0,0,102,594,
  	1,0,0,0,104,601,1,0,0,0,106,604,1,0,0,0,108,606,1,0,0,0,110,608,1,0,0,
  	0,112,610,1,0,0,0,114,612,1,0,0,0,116,614,1,0,0,0,118,616,1,0,0,0,120,
  	618,1,0,0,0,122,620,1,0,0,0,124,622,1,0,0,0,126,624,1,0,0,0,128,626,1,
  	0,0,0,130,628,1,0,0,0,132,630,1,0,0,0,134,632,1,0,0,0,136,634,1,0,0,0,
  	138,636,1,0,0,0,140,638,1,0,0,0,142,640,1,0,0,0,144,689,1,0,0,0,146,691,
  	1,0,0,0,148,701,1,0,0,0,150,704,1,0,0,0,152,706,1,0,0,0,154,708,1,0,0,
  	0,156,718,1,0,0,0,158,731,1,0,0,0,160,746,1,0,0,0,162,764,1,0,0,0,164,
  	769,1,0,0,0,166,774,1,0,0,0,168,779,1,0,0,0,170,783,1,0,0,0,172,807,1,
  	0,0,0,174,809,1,0,0,0,176,814,1,0,0,0,178,179,7,0,0,0,179,180,7,1,0,0,
  	180,181,7,2,0,0,181,182,7,0,0,0,182,183,7,3,0,0,183,184,7,4,0,0,184,185,
  	7,5,0,0,185,186,7,6,0,0,186,187,7,3,0,0,187,188,5,95,0,0,188,189,7,4,
  	0,0,189,190,7,7,0,0,190,191,7,8,0,0,191,192,7,9,0,0,192,193,7,0,0,0,193,
  	194,1,0,0,0,194,195,6,0,0,0,195,3,1,0,0,0,196,197,7,10,0,0,197,198,7,
  	11,0,0,198,199,7,3,0,0,199,200,7,9,0,0,200,201,7,2,0,0,201,202,7,5,0,
  	0,202,203,7,6,0,0,203,204,7,3,0,0,204,5,1,0,0,0,205,206,7,8,0,0,206,207,
  	7,4,0,0,207,7,1,0,0,0,208,209,7,3,0,0,209,210,7,8,0,0,210,211,7,12,0,
  	0,211,212,7,0,0,0,212,213,7,13,0,0,213,9,1,0,0,0,214,215,7,4,0,0,215,
  	216,7,9,0,0,216,217,7,14,0,0,217,218,7,0,0,0,218,219,7,12,0,0,219,220,
  	7,8,0,0,220,11,1,0,0,0,221,222,7,15,0,0,222,223,7,0,0,0,223,224,7,16,
  	0,0,224,225,7,8,0,0,225,226,7,2,0,0,226,227,7,5,0,0,227,228,7,6,0,0,228,
  	229,7,3,0,0,229,13,1,0,0,0,230,231,7,7,0,0,231,232,7,5,0,0,232,233,7,
  	7,0,0,233,234,7,0,0,0,234,235,7,16,0,0,235,236,7,5,0,0,236,237,7,3,0,
  	0,237,238,7,0,0,0,238,239,7,4,0,0,239,15,1,0,0,0,240,241,7,9,0,0,241,
  	242,7,6,0,0,242,243,7,12,0,0,243,244,7,12,0,0,244,245,7,6,0,0,245,246,
  	7,3,0,0,246,17,1,0,0,0,247,248,7,17,0,0,248,249,7,8,0,0,249,250,7,4,0,
  	0,250,251,7,0,0,0,251,252,5,95,0,0,252,253,7,4,0,0,253,254,7,9,0,0,254,
  	255,7,14,0,0,255,256,7,0,0,0,256,257,7,12,0,0,257,258,7,8,0,0,258,19,
  	1,0,0,0,259,260,7,10,0,0,260,261,7,5,0,0,261,262,7,16,0,0,262,263,7,2,
  	0,0,263,264,7,0,0,0,264,265,7,15,0,0,265,21,1,0,0,0,266,267,7,7,0,0,267,
  	268,7,15,0,0,268,269,7,6,0,0,269,270,7,18,0,0,270,271,7,0,0,0,271,272,
  	7,9,0,0,272,273,7,2,0,0,273,274,7,5,0,0,274,275,7,6,0,0,275,276,7,3,0,
  	0,276,23,1,0,0,0,277,278,7,0,0,0,278,279,7,1,0,0,279,280,7,7,0,0,280,
  	281,7,15,0,0,281,282,7,0,0,0,282,283,7,4,0,0,283,284,7,4,0,0,284,285,
  	7,5,0,0,285,286,7,6,0,0,286,287,7,3,0,0,287,25,1,0,0,0,288,289,7,8,0,
  	0,289,290,7,13,0,0,290,291,7,19,0,0,291,292,7,8,0,0,292,293,7,3,0,0,293,
  	294,7,9,0,0,294,295,7,0,0,0,295,296,7,13,0,0,296,297,5,95,0,0,297,298,
  	7,0,0,0,298,299,7,1,0,0,299,300,7,2,0,0,300,301,7,0,0,0,301,302,7,3,0,
  	0,302,303,7,4,0,0,303,304,7,5,0,0,304,305,7,6,0,0,305,306,7,3,0,0,306,
  	27,1,0,0,0,307,308,7,20,0,0,308,309,7,15,0,0,309,310,7,6,0,0,310,311,
  	7,11,0,0,311,312,7,7,0,0,312,313,7,5,0,0,313,314,7,3,0,0,314,315,7,20,
  	0,0,315,29,1,0,0,0,316,317,7,12,0,0,317,318,7,0,0,0,318,319,7,8,0,0,319,
  	320,7,4,0,0,320,321,7,11,0,0,321,322,7,15,0,0,322,323,7,0,0,0,323,31,
  	1,0,0,0,324,325,7,5,0,0,325,326,7,3,0,0,326,327,7,19,0,0,327,328,7,6,
  	0,0,328,329,7,9,0,0,329,330,7,8,0,0,330,331,7,2,0,0,331,332,7,5,0,0,332,
  	333,7,6,0,0,333,334,7,3,0,0,334,33,1,0,0,0,335,336,7,4,0,0,336,337,7,
  	6,0,0,337,338,7,15,0,0,338,339,7,2,0,0,339,35,1,0,0,0,340,341,7,17,0,
  	0,341,342,7,21,0,0,342,37,1,0,0,0,343,344,7,9,0,0,344,345,7,6,0,0,345,
  	346,7,11,0,0,346,347,7,3,0,0,347,348,7,2,0,0,348,39,1,0,0,0,349,350,7,
  	2,0,0,350,351,7,21,0,0,351,352,7,7,0,0,352,353,7,0,0,0,353,41,1,0,0,0,
  	354,355,7,0,0,0,355,356,7,12,0,0,356,357,7,5,0,0,357,358,7,2,0,0,358,
  	43,1,0,0,0,359,360,7,4,0,0,360,361,7,11,0,0,361,362,7,17,0,0,362,363,
  	7,22,0,0,363,364,7,11,0,0,364,365,7,0,0,0,365,366,7,15,0,0,366,367,7,
  	21,0,0,367,45,1,0,0,0,368,369,7,0,0,0,369,370,7,1,0,0,370,371,7,5,0,0,
  	371,372,7,4,0,0,372,373,7,2,0,0,373,374,7,4,0,0,374,47,1,0,0,0,375,376,
  	7,11,0,0,376,377,7,3,0,0,377,378,7,5,0,0,378,379,7,22,0,0,379,380,7,11,
  	0,0,380,381,7,0,0,0,381,49,1,0,0,0,382,383,7,5,0,0,383,384,7,3,0,0,384,
  	51,1,0,0,0,385,386,7,8,0,0,386,387,7,16,0,0,387,388,7,16,0,0,388,53,1,
  	0,0,0,389,390,7,8,0,0,390,391,7,3,0,0,391,392,7,21,0,0,392,55,1,0,0,0,
  	393,394,7,0,0,0,394,406,7,22,0,0,395,396,7,3,0,0,396,406,7,0,0,0,397,
  	398,7,16,0,0,398,406,7,2,0,0,399,400,7,20,0,0,400,406,7,2,0,0,401,402,
  	7,16,0,0,402,406,7,0,0,0,403,404,7,20,0,0,404,406,7,0,0,0,405,393,1,0,
  	0,0,405,395,1,0,0,0,405,397,1,0,0,0,405,399,1,0,0,0,405,401,1,0,0,0,405,
  	403,1,0,0,0,406,57,1,0,0,0,407,408,7,19,0,0,408,409,7,5,0,0,409,410,7,
  	15,0,0,410,411,7,2,0,0,411,412,7,11,0,0,412,413,7,8,0,0,413,414,7,16,
  	0,0,414,415,5,95,0,0,415,416,7,2,0,0,416,417,7,8,0,0,417,418,7,17,0,0,
  	418,419,7,16,0,0,419,420,7,0,0,0,420,59,1,0,0,0,421,422,7,16,0,0,422,
  	423,7,6,0,0,423,424,7,9,0,0,424,425,7,8,0,0,425,426,7,16,0,0,426,427,
  	5,95,0,0,427,428,7,10,0,0,428,429,7,5,0,0,429,430,7,16,0,0,430,431,7,
  	0,0,0,431,432,7,4,0,0,432,61,1,0,0,0,433,434,7,3,0,0,434,435,7,8,0,0,
  	435,436,7,12,0,0,436,437,7,0,0,0,437,438,7,13,0,0,438,439,5,95,0,0,439,
  	440,7,2,0,0,440,441,7,8,0,0,441,442,7,17,0,0,442,443,7,16,0,0,443,444,
  	7,0,0,0,444,63,1,0,0,0,445,446,7,0,0,0,446,447,7,1,0,0,447,448,7,2,0,
  	0,448,449,7,0,0,0,449,450,7,3,0,0,450,451,7,4,0,0,451,452,7,5,0,0,452,
  	453,7,6,0,0,453,454,7,3,0,0,454,455,5,95,0,0,455,456,7,2,0,0,456,457,
  	7,8,0,0,457,458,7,17,0,0,458,459,7,16,0,0,459,460,7,0,0,0,460,65,1,0,
  	0,0,461,462,7,4,0,0,462,463,7,6,0,0,463,464,7,11,0,0,464,465,7,15,0,0,
  	465,466,7,9,0,0,466,467,7,0,0,0,467,67,1,0,0,0,468,469,7,15,0,0,469,470,
  	7,6,0,0,470,471,7,6,0,0,471,472,7,2,0,0,472,69,1,0,0,0,473,474,7,5,0,
  	0,474,475,7,2,0,0,475,476,7,0,0,0,476,477,7,12,0,0,477,478,7,4,0,0,478,
  	71,1,0,0,0,479,480,7,3,0,0,480,481,7,8,0,0,481,482,7,12,0,0,482,483,7,
  	0,0,0,483,484,7,4,0,0,484,73,1,0,0,0,485,486,7,11,0,0,486,487,7,15,0,
  	0,487,488,7,5,0,0,488,489,5,95,0,0,489,490,7,10,0,0,490,491,7,5,0,0,491,
  	492,7,16,0,0,492,493,7,0,0,0,493,75,1,0,0,0,494,495,7,11,0,0,495,496,
  	7,15,0,0,496,497,7,5,0,0,497,498,5,95,0,0,498,499,7,7,0,0,499,500,7,8,
  	0,0,500,501,7,2,0,0,501,502,7,14,0,0,502,77,1,0,0,0,503,504,7,11,0,0,
  	504,505,7,15,0,0,505,506,7,5,0,0,506,507,5,95,0,0,507,508,7,7,0,0,508,
  	509,7,8,0,0,509,510,7,2,0,0,510,511,7,14,0,0,511,512,5,95,0,0,512,513,
  	7,20,0,0,513,514,7,16,0,0,514,515,7,6,0,0,515,516,7,17,0,0,516,79,1,0,
  	0,0,517,518,7,11,0,0,518,519,7,15,0,0,519,520,7,5,0,0,520,521,5,95,0,
  	0,521,522,7,10,0,0,522,523,7,6,0,0,523,524,7,16,0,0,524,525,7,13,0,0,
  	525,526,7,0,0,0,526,527,7,15,0,0,527,81,1,0,0,0,528,529,7,7,0,0,529,530,
  	7,8,0,0,530,531,7,15,0,0,531,532,7,2,0,0,532,533,7,5,0,0,533,534,7,2,
  	0,0,534,535,7,5,0,0,535,536,7,6,0,0,536,537,7,3,0,0,537,538,5,95,0,0,
  	538,539,7,5,0,0,539,540,7,3,0,0,540,541,7,13,0,0,541,542,7,0,0,0,542,
  	543,7,1,0,0,543,83,1,0,0,0,544,545,7,4,0,0,545,546,7,2,0,0,546,547,7,
  	8,0,0,547,548,7,15,0,0,548,549,7,2,0,0,549,85,1,0,0,0,550,551,7,16,0,
  	0,551,552,7,0,0,0,552,553,7,3,0,0,553,554,7,20,0,0,554,555,7,2,0,0,555,
  	556,7,14,0,0,556,87,1,0,0,0,557,558,7,6,0,0,558,559,7,15,0,0,559,560,
  	7,9,0,0,560,89,1,0,0,0,561,562,7,7,0,0,562,563,7,8,0,0,563,564,7,15,0,
  	0,564,565,7,22,0,0,565,566,7,11,0,0,566,567,7,0,0,0,567,568,7,2,0,0,568,
  	91,1,0,0,0,569,570,7,3,0,0,570,571,7,11,0,0,571,572,7,16,0,0,572,573,
  	7,16,0,0,573,93,1,0,0,0,574,575,7,2,0,0,575,576,7,15,0,0,576,577,7,11,
  	0,0,577,578,7,0,0,0,578,95,1,0,0,0,579,580,7,10,0,0,580,581,7,8,0,0,581,
  	582,7,16,0,0,582,583,7,4,0,0,583,584,7,0,0,0,584,97,1,0,0,0,585,586,7,
  	16,0,0,586,587,7,5,0,0,587,588,7,4,0,0,588,589,7,2,0,0,589,99,1,0,0,0,
  	590,591,7,12,0,0,591,592,7,8,0,0,592,593,7,7,0,0,593,101,1,0,0,0,594,
  	595,7,4,0,0,595,596,7,2,0,0,596,597,7,15,0,0,597,598,7,11,0,0,598,599,
  	7,9,0,0,599,600,7,2,0,0,600,103,1,0,0,0,601,602,5,45,0,0,602,603,5,62,
  	0,0,603,105,1,0,0,0,604,605,5,58,0,0,605,107,1,0,0,0,606,607,5,59,0,0,
  	607,109,1,0,0,0,608,609,5,123,0,0,609,111,1,0,0,0,610,611,5,125,0,0,611,
  	113,1,0,0,0,612,613,5,40,0,0,613,115,1,0,0,0,614,615,5,41,0,0,615,117,
  	1,0,0,0,616,617,5,34,0,0,617,119,1,0,0,0,618,619,5,44,0,0,619,121,1,0,
  	0,0,620,621,5,46,0,0,621,123,1,0,0,0,622,623,5,61,0,0,623,125,1,0,0,0,
  	624,625,5,91,0,0,625,127,1,0,0,0,626,627,5,93,0,0,627,129,1,0,0,0,628,
  	629,5,95,0,0,629,131,1,0,0,0,630,631,5,45,0,0,631,133,1,0,0,0,632,633,
  	5,60,0,0,633,135,1,0,0,0,634,635,5,62,0,0,635,137,1,0,0,0,636,637,5,63,
  	0,0,637,139,1,0,0,0,638,639,5,64,0,0,639,141,1,0,0,0,640,644,7,23,0,0,
  	641,643,7,24,0,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,
  	645,1,0,0,0,645,143,1,0,0,0,646,644,1,0,0,0,647,649,3,132,65,0,648,647,
  	1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,652,7,25,0,0,651,650,1,0,
  	0,0,652,653,1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,661,1,0,0,0,655,
  	657,3,122,60,0,656,658,7,25,0,0,657,656,1,0,0,0,658,659,1,0,0,0,659,657,
  	1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,655,1,0,0,0,661,662,1,0,0,
  	0,662,690,1,0,0,0,663,665,3,132,65,0,664,663,1,0,0,0,664,665,1,0,0,0,
  	665,667,1,0,0,0,666,668,7,25,0,0,667,666,1,0,0,0,668,669,1,0,0,0,669,
  	667,1,0,0,0,669,670,1,0,0,0,670,677,1,0,0,0,671,673,3,122,60,0,672,674,
  	7,25,0,0,673,672,1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,
  	0,0,676,678,1,0,0,0,677,671,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,
  	682,7,0,0,0,680,683,5,43,0,0,681,683,3,132,65,0,682,680,1,0,0,0,682,681,
  	1,0,0,0,683,685,1,0,0,0,684,686,7,25,0,0,685,684,1,0,0,0,686,687,1,0,
  	0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,648,1,0,0,0,689,
  	664,1,0,0,0,690,145,1,0,0,0,691,696,5,34,0,0,692,695,3,148,73,0,693,695,
  	8,26,0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,698,1,0,0,0,696,694,1,0,
  	0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,0,0,699,700,5,34,0,0,
  	700,147,1,0,0,0,701,702,5,92,0,0,702,703,5,34,0,0,703,149,1,0,0,0,704,
  	705,7,27,0,0,705,151,1,0,0,0,706,707,7,25,0,0,707,153,1,0,0,0,708,710,
  	5,96,0,0,709,711,8,28,0,0,710,709,1,0,0,0,711,712,1,0,0,0,712,713,1,0,
  	0,0,712,710,1,0,0,0,713,714,1,0,0,0,714,715,5,96,0,0,715,716,1,0,0,0,
  	716,717,6,76,1,0,717,155,1,0,0,0,718,719,5,96,0,0,719,720,5,96,0,0,720,
  	722,1,0,0,0,721,723,9,0,0,0,722,721,1,0,0,0,723,724,1,0,0,0,724,725,1,
  	0,0,0,724,722,1,0,0,0,725,726,1,0,0,0,726,727,5,96,0,0,727,728,5,96,0,
  	0,728,729,1,0,0,0,729,730,6,77,1,0,730,157,1,0,0,0,731,732,5,96,0,0,732,
  	733,5,96,0,0,733,734,5,96,0,0,734,736,1,0,0,0,735,737,9,0,0,0,736,735,
  	1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,738,736,1,0,0,0,739,740,1,0,0,
  	0,740,741,5,96,0,0,741,742,5,96,0,0,742,743,5,96,0,0,743,744,1,0,0,0,
  	744,745,6,78,1,0,745,159,1,0,0,0,746,747,5,47,0,0,747,748,5,47,0,0,748,
  	752,1,0,0,0,749,751,8,29,0,0,750,749,1,0,0,0,751,754,1,0,0,0,752,750,
  	1,0,0,0,752,753,1,0,0,0,753,760,1,0,0,0,754,752,1,0,0,0,755,757,5,13,
  	0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,761,5,10,0,0,
  	759,761,5,0,0,1,760,756,1,0,0,0,760,759,1,0,0,0,761,762,1,0,0,0,762,763,
  	6,79,2,0,763,161,1,0,0,0,764,765,7,30,0,0,765,766,1,0,0,0,766,767,6,80,
  	2,0,767,163,1,0,0,0,768,770,7,23,0,0,769,768,1,0,0,0,770,771,1,0,0,0,
  	771,769,1,0,0,0,771,772,1,0,0,0,772,165,1,0,0,0,773,775,7,31,0,0,774,
  	773,1,0,0,0,775,776,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,167,1,
  	0,0,0,778,780,7,32,0,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,
  	0,781,782,1,0,0,0,782,169,1,0,0,0,783,788,3,168,83,0,784,785,5,47,0,0,
  	785,787,3,168,83,0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,
  	789,1,0,0,0,789,171,1,0,0,0,790,788,1,0,0,0,791,792,3,164,81,0,792,799,
  	5,58,0,0,793,794,5,47,0,0,794,795,5,47,0,0,795,796,1,0,0,0,796,797,3,
  	166,82,0,797,798,5,47,0,0,798,800,1,0,0,0,799,793,1,0,0,0,799,800,1,0,
  	0,0,800,801,1,0,0,0,801,802,3,170,84,0,802,808,1,0,0,0,803,805,5,47,0,
  	0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,808,3,170,84,0,
  	807,791,1,0,0,0,807,804,1,0,0,0,808,173,1,0,0,0,809,810,5,123,0,0,810,
  	811,1,0,0,0,811,812,6,86,3,0,812,813,6,86,4,0,813,175,1,0,0,0,814,815,
  	7,30,0,0,815,816,1,0,0,0,816,817,6,87,2,0,817,818,6,87,5,0,818,177,1,
  	0,0,0,30,0,1,405,644,648,653,659,661,664,669,675,677,682,687,689,694,
  	696,712,724,738,752,756,760,771,776,781,788,799,804,807,6,2,1,0,7,73,
  	0,0,1,0,2,0,0,7,56,0,7,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  substraitplanlexerLexerStaticData = std::move(staticData);
}

}

SubstraitPlanLexer::SubstraitPlanLexer(CharStream *input) : Lexer(input) {
  SubstraitPlanLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *substraitplanlexerLexerStaticData->atn, substraitplanlexerLexerStaticData->decisionToDFA, substraitplanlexerLexerStaticData->sharedContextCache);
}

SubstraitPlanLexer::~SubstraitPlanLexer() {
  delete _interpreter;
}

std::string SubstraitPlanLexer::getGrammarFileName() const {
  return "SubstraitPlanLexer.g4";
}

const std::vector<std::string>& SubstraitPlanLexer::getRuleNames() const {
  return substraitplanlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SubstraitPlanLexer::getChannelNames() const {
  return substraitplanlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SubstraitPlanLexer::getModeNames() const {
  return substraitplanlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SubstraitPlanLexer::getVocabulary() const {
  return substraitplanlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SubstraitPlanLexer::getSerializedATN() const {
  return substraitplanlexerLexerStaticData->serializedATN;
}

const atn::ATN& SubstraitPlanLexer::getATN() const {
  return *substraitplanlexerLexerStaticData->atn;
}




void SubstraitPlanLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  substraitplanlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(substraitplanlexerLexerOnceFlag, substraitplanlexerLexerInitialize);
#endif
}
