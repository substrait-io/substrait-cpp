// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/algebra.proto

#include "substrait/proto/algebra.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_Type_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto;
namespace substrait {
namespace proto {
class RelCommon_DirectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon_Direct> _instance;
} _RelCommon_Direct_default_instance_;
class RelCommon_EmitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon_Emit> _instance;
} _RelCommon_Emit_default_instance_;
class RelCommon_Hint_StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon_Hint_Stats> _instance;
} _RelCommon_Hint_Stats_default_instance_;
class RelCommon_Hint_RuntimeConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon_Hint_RuntimeConstraint> _instance;
} _RelCommon_Hint_RuntimeConstraint_default_instance_;
class RelCommon_HintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon_Hint> _instance;
} _RelCommon_Hint_default_instance_;
class RelCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelCommon> _instance;
  const ::substrait::proto::RelCommon_Direct* direct_;
  const ::substrait::proto::RelCommon_Emit* emit_;
} _RelCommon_default_instance_;
class ReadRel_NamedTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_NamedTable> _instance;
} _ReadRel_NamedTable_default_instance_;
class ReadRel_VirtualTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_VirtualTable> _instance;
} _ReadRel_VirtualTable_default_instance_;
class ReadRel_ExtensionTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_ExtensionTable> _instance;
} _ReadRel_ExtensionTable_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions> _instance;
} _ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions> _instance;
} _ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles_FileOrFiles_OrcReadOptions> _instance;
} _ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions> _instance;
} _ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles_FileOrFiles> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_glob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_folder_;
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet_;
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow_;
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc_;
  const PROTOBUF_NAMESPACE_ID::Any* extension_;
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf_;
} _ReadRel_LocalFiles_FileOrFiles_default_instance_;
class ReadRel_LocalFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel_LocalFiles> _instance;
} _ReadRel_LocalFiles_default_instance_;
class ReadRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRel> _instance;
  const ::substrait::proto::ReadRel_VirtualTable* virtual_table_;
  const ::substrait::proto::ReadRel_LocalFiles* local_files_;
  const ::substrait::proto::ReadRel_NamedTable* named_table_;
  const ::substrait::proto::ReadRel_ExtensionTable* extension_table_;
} _ReadRel_default_instance_;
class ProjectRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectRel> _instance;
} _ProjectRel_default_instance_;
class JoinRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinRel> _instance;
} _JoinRel_default_instance_;
class CrossRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrossRel> _instance;
} _CrossRel_default_instance_;
class FetchRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchRel> _instance;
} _FetchRel_default_instance_;
class AggregateRel_GroupingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregateRel_Grouping> _instance;
} _AggregateRel_Grouping_default_instance_;
class AggregateRel_MeasureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregateRel_Measure> _instance;
} _AggregateRel_Measure_default_instance_;
class AggregateRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregateRel> _instance;
} _AggregateRel_default_instance_;
class ConsistentPartitionWindowRel_WindowRelFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsistentPartitionWindowRel_WindowRelFunction> _instance;
} _ConsistentPartitionWindowRel_WindowRelFunction_default_instance_;
class ConsistentPartitionWindowRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsistentPartitionWindowRel> _instance;
} _ConsistentPartitionWindowRel_default_instance_;
class SortRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortRel> _instance;
} _SortRel_default_instance_;
class FilterRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterRel> _instance;
} _FilterRel_default_instance_;
class SetRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRel> _instance;
} _SetRel_default_instance_;
class ExtensionSingleRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionSingleRel> _instance;
} _ExtensionSingleRel_default_instance_;
class ExtensionLeafRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionLeafRel> _instance;
} _ExtensionLeafRel_default_instance_;
class ExtensionMultiRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionMultiRel> _instance;
} _ExtensionMultiRel_default_instance_;
class ExchangeRel_ScatterFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_ScatterFields> _instance;
} _ExchangeRel_ScatterFields_default_instance_;
class ExchangeRel_SingleBucketExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_SingleBucketExpression> _instance;
} _ExchangeRel_SingleBucketExpression_default_instance_;
class ExchangeRel_MultiBucketExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_MultiBucketExpression> _instance;
} _ExchangeRel_MultiBucketExpression_default_instance_;
class ExchangeRel_BroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_Broadcast> _instance;
} _ExchangeRel_Broadcast_default_instance_;
class ExchangeRel_RoundRobinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_RoundRobin> _instance;
} _ExchangeRel_RoundRobin_default_instance_;
class ExchangeRel_ExchangeTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel_ExchangeTarget> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  const PROTOBUF_NAMESPACE_ID::Any* extended_;
} _ExchangeRel_ExchangeTarget_default_instance_;
class ExchangeRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeRel> _instance;
  const ::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields_;
  const ::substrait::proto::ExchangeRel_SingleBucketExpression* single_target_;
  const ::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target_;
  const ::substrait::proto::ExchangeRel_RoundRobin* round_robin_;
  const ::substrait::proto::ExchangeRel_Broadcast* broadcast_;
} _ExchangeRel_default_instance_;
class ExpandRel_ExpandFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpandRel_ExpandField> _instance;
  const ::substrait::proto::ExpandRel_SwitchingField* switching_field_;
  const ::substrait::proto::Expression* consistent_field_;
} _ExpandRel_ExpandField_default_instance_;
class ExpandRel_SwitchingFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpandRel_SwitchingField> _instance;
} _ExpandRel_SwitchingField_default_instance_;
class ExpandRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpandRel> _instance;
} _ExpandRel_default_instance_;
class RelRootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelRoot> _instance;
} _RelRoot_default_instance_;
class RelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rel> _instance;
  const ::substrait::proto::ReadRel* read_;
  const ::substrait::proto::FilterRel* filter_;
  const ::substrait::proto::FetchRel* fetch_;
  const ::substrait::proto::AggregateRel* aggregate_;
  const ::substrait::proto::SortRel* sort_;
  const ::substrait::proto::JoinRel* join_;
  const ::substrait::proto::ProjectRel* project_;
  const ::substrait::proto::SetRel* set_;
  const ::substrait::proto::ExtensionSingleRel* extension_single_;
  const ::substrait::proto::ExtensionMultiRel* extension_multi_;
  const ::substrait::proto::ExtensionLeafRel* extension_leaf_;
  const ::substrait::proto::CrossRel* cross_;
  const ::substrait::proto::ReferenceRel* reference_;
  const ::substrait::proto::WriteRel* write_;
  const ::substrait::proto::DdlRel* ddl_;
  const ::substrait::proto::HashJoinRel* hash_join_;
  const ::substrait::proto::MergeJoinRel* merge_join_;
  const ::substrait::proto::NestedLoopJoinRel* nested_loop_join_;
  const ::substrait::proto::ConsistentPartitionWindowRel* window_;
  const ::substrait::proto::ExchangeRel* exchange_;
  const ::substrait::proto::ExpandRel* expand_;
} _Rel_default_instance_;
class NamedObjectWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectWrite> _instance;
} _NamedObjectWrite_default_instance_;
class ExtensionObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionObject> _instance;
} _ExtensionObject_default_instance_;
class DdlRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdlRel> _instance;
  const ::substrait::proto::NamedObjectWrite* named_object_;
  const ::substrait::proto::ExtensionObject* extension_object_;
} _DdlRel_default_instance_;
class WriteRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteRel> _instance;
  const ::substrait::proto::NamedObjectWrite* named_table_;
  const ::substrait::proto::ExtensionObject* extension_table_;
} _WriteRel_default_instance_;
class ComparisonJoinKey_ComparisonTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComparisonJoinKey_ComparisonType> _instance;
  int simple_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_function_reference_;
} _ComparisonJoinKey_ComparisonType_default_instance_;
class ComparisonJoinKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComparisonJoinKey> _instance;
} _ComparisonJoinKey_default_instance_;
class HashJoinRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashJoinRel> _instance;
} _HashJoinRel_default_instance_;
class MergeJoinRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MergeJoinRel> _instance;
} _MergeJoinRel_default_instance_;
class NestedLoopJoinRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NestedLoopJoinRel> _instance;
} _NestedLoopJoinRel_default_instance_;
class FunctionArgumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionArgument> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
  const ::substrait::proto::Type* type_;
  const ::substrait::proto::Expression* value_;
} _FunctionArgument_default_instance_;
class FunctionOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionOption> _instance;
} _FunctionOption_default_instance_;
class Expression_Enum_EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Enum_Empty> _instance;
} _Expression_Enum_Empty_default_instance_;
class Expression_EnumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Enum> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specified_;
  const ::substrait::proto::Expression_Enum_Empty* unspecified_;
} _Expression_Enum_default_instance_;
class Expression_Literal_VarCharDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_VarChar> _instance;
} _Expression_Literal_VarChar_default_instance_;
class Expression_Literal_DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_Decimal> _instance;
} _Expression_Literal_Decimal_default_instance_;
class Expression_Literal_Map_KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_Map_KeyValue> _instance;
} _Expression_Literal_Map_KeyValue_default_instance_;
class Expression_Literal_MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_Map> _instance;
} _Expression_Literal_Map_default_instance_;
class Expression_Literal_IntervalYearToMonthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_IntervalYearToMonth> _instance;
} _Expression_Literal_IntervalYearToMonth_default_instance_;
class Expression_Literal_IntervalDayToSecondDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_IntervalDayToSecond> _instance;
} _Expression_Literal_IntervalDayToSecond_default_instance_;
class Expression_Literal_StructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_Struct> _instance;
} _Expression_Literal_Struct_default_instance_;
class Expression_Literal_ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_List> _instance;
} _Expression_Literal_List_default_instance_;
class Expression_Literal_UserDefinedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal_UserDefined> _instance;
} _Expression_Literal_UserDefined_default_instance_;
class Expression_LiteralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Literal> _instance;
  bool boolean_;
  ::PROTOBUF_NAMESPACE_ID::int32 i8_;
  ::PROTOBUF_NAMESPACE_ID::int32 i16_;
  ::PROTOBUF_NAMESPACE_ID::int32 i32_;
  ::PROTOBUF_NAMESPACE_ID::int64 i64_;
  float fp32_;
  double fp64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  const ::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month_;
  const ::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_char_;
  const ::substrait::proto::Expression_Literal_VarChar* var_char_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_binary_;
  const ::substrait::proto::Expression_Literal_Decimal* decimal_;
  const ::substrait::proto::Expression_Literal_Struct* struct__;
  const ::substrait::proto::Expression_Literal_Map* map_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_tz_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  const ::substrait::proto::Type* null_;
  const ::substrait::proto::Expression_Literal_List* list_;
  const ::substrait::proto::Type_List* empty_list_;
  const ::substrait::proto::Type_Map* empty_map_;
  const ::substrait::proto::Expression_Literal_UserDefined* user_defined_;
} _Expression_Literal_default_instance_;
class Expression_Nested_Map_KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Nested_Map_KeyValue> _instance;
} _Expression_Nested_Map_KeyValue_default_instance_;
class Expression_Nested_MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Nested_Map> _instance;
} _Expression_Nested_Map_default_instance_;
class Expression_Nested_StructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Nested_Struct> _instance;
} _Expression_Nested_Struct_default_instance_;
class Expression_Nested_ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Nested_List> _instance;
} _Expression_Nested_List_default_instance_;
class Expression_NestedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Nested> _instance;
  const ::substrait::proto::Expression_Nested_Struct* struct__;
  const ::substrait::proto::Expression_Nested_List* list_;
  const ::substrait::proto::Expression_Nested_Map* map_;
} _Expression_Nested_default_instance_;
class Expression_ScalarFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_ScalarFunction> _instance;
} _Expression_ScalarFunction_default_instance_;
class Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction_Bound_Preceding> _instance;
} _Expression_WindowFunction_Bound_Preceding_default_instance_;
class Expression_WindowFunction_Bound_FollowingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction_Bound_Following> _instance;
} _Expression_WindowFunction_Bound_Following_default_instance_;
class Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction_Bound_CurrentRow> _instance;
} _Expression_WindowFunction_Bound_CurrentRow_default_instance_;
class Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction_Bound_Unbounded> _instance;
} _Expression_WindowFunction_Bound_Unbounded_default_instance_;
class Expression_WindowFunction_BoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction_Bound> _instance;
  const ::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding_;
  const ::substrait::proto::Expression_WindowFunction_Bound_Following* following_;
  const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row_;
  const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded_;
} _Expression_WindowFunction_Bound_default_instance_;
class Expression_WindowFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_WindowFunction> _instance;
} _Expression_WindowFunction_default_instance_;
class Expression_IfThen_IfClauseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_IfThen_IfClause> _instance;
} _Expression_IfThen_IfClause_default_instance_;
class Expression_IfThenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_IfThen> _instance;
} _Expression_IfThen_default_instance_;
class Expression_CastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Cast> _instance;
} _Expression_Cast_default_instance_;
class Expression_SwitchExpression_IfValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_SwitchExpression_IfValue> _instance;
} _Expression_SwitchExpression_IfValue_default_instance_;
class Expression_SwitchExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_SwitchExpression> _instance;
} _Expression_SwitchExpression_default_instance_;
class Expression_SingularOrListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_SingularOrList> _instance;
} _Expression_SingularOrList_default_instance_;
class Expression_MultiOrList_RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MultiOrList_Record> _instance;
} _Expression_MultiOrList_Record_default_instance_;
class Expression_MultiOrListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MultiOrList> _instance;
} _Expression_MultiOrList_default_instance_;
class Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_EmbeddedFunction_PythonPickleFunction> _instance;
} _Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
class Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_EmbeddedFunction_WebAssemblyFunction> _instance;
} _Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
class Expression_EmbeddedFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_EmbeddedFunction> _instance;
  const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function_;
  const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function_;
} _Expression_EmbeddedFunction_default_instance_;
class Expression_ReferenceSegment_MapKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_ReferenceSegment_MapKey> _instance;
} _Expression_ReferenceSegment_MapKey_default_instance_;
class Expression_ReferenceSegment_StructFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_ReferenceSegment_StructField> _instance;
} _Expression_ReferenceSegment_StructField_default_instance_;
class Expression_ReferenceSegment_ListElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_ReferenceSegment_ListElement> _instance;
} _Expression_ReferenceSegment_ListElement_default_instance_;
class Expression_ReferenceSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_ReferenceSegment> _instance;
  const ::substrait::proto::Expression_ReferenceSegment_MapKey* map_key_;
  const ::substrait::proto::Expression_ReferenceSegment_StructField* struct_field_;
  const ::substrait::proto::Expression_ReferenceSegment_ListElement* list_element_;
} _Expression_ReferenceSegment_default_instance_;
class Expression_MaskExpression_SelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_Select> _instance;
  const ::substrait::proto::Expression_MaskExpression_StructSelect* struct__;
  const ::substrait::proto::Expression_MaskExpression_ListSelect* list_;
  const ::substrait::proto::Expression_MaskExpression_MapSelect* map_;
} _Expression_MaskExpression_Select_default_instance_;
class Expression_MaskExpression_StructSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_StructSelect> _instance;
} _Expression_MaskExpression_StructSelect_default_instance_;
class Expression_MaskExpression_StructItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_StructItem> _instance;
} _Expression_MaskExpression_StructItem_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement> _instance;
} _Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice> _instance;
} _Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_ListSelect_ListSelectItem> _instance;
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item_;
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice_;
} _Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
class Expression_MaskExpression_ListSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_ListSelect> _instance;
} _Expression_MaskExpression_ListSelect_default_instance_;
class Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_MapSelect_MapKey> _instance;
} _Expression_MaskExpression_MapSelect_MapKey_default_instance_;
class Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_MapSelect_MapKeyExpression> _instance;
} _Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
class Expression_MaskExpression_MapSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression_MapSelect> _instance;
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key_;
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression_;
} _Expression_MaskExpression_MapSelect_default_instance_;
class Expression_MaskExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_MaskExpression> _instance;
} _Expression_MaskExpression_default_instance_;
class Expression_FieldReference_RootReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_FieldReference_RootReference> _instance;
} _Expression_FieldReference_RootReference_default_instance_;
class Expression_FieldReference_OuterReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_FieldReference_OuterReference> _instance;
} _Expression_FieldReference_OuterReference_default_instance_;
class Expression_FieldReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_FieldReference> _instance;
  const ::substrait::proto::Expression_ReferenceSegment* direct_reference_;
  const ::substrait::proto::Expression_MaskExpression* masked_reference_;
  const ::substrait::proto::Expression* expression_;
  const ::substrait::proto::Expression_FieldReference_RootReference* root_reference_;
  const ::substrait::proto::Expression_FieldReference_OuterReference* outer_reference_;
} _Expression_FieldReference_default_instance_;
class Expression_Subquery_ScalarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Subquery_Scalar> _instance;
} _Expression_Subquery_Scalar_default_instance_;
class Expression_Subquery_InPredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Subquery_InPredicate> _instance;
} _Expression_Subquery_InPredicate_default_instance_;
class Expression_Subquery_SetPredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Subquery_SetPredicate> _instance;
} _Expression_Subquery_SetPredicate_default_instance_;
class Expression_Subquery_SetComparisonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Subquery_SetComparison> _instance;
} _Expression_Subquery_SetComparison_default_instance_;
class Expression_SubqueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression_Subquery> _instance;
  const ::substrait::proto::Expression_Subquery_Scalar* scalar_;
  const ::substrait::proto::Expression_Subquery_InPredicate* in_predicate_;
  const ::substrait::proto::Expression_Subquery_SetPredicate* set_predicate_;
  const ::substrait::proto::Expression_Subquery_SetComparison* set_comparison_;
} _Expression_Subquery_default_instance_;
class ExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Expression> _instance;
  const ::substrait::proto::Expression_Literal* literal_;
  const ::substrait::proto::Expression_FieldReference* selection_;
  const ::substrait::proto::Expression_ScalarFunction* scalar_function_;
  const ::substrait::proto::Expression_WindowFunction* window_function_;
  const ::substrait::proto::Expression_IfThen* if_then_;
  const ::substrait::proto::Expression_SwitchExpression* switch_expression_;
  const ::substrait::proto::Expression_SingularOrList* singular_or_list_;
  const ::substrait::proto::Expression_MultiOrList* multi_or_list_;
  const ::substrait::proto::Expression_Cast* cast_;
  const ::substrait::proto::Expression_Subquery* subquery_;
  const ::substrait::proto::Expression_Nested* nested_;
  const ::substrait::proto::Expression_Enum* enum__;
} _Expression_default_instance_;
class SortFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SortField> _instance;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comparison_function_reference_;
} _SortField_default_instance_;
class AggregateFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregateFunction> _instance;
} _AggregateFunction_default_instance_;
class ReferenceRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceRel> _instance;
} _ReferenceRel_default_instance_;
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_default_instance_;
    new (ptr) ::substrait::proto::ReadRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ProjectRel_default_instance_;
    new (ptr) ::substrait::proto::ProjectRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_JoinRel_default_instance_;
    new (ptr) ::substrait::proto::JoinRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_CrossRel_default_instance_;
    new (ptr) ::substrait::proto::CrossRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_FetchRel_default_instance_;
    new (ptr) ::substrait::proto::FetchRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_AggregateRel_Grouping_default_instance_;
    new (ptr) ::substrait::proto::AggregateRel_Grouping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_AggregateRel_Measure_default_instance_;
    new (ptr) ::substrait::proto::AggregateRel_Measure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_AggregateRel_default_instance_;
    new (ptr) ::substrait::proto::AggregateRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_;
    new (ptr) ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ConsistentPartitionWindowRel_default_instance_;
    new (ptr) ::substrait::proto::ConsistentPartitionWindowRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_SortRel_default_instance_;
    new (ptr) ::substrait::proto::SortRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_FilterRel_default_instance_;
    new (ptr) ::substrait::proto::FilterRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_SetRel_default_instance_;
    new (ptr) ::substrait::proto::SetRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExtensionSingleRel_default_instance_;
    new (ptr) ::substrait::proto::ExtensionSingleRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExtensionMultiRel_default_instance_;
    new (ptr) ::substrait::proto::ExtensionMultiRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExchangeRel_ScatterFields_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_ScatterFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExchangeRel_SingleBucketExpression_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_SingleBucketExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExchangeRel_MultiBucketExpression_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_MultiBucketExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExchangeRel_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExpandRel_ExpandField_default_instance_;
    new (ptr) ::substrait::proto::ExpandRel_ExpandField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExpandRel_SwitchingField_default_instance_;
    new (ptr) ::substrait::proto::ExpandRel_SwitchingField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ExpandRel_default_instance_;
    new (ptr) ::substrait::proto::ExpandRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Rel_default_instance_;
    new (ptr) ::substrait::proto::Rel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_DdlRel_default_instance_;
    new (ptr) ::substrait::proto::DdlRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_WriteRel_default_instance_;
    new (ptr) ::substrait::proto::WriteRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_ComparisonJoinKey_default_instance_;
    new (ptr) ::substrait::proto::ComparisonJoinKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_HashJoinRel_default_instance_;
    new (ptr) ::substrait::proto::HashJoinRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_MergeJoinRel_default_instance_;
    new (ptr) ::substrait::proto::MergeJoinRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_NestedLoopJoinRel_default_instance_;
    new (ptr) ::substrait::proto::NestedLoopJoinRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_FunctionArgument_default_instance_;
    new (ptr) ::substrait::proto::FunctionArgument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Nested_Map_KeyValue_default_instance_;
    new (ptr) ::substrait::proto::Expression_Nested_Map_KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Nested_Map_default_instance_;
    new (ptr) ::substrait::proto::Expression_Nested_Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Nested_Struct_default_instance_;
    new (ptr) ::substrait::proto::Expression_Nested_Struct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Nested_List_default_instance_;
    new (ptr) ::substrait::proto::Expression_Nested_List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Nested_default_instance_;
    new (ptr) ::substrait::proto::Expression_Nested();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_ScalarFunction_default_instance_;
    new (ptr) ::substrait::proto::Expression_ScalarFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_IfThen_IfClause_default_instance_;
    new (ptr) ::substrait::proto::Expression_IfThen_IfClause();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_IfThen_default_instance_;
    new (ptr) ::substrait::proto::Expression_IfThen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Cast_default_instance_;
    new (ptr) ::substrait::proto::Expression_Cast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_SwitchExpression_IfValue_default_instance_;
    new (ptr) ::substrait::proto::Expression_SwitchExpression_IfValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_SwitchExpression_default_instance_;
    new (ptr) ::substrait::proto::Expression_SwitchExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_SingularOrList_default_instance_;
    new (ptr) ::substrait::proto::Expression_SingularOrList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MultiOrList_Record_default_instance_;
    new (ptr) ::substrait::proto::Expression_MultiOrList_Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MultiOrList_default_instance_;
    new (ptr) ::substrait::proto::Expression_MultiOrList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_FieldReference_default_instance_;
    new (ptr) ::substrait::proto::Expression_FieldReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Subquery_Scalar_default_instance_;
    new (ptr) ::substrait::proto::Expression_Subquery_Scalar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Subquery_InPredicate_default_instance_;
    new (ptr) ::substrait::proto::Expression_Subquery_InPredicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Subquery_SetPredicate_default_instance_;
    new (ptr) ::substrait::proto::Expression_Subquery_SetPredicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Subquery_SetComparison_default_instance_;
    new (ptr) ::substrait::proto::Expression_Subquery_SetComparison();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Subquery_default_instance_;
    new (ptr) ::substrait::proto::Expression_Subquery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_default_instance_;
    new (ptr) ::substrait::proto::Expression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_SortField_default_instance_;
    new (ptr) ::substrait::proto::SortField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_AggregateFunction_default_instance_;
    new (ptr) ::substrait::proto::AggregateFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel::InitAsDefaultInstance();
  ::substrait::proto::ProjectRel::InitAsDefaultInstance();
  ::substrait::proto::JoinRel::InitAsDefaultInstance();
  ::substrait::proto::CrossRel::InitAsDefaultInstance();
  ::substrait::proto::FetchRel::InitAsDefaultInstance();
  ::substrait::proto::AggregateRel_Grouping::InitAsDefaultInstance();
  ::substrait::proto::AggregateRel_Measure::InitAsDefaultInstance();
  ::substrait::proto::AggregateRel::InitAsDefaultInstance();
  ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction::InitAsDefaultInstance();
  ::substrait::proto::ConsistentPartitionWindowRel::InitAsDefaultInstance();
  ::substrait::proto::SortRel::InitAsDefaultInstance();
  ::substrait::proto::FilterRel::InitAsDefaultInstance();
  ::substrait::proto::SetRel::InitAsDefaultInstance();
  ::substrait::proto::ExtensionSingleRel::InitAsDefaultInstance();
  ::substrait::proto::ExtensionMultiRel::InitAsDefaultInstance();
  ::substrait::proto::ExchangeRel_ScatterFields::InitAsDefaultInstance();
  ::substrait::proto::ExchangeRel_SingleBucketExpression::InitAsDefaultInstance();
  ::substrait::proto::ExchangeRel_MultiBucketExpression::InitAsDefaultInstance();
  ::substrait::proto::ExchangeRel::InitAsDefaultInstance();
  ::substrait::proto::ExpandRel_ExpandField::InitAsDefaultInstance();
  ::substrait::proto::ExpandRel_SwitchingField::InitAsDefaultInstance();
  ::substrait::proto::ExpandRel::InitAsDefaultInstance();
  ::substrait::proto::Rel::InitAsDefaultInstance();
  ::substrait::proto::DdlRel::InitAsDefaultInstance();
  ::substrait::proto::WriteRel::InitAsDefaultInstance();
  ::substrait::proto::ComparisonJoinKey::InitAsDefaultInstance();
  ::substrait::proto::HashJoinRel::InitAsDefaultInstance();
  ::substrait::proto::MergeJoinRel::InitAsDefaultInstance();
  ::substrait::proto::NestedLoopJoinRel::InitAsDefaultInstance();
  ::substrait::proto::FunctionArgument::InitAsDefaultInstance();
  ::substrait::proto::Expression_Nested_Map_KeyValue::InitAsDefaultInstance();
  ::substrait::proto::Expression_Nested_Map::InitAsDefaultInstance();
  ::substrait::proto::Expression_Nested_Struct::InitAsDefaultInstance();
  ::substrait::proto::Expression_Nested_List::InitAsDefaultInstance();
  ::substrait::proto::Expression_Nested::InitAsDefaultInstance();
  ::substrait::proto::Expression_ScalarFunction::InitAsDefaultInstance();
  ::substrait::proto::Expression_WindowFunction::InitAsDefaultInstance();
  ::substrait::proto::Expression_IfThen_IfClause::InitAsDefaultInstance();
  ::substrait::proto::Expression_IfThen::InitAsDefaultInstance();
  ::substrait::proto::Expression_Cast::InitAsDefaultInstance();
  ::substrait::proto::Expression_SwitchExpression_IfValue::InitAsDefaultInstance();
  ::substrait::proto::Expression_SwitchExpression::InitAsDefaultInstance();
  ::substrait::proto::Expression_SingularOrList::InitAsDefaultInstance();
  ::substrait::proto::Expression_MultiOrList_Record::InitAsDefaultInstance();
  ::substrait::proto::Expression_MultiOrList::InitAsDefaultInstance();
  ::substrait::proto::Expression_FieldReference::InitAsDefaultInstance();
  ::substrait::proto::Expression_Subquery_Scalar::InitAsDefaultInstance();
  ::substrait::proto::Expression_Subquery_InPredicate::InitAsDefaultInstance();
  ::substrait::proto::Expression_Subquery_SetPredicate::InitAsDefaultInstance();
  ::substrait::proto::Expression_Subquery_SetComparison::InitAsDefaultInstance();
  ::substrait::proto::Expression_Subquery::InitAsDefaultInstance();
  ::substrait::proto::Expression::InitAsDefaultInstance();
  ::substrait::proto::SortField::InitAsDefaultInstance();
  ::substrait::proto::AggregateFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 25, 0, InitDefaultsscc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ComparisonJoinKey_ComparisonType_default_instance_;
    new (ptr) ::substrait::proto::ComparisonJoinKey_ComparisonType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ComparisonJoinKey_ComparisonType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExchangeRel_Broadcast_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_Broadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExchangeRel_Broadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExchangeRel_ExchangeTarget_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_ExchangeTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExchangeRel_ExchangeTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExchangeRel_RoundRobin_default_instance_;
    new (ptr) ::substrait::proto::ExchangeRel_RoundRobin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExchangeRel_RoundRobin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_EmbeddedFunction_default_instance_;
    new (ptr) ::substrait::proto::Expression_EmbeddedFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_EmbeddedFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
    new (ptr) ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
    new (ptr) ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Enum_default_instance_;
    new (ptr) ::substrait::proto::Expression_Enum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Enum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Enum_Empty_default_instance_;
    new (ptr) ::substrait::proto::Expression_Enum_Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Enum_Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_FieldReference_OuterReference_default_instance_;
    new (ptr) ::substrait::proto::Expression_FieldReference_OuterReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_FieldReference_OuterReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_FieldReference_RootReference_default_instance_;
    new (ptr) ::substrait::proto::Expression_FieldReference_RootReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_FieldReference_RootReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_Map_KeyValue_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_Map_KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Literal_Map_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Literal_Struct_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_Struct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Literal_List_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_Literal_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_Map_KeyValue::InitAsDefaultInstance();
  ::substrait::proto::Expression_Literal_Map::InitAsDefaultInstance();
  ::substrait::proto::Expression_Literal_Struct::InitAsDefaultInstance();
  ::substrait::proto::Expression_Literal_List::InitAsDefaultInstance();
  ::substrait::proto::Expression_Literal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_Decimal_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_Decimal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_IntervalDayToSecond_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_IntervalDayToSecond();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_IntervalDayToSecond::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_IntervalYearToMonth_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_IntervalYearToMonth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_IntervalYearToMonth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_UserDefined_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_UserDefined();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_UserDefined::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_Literal_VarChar_default_instance_;
    new (ptr) ::substrait::proto::Expression_Literal_VarChar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_Literal_VarChar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_Select_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_Select();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_StructSelect_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_StructSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_StructItem_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_StructItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_ListSelect_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_ListSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_MapSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_Select::InitAsDefaultInstance();
  ::substrait::proto::Expression_MaskExpression_StructSelect::InitAsDefaultInstance();
  ::substrait::proto::Expression_MaskExpression_StructItem::InitAsDefaultInstance();
  ::substrait::proto::Expression_MaskExpression_ListSelect::InitAsDefaultInstance();
  ::substrait::proto::Expression_MaskExpression_MapSelect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_MapSelect_MapKey_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
    new (ptr) ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_ReferenceSegment_MapKey_default_instance_;
    new (ptr) ::substrait::proto::Expression_ReferenceSegment_MapKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_ReferenceSegment_StructField_default_instance_;
    new (ptr) ::substrait::proto::Expression_ReferenceSegment_StructField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_ReferenceSegment_ListElement_default_instance_;
    new (ptr) ::substrait::proto::Expression_ReferenceSegment_ListElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Expression_ReferenceSegment_default_instance_;
    new (ptr) ::substrait::proto::Expression_ReferenceSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_ReferenceSegment_MapKey::InitAsDefaultInstance();
  ::substrait::proto::Expression_ReferenceSegment_StructField::InitAsDefaultInstance();
  ::substrait::proto::Expression_ReferenceSegment_ListElement::InitAsDefaultInstance();
  ::substrait::proto::Expression_ReferenceSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_Bound_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction_Bound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_WindowFunction_Bound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_Bound_CurrentRow_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_Bound_Following_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction_Bound_Following();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_WindowFunction_Bound_Following::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_Bound_Preceding_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction_Bound_Preceding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_WindowFunction_Bound_Preceding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Expression_WindowFunction_Bound_Unbounded_default_instance_;
    new (ptr) ::substrait::proto::Expression_WindowFunction_Bound_Unbounded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Expression_WindowFunction_Bound_Unbounded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExtensionLeafRel_default_instance_;
    new (ptr) ::substrait::proto::ExtensionLeafRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExtensionLeafRel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExtensionObject_default_instance_;
    new (ptr) ::substrait::proto::ExtensionObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExtensionObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_FunctionOption_default_instance_;
    new (ptr) ::substrait::proto::FunctionOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::FunctionOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_NamedObjectWrite_default_instance_;
    new (ptr) ::substrait::proto::NamedObjectWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::NamedObjectWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_ExtensionTable_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_ExtensionTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_ExtensionTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles_FileOrFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_NamedTable_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_NamedTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_NamedTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReadRel_VirtualTable_default_instance_;
    new (ptr) ::substrait::proto::ReadRel_VirtualTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReadRel_VirtualTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ReferenceRel_default_instance_;
    new (ptr) ::substrait::proto::ReferenceRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ReferenceRel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_RelCommon_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_default_instance_;
    new (ptr) ::substrait::proto::RelCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RelCommon_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_Direct_default_instance_;
    new (ptr) ::substrait::proto::RelCommon_Direct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon_Direct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_Emit_default_instance_;
    new (ptr) ::substrait::proto::RelCommon_Emit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon_Emit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto}, {}};

static void InitDefaultsscc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_Hint_default_instance_;
    new (ptr) ::substrait::proto::RelCommon_Hint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon_Hint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_Hint_RuntimeConstraint_default_instance_;
    new (ptr) ::substrait::proto::RelCommon_Hint_RuntimeConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelCommon_Hint_Stats_default_instance_;
    new (ptr) ::substrait::proto::RelCommon_Hint_Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelCommon_Hint_Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_RelRoot_substrait_2fproto_2falgebra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_RelRoot_default_instance_;
    new (ptr) ::substrait::proto::RelRoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::RelRoot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelRoot_substrait_2fproto_2falgebra_2eproto}, {
      &scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2falgebra_2eproto[116];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2falgebra_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2falgebra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Direct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Emit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Emit, output_mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_Stats, row_count_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_Stats, record_size_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_Stats, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_RuntimeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint_RuntimeConstraint, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint, stats_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint, constraint_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon_Hint, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::RelCommonDefaultTypeInternal, direct_),
  offsetof(::substrait::proto::RelCommonDefaultTypeInternal, emit_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon, hint_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon, advanced_extension_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelCommon, emit_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_NamedTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_NamedTable, names_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_NamedTable, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_VirtualTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_VirtualTable, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_ExtensionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_ExtensionTable, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, uri_path_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, uri_path_glob_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, uri_file_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, uri_folder_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, partition_index_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, start_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, length_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, parquet_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, arrow_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, orc_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, extension_),
  offsetof(::substrait::proto::ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal, dwrf_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, path_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles_FileOrFiles, file_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles, items_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel_LocalFiles, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, base_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, best_effort_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, projection_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, advanced_extension_),
  offsetof(::substrait::proto::ReadRelDefaultTypeInternal, virtual_table_),
  offsetof(::substrait::proto::ReadRelDefaultTypeInternal, local_files_),
  offsetof(::substrait::proto::ReadRelDefaultTypeInternal, named_table_),
  offsetof(::substrait::proto::ReadRelDefaultTypeInternal, extension_table_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReadRel, read_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ProjectRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ProjectRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ProjectRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ProjectRel, expressions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ProjectRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::JoinRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::CrossRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::CrossRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::CrossRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::CrossRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::CrossRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, offset_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, count_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FetchRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel_Grouping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel_Grouping, grouping_expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel_Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel_Measure, measure_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel_Measure, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, groupings_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, measures_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, options_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, phase_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, invocation_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction, bounds_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, window_functions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, partition_expressions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ConsistentPartitionWindowRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortRel, sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FilterRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FilterRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FilterRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FilterRel, condition_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FilterRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SetRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SetRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SetRel, inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SetRel, op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SetRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionSingleRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionSingleRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionSingleRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionSingleRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionLeafRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionLeafRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionLeafRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionMultiRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionMultiRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionMultiRel, inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionMultiRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ScatterFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ScatterFields, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_SingleBucketExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_SingleBucketExpression, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_MultiBucketExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_MultiBucketExpression, expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_MultiBucketExpression, constrained_to_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_RoundRobin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_RoundRobin, exact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ExchangeTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ExchangeTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ExchangeTarget, partition_id_),
  offsetof(::substrait::proto::ExchangeRel_ExchangeTargetDefaultTypeInternal, uri_),
  offsetof(::substrait::proto::ExchangeRel_ExchangeTargetDefaultTypeInternal, extended_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel_ExchangeTarget, target_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, partition_count_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, targets_),
  offsetof(::substrait::proto::ExchangeRelDefaultTypeInternal, scatter_by_fields_),
  offsetof(::substrait::proto::ExchangeRelDefaultTypeInternal, single_target_),
  offsetof(::substrait::proto::ExchangeRelDefaultTypeInternal, multi_target_),
  offsetof(::substrait::proto::ExchangeRelDefaultTypeInternal, round_robin_),
  offsetof(::substrait::proto::ExchangeRelDefaultTypeInternal, broadcast_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, advanced_extension_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExchangeRel, exchange_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel_ExpandField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel_ExpandField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::ExpandRel_ExpandFieldDefaultTypeInternal, switching_field_),
  offsetof(::substrait::proto::ExpandRel_ExpandFieldDefaultTypeInternal, consistent_field_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel_ExpandField, field_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel_SwitchingField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel_SwitchingField, duplicates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpandRel, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelRoot, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::RelRoot, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Rel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Rel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::RelDefaultTypeInternal, read_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, filter_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, fetch_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, aggregate_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, sort_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, join_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, project_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, set_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, extension_single_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, extension_multi_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, extension_leaf_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, cross_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, reference_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, write_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, ddl_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, hash_join_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, merge_join_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, nested_loop_join_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, window_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, exchange_),
  offsetof(::substrait::proto::RelDefaultTypeInternal, expand_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Rel, rel_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedObjectWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedObjectWrite, names_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedObjectWrite, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtensionObject, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::DdlRelDefaultTypeInternal, named_object_),
  offsetof(::substrait::proto::DdlRelDefaultTypeInternal, extension_object_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, table_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, table_defaults_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, object_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, view_definition_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::DdlRel, write_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::WriteRelDefaultTypeInternal, named_table_),
  offsetof(::substrait::proto::WriteRelDefaultTypeInternal, extension_table_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, table_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, output_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::WriteRel, write_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey_ComparisonType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey_ComparisonType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::ComparisonJoinKey_ComparisonTypeDefaultTypeInternal, simple_),
  offsetof(::substrait::proto::ComparisonJoinKey_ComparisonTypeDefaultTypeInternal, custom_function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey_ComparisonType, inner_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ComparisonJoinKey, comparison_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, left_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, right_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::HashJoinRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, left_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, right_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::MergeJoinRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NestedLoopJoinRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionArgument, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::FunctionArgumentDefaultTypeInternal, enum__),
  offsetof(::substrait::proto::FunctionArgumentDefaultTypeInternal, type_),
  offsetof(::substrait::proto::FunctionArgumentDefaultTypeInternal, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionArgument, arg_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionOption, name_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::FunctionOption, preference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Enum_Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Enum, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Enum, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_EnumDefaultTypeInternal, specified_),
  offsetof(::substrait::proto::Expression_EnumDefaultTypeInternal, unspecified_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Enum, enum_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_VarChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_VarChar, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_VarChar, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Decimal, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Decimal, precision_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Decimal, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Map_KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Map_KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Map_KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Map, key_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalYearToMonth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalYearToMonth, years_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalYearToMonth, months_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalDayToSecond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalDayToSecond, days_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalDayToSecond, seconds_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_IntervalDayToSecond, microseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_Struct, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_List, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_UserDefined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_UserDefined, type_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_UserDefined, type_parameters_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal_UserDefined, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, boolean_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, i8_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, i16_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, i32_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, i64_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, fp32_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, fp64_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, string_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, binary_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, timestamp_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, date_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, time_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, interval_year_to_month_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, interval_day_to_second_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, fixed_char_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, var_char_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, fixed_binary_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, decimal_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, struct__),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, map_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, timestamp_tz_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, uuid_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, null_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, list_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, empty_list_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, empty_map_),
  offsetof(::substrait::proto::Expression_LiteralDefaultTypeInternal, user_defined_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal, nullable_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Literal, literal_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Map_KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Map_KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Map_KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Map, key_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_Struct, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested_List, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested, nullable_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested, type_variation_reference_),
  offsetof(::substrait::proto::Expression_NestedDefaultTypeInternal, struct__),
  offsetof(::substrait::proto::Expression_NestedDefaultTypeInternal, list_),
  offsetof(::substrait::proto::Expression_NestedDefaultTypeInternal, map_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Nested, nested_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, options_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ScalarFunction, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_Preceding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_Preceding, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_Following, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_Following, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_CurrentRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound_Unbounded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_WindowFunction_BoundDefaultTypeInternal, preceding_),
  offsetof(::substrait::proto::Expression_WindowFunction_BoundDefaultTypeInternal, following_),
  offsetof(::substrait::proto::Expression_WindowFunction_BoundDefaultTypeInternal, current_row_),
  offsetof(::substrait::proto::Expression_WindowFunction_BoundDefaultTypeInternal, unbounded_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction_Bound, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, options_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, phase_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, invocation_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, partitions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, bounds_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_WindowFunction, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen_IfClause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen_IfClause, if__),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen_IfClause, then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen, ifs_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_IfThen, else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Cast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Cast, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Cast, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Cast, failure_behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression_IfValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression_IfValue, if__),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression_IfValue, then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression, match_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression, ifs_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SwitchExpression, else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SingularOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SingularOrList, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_SingularOrList, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MultiOrList_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MultiOrList_Record, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MultiOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MultiOrList, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MultiOrList, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction, function_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction, prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction, script_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction, prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction, output_type_),
  offsetof(::substrait::proto::Expression_EmbeddedFunctionDefaultTypeInternal, python_pickle_function_),
  offsetof(::substrait::proto::Expression_EmbeddedFunctionDefaultTypeInternal, web_assembly_function_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_EmbeddedFunction, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_MapKey, map_key_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_MapKey, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_StructField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_StructField, field_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_StructField, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_ListElement, offset_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment_ListElement, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_ReferenceSegmentDefaultTypeInternal, map_key_),
  offsetof(::substrait::proto::Expression_ReferenceSegmentDefaultTypeInternal, struct_field_),
  offsetof(::substrait::proto::Expression_ReferenceSegmentDefaultTypeInternal, list_element_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_ReferenceSegment, reference_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_Select, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_Select, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_MaskExpression_SelectDefaultTypeInternal, struct__),
  offsetof(::substrait::proto::Expression_MaskExpression_SelectDefaultTypeInternal, list_),
  offsetof(::substrait::proto::Expression_MaskExpression_SelectDefaultTypeInternal, map_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_Select, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_StructSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_StructSelect, struct_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_StructItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_StructItem, field_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_StructItem, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, start_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal, item_),
  offsetof(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal, slice_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect, selection_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_ListSelect, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey, map_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression, map_key_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_MaskExpression_MapSelectDefaultTypeInternal, key_),
  offsetof(::substrait::proto::Expression_MaskExpression_MapSelectDefaultTypeInternal, expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect, child_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression_MapSelect, select_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression, select_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_MaskExpression, maintain_singular_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference_RootReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference_OuterReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference_OuterReference, steps_out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_FieldReferenceDefaultTypeInternal, direct_reference_),
  offsetof(::substrait::proto::Expression_FieldReferenceDefaultTypeInternal, masked_reference_),
  offsetof(::substrait::proto::Expression_FieldReferenceDefaultTypeInternal, expression_),
  offsetof(::substrait::proto::Expression_FieldReferenceDefaultTypeInternal, root_reference_),
  offsetof(::substrait::proto::Expression_FieldReferenceDefaultTypeInternal, outer_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference, reference_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_FieldReference, root_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_Scalar, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_InPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_InPredicate, needles_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_InPredicate, haystack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetPredicate, predicate_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetPredicate, tuples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetComparison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetComparison, reduction_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetComparison, comparison_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetComparison, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery_SetComparison, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Expression_SubqueryDefaultTypeInternal, scalar_),
  offsetof(::substrait::proto::Expression_SubqueryDefaultTypeInternal, in_predicate_),
  offsetof(::substrait::proto::Expression_SubqueryDefaultTypeInternal, set_predicate_),
  offsetof(::substrait::proto::Expression_SubqueryDefaultTypeInternal, set_comparison_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression_Subquery, subquery_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, literal_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, selection_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, scalar_function_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, window_function_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, if_then_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, switch_expression_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, singular_or_list_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, multi_or_list_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, cast_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, subquery_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, nested_),
  offsetof(::substrait::proto::ExpressionDefaultTypeInternal, enum__),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Expression, rex_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortField, expr_),
  offsetof(::substrait::proto::SortFieldDefaultTypeInternal, direction_),
  offsetof(::substrait::proto::SortFieldDefaultTypeInternal, comparison_function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::SortField, sort_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, options_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, phase_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, invocation_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::AggregateFunction, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReferenceRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ReferenceRel, subtree_ordinal_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::RelCommon_Direct)},
  { 5, -1, sizeof(::substrait::proto::RelCommon_Emit)},
  { 11, -1, sizeof(::substrait::proto::RelCommon_Hint_Stats)},
  { 19, -1, sizeof(::substrait::proto::RelCommon_Hint_RuntimeConstraint)},
  { 25, -1, sizeof(::substrait::proto::RelCommon_Hint)},
  { 33, -1, sizeof(::substrait::proto::RelCommon)},
  { 43, -1, sizeof(::substrait::proto::ReadRel_NamedTable)},
  { 50, -1, sizeof(::substrait::proto::ReadRel_VirtualTable)},
  { 56, -1, sizeof(::substrait::proto::ReadRel_ExtensionTable)},
  { 62, -1, sizeof(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions)},
  { 67, -1, sizeof(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions)},
  { 72, -1, sizeof(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions)},
  { 77, -1, sizeof(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions)},
  { 82, -1, sizeof(::substrait::proto::ReadRel_LocalFiles_FileOrFiles)},
  { 101, -1, sizeof(::substrait::proto::ReadRel_LocalFiles)},
  { 108, -1, sizeof(::substrait::proto::ReadRel)},
  { 124, -1, sizeof(::substrait::proto::ProjectRel)},
  { 133, -1, sizeof(::substrait::proto::JoinRel)},
  { 145, -1, sizeof(::substrait::proto::CrossRel)},
  { 154, -1, sizeof(::substrait::proto::FetchRel)},
  { 164, -1, sizeof(::substrait::proto::AggregateRel_Grouping)},
  { 170, -1, sizeof(::substrait::proto::AggregateRel_Measure)},
  { 177, -1, sizeof(::substrait::proto::AggregateRel)},
  { 187, -1, sizeof(::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction)},
  { 201, -1, sizeof(::substrait::proto::ConsistentPartitionWindowRel)},
  { 212, -1, sizeof(::substrait::proto::SortRel)},
  { 221, -1, sizeof(::substrait::proto::FilterRel)},
  { 230, -1, sizeof(::substrait::proto::SetRel)},
  { 239, -1, sizeof(::substrait::proto::ExtensionSingleRel)},
  { 247, -1, sizeof(::substrait::proto::ExtensionLeafRel)},
  { 254, -1, sizeof(::substrait::proto::ExtensionMultiRel)},
  { 262, -1, sizeof(::substrait::proto::ExchangeRel_ScatterFields)},
  { 268, -1, sizeof(::substrait::proto::ExchangeRel_SingleBucketExpression)},
  { 274, -1, sizeof(::substrait::proto::ExchangeRel_MultiBucketExpression)},
  { 281, -1, sizeof(::substrait::proto::ExchangeRel_Broadcast)},
  { 286, -1, sizeof(::substrait::proto::ExchangeRel_RoundRobin)},
  { 292, -1, sizeof(::substrait::proto::ExchangeRel_ExchangeTarget)},
  { 301, -1, sizeof(::substrait::proto::ExchangeRel)},
  { 317, -1, sizeof(::substrait::proto::ExpandRel_ExpandField)},
  { 325, -1, sizeof(::substrait::proto::ExpandRel_SwitchingField)},
  { 331, -1, sizeof(::substrait::proto::ExpandRel)},
  { 339, -1, sizeof(::substrait::proto::RelRoot)},
  { 346, -1, sizeof(::substrait::proto::Rel)},
  { 373, -1, sizeof(::substrait::proto::NamedObjectWrite)},
  { 380, -1, sizeof(::substrait::proto::ExtensionObject)},
  { 386, -1, sizeof(::substrait::proto::DdlRel)},
  { 400, -1, sizeof(::substrait::proto::WriteRel)},
  { 413, -1, sizeof(::substrait::proto::ComparisonJoinKey_ComparisonType)},
  { 421, -1, sizeof(::substrait::proto::ComparisonJoinKey)},
  { 429, -1, sizeof(::substrait::proto::HashJoinRel)},
  { 443, -1, sizeof(::substrait::proto::MergeJoinRel)},
  { 457, -1, sizeof(::substrait::proto::NestedLoopJoinRel)},
  { 468, -1, sizeof(::substrait::proto::FunctionArgument)},
  { 477, -1, sizeof(::substrait::proto::FunctionOption)},
  { 484, -1, sizeof(::substrait::proto::Expression_Enum_Empty)},
  { 489, -1, sizeof(::substrait::proto::Expression_Enum)},
  { 497, -1, sizeof(::substrait::proto::Expression_Literal_VarChar)},
  { 504, -1, sizeof(::substrait::proto::Expression_Literal_Decimal)},
  { 512, -1, sizeof(::substrait::proto::Expression_Literal_Map_KeyValue)},
  { 519, -1, sizeof(::substrait::proto::Expression_Literal_Map)},
  { 525, -1, sizeof(::substrait::proto::Expression_Literal_IntervalYearToMonth)},
  { 532, -1, sizeof(::substrait::proto::Expression_Literal_IntervalDayToSecond)},
  { 540, -1, sizeof(::substrait::proto::Expression_Literal_Struct)},
  { 546, -1, sizeof(::substrait::proto::Expression_Literal_List)},
  { 552, -1, sizeof(::substrait::proto::Expression_Literal_UserDefined)},
  { 560, -1, sizeof(::substrait::proto::Expression_Literal)},
  { 595, -1, sizeof(::substrait::proto::Expression_Nested_Map_KeyValue)},
  { 602, -1, sizeof(::substrait::proto::Expression_Nested_Map)},
  { 608, -1, sizeof(::substrait::proto::Expression_Nested_Struct)},
  { 614, -1, sizeof(::substrait::proto::Expression_Nested_List)},
  { 620, -1, sizeof(::substrait::proto::Expression_Nested)},
  { 631, -1, sizeof(::substrait::proto::Expression_ScalarFunction)},
  { 641, -1, sizeof(::substrait::proto::Expression_WindowFunction_Bound_Preceding)},
  { 647, -1, sizeof(::substrait::proto::Expression_WindowFunction_Bound_Following)},
  { 653, -1, sizeof(::substrait::proto::Expression_WindowFunction_Bound_CurrentRow)},
  { 658, -1, sizeof(::substrait::proto::Expression_WindowFunction_Bound_Unbounded)},
  { 663, -1, sizeof(::substrait::proto::Expression_WindowFunction_Bound)},
  { 673, -1, sizeof(::substrait::proto::Expression_WindowFunction)},
  { 690, -1, sizeof(::substrait::proto::Expression_IfThen_IfClause)},
  { 697, -1, sizeof(::substrait::proto::Expression_IfThen)},
  { 704, -1, sizeof(::substrait::proto::Expression_Cast)},
  { 712, -1, sizeof(::substrait::proto::Expression_SwitchExpression_IfValue)},
  { 719, -1, sizeof(::substrait::proto::Expression_SwitchExpression)},
  { 727, -1, sizeof(::substrait::proto::Expression_SingularOrList)},
  { 734, -1, sizeof(::substrait::proto::Expression_MultiOrList_Record)},
  { 740, -1, sizeof(::substrait::proto::Expression_MultiOrList)},
  { 747, -1, sizeof(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction)},
  { 754, -1, sizeof(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction)},
  { 761, -1, sizeof(::substrait::proto::Expression_EmbeddedFunction)},
  { 771, -1, sizeof(::substrait::proto::Expression_ReferenceSegment_MapKey)},
  { 778, -1, sizeof(::substrait::proto::Expression_ReferenceSegment_StructField)},
  { 785, -1, sizeof(::substrait::proto::Expression_ReferenceSegment_ListElement)},
  { 792, -1, sizeof(::substrait::proto::Expression_ReferenceSegment)},
  { 801, -1, sizeof(::substrait::proto::Expression_MaskExpression_Select)},
  { 810, -1, sizeof(::substrait::proto::Expression_MaskExpression_StructSelect)},
  { 816, -1, sizeof(::substrait::proto::Expression_MaskExpression_StructItem)},
  { 823, -1, sizeof(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement)},
  { 829, -1, sizeof(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice)},
  { 836, -1, sizeof(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem)},
  { 844, -1, sizeof(::substrait::proto::Expression_MaskExpression_ListSelect)},
  { 851, -1, sizeof(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey)},
  { 857, -1, sizeof(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression)},
  { 863, -1, sizeof(::substrait::proto::Expression_MaskExpression_MapSelect)},
  { 872, -1, sizeof(::substrait::proto::Expression_MaskExpression)},
  { 879, -1, sizeof(::substrait::proto::Expression_FieldReference_RootReference)},
  { 884, -1, sizeof(::substrait::proto::Expression_FieldReference_OuterReference)},
  { 890, -1, sizeof(::substrait::proto::Expression_FieldReference)},
  { 902, -1, sizeof(::substrait::proto::Expression_Subquery_Scalar)},
  { 908, -1, sizeof(::substrait::proto::Expression_Subquery_InPredicate)},
  { 915, -1, sizeof(::substrait::proto::Expression_Subquery_SetPredicate)},
  { 922, -1, sizeof(::substrait::proto::Expression_Subquery_SetComparison)},
  { 931, -1, sizeof(::substrait::proto::Expression_Subquery)},
  { 941, -1, sizeof(::substrait::proto::Expression)},
  { 959, -1, sizeof(::substrait::proto::SortField)},
  { 968, -1, sizeof(::substrait::proto::AggregateFunction)},
  { 981, -1, sizeof(::substrait::proto::ReferenceRel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_Direct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_Emit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_Hint_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_Hint_RuntimeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_Hint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_NamedTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_VirtualTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_ExtensionTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_LocalFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReadRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ProjectRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_JoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_CrossRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_FetchRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_AggregateRel_Grouping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_AggregateRel_Measure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_AggregateRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ConsistentPartitionWindowRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_SortRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_FilterRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_SetRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExtensionSingleRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExtensionLeafRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExtensionMultiRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_ScatterFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_SingleBucketExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_MultiBucketExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_Broadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_RoundRobin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_ExchangeTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExchangeRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExpandRel_ExpandField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExpandRel_SwitchingField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExpandRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_RelRoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Rel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_NamedObjectWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExtensionObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_DdlRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_WriteRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ComparisonJoinKey_ComparisonType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ComparisonJoinKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_HashJoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_MergeJoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_NestedLoopJoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_FunctionArgument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_FunctionOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Enum_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Enum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_VarChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_Map_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_IntervalYearToMonth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_IntervalDayToSecond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_UserDefined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Literal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Nested_Map_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Nested_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Nested_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Nested_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Nested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_ScalarFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_Bound_Preceding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_Bound_Following_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_Bound_CurrentRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_Bound_Unbounded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_Bound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_WindowFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_IfThen_IfClause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_IfThen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Cast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_SwitchExpression_IfValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_SwitchExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_SingularOrList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MultiOrList_Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MultiOrList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_EmbeddedFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_ReferenceSegment_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_ReferenceSegment_StructField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_ReferenceSegment_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_ReferenceSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_Select_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_StructSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_StructItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_MapKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_MaskExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_FieldReference_RootReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_FieldReference_OuterReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_FieldReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Subquery_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Subquery_InPredicate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Subquery_SetPredicate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Subquery_SetComparison_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_Subquery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_SortField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_AggregateFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ReferenceRel_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2falgebra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035substrait/proto/algebra.proto\022\017substra"
  "it.proto\032\031google/protobuf/any.proto\032+sub"
  "strait/proto/extensions/extensions.proto"
  "\032\032substrait/proto/type.proto\"\317\005\n\tRelComm"
  "on\0223\n\006direct\030\001 \001(\0132!.substrait.proto.Rel"
  "Common.DirectH\000\022/\n\004emit\030\002 \001(\0132\037.substrai"
  "t.proto.RelCommon.EmitH\000\022-\n\004hint\030\003 \001(\0132\037"
  ".substrait.proto.RelCommon.Hint\022I\n\022advan"
  "ced_extension\030\004 \001(\0132-.substrait.proto.ex"
  "tensions.AdvancedExtension\032\010\n\006Direct\032\036\n\004"
  "Emit\022\026\n\016output_mapping\030\001 \003(\005\032\252\003\n\004Hint\0224\n"
  "\005stats\030\001 \001(\0132%.substrait.proto.RelCommon"
  ".Hint.Stats\022E\n\nconstraint\030\002 \001(\01321.substr"
  "ait.proto.RelCommon.Hint.RuntimeConstrai"
  "nt\022I\n\022advanced_extension\030\n \001(\0132-.substra"
  "it.proto.extensions.AdvancedExtension\032z\n"
  "\005Stats\022\021\n\trow_count\030\001 \001(\001\022\023\n\013record_size"
  "\030\002 \001(\001\022I\n\022advanced_extension\030\n \001(\0132-.sub"
  "strait.proto.extensions.AdvancedExtensio"
  "n\032^\n\021RuntimeConstraint\022I\n\022advanced_exten"
  "sion\030\n \001(\0132-.substrait.proto.extensions."
  "AdvancedExtensionB\013\n\temit_kind\"\365\014\n\007ReadR"
  "el\022*\n\006common\030\001 \001(\0132\032.substrait.proto.Rel"
  "Common\0221\n\013base_schema\030\002 \001(\0132\034.substrait."
  "proto.NamedStruct\022+\n\006filter\030\003 \001(\0132\033.subs"
  "trait.proto.Expression\0227\n\022best_effort_fi"
  "lter\030\013 \001(\0132\033.substrait.proto.Expression\022"
  ">\n\nprojection\030\004 \001(\0132*.substrait.proto.Ex"
  "pression.MaskExpression\022I\n\022advanced_exte"
  "nsion\030\n \001(\0132-.substrait.proto.extensions"
  ".AdvancedExtension\022>\n\rvirtual_table\030\005 \001("
  "\0132%.substrait.proto.ReadRel.VirtualTable"
  "H\000\022:\n\013local_files\030\006 \001(\0132#.substrait.prot"
  "o.ReadRel.LocalFilesH\000\022:\n\013named_table\030\007 "
  "\001(\0132#.substrait.proto.ReadRel.NamedTable"
  "H\000\022B\n\017extension_table\030\010 \001(\0132\'.substrait."
  "proto.ReadRel.ExtensionTableH\000\032f\n\nNamedT"
  "able\022\r\n\005names\030\001 \003(\t\022I\n\022advanced_extensio"
  "n\030\n \001(\0132-.substrait.proto.extensions.Adv"
  "ancedExtension\032J\n\014VirtualTable\022:\n\006values"
  "\030\001 \003(\0132*.substrait.proto.Expression.Lite"
  "ral.Struct\0326\n\016ExtensionTable\022$\n\006detail\030\001"
  " \001(\0132\024.google.protobuf.Any\032\244\006\n\nLocalFile"
  "s\022>\n\005items\030\001 \003(\0132/.substrait.proto.ReadR"
  "el.LocalFiles.FileOrFiles\022I\n\022advanced_ex"
  "tension\030\n \001(\0132-.substrait.proto.extensio"
  "ns.AdvancedExtension\032\212\005\n\013FileOrFiles\022\022\n\010"
  "uri_path\030\001 \001(\tH\000\022\027\n\ruri_path_glob\030\002 \001(\tH"
  "\000\022\022\n\010uri_file\030\003 \001(\tH\000\022\024\n\nuri_folder\030\004 \001("
  "\tH\000\022\027\n\017partition_index\030\006 \001(\004\022\r\n\005start\030\007 "
  "\001(\004\022\016\n\006length\030\010 \001(\004\022U\n\007parquet\030\t \001(\0132B.s"
  "ubstrait.proto.ReadRel.LocalFiles.FileOr"
  "Files.ParquetReadOptionsH\001\022Q\n\005arrow\030\n \001("
  "\0132@.substrait.proto.ReadRel.LocalFiles.F"
  "ileOrFiles.ArrowReadOptionsH\001\022M\n\003orc\030\013 \001"
  "(\0132>.substrait.proto.ReadRel.LocalFiles."
  "FileOrFiles.OrcReadOptionsH\001\022)\n\textensio"
  "n\030\014 \001(\0132\024.google.protobuf.AnyH\001\022O\n\004dwrf\030"
  "\r \001(\0132\?.substrait.proto.ReadRel.LocalFil"
  "es.FileOrFiles.DwrfReadOptionsH\001\032\024\n\022Parq"
  "uetReadOptions\032\022\n\020ArrowReadOptions\032\020\n\016Or"
  "cReadOptions\032\021\n\017DwrfReadOptionsB\013\n\tpath_"
  "typeB\r\n\013file_formatJ\004\010\005\020\006R\006formatB\013\n\trea"
  "d_type\"\332\001\n\nProjectRel\022*\n\006common\030\001 \001(\0132\032."
  "substrait.proto.RelCommon\022#\n\005input\030\002 \001(\013"
  "2\024.substrait.proto.Rel\0220\n\013expressions\030\003 "
  "\003(\0132\033.substrait.proto.Expression\022I\n\022adva"
  "nced_extension\030\n \001(\0132-.substrait.proto.e"
  "xtensions.AdvancedExtension\"\233\004\n\007JoinRel\022"
  "*\n\006common\030\001 \001(\0132\032.substrait.proto.RelCom"
  "mon\022\"\n\004left\030\002 \001(\0132\024.substrait.proto.Rel\022"
  "#\n\005right\030\003 \001(\0132\024.substrait.proto.Rel\022/\n\n"
  "expression\030\004 \001(\0132\033.substrait.proto.Expre"
  "ssion\0225\n\020post_join_filter\030\005 \001(\0132\033.substr"
  "ait.proto.Expression\022/\n\004type\030\006 \001(\0162!.sub"
  "strait.proto.JoinRel.JoinType\022I\n\022advance"
  "d_extension\030\n \001(\0132-.substrait.proto.exte"
  "nsions.AdvancedExtension\"\266\001\n\010JoinType\022\031\n"
  "\025JOIN_TYPE_UNSPECIFIED\020\000\022\023\n\017JOIN_TYPE_IN"
  "NER\020\001\022\023\n\017JOIN_TYPE_OUTER\020\002\022\022\n\016JOIN_TYPE_"
  "LEFT\020\003\022\023\n\017JOIN_TYPE_RIGHT\020\004\022\022\n\016JOIN_TYPE"
  "_SEMI\020\005\022\022\n\016JOIN_TYPE_ANTI\020\006\022\024\n\020JOIN_TYPE"
  "_SINGLE\020\007\"\312\001\n\010CrossRel\022*\n\006common\030\001 \001(\0132\032"
  ".substrait.proto.RelCommon\022\"\n\004left\030\002 \001(\013"
  "2\024.substrait.proto.Rel\022#\n\005right\030\003 \001(\0132\024."
  "substrait.proto.Rel\022I\n\022advanced_extensio"
  "n\030\n \001(\0132-.substrait.proto.extensions.Adv"
  "ancedExtension\"\305\001\n\010FetchRel\022*\n\006common\030\001 "
  "\001(\0132\032.substrait.proto.RelCommon\022#\n\005input"
  "\030\002 \001(\0132\024.substrait.proto.Rel\022\016\n\006offset\030\003"
  " \001(\003\022\r\n\005count\030\004 \001(\003\022I\n\022advanced_extensio"
  "n\030\n \001(\0132-.substrait.proto.extensions.Adv"
  "ancedExtension\"\322\003\n\014AggregateRel\022*\n\006commo"
  "n\030\001 \001(\0132\032.substrait.proto.RelCommon\022#\n\005i"
  "nput\030\002 \001(\0132\024.substrait.proto.Rel\0229\n\tgrou"
  "pings\030\003 \003(\0132&.substrait.proto.AggregateR"
  "el.Grouping\0227\n\010measures\030\004 \003(\0132%.substrai"
  "t.proto.AggregateRel.Measure\022I\n\022advanced"
  "_extension\030\n \001(\0132-.substrait.proto.exten"
  "sions.AdvancedExtension\032E\n\010Grouping\0229\n\024g"
  "rouping_expressions\030\001 \003(\0132\033.substrait.pr"
  "oto.Expression\032k\n\007Measure\0223\n\007measure\030\001 \001"
  "(\0132\".substrait.proto.AggregateFunction\022+"
  "\n\006filter\030\002 \001(\0132\033.substrait.proto.Express"
  "ion\"\234\007\n\034ConsistentPartitionWindowRel\022*\n\006"
  "common\030\001 \001(\0132\032.substrait.proto.RelCommon"
  "\022#\n\005input\030\002 \001(\0132\024.substrait.proto.Rel\022Y\n"
  "\020window_functions\030\003 \003(\0132\?.substrait.prot"
  "o.ConsistentPartitionWindowRel.WindowRel"
  "Function\022:\n\025partition_expressions\030\004 \003(\0132"
  "\033.substrait.proto.Expression\022)\n\005sorts\030\005 "
  "\003(\0132\032.substrait.proto.SortField\022I\n\022advan"
  "ced_extension\030\n \001(\0132-.substrait.proto.ex"
  "tensions.AdvancedExtension\032\235\004\n\021WindowRel"
  "Function\022\032\n\022function_reference\030\001 \001(\r\0224\n\t"
  "arguments\030\t \003(\0132!.substrait.proto.Functi"
  "onArgument\0220\n\007options\030\013 \003(\0132\037.substrait."
  "proto.FunctionOption\022*\n\013output_type\030\007 \001("
  "\0132\025.substrait.proto.Type\0220\n\005phase\030\006 \001(\0162"
  "!.substrait.proto.AggregationPhase\022L\n\nin"
  "vocation\030\n \001(\01628.substrait.proto.Aggrega"
  "teFunction.AggregationInvocation\022E\n\013lowe"
  "r_bound\030\005 \001(\01320.substrait.proto.Expressi"
  "on.WindowFunction.Bound\022E\n\013upper_bound\030\004"
  " \001(\01320.substrait.proto.Expression.Window"
  "Function.Bound\022J\n\013bounds_type\030\014 \001(\01625.su"
  "bstrait.proto.Expression.WindowFunction."
  "BoundsType\"\320\001\n\007SortRel\022*\n\006common\030\001 \001(\0132\032"
  ".substrait.proto.RelCommon\022#\n\005input\030\002 \001("
  "\0132\024.substrait.proto.Rel\022)\n\005sorts\030\003 \003(\0132\032"
  ".substrait.proto.SortField\022I\n\022advanced_e"
  "xtension\030\n \001(\0132-.substrait.proto.extensi"
  "ons.AdvancedExtension\"\327\001\n\tFilterRel\022*\n\006c"
  "ommon\030\001 \001(\0132\032.substrait.proto.RelCommon\022"
  "#\n\005input\030\002 \001(\0132\024.substrait.proto.Rel\022.\n\t"
  "condition\030\003 \001(\0132\033.substrait.proto.Expres"
  "sion\022I\n\022advanced_extension\030\n \001(\0132-.subst"
  "rait.proto.extensions.AdvancedExtension\""
  "\233\003\n\006SetRel\022*\n\006common\030\001 \001(\0132\032.substrait.p"
  "roto.RelCommon\022$\n\006inputs\030\002 \003(\0132\024.substra"
  "it.proto.Rel\022)\n\002op\030\003 \001(\0162\035.substrait.pro"
  "to.SetRel.SetOp\022I\n\022advanced_extension\030\n "
  "\001(\0132-.substrait.proto.extensions.Advance"
  "dExtension\"\310\001\n\005SetOp\022\026\n\022SET_OP_UNSPECIFI"
  "ED\020\000\022\030\n\024SET_OP_MINUS_PRIMARY\020\001\022\031\n\025SET_OP"
  "_MINUS_MULTISET\020\002\022\037\n\033SET_OP_INTERSECTION"
  "_PRIMARY\020\003\022 \n\034SET_OP_INTERSECTION_MULTIS"
  "ET\020\004\022\031\n\025SET_OP_UNION_DISTINCT\020\005\022\024\n\020SET_O"
  "P_UNION_ALL\020\006\"\213\001\n\022ExtensionSingleRel\022*\n\006"
  "common\030\001 \001(\0132\032.substrait.proto.RelCommon"
  "\022#\n\005input\030\002 \001(\0132\024.substrait.proto.Rel\022$\n"
  "\006detail\030\003 \001(\0132\024.google.protobuf.Any\"d\n\020E"
  "xtensionLeafRel\022*\n\006common\030\001 \001(\0132\032.substr"
  "ait.proto.RelCommon\022$\n\006detail\030\002 \001(\0132\024.go"
  "ogle.protobuf.Any\"\213\001\n\021ExtensionMultiRel\022"
  "*\n\006common\030\001 \001(\0132\032.substrait.proto.RelCom"
  "mon\022$\n\006inputs\030\002 \003(\0132\024.substrait.proto.Re"
  "l\022$\n\006detail\030\003 \001(\0132\024.google.protobuf.Any\""
  "\213\010\n\013ExchangeRel\022*\n\006common\030\001 \001(\0132\032.substr"
  "ait.proto.RelCommon\022#\n\005input\030\002 \001(\0132\024.sub"
  "strait.proto.Rel\022\027\n\017partition_count\030\003 \001("
  "\005\022<\n\007targets\030\004 \003(\0132+.substrait.proto.Exc"
  "hangeRel.ExchangeTarget\022G\n\021scatter_by_fi"
  "elds\030\005 \001(\0132*.substrait.proto.ExchangeRel"
  ".ScatterFieldsH\000\022L\n\rsingle_target\030\006 \001(\0132"
  "3.substrait.proto.ExchangeRel.SingleBuck"
  "etExpressionH\000\022J\n\014multi_target\030\007 \001(\01322.s"
  "ubstrait.proto.ExchangeRel.MultiBucketEx"
  "pressionH\000\022>\n\013round_robin\030\010 \001(\0132\'.substr"
  "ait.proto.ExchangeRel.RoundRobinH\000\022;\n\tbr"
  "oadcast\030\t \001(\0132&.substrait.proto.Exchange"
  "Rel.BroadcastH\000\022I\n\022advanced_extension\030\n "
  "\001(\0132-.substrait.proto.extensions.Advance"
  "dExtension\032K\n\rScatterFields\022:\n\006fields\030\001 "
  "\003(\0132*.substrait.proto.Expression.FieldRe"
  "ference\032I\n\026SingleBucketExpression\022/\n\nexp"
  "ression\030\001 \001(\0132\033.substrait.proto.Expressi"
  "on\032f\n\025MultiBucketExpression\022/\n\nexpressio"
  "n\030\001 \001(\0132\033.substrait.proto.Expression\022\034\n\024"
  "constrained_to_count\030\002 \001(\010\032\013\n\tBroadcast\032"
  "\033\n\nRoundRobin\022\r\n\005exact\030\001 \001(\010\032n\n\016Exchange"
  "Target\022\024\n\014partition_id\030\001 \003(\005\022\r\n\003uri\030\002 \001("
  "\tH\000\022(\n\010extended\030\003 \001(\0132\024.google.protobuf."
  "AnyH\000B\r\n\013target_typeB\017\n\rexchange_kind\"\364\002"
  "\n\tExpandRel\022*\n\006common\030\001 \001(\0132\032.substrait."
  "proto.RelCommon\022#\n\005input\030\002 \001(\0132\024.substra"
  "it.proto.Rel\0226\n\006fields\030\004 \003(\0132&.substrait"
  ".proto.ExpandRel.ExpandField\032\232\001\n\013ExpandF"
  "ield\022D\n\017switching_field\030\002 \001(\0132).substrai"
  "t.proto.ExpandRel.SwitchingFieldH\000\0227\n\020co"
  "nsistent_field\030\003 \001(\0132\033.substrait.proto.E"
  "xpressionH\000B\014\n\nfield_type\032A\n\016SwitchingFi"
  "eld\022/\n\nduplicates\030\001 \003(\0132\033.substrait.prot"
  "o.Expression\"=\n\007RelRoot\022#\n\005input\030\001 \001(\0132\024"
  ".substrait.proto.Rel\022\r\n\005names\030\002 \003(\t\"\257\010\n\003"
  "Rel\022(\n\004read\030\001 \001(\0132\030.substrait.proto.Read"
  "RelH\000\022,\n\006filter\030\002 \001(\0132\032.substrait.proto."
  "FilterRelH\000\022*\n\005fetch\030\003 \001(\0132\031.substrait.p"
  "roto.FetchRelH\000\0222\n\taggregate\030\004 \001(\0132\035.sub"
  "strait.proto.AggregateRelH\000\022(\n\004sort\030\005 \001("
  "\0132\030.substrait.proto.SortRelH\000\022(\n\004join\030\006 "
  "\001(\0132\030.substrait.proto.JoinRelH\000\022.\n\007proje"
  "ct\030\007 \001(\0132\033.substrait.proto.ProjectRelH\000\022"
  "&\n\003set\030\010 \001(\0132\027.substrait.proto.SetRelH\000\022"
  "\?\n\020extension_single\030\t \001(\0132#.substrait.pr"
  "oto.ExtensionSingleRelH\000\022=\n\017extension_mu"
  "lti\030\n \001(\0132\".substrait.proto.ExtensionMul"
  "tiRelH\000\022;\n\016extension_leaf\030\013 \001(\0132!.substr"
  "ait.proto.ExtensionLeafRelH\000\022*\n\005cross\030\014 "
  "\001(\0132\031.substrait.proto.CrossRelH\000\0222\n\trefe"
  "rence\030\025 \001(\0132\035.substrait.proto.ReferenceR"
  "elH\000\022*\n\005write\030\023 \001(\0132\031.substrait.proto.Wr"
  "iteRelH\000\022&\n\003ddl\030\024 \001(\0132\027.substrait.proto."
  "DdlRelH\000\0221\n\thash_join\030\r \001(\0132\034.substrait."
  "proto.HashJoinRelH\000\0223\n\nmerge_join\030\016 \001(\0132"
  "\035.substrait.proto.MergeJoinRelH\000\022>\n\020nest"
  "ed_loop_join\030\022 \001(\0132\".substrait.proto.Nes"
  "tedLoopJoinRelH\000\022\?\n\006window\030\021 \001(\0132-.subst"
  "rait.proto.ConsistentPartitionWindowRelH"
  "\000\0220\n\010exchange\030\017 \001(\0132\034.substrait.proto.Ex"
  "changeRelH\000\022,\n\006expand\030\020 \001(\0132\032.substrait."
  "proto.ExpandRelH\000B\n\n\010rel_type\"l\n\020NamedOb"
  "jectWrite\022\r\n\005names\030\001 \003(\t\022I\n\022advanced_ext"
  "ension\030\n \001(\0132-.substrait.proto.extension"
  "s.AdvancedExtension\"7\n\017ExtensionObject\022$"
  "\n\006detail\030\001 \001(\0132\024.google.protobuf.Any\"\244\005\n"
  "\006DdlRel\0229\n\014named_object\030\001 \001(\0132!.substrai"
  "t.proto.NamedObjectWriteH\000\022<\n\020extension_"
  "object\030\002 \001(\0132 .substrait.proto.Extension"
  "ObjectH\000\0222\n\014table_schema\030\003 \001(\0132\034.substra"
  "it.proto.NamedStruct\022B\n\016table_defaults\030\004"
  " \001(\0132*.substrait.proto.Expression.Litera"
  "l.Struct\0221\n\006object\030\005 \001(\0162!.substrait.pro"
  "to.DdlRel.DdlObject\022)\n\002op\030\006 \001(\0162\035.substr"
  "ait.proto.DdlRel.DdlOp\022-\n\017view_definitio"
  "n\030\007 \001(\0132\024.substrait.proto.Rel\022*\n\006common\030"
  "\010 \001(\0132\032.substrait.proto.RelCommon\"R\n\tDdl"
  "Object\022\032\n\026DDL_OBJECT_UNSPECIFIED\020\000\022\024\n\020DD"
  "L_OBJECT_TABLE\020\001\022\023\n\017DDL_OBJECT_VIEW\020\002\"\215\001"
  "\n\005DdlOp\022\026\n\022DDL_OP_UNSPECIFIED\020\000\022\021\n\rDDL_O"
  "P_CREATE\020\001\022\034\n\030DDL_OP_CREATE_OR_REPLACE\020\002"
  "\022\020\n\014DDL_OP_ALTER\020\003\022\017\n\013DDL_OP_DROP\020\004\022\030\n\024D"
  "DL_OP_DROP_IF_EXIST\020\005B\014\n\nwrite_type\"\330\004\n\010"
  "WriteRel\0228\n\013named_table\030\001 \001(\0132!.substrai"
  "t.proto.NamedObjectWriteH\000\022;\n\017extension_"
  "table\030\002 \001(\0132 .substrait.proto.ExtensionO"
  "bjectH\000\0222\n\014table_schema\030\003 \001(\0132\034.substrai"
  "t.proto.NamedStruct\022-\n\002op\030\004 \001(\0162!.substr"
  "ait.proto.WriteRel.WriteOp\022#\n\005input\030\005 \001("
  "\0132\024.substrait.proto.Rel\0224\n\006output\030\006 \001(\0162"
  "$.substrait.proto.WriteRel.OutputMode\022*\n"
  "\006common\030\007 \001(\0132\032.substrait.proto.RelCommo"
  "n\"u\n\007WriteOp\022\030\n\024WRITE_OP_UNSPECIFIED\020\000\022\023"
  "\n\017WRITE_OP_INSERT\020\001\022\023\n\017WRITE_OP_DELETE\020\002"
  "\022\023\n\017WRITE_OP_UPDATE\020\003\022\021\n\rWRITE_OP_CTAS\020\004"
  "\"f\n\nOutputMode\022\033\n\027OUTPUT_MODE_UNSPECIFIE"
  "D\020\000\022\031\n\025OUTPUT_MODE_NO_OUTPUT\020\001\022 \n\034OUTPUT"
  "_MODE_MODIFIED_RECORDS\020\002B\014\n\nwrite_type\"\231"
  "\004\n\021ComparisonJoinKey\0228\n\004left\030\001 \001(\0132*.sub"
  "strait.proto.Expression.FieldReference\0229"
  "\n\005right\030\002 \001(\0132*.substrait.proto.Expressi"
  "on.FieldReference\022E\n\ncomparison\030\003 \001(\01321."
  "substrait.proto.ComparisonJoinKey.Compar"
  "isonType\032\216\001\n\016ComparisonType\022I\n\006simple\030\001 "
  "\001(\01627.substrait.proto.ComparisonJoinKey."
  "SimpleComparisonTypeH\000\022#\n\031custom_functio"
  "n_reference\030\002 \001(\rH\000B\014\n\ninner_type\"\266\001\n\024Si"
  "mpleComparisonType\022&\n\"SIMPLE_COMPARISON_"
  "TYPE_UNSPECIFIED\020\000\022\035\n\031SIMPLE_COMPARISON_"
  "TYPE_EQ\020\001\022/\n+SIMPLE_COMPARISON_TYPE_IS_N"
  "OT_DISTINCT_FROM\020\002\022&\n\"SIMPLE_COMPARISON_"
  "TYPE_MIGHT_EQUAL\020\003\"\323\005\n\013HashJoinRel\022*\n\006co"
  "mmon\030\001 \001(\0132\032.substrait.proto.RelCommon\022\""
  "\n\004left\030\002 \001(\0132\024.substrait.proto.Rel\022#\n\005ri"
  "ght\030\003 \001(\0132\024.substrait.proto.Rel\022A\n\tleft_"
  "keys\030\004 \003(\0132*.substrait.proto.Expression."
  "FieldReferenceB\002\030\001\022B\n\nright_keys\030\005 \003(\0132*"
  ".substrait.proto.Expression.FieldReferen"
  "ceB\002\030\001\0220\n\004keys\030\010 \003(\0132\".substrait.proto.C"
  "omparisonJoinKey\0225\n\020post_join_filter\030\006 \001"
  "(\0132\033.substrait.proto.Expression\0223\n\004type\030"
  "\007 \001(\0162%.substrait.proto.HashJoinRel.Join"
  "Type\022I\n\022advanced_extension\030\n \001(\0132-.subst"
  "rait.proto.extensions.AdvancedExtension\""
  "\336\001\n\010JoinType\022\031\n\025JOIN_TYPE_UNSPECIFIED\020\000\022"
  "\023\n\017JOIN_TYPE_INNER\020\001\022\023\n\017JOIN_TYPE_OUTER\020"
  "\002\022\022\n\016JOIN_TYPE_LEFT\020\003\022\023\n\017JOIN_TYPE_RIGHT"
  "\020\004\022\027\n\023JOIN_TYPE_LEFT_SEMI\020\005\022\030\n\024JOIN_TYPE"
  "_RIGHT_SEMI\020\006\022\027\n\023JOIN_TYPE_LEFT_ANTI\020\007\022\030"
  "\n\024JOIN_TYPE_RIGHT_ANTI\020\010\"\325\005\n\014MergeJoinRe"
  "l\022*\n\006common\030\001 \001(\0132\032.substrait.proto.RelC"
  "ommon\022\"\n\004left\030\002 \001(\0132\024.substrait.proto.Re"
  "l\022#\n\005right\030\003 \001(\0132\024.substrait.proto.Rel\022A"
  "\n\tleft_keys\030\004 \003(\0132*.substrait.proto.Expr"
  "ession.FieldReferenceB\002\030\001\022B\n\nright_keys\030"
  "\005 \003(\0132*.substrait.proto.Expression.Field"
  "ReferenceB\002\030\001\0220\n\004keys\030\010 \003(\0132\".substrait."
  "proto.ComparisonJoinKey\0225\n\020post_join_fil"
  "ter\030\006 \001(\0132\033.substrait.proto.Expression\0224"
  "\n\004type\030\007 \001(\0162&.substrait.proto.MergeJoin"
  "Rel.JoinType\022I\n\022advanced_extension\030\n \001(\013"
  "2-.substrait.proto.extensions.AdvancedEx"
  "tension\"\336\001\n\010JoinType\022\031\n\025JOIN_TYPE_UNSPEC"
  "IFIED\020\000\022\023\n\017JOIN_TYPE_INNER\020\001\022\023\n\017JOIN_TYP"
  "E_OUTER\020\002\022\022\n\016JOIN_TYPE_LEFT\020\003\022\023\n\017JOIN_TY"
  "PE_RIGHT\020\004\022\027\n\023JOIN_TYPE_LEFT_SEMI\020\005\022\030\n\024J"
  "OIN_TYPE_RIGHT_SEMI\020\006\022\027\n\023JOIN_TYPE_LEFT_"
  "ANTI\020\007\022\030\n\024JOIN_TYPE_RIGHT_ANTI\020\010\"\240\004\n\021Nes"
  "tedLoopJoinRel\022*\n\006common\030\001 \001(\0132\032.substra"
  "it.proto.RelCommon\022\"\n\004left\030\002 \001(\0132\024.subst"
  "rait.proto.Rel\022#\n\005right\030\003 \001(\0132\024.substrai"
  "t.proto.Rel\022/\n\nexpression\030\004 \001(\0132\033.substr"
  "ait.proto.Expression\0229\n\004type\030\005 \001(\0162+.sub"
  "strait.proto.NestedLoopJoinRel.JoinType\022"
  "I\n\022advanced_extension\030\n \001(\0132-.substrait."
  "proto.extensions.AdvancedExtension\"\336\001\n\010J"
  "oinType\022\031\n\025JOIN_TYPE_UNSPECIFIED\020\000\022\023\n\017JO"
  "IN_TYPE_INNER\020\001\022\023\n\017JOIN_TYPE_OUTER\020\002\022\022\n\016"
  "JOIN_TYPE_LEFT\020\003\022\023\n\017JOIN_TYPE_RIGHT\020\004\022\027\n"
  "\023JOIN_TYPE_LEFT_SEMI\020\005\022\030\n\024JOIN_TYPE_RIGH"
  "T_SEMI\020\006\022\027\n\023JOIN_TYPE_LEFT_ANTI\020\007\022\030\n\024JOI"
  "N_TYPE_RIGHT_ANTI\020\010\"\203\001\n\020FunctionArgument"
  "\022\016\n\004enum\030\001 \001(\tH\000\022%\n\004type\030\002 \001(\0132\025.substra"
  "it.proto.TypeH\000\022,\n\005value\030\003 \001(\0132\033.substra"
  "it.proto.ExpressionH\000B\n\n\010arg_type\"2\n\016Fun"
  "ctionOption\022\014\n\004name\030\001 \001(\t\022\022\n\npreference\030"
  "\002 \003(\t\"\247L\n\nExpression\0226\n\007literal\030\001 \001(\0132#."
  "substrait.proto.Expression.LiteralH\000\022\?\n\t"
  "selection\030\002 \001(\0132*.substrait.proto.Expres"
  "sion.FieldReferenceH\000\022E\n\017scalar_function"
  "\030\003 \001(\0132*.substrait.proto.Expression.Scal"
  "arFunctionH\000\022E\n\017window_function\030\005 \001(\0132*."
  "substrait.proto.Expression.WindowFunctio"
  "nH\000\0225\n\007if_then\030\006 \001(\0132\".substrait.proto.E"
  "xpression.IfThenH\000\022I\n\021switch_expression\030"
  "\007 \001(\0132,.substrait.proto.Expression.Switc"
  "hExpressionH\000\022F\n\020singular_or_list\030\010 \001(\0132"
  "*.substrait.proto.Expression.SingularOrL"
  "istH\000\022@\n\rmulti_or_list\030\t \001(\0132\'.substrait"
  ".proto.Expression.MultiOrListH\000\0220\n\004cast\030"
  "\013 \001(\0132 .substrait.proto.Expression.CastH"
  "\000\0228\n\010subquery\030\014 \001(\0132$.substrait.proto.Ex"
  "pression.SubqueryH\000\0224\n\006nested\030\r \001(\0132\".su"
  "bstrait.proto.Expression.NestedH\000\0224\n\004enu"
  "m\030\n \001(\0132 .substrait.proto.Expression.Enu"
  "mB\002\030\001H\000\032x\n\004Enum\022\023\n\tspecified\030\001 \001(\tH\000\022=\n\013"
  "unspecified\030\002 \001(\0132&.substrait.proto.Expr"
  "ession.Enum.EmptyH\000\032\013\n\005Empty:\002\030\001:\002\030\001B\013\n\t"
  "enum_kind\032\316\r\n\007Literal\022\021\n\007boolean\030\001 \001(\010H\000"
  "\022\014\n\002i8\030\002 \001(\005H\000\022\r\n\003i16\030\003 \001(\005H\000\022\r\n\003i32\030\005 \001"
  "(\005H\000\022\r\n\003i64\030\007 \001(\003H\000\022\016\n\004fp32\030\n \001(\002H\000\022\016\n\004f"
  "p64\030\013 \001(\001H\000\022\020\n\006string\030\014 \001(\tH\000\022\020\n\006binary\030"
  "\r \001(\014H\000\022\023\n\ttimestamp\030\016 \001(\003H\000\022\016\n\004date\030\020 \001"
  "(\005H\000\022\016\n\004time\030\021 \001(\003H\000\022Y\n\026interval_year_to"
  "_month\030\023 \001(\01327.substrait.proto.Expressio"
  "n.Literal.IntervalYearToMonthH\000\022Y\n\026inter"
  "val_day_to_second\030\024 \001(\01327.substrait.prot"
  "o.Expression.Literal.IntervalDayToSecond"
  "H\000\022\024\n\nfixed_char\030\025 \001(\tH\000\022\?\n\010var_char\030\026 \001"
  "(\0132+.substrait.proto.Expression.Literal."
  "VarCharH\000\022\026\n\014fixed_binary\030\027 \001(\014H\000\022>\n\007dec"
  "imal\030\030 \001(\0132+.substrait.proto.Expression."
  "Literal.DecimalH\000\022<\n\006struct\030\031 \001(\0132*.subs"
  "trait.proto.Expression.Literal.StructH\000\022"
  "6\n\003map\030\032 \001(\0132\'.substrait.proto.Expressio"
  "n.Literal.MapH\000\022\026\n\014timestamp_tz\030\033 \001(\003H\000\022"
  "\016\n\004uuid\030\034 \001(\014H\000\022%\n\004null\030\035 \001(\0132\025.substrai"
  "t.proto.TypeH\000\0228\n\004list\030\036 \001(\0132(.substrait"
  ".proto.Expression.Literal.ListH\000\0220\n\nempt"
  "y_list\030\037 \001(\0132\032.substrait.proto.Type.List"
  "H\000\022.\n\tempty_map\030  \001(\0132\031.substrait.proto."
  "Type.MapH\000\022G\n\014user_defined\030! \001(\0132/.subst"
  "rait.proto.Expression.Literal.UserDefine"
  "dH\000\022\020\n\010nullable\0302 \001(\010\022 \n\030type_variation_"
  "reference\0303 \001(\r\032(\n\007VarChar\022\r\n\005value\030\001 \001("
  "\t\022\016\n\006length\030\002 \001(\r\032:\n\007Decimal\022\r\n\005value\030\001 "
  "\001(\014\022\021\n\tprecision\030\002 \001(\005\022\r\n\005scale\030\003 \001(\005\032\275\001"
  "\n\003Map\022D\n\nkey_values\030\001 \003(\01320.substrait.pr"
  "oto.Expression.Literal.Map.KeyValue\032p\n\010K"
  "eyValue\0220\n\003key\030\001 \001(\0132#.substrait.proto.E"
  "xpression.Literal\0222\n\005value\030\002 \001(\0132#.subst"
  "rait.proto.Expression.Literal\0324\n\023Interva"
  "lYearToMonth\022\r\n\005years\030\001 \001(\005\022\016\n\006months\030\002 "
  "\001(\005\032J\n\023IntervalDayToSecond\022\014\n\004days\030\001 \001(\005"
  "\022\017\n\007seconds\030\002 \001(\005\022\024\n\014microseconds\030\003 \001(\005\032"
  "=\n\006Struct\0223\n\006fields\030\001 \003(\0132#.substrait.pr"
  "oto.Expression.Literal\032;\n\004List\0223\n\006values"
  "\030\001 \003(\0132#.substrait.proto.Expression.Lite"
  "ral\032\204\001\n\013UserDefined\022\026\n\016type_reference\030\001 "
  "\001(\r\0228\n\017type_parameters\030\003 \003(\0132\037.substrait"
  ".proto.Type.Parameter\022#\n\005value\030\002 \001(\0132\024.g"
  "oogle.protobuf.AnyB\016\n\014literal_type\032\223\004\n\006N"
  "ested\022\020\n\010nullable\030\001 \001(\010\022 \n\030type_variatio"
  "n_reference\030\002 \001(\r\022;\n\006struct\030\003 \001(\0132).subs"
  "trait.proto.Expression.Nested.StructH\000\0227"
  "\n\004list\030\004 \001(\0132\'.substrait.proto.Expressio"
  "n.Nested.ListH\000\0225\n\003map\030\005 \001(\0132&.substrait"
  ".proto.Expression.Nested.MapH\000\032\254\001\n\003Map\022C"
  "\n\nkey_values\030\001 \003(\0132/.substrait.proto.Exp"
  "ression.Nested.Map.KeyValue\032`\n\010KeyValue\022"
  "(\n\003key\030\001 \001(\0132\033.substrait.proto.Expressio"
  "n\022*\n\005value\030\002 \001(\0132\033.substrait.proto.Expre"
  "ssion\0325\n\006Struct\022+\n\006fields\030\001 \003(\0132\033.substr"
  "ait.proto.Expression\0323\n\004List\022+\n\006values\030\001"
  " \003(\0132\033.substrait.proto.ExpressionB\r\n\013nes"
  "ted_type\032\357\001\n\016ScalarFunction\022\032\n\022function_"
  "reference\030\001 \001(\r\0224\n\targuments\030\004 \003(\0132!.sub"
  "strait.proto.FunctionArgument\0220\n\007options"
  "\030\005 \003(\0132\037.substrait.proto.FunctionOption\022"
  "*\n\013output_type\030\003 \001(\0132\025.substrait.proto.T"
  "ype\022-\n\004args\030\002 \003(\0132\033.substrait.proto.Expr"
  "essionB\002\030\001\032\253\t\n\016WindowFunction\022\032\n\022functio"
  "n_reference\030\001 \001(\r\0224\n\targuments\030\t \003(\0132!.s"
  "ubstrait.proto.FunctionArgument\0220\n\007optio"
  "ns\030\013 \003(\0132\037.substrait.proto.FunctionOptio"
  "n\022*\n\013output_type\030\007 \001(\0132\025.substrait.proto"
  ".Type\0220\n\005phase\030\006 \001(\0162!.substrait.proto.A"
  "ggregationPhase\022)\n\005sorts\030\003 \003(\0132\032.substra"
  "it.proto.SortField\022L\n\ninvocation\030\n \001(\01628"
  ".substrait.proto.AggregateFunction.Aggre"
  "gationInvocation\022/\n\npartitions\030\002 \003(\0132\033.s"
  "ubstrait.proto.Expression\022J\n\013bounds_type"
  "\030\014 \001(\01625.substrait.proto.Expression.Wind"
  "owFunction.BoundsType\022E\n\013lower_bound\030\005 \001"
  "(\01320.substrait.proto.Expression.WindowFu"
  "nction.Bound\022E\n\013upper_bound\030\004 \001(\01320.subs"
  "trait.proto.Expression.WindowFunction.Bo"
  "und\022-\n\004args\030\010 \003(\0132\033.substrait.proto.Expr"
  "essionB\002\030\001\032\253\003\n\005Bound\022O\n\tpreceding\030\001 \001(\0132"
  ":.substrait.proto.Expression.WindowFunct"
  "ion.Bound.PrecedingH\000\022O\n\tfollowing\030\002 \001(\013"
  "2:.substrait.proto.Expression.WindowFunc"
  "tion.Bound.FollowingH\000\022R\n\013current_row\030\003 "
  "\001(\0132;.substrait.proto.Expression.WindowF"
  "unction.Bound.CurrentRowH\000\022O\n\tunbounded\030"
  "\004 \001(\0132:.substrait.proto.Expression.Windo"
  "wFunction.Bound.UnboundedH\000\032\033\n\tPreceding"
  "\022\016\n\006offset\030\001 \001(\003\032\033\n\tFollowing\022\016\n\006offset\030"
  "\001 \001(\003\032\014\n\nCurrentRow\032\013\n\tUnboundedB\006\n\004kind"
  "\"V\n\nBoundsType\022\033\n\027BOUNDS_TYPE_UNSPECIFIE"
  "D\020\000\022\024\n\020BOUNDS_TYPE_ROWS\020\001\022\025\n\021BOUNDS_TYPE"
  "_RANGE\020\002\032\315\001\n\006IfThen\0228\n\003ifs\030\001 \003(\0132+.subst"
  "rait.proto.Expression.IfThen.IfClause\022)\n"
  "\004else\030\002 \001(\0132\033.substrait.proto.Expression"
  "\032^\n\010IfClause\022\'\n\002if\030\001 \001(\0132\033.substrait.pro"
  "to.Expression\022)\n\004then\030\002 \001(\0132\033.substrait."
  "proto.Expression\032\240\002\n\004Cast\022#\n\004type\030\001 \001(\0132"
  "\025.substrait.proto.Type\022*\n\005input\030\002 \001(\0132\033."
  "substrait.proto.Expression\022J\n\020failure_be"
  "havior\030\003 \001(\01620.substrait.proto.Expressio"
  "n.Cast.FailureBehavior\"{\n\017FailureBehavio"
  "r\022 \n\034FAILURE_BEHAVIOR_UNSPECIFIED\020\000\022 \n\034F"
  "AILURE_BEHAVIOR_RETURN_NULL\020\001\022$\n FAILURE"
  "_BEHAVIOR_THROW_EXCEPTION\020\002\032\223\002\n\020SwitchEx"
  "pression\022*\n\005match\030\003 \001(\0132\033.substrait.prot"
  "o.Expression\022A\n\003ifs\030\001 \003(\01324.substrait.pr"
  "oto.Expression.SwitchExpression.IfValue\022"
  ")\n\004else\030\002 \001(\0132\033.substrait.proto.Expressi"
  "on\032e\n\007IfValue\022/\n\002if\030\001 \001(\0132#.substrait.pr"
  "oto.Expression.Literal\022)\n\004then\030\002 \001(\0132\033.s"
  "ubstrait.proto.Expression\032j\n\016SingularOrL"
  "ist\022*\n\005value\030\001 \001(\0132\033.substrait.proto.Exp"
  "ression\022,\n\007options\030\002 \003(\0132\033.substrait.pro"
  "to.Expression\032\261\001\n\013MultiOrList\022*\n\005value\030\001"
  " \003(\0132\033.substrait.proto.Expression\022\?\n\007opt"
  "ions\030\002 \003(\0132..substrait.proto.Expression."
  "MultiOrList.Record\0325\n\006Record\022+\n\006fields\030\001"
  " \003(\0132\033.substrait.proto.Expression\032\273\003\n\020Em"
  "beddedFunction\022.\n\targuments\030\001 \003(\0132\033.subs"
  "trait.proto.Expression\022*\n\013output_type\030\002 "
  "\001(\0132\025.substrait.proto.Type\022c\n\026python_pic"
  "kle_function\030\003 \001(\0132A.substrait.proto.Exp"
  "ression.EmbeddedFunction.PythonPickleFun"
  "ctionH\000\022a\n\025web_assembly_function\030\004 \001(\0132@"
  ".substrait.proto.Expression.EmbeddedFunc"
  "tion.WebAssemblyFunctionH\000\032>\n\024PythonPick"
  "leFunction\022\020\n\010function\030\001 \001(\014\022\024\n\014prerequi"
  "site\030\002 \003(\t\032;\n\023WebAssemblyFunction\022\016\n\006scr"
  "ipt\030\001 \001(\014\022\024\n\014prerequisite\030\002 \003(\tB\006\n\004kind\032"
  "\304\004\n\020ReferenceSegment\022F\n\007map_key\030\001 \001(\01323."
  "substrait.proto.Expression.ReferenceSegm"
  "ent.MapKeyH\000\022P\n\014struct_field\030\002 \001(\01328.sub"
  "strait.proto.Expression.ReferenceSegment"
  ".StructFieldH\000\022P\n\014list_element\030\003 \001(\01328.s"
  "ubstrait.proto.Expression.ReferenceSegme"
  "nt.ListElementH\000\032{\n\006MapKey\0224\n\007map_key\030\001 "
  "\001(\0132#.substrait.proto.Expression.Literal"
  "\022;\n\005child\030\002 \001(\0132,.substrait.proto.Expres"
  "sion.ReferenceSegment\032Y\n\013StructField\022\r\n\005"
  "field\030\001 \001(\005\022;\n\005child\030\002 \001(\0132,.substrait.p"
  "roto.Expression.ReferenceSegment\032Z\n\013List"
  "Element\022\016\n\006offset\030\001 \001(\005\022;\n\005child\030\002 \001(\0132,"
  ".substrait.proto.Expression.ReferenceSeg"
  "mentB\020\n\016reference_type\032\276\n\n\016MaskExpressio"
  "n\022G\n\006select\030\001 \001(\01327.substrait.proto.Expr"
  "ession.MaskExpression.StructSelect\022 \n\030ma"
  "intain_singular_struct\030\002 \001(\010\032\347\001\n\006Select\022"
  "I\n\006struct\030\001 \001(\01327.substrait.proto.Expres"
  "sion.MaskExpression.StructSelectH\000\022E\n\004li"
  "st\030\002 \001(\01325.substrait.proto.Expression.Ma"
  "skExpression.ListSelectH\000\022C\n\003map\030\003 \001(\01324"
  ".substrait.proto.Expression.MaskExpressi"
  "on.MapSelectH\000B\006\n\004type\032[\n\014StructSelect\022K"
  "\n\014struct_items\030\001 \003(\01325.substrait.proto.E"
  "xpression.MaskExpression.StructItem\032]\n\nS"
  "tructItem\022\r\n\005field\030\001 \001(\005\022@\n\005child\030\002 \001(\0132"
  "1.substrait.proto.Expression.MaskExpress"
  "ion.Select\032\314\003\n\nListSelect\022W\n\tselection\030\001"
  " \003(\0132D.substrait.proto.Expression.MaskEx"
  "pression.ListSelect.ListSelectItem\022@\n\005ch"
  "ild\030\002 \001(\01321.substrait.proto.Expression.M"
  "askExpression.Select\032\242\002\n\016ListSelectItem\022"
  "`\n\004item\030\001 \001(\0132P.substrait.proto.Expressi"
  "on.MaskExpression.ListSelect.ListSelectI"
  "tem.ListElementH\000\022_\n\005slice\030\002 \001(\0132N.subst"
  "rait.proto.Expression.MaskExpression.Lis"
  "tSelect.ListSelectItem.ListSliceH\000\032\034\n\013Li"
  "stElement\022\r\n\005field\030\001 \001(\005\032\'\n\tListSlice\022\r\n"
  "\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005B\006\n\004type\032\313\002\n\tMa"
  "pSelect\022J\n\003key\030\001 \001(\0132;.substrait.proto.E"
  "xpression.MaskExpression.MapSelect.MapKe"
  "yH\000\022[\n\nexpression\030\002 \001(\0132E.substrait.prot"
  "o.Expression.MaskExpression.MapSelect.Ma"
  "pKeyExpressionH\000\022@\n\005child\030\003 \001(\01321.substr"
  "ait.proto.Expression.MaskExpression.Sele"
  "ct\032\031\n\006MapKey\022\017\n\007map_key\030\001 \001(\t\032.\n\020MapKeyE"
  "xpression\022\032\n\022map_key_expression\030\001 \001(\tB\010\n"
  "\006select\032\324\003\n\016FieldReference\022H\n\020direct_ref"
  "erence\030\001 \001(\0132,.substrait.proto.Expressio"
  "n.ReferenceSegmentH\000\022F\n\020masked_reference"
  "\030\002 \001(\0132*.substrait.proto.Expression.Mask"
  "ExpressionH\000\0221\n\nexpression\030\003 \001(\0132\033.subst"
  "rait.proto.ExpressionH\001\022R\n\016root_referenc"
  "e\030\004 \001(\01328.substrait.proto.Expression.Fie"
  "ldReference.RootReferenceH\001\022T\n\017outer_ref"
  "erence\030\005 \001(\01329.substrait.proto.Expressio"
  "n.FieldReference.OuterReferenceH\001\032\017\n\rRoo"
  "tReference\032#\n\016OuterReference\022\021\n\tsteps_ou"
  "t\030\001 \001(\rB\020\n\016reference_typeB\013\n\troot_type\032\332"
  "\t\n\010Subquery\022=\n\006scalar\030\001 \001(\0132+.substrait."
  "proto.Expression.Subquery.ScalarH\000\022H\n\014in"
  "_predicate\030\002 \001(\01320.substrait.proto.Expre"
  "ssion.Subquery.InPredicateH\000\022J\n\rset_pred"
  "icate\030\003 \001(\01321.substrait.proto.Expression"
  ".Subquery.SetPredicateH\000\022L\n\016set_comparis"
  "on\030\004 \001(\01322.substrait.proto.Expression.Su"
  "bquery.SetComparisonH\000\032-\n\006Scalar\022#\n\005inpu"
  "t\030\001 \001(\0132\024.substrait.proto.Rel\032c\n\013InPredi"
  "cate\022,\n\007needles\030\001 \003(\0132\033.substrait.proto."
  "Expression\022&\n\010haystack\030\002 \001(\0132\024.substrait"
  ".proto.Rel\032\350\001\n\014SetPredicate\022S\n\014predicate"
  "_op\030\001 \001(\0162=.substrait.proto.Expression.S"
  "ubquery.SetPredicate.PredicateOp\022$\n\006tupl"
  "es\030\002 \001(\0132\024.substrait.proto.Rel\"]\n\013Predic"
  "ateOp\022\034\n\030PREDICATE_OP_UNSPECIFIED\020\000\022\027\n\023P"
  "REDICATE_OP_EXISTS\020\001\022\027\n\023PREDICATE_OP_UNI"
  "QUE\020\002\032\232\004\n\rSetComparison\022T\n\014reduction_op\030"
  "\001 \001(\0162>.substrait.proto.Expression.Subqu"
  "ery.SetComparison.ReductionOp\022V\n\rcompari"
  "son_op\030\002 \001(\0162\?.substrait.proto.Expressio"
  "n.Subquery.SetComparison.ComparisonOp\022)\n"
  "\004left\030\003 \001(\0132\033.substrait.proto.Expression"
  "\022#\n\005right\030\004 \001(\0132\024.substrait.proto.Rel\"\261\001"
  "\n\014ComparisonOp\022\035\n\031COMPARISON_OP_UNSPECIF"
  "IED\020\000\022\024\n\020COMPARISON_OP_EQ\020\001\022\024\n\020COMPARISO"
  "N_OP_NE\020\002\022\024\n\020COMPARISON_OP_LT\020\003\022\024\n\020COMPA"
  "RISON_OP_GT\020\004\022\024\n\020COMPARISON_OP_LE\020\005\022\024\n\020C"
  "OMPARISON_OP_GE\020\006\"W\n\013ReductionOp\022\034\n\030REDU"
  "CTION_OP_UNSPECIFIED\020\000\022\024\n\020REDUCTION_OP_A"
  "NY\020\001\022\024\n\020REDUCTION_OP_ALL\020\002B\017\n\rsubquery_t"
  "ypeB\n\n\010rex_type\"\213\003\n\tSortField\022)\n\004expr\030\001 "
  "\001(\0132\033.substrait.proto.Expression\022=\n\tdire"
  "ction\030\002 \001(\0162(.substrait.proto.SortField."
  "SortDirectionH\000\022\'\n\035comparison_function_r"
  "eference\030\003 \001(\rH\000\"\335\001\n\rSortDirection\022\036\n\032SO"
  "RT_DIRECTION_UNSPECIFIED\020\000\022\"\n\036SORT_DIREC"
  "TION_ASC_NULLS_FIRST\020\001\022!\n\035SORT_DIRECTION"
  "_ASC_NULLS_LAST\020\002\022#\n\037SORT_DIRECTION_DESC"
  "_NULLS_FIRST\020\003\022\"\n\036SORT_DIRECTION_DESC_NU"
  "LLS_LAST\020\004\022\034\n\030SORT_DIRECTION_CLUSTERED\020\005"
  "B\013\n\tsort_kind\"\244\004\n\021AggregateFunction\022\032\n\022f"
  "unction_reference\030\001 \001(\r\0224\n\targuments\030\007 \003"
  "(\0132!.substrait.proto.FunctionArgument\0220\n"
  "\007options\030\010 \003(\0132\037.substrait.proto.Functio"
  "nOption\022*\n\013output_type\030\005 \001(\0132\025.substrait"
  ".proto.Type\0220\n\005phase\030\004 \001(\0162!.substrait.p"
  "roto.AggregationPhase\022)\n\005sorts\030\003 \003(\0132\032.s"
  "ubstrait.proto.SortField\022L\n\ninvocation\030\006"
  " \001(\01628.substrait.proto.AggregateFunction"
  ".AggregationInvocation\022-\n\004args\030\002 \003(\0132\033.s"
  "ubstrait.proto.ExpressionB\002\030\001\"\204\001\n\025Aggreg"
  "ationInvocation\022&\n\"AGGREGATION_INVOCATIO"
  "N_UNSPECIFIED\020\000\022\036\n\032AGGREGATION_INVOCATIO"
  "N_ALL\020\001\022#\n\037AGGREGATION_INVOCATION_DISTIN"
  "CT\020\002\"\'\n\014ReferenceRel\022\027\n\017subtree_ordinal\030"
  "\001 \001(\005*\357\001\n\020AggregationPhase\022!\n\035AGGREGATIO"
  "N_PHASE_UNSPECIFIED\020\000\022-\n)AGGREGATION_PHA"
  "SE_INITIAL_TO_INTERMEDIATE\020\001\0222\n.AGGREGAT"
  "ION_PHASE_INTERMEDIATE_TO_INTERMEDIATE\020\002"
  "\022\'\n#AGGREGATION_PHASE_INITIAL_TO_RESULT\020"
  "\003\022,\n(AGGREGATION_PHASE_INTERMEDIATE_TO_R"
  "ESULT\020\004BW\n\022io.substrait.protoP\001Z*github."
  "com/substrait-io/substrait-go/proto\252\002\022Su"
  "bstrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2falgebra_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto,
  &::descriptor_table_substrait_2fproto_2ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2falgebra_2eproto_sccs[52] = {
  &scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto.base,
  &scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2falgebra_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2falgebra_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2falgebra_2eproto, "substrait/proto/algebra.proto", 24144,
  &descriptor_table_substrait_2fproto_2falgebra_2eproto_once, descriptor_table_substrait_2fproto_2falgebra_2eproto_sccs, descriptor_table_substrait_2fproto_2falgebra_2eproto_deps, 52, 3,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2falgebra_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2falgebra_2eproto, 116, file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto, file_level_service_descriptors_substrait_2fproto_2falgebra_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2falgebra_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto)), true);
namespace substrait {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[0];
}
bool JoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_INNER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_OUTER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_LEFT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_RIGHT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SEMI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_ANTI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SINGLE;
constexpr JoinRel_JoinType JoinRel::JoinType_MIN;
constexpr JoinRel_JoinType JoinRel::JoinType_MAX;
constexpr int JoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[1];
}
bool SetRel_SetOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetRel_SetOp SetRel::SET_OP_UNSPECIFIED;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_DISTINCT;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_ALL;
constexpr SetRel_SetOp SetRel::SetOp_MIN;
constexpr SetRel_SetOp SetRel::SetOp_MAX;
constexpr int SetRel::SetOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlObject_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[2];
}
bool DdlRel_DdlObject_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_UNSPECIFIED;
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_TABLE;
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_VIEW;
constexpr DdlRel_DdlObject DdlRel::DdlObject_MIN;
constexpr DdlRel_DdlObject DdlRel::DdlObject_MAX;
constexpr int DdlRel::DdlObject_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[3];
}
bool DdlRel_DdlOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DdlRel_DdlOp DdlRel::DDL_OP_UNSPECIFIED;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_CREATE;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_CREATE_OR_REPLACE;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_ALTER;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_DROP;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_DROP_IF_EXIST;
constexpr DdlRel_DdlOp DdlRel::DdlOp_MIN;
constexpr DdlRel_DdlOp DdlRel::DdlOp_MAX;
constexpr int DdlRel::DdlOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_WriteOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[4];
}
bool WriteRel_WriteOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_UNSPECIFIED;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_INSERT;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_DELETE;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_UPDATE;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_CTAS;
constexpr WriteRel_WriteOp WriteRel::WriteOp_MIN;
constexpr WriteRel_WriteOp WriteRel::WriteOp_MAX;
constexpr int WriteRel::WriteOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_OutputMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[5];
}
bool WriteRel_OutputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_UNSPECIFIED;
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_NO_OUTPUT;
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_MODIFIED_RECORDS;
constexpr WriteRel_OutputMode WriteRel::OutputMode_MIN;
constexpr WriteRel_OutputMode WriteRel::OutputMode_MAX;
constexpr int WriteRel::OutputMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonJoinKey_SimpleComparisonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[6];
}
bool ComparisonJoinKey_SimpleComparisonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SIMPLE_COMPARISON_TYPE_UNSPECIFIED;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SIMPLE_COMPARISON_TYPE_EQ;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SIMPLE_COMPARISON_TYPE_IS_NOT_DISTINCT_FROM;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SIMPLE_COMPARISON_TYPE_MIGHT_EQUAL;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SimpleComparisonType_MIN;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey::SimpleComparisonType_MAX;
constexpr int ComparisonJoinKey::SimpleComparisonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashJoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[7];
}
bool HashJoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_INNER;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_OUTER;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_LEFT;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_RIGHT;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_LEFT_SEMI;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_RIGHT_SEMI;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_LEFT_ANTI;
constexpr HashJoinRel_JoinType HashJoinRel::JOIN_TYPE_RIGHT_ANTI;
constexpr HashJoinRel_JoinType HashJoinRel::JoinType_MIN;
constexpr HashJoinRel_JoinType HashJoinRel::JoinType_MAX;
constexpr int HashJoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeJoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[8];
}
bool MergeJoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_INNER;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_OUTER;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_LEFT;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_RIGHT;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_LEFT_SEMI;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_RIGHT_SEMI;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_LEFT_ANTI;
constexpr MergeJoinRel_JoinType MergeJoinRel::JOIN_TYPE_RIGHT_ANTI;
constexpr MergeJoinRel_JoinType MergeJoinRel::JoinType_MIN;
constexpr MergeJoinRel_JoinType MergeJoinRel::JoinType_MAX;
constexpr int MergeJoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NestedLoopJoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[9];
}
bool NestedLoopJoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_INNER;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_OUTER;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_LEFT;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_RIGHT;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_LEFT_SEMI;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_RIGHT_SEMI;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_LEFT_ANTI;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JOIN_TYPE_RIGHT_ANTI;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JoinType_MIN;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel::JoinType_MAX;
constexpr int NestedLoopJoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_WindowFunction_BoundsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[10];
}
bool Expression_WindowFunction_BoundsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction::BOUNDS_TYPE_UNSPECIFIED;
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction::BOUNDS_TYPE_ROWS;
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction::BOUNDS_TYPE_RANGE;
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction::BoundsType_MIN;
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction::BoundsType_MAX;
constexpr int Expression_WindowFunction::BoundsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Cast_FailureBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[11];
}
bool Expression_Cast_FailureBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_UNSPECIFIED;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_RETURN_NULL;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_THROW_EXCEPTION;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FailureBehavior_MIN;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FailureBehavior_MAX;
constexpr int Expression_Cast::FailureBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetPredicate_PredicateOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[12];
}
bool Expression_Subquery_SetPredicate_PredicateOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_EXISTS;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_UNIQUE;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PredicateOp_MIN;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PredicateOp_MAX;
constexpr int Expression_Subquery_SetPredicate::PredicateOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ComparisonOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[13];
}
bool Expression_Subquery_SetComparison_ComparisonOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_EQ;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_NE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_LT;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_GT;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_LE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_GE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::ComparisonOp_MIN;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::ComparisonOp_MAX;
constexpr int Expression_Subquery_SetComparison::ComparisonOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ReductionOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[14];
}
bool Expression_Subquery_SetComparison_ReductionOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_ANY;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_ALL;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::ReductionOp_MIN;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::ReductionOp_MAX;
constexpr int Expression_Subquery_SetComparison::ReductionOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortField_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[15];
}
bool SortField_SortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SortField_SortDirection SortField::SORT_DIRECTION_UNSPECIFIED;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_ASC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_ASC_NULLS_LAST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_DESC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_DESC_NULLS_LAST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_CLUSTERED;
constexpr SortField_SortDirection SortField::SortDirection_MIN;
constexpr SortField_SortDirection SortField::SortDirection_MAX;
constexpr int SortField::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregateFunction_AggregationInvocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[16];
}
bool AggregateFunction_AggregationInvocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_UNSPECIFIED;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_ALL;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_DISTINCT;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AggregationInvocation_MIN;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AggregationInvocation_MAX;
constexpr int AggregateFunction::AggregationInvocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2falgebra_2eproto[17];
}
bool AggregationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RelCommon_Direct::InitAsDefaultInstance() {
}
class RelCommon_Direct::_Internal {
 public:
};

RelCommon_Direct::RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon.Direct)
}
RelCommon_Direct::RelCommon_Direct(const RelCommon_Direct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon.Direct)
}

void RelCommon_Direct::SharedCtor() {
}

RelCommon_Direct::~RelCommon_Direct() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon.Direct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Direct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_Direct::ArenaDtor(void* object) {
  RelCommon_Direct* _this = reinterpret_cast< RelCommon_Direct* >(object);
  (void)_this;
}
void RelCommon_Direct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Direct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon_Direct& RelCommon_Direct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_Direct_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon_Direct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon.Direct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Direct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Direct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon.Direct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon.Direct)
  return target;
}

size_t RelCommon_Direct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon.Direct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Direct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon.Direct)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Direct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Direct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon.Direct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon.Direct)
    MergeFrom(*source);
  }
}

void RelCommon_Direct::MergeFrom(const RelCommon_Direct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon.Direct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RelCommon_Direct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon.Direct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Direct::CopyFrom(const RelCommon_Direct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon.Direct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Direct::IsInitialized() const {
  return true;
}

void RelCommon_Direct::InternalSwap(RelCommon_Direct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Direct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelCommon_Emit::InitAsDefaultInstance() {
}
class RelCommon_Emit::_Internal {
 public:
};

RelCommon_Emit::RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon.Emit)
}
RelCommon_Emit::RelCommon_Emit(const RelCommon_Emit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_mapping_(from.output_mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon.Emit)
}

void RelCommon_Emit::SharedCtor() {
}

RelCommon_Emit::~RelCommon_Emit() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon.Emit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Emit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelCommon_Emit::ArenaDtor(void* object) {
  RelCommon_Emit* _this = reinterpret_cast< RelCommon_Emit* >(object);
  (void)_this;
}
void RelCommon_Emit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Emit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon_Emit& RelCommon_Emit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_Emit_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon_Emit::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon.Emit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_mapping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Emit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 output_mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Emit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon.Emit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    int byte_size = _output_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_output_mapping(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon.Emit)
  return target;
}

size_t RelCommon_Emit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon.Emit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Emit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Emit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Emit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon.Emit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon.Emit)
    MergeFrom(*source);
  }
}

void RelCommon_Emit::MergeFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_mapping_.MergeFrom(from.output_mapping_);
}

void RelCommon_Emit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Emit::CopyFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Emit::IsInitialized() const {
  return true;
}

void RelCommon_Emit::InternalSwap(RelCommon_Emit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_mapping_.InternalSwap(&other->output_mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Emit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelCommon_Hint_Stats::InitAsDefaultInstance() {
  ::substrait::proto::_RelCommon_Hint_Stats_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class RelCommon_Hint_Stats::_Internal {
 public:
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_Stats* msg);
};

const ::substrait::proto::extensions::AdvancedExtension&
RelCommon_Hint_Stats::_Internal::advanced_extension(const RelCommon_Hint_Stats* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint_Stats::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon.Hint.Stats)
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_size_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon.Hint.Stats)
}

void RelCommon_Hint_Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&advanced_extension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_size_) -
      reinterpret_cast<char*>(&advanced_extension_)) + sizeof(record_size_));
}

RelCommon_Hint_Stats::~RelCommon_Hint_Stats() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon.Hint.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint_Stats::ArenaDtor(void* object) {
  RelCommon_Hint_Stats* _this = reinterpret_cast< RelCommon_Hint_Stats* >(object);
  (void)_this;
}
void RelCommon_Hint_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon_Hint_Stats& RelCommon_Hint_Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_Hint_Stats_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon_Hint_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon.Hint.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_size_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double record_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          record_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon.Hint.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double row_count = 1;
  if (!(this->row_count() <= 0 && this->row_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_row_count(), target);
  }

  // double record_size = 2;
  if (!(this->record_size() <= 0 && this->record_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_record_size(), target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon.Hint.Stats)
  return target;
}

size_t RelCommon_Hint_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon.Hint.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // double row_count = 1;
  if (!(this->row_count() <= 0 && this->row_count() >= 0)) {
    total_size += 1 + 8;
  }

  // double record_size = 2;
  if (!(this->record_size() <= 0 && this->record_size() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon.Hint.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon.Hint.Stats)
    MergeFrom(*source);
  }
}

void RelCommon_Hint_Stats::MergeFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (!(from.row_count() <= 0 && from.row_count() >= 0)) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (!(from.record_size() <= 0 && from.record_size() >= 0)) {
    _internal_set_record_size(from._internal_record_size());
  }
}

void RelCommon_Hint_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint_Stats::CopyFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_Stats::IsInitialized() const {
  return true;
}

void RelCommon_Hint_Stats::InternalSwap(RelCommon_Hint_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, record_size_)
      + sizeof(RelCommon_Hint_Stats::record_size_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, advanced_extension_)>(
          reinterpret_cast<char*>(&advanced_extension_),
          reinterpret_cast<char*>(&other->advanced_extension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelCommon_Hint_RuntimeConstraint::InitAsDefaultInstance() {
  ::substrait::proto::_RelCommon_Hint_RuntimeConstraint_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class RelCommon_Hint_RuntimeConstraint::_Internal {
 public:
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg);
};

const ::substrait::proto::extensions::AdvancedExtension&
RelCommon_Hint_RuntimeConstraint::_Internal::advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint_RuntimeConstraint::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon.Hint.RuntimeConstraint)
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon.Hint.RuntimeConstraint)
}

void RelCommon_Hint_RuntimeConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto.base);
  advanced_extension_ = nullptr;
}

RelCommon_Hint_RuntimeConstraint::~RelCommon_Hint_RuntimeConstraint() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint_RuntimeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint_RuntimeConstraint::ArenaDtor(void* object) {
  RelCommon_Hint_RuntimeConstraint* _this = reinterpret_cast< RelCommon_Hint_RuntimeConstraint* >(object);
  (void)_this;
}
void RelCommon_Hint_RuntimeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_RuntimeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon_Hint_RuntimeConstraint& RelCommon_Hint_RuntimeConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_Hint_RuntimeConstraint_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon_Hint_RuntimeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_RuntimeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint_RuntimeConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  return target;
}

size_t RelCommon_Hint_RuntimeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint_RuntimeConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint_RuntimeConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint_RuntimeConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon.Hint.RuntimeConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon.Hint.RuntimeConstraint)
    MergeFrom(*source);
  }
}

void RelCommon_Hint_RuntimeConstraint::MergeFrom(const RelCommon_Hint_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void RelCommon_Hint_RuntimeConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint_RuntimeConstraint::CopyFrom(const RelCommon_Hint_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon.Hint.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_RuntimeConstraint::IsInitialized() const {
  return true;
}

void RelCommon_Hint_RuntimeConstraint::InternalSwap(RelCommon_Hint_RuntimeConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_RuntimeConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelCommon_Hint::InitAsDefaultInstance() {
  ::substrait::proto::_RelCommon_Hint_default_instance_._instance.get_mutable()->stats_ = const_cast< ::substrait::proto::RelCommon_Hint_Stats*>(
      ::substrait::proto::RelCommon_Hint_Stats::internal_default_instance());
  ::substrait::proto::_RelCommon_Hint_default_instance_._instance.get_mutable()->constraint_ = const_cast< ::substrait::proto::RelCommon_Hint_RuntimeConstraint*>(
      ::substrait::proto::RelCommon_Hint_RuntimeConstraint::internal_default_instance());
  ::substrait::proto::_RelCommon_Hint_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class RelCommon_Hint::_Internal {
 public:
  static const ::substrait::proto::RelCommon_Hint_Stats& stats(const RelCommon_Hint* msg);
  static const ::substrait::proto::RelCommon_Hint_RuntimeConstraint& constraint(const RelCommon_Hint* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint* msg);
};

const ::substrait::proto::RelCommon_Hint_Stats&
RelCommon_Hint::_Internal::stats(const RelCommon_Hint* msg) {
  return *msg->stats_;
}
const ::substrait::proto::RelCommon_Hint_RuntimeConstraint&
RelCommon_Hint::_Internal::constraint(const RelCommon_Hint* msg) {
  return *msg->constraint_;
}
const ::substrait::proto::extensions::AdvancedExtension&
RelCommon_Hint::_Internal::advanced_extension(const RelCommon_Hint* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint::RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon.Hint)
}
RelCommon_Hint::RelCommon_Hint(const RelCommon_Hint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::substrait::proto::RelCommon_Hint_Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_constraint()) {
    constraint_ = new ::substrait::proto::RelCommon_Hint_RuntimeConstraint(*from.constraint_);
  } else {
    constraint_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon.Hint)
}

void RelCommon_Hint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(advanced_extension_));
}

RelCommon_Hint::~RelCommon_Hint() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon.Hint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon_Hint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete constraint_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint::ArenaDtor(void* object) {
  RelCommon_Hint* _this = reinterpret_cast< RelCommon_Hint* >(object);
  (void)_this;
}
void RelCommon_Hint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon_Hint& RelCommon_Hint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_Hint_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon_Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  if (GetArena() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon.Hint.Stats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelCommon.Hint.RuntimeConstraint constraint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon_Hint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon.Hint.Stats stats = 1;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stats(this), target, stream);
  }

  // .substrait.proto.RelCommon.Hint.RuntimeConstraint constraint = 2;
  if (this->has_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraint(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon.Hint)
  return target;
}

size_t RelCommon_Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon.Hint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon.Hint.Stats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .substrait.proto.RelCommon.Hint.RuntimeConstraint constraint = 2;
  if (this->has_constraint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon_Hint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon_Hint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon_Hint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon.Hint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon.Hint)
    MergeFrom(*source);
  }
}

void RelCommon_Hint::MergeFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stats()) {
    _internal_mutable_stats()->::substrait::proto::RelCommon_Hint_Stats::MergeFrom(from._internal_stats());
  }
  if (from.has_constraint()) {
    _internal_mutable_constraint()->::substrait::proto::RelCommon_Hint_RuntimeConstraint::MergeFrom(from._internal_constraint());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void RelCommon_Hint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon_Hint::CopyFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint::IsInitialized() const {
  return true;
}

void RelCommon_Hint::InternalSwap(RelCommon_Hint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint, advanced_extension_)
      + sizeof(RelCommon_Hint::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelCommon::InitAsDefaultInstance() {
  ::substrait::proto::_RelCommon_default_instance_.direct_ = const_cast< ::substrait::proto::RelCommon_Direct*>(
      ::substrait::proto::RelCommon_Direct::internal_default_instance());
  ::substrait::proto::_RelCommon_default_instance_.emit_ = const_cast< ::substrait::proto::RelCommon_Emit*>(
      ::substrait::proto::RelCommon_Emit::internal_default_instance());
  ::substrait::proto::_RelCommon_default_instance_._instance.get_mutable()->hint_ = const_cast< ::substrait::proto::RelCommon_Hint*>(
      ::substrait::proto::RelCommon_Hint::internal_default_instance());
  ::substrait::proto::_RelCommon_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class RelCommon::_Internal {
 public:
  static const ::substrait::proto::RelCommon_Direct& direct(const RelCommon* msg);
  static const ::substrait::proto::RelCommon_Emit& emit(const RelCommon* msg);
  static const ::substrait::proto::RelCommon_Hint& hint(const RelCommon* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const RelCommon* msg);
};

const ::substrait::proto::RelCommon_Direct&
RelCommon::_Internal::direct(const RelCommon* msg) {
  return *msg->emit_kind_.direct_;
}
const ::substrait::proto::RelCommon_Emit&
RelCommon::_Internal::emit(const RelCommon* msg) {
  return *msg->emit_kind_.emit_;
}
const ::substrait::proto::RelCommon_Hint&
RelCommon::_Internal::hint(const RelCommon* msg) {
  return *msg->hint_;
}
const ::substrait::proto::extensions::AdvancedExtension&
RelCommon::_Internal::advanced_extension(const RelCommon* msg) {
  return *msg->advanced_extension_;
}
void RelCommon::set_allocated_direct(::substrait::proto::RelCommon_Direct* direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_emit_kind();
  if (direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct);
    if (message_arena != submessage_arena) {
      direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct, submessage_arena);
    }
    set_has_direct();
    emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.direct)
}
void RelCommon::set_allocated_emit(::substrait::proto::RelCommon_Emit* emit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_emit_kind();
  if (emit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emit);
    if (message_arena != submessage_arena) {
      emit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emit, submessage_arena);
    }
    set_has_emit();
    emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.emit)
}
void RelCommon::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon::RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelCommon)
}
RelCommon::RelCommon(const RelCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hint()) {
    hint_ = new ::substrait::proto::RelCommon_Hint(*from.hint_);
  } else {
    hint_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  clear_has_emit_kind();
  switch (from.emit_kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::substrait::proto::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::substrait::proto::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelCommon)
}

void RelCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&hint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&hint_)) + sizeof(advanced_extension_));
  clear_has_emit_kind();
}

RelCommon::~RelCommon() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelCommon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete advanced_extension_;
  if (has_emit_kind()) {
    clear_emit_kind();
  }
}

void RelCommon::ArenaDtor(void* object) {
  RelCommon* _this = reinterpret_cast< RelCommon* >(object);
  (void)_this;
}
void RelCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelCommon& RelCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelCommon_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelCommon::clear_emit_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.RelCommon)
  switch (emit_kind_case()) {
    case kDirect: {
      if (GetArena() == nullptr) {
        delete emit_kind_.direct_;
      }
      break;
    }
    case kEmit: {
      if (GetArena() == nullptr) {
        delete emit_kind_.emit_;
      }
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EMIT_KIND_NOT_SET;
}


void RelCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  clear_emit_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon.Direct direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelCommon.Emit emit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelCommon.Hint hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon.Direct direct = 1;
  if (_internal_has_direct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct(this), target, stream);
  }

  // .substrait.proto.RelCommon.Emit emit = 2;
  if (_internal_has_emit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::emit(this), target, stream);
  }

  // .substrait.proto.RelCommon.Hint hint = 3;
  if (this->has_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hint(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 4;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelCommon)
  return target;
}

size_t RelCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon.Hint hint = 3;
  if (this->has_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hint_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 4;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  switch (emit_kind_case()) {
    // .substrait.proto.RelCommon.Direct direct = 1;
    case kDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emit_kind_.direct_);
      break;
    }
    // .substrait.proto.RelCommon.Emit emit = 2;
    case kEmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emit_kind_.emit_);
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const RelCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelCommon)
    MergeFrom(*source);
  }
}

void RelCommon::MergeFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hint()) {
    _internal_mutable_hint()->::substrait::proto::RelCommon_Hint::MergeFrom(from._internal_hint());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  switch (from.emit_kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::substrait::proto::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::substrait::proto::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
}

void RelCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelCommon::CopyFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon::IsInitialized() const {
  return true;
}

void RelCommon::InternalSwap(RelCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon, advanced_extension_)
      + sizeof(RelCommon::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon, hint_)>(
          reinterpret_cast<char*>(&hint_),
          reinterpret_cast<char*>(&other->hint_));
  swap(emit_kind_, other->emit_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_NamedTable::InitAsDefaultInstance() {
  ::substrait::proto::_ReadRel_NamedTable_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ReadRel_NamedTable::_Internal {
 public:
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ReadRel_NamedTable* msg);
};

const ::substrait::proto::extensions::AdvancedExtension&
ReadRel_NamedTable::_Internal::advanced_extension(const ReadRel_NamedTable* msg) {
  return *msg->advanced_extension_;
}
void ReadRel_NamedTable::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ReadRel_NamedTable::ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.NamedTable)
}
ReadRel_NamedTable::ReadRel_NamedTable(const ReadRel_NamedTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.NamedTable)
}

void ReadRel_NamedTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto.base);
  advanced_extension_ = nullptr;
}

ReadRel_NamedTable::~ReadRel_NamedTable() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.NamedTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_NamedTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ReadRel_NamedTable::ArenaDtor(void* object) {
  ReadRel_NamedTable* _this = reinterpret_cast< ReadRel_NamedTable* >(object);
  (void)_this;
}
void ReadRel_NamedTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_NamedTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_NamedTable& ReadRel_NamedTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_NamedTable_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_NamedTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.NamedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_NamedTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ReadRel.NamedTable.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_NamedTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.NamedTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ReadRel.NamedTable.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.NamedTable)
  return target;
}

size_t ReadRel_NamedTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.NamedTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_NamedTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_NamedTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_NamedTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.NamedTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.NamedTable)
    MergeFrom(*source);
  }
}

void ReadRel_NamedTable::MergeFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void ReadRel_NamedTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_NamedTable::CopyFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_NamedTable::IsInitialized() const {
  return true;
}

void ReadRel_NamedTable::InternalSwap(ReadRel_NamedTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_NamedTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_VirtualTable::InitAsDefaultInstance() {
}
class ReadRel_VirtualTable::_Internal {
 public:
};

ReadRel_VirtualTable::ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.VirtualTable)
}
ReadRel_VirtualTable::ReadRel_VirtualTable(const ReadRel_VirtualTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.VirtualTable)
}

void ReadRel_VirtualTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto.base);
}

ReadRel_VirtualTable::~ReadRel_VirtualTable() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.VirtualTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_VirtualTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_VirtualTable::ArenaDtor(void* object) {
  ReadRel_VirtualTable* _this = reinterpret_cast< ReadRel_VirtualTable* >(object);
  (void)_this;
}
void ReadRel_VirtualTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_VirtualTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_VirtualTable& ReadRel_VirtualTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_VirtualTable_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_VirtualTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.VirtualTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_VirtualTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.Literal.Struct values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_VirtualTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.VirtualTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal.Struct values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.VirtualTable)
  return target;
}

size_t ReadRel_VirtualTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.VirtualTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal.Struct values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_VirtualTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_VirtualTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_VirtualTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.VirtualTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.VirtualTable)
    MergeFrom(*source);
  }
}

void ReadRel_VirtualTable::MergeFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ReadRel_VirtualTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_VirtualTable::CopyFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_VirtualTable::IsInitialized() const {
  return true;
}

void ReadRel_VirtualTable::InternalSwap(ReadRel_VirtualTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_VirtualTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_ExtensionTable::InitAsDefaultInstance() {
  ::substrait::proto::_ReadRel_ExtensionTable_default_instance_._instance.get_mutable()->detail_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ReadRel_ExtensionTable::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& detail(const ReadRel_ExtensionTable* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ReadRel_ExtensionTable::_Internal::detail(const ReadRel_ExtensionTable* msg) {
  return *msg->detail_;
}
void ReadRel_ExtensionTable::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.ExtensionTable)
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.ExtensionTable)
}

void ReadRel_ExtensionTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto.base);
  detail_ = nullptr;
}

ReadRel_ExtensionTable::~ReadRel_ExtensionTable() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.ExtensionTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_ExtensionTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete detail_;
}

void ReadRel_ExtensionTable::ArenaDtor(void* object) {
  ReadRel_ExtensionTable* _this = reinterpret_cast< ReadRel_ExtensionTable* >(object);
  (void)_this;
}
void ReadRel_ExtensionTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_ExtensionTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_ExtensionTable& ReadRel_ExtensionTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_ExtensionTable_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_ExtensionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.ExtensionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_ExtensionTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_ExtensionTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.ExtensionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.ExtensionTable)
  return target;
}

size_t ReadRel_ExtensionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.ExtensionTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_ExtensionTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.ExtensionTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_ExtensionTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_ExtensionTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.ExtensionTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.ExtensionTable)
    MergeFrom(*source);
  }
}

void ReadRel_ExtensionTable::MergeFrom(const ReadRel_ExtensionTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.ExtensionTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
}

void ReadRel_ExtensionTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.ExtensionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_ExtensionTable::CopyFrom(const ReadRel_ExtensionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.ExtensionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_ExtensionTable::IsInitialized() const {
  return true;
}

void ReadRel_ExtensionTable::InternalSwap(ReadRel_ExtensionTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(detail_, other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_ExtensionTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::InitAsDefaultInstance() {
}
class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::SharedCtor() {
}

ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::~ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::InternalSwap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::InitAsDefaultInstance() {
}
class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::SharedCtor() {
}

ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::~ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::InternalSwap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::InitAsDefaultInstance() {
}
class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::SharedCtor() {
}

ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::~ReadRel_LocalFiles_FileOrFiles_OrcReadOptions() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::CopyFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::InternalSwap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::InitAsDefaultInstance() {
}
class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::SharedCtor() {
}

ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::~ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::CopyFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::InternalSwap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles_FileOrFiles::InitAsDefaultInstance() {
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.uri_path_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.uri_path_glob_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.uri_file_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.uri_folder_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.parquet_ = const_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions*>(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::internal_default_instance());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.arrow_ = const_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions*>(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::internal_default_instance());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.orc_ = const_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions*>(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::internal_default_instance());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.extension_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_default_instance_.dwrf_ = const_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions*>(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::internal_default_instance());
}
class ReadRel_LocalFiles_FileOrFiles::_Internal {
 public:
  static const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& parquet(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& arrow(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& orc(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& extension(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& dwrf(const ReadRel_LocalFiles_FileOrFiles* msg);
};

const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::parquet(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->file_format_.parquet_;
}
const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::arrow(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->file_format_.arrow_;
}
const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::orc(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->file_format_.orc_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ReadRel_LocalFiles_FileOrFiles::_Internal::extension(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->file_format_.extension_;
}
const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::dwrf(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->file_format_.dwrf_;
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_parquet(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_file_format();
  if (parquet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parquet);
    if (message_arena != submessage_arena) {
      parquet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parquet, submessage_arena);
    }
    set_has_parquet();
    file_format_.parquet_ = parquet;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_arrow(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_file_format();
  if (arrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arrow);
    if (message_arena != submessage_arena) {
      arrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow, submessage_arena);
    }
    set_has_arrow();
    file_format_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_orc(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_file_format();
  if (orc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orc);
    if (message_arena != submessage_arena) {
      orc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orc, submessage_arena);
    }
    set_has_orc();
    file_format_.orc_ = orc;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_extension(PROTOBUF_NAMESPACE_ID::Any* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_file_format();
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension)->GetArena();
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    set_has_extension();
    file_format_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
}
void ReadRel_LocalFiles_FileOrFiles::clear_extension() {
  if (_internal_has_extension()) {
    if (GetArena() == nullptr) {
      delete file_format_.extension_;
    }
    clear_has_file_format();
  }
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_dwrf(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_file_format();
  if (dwrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dwrf);
    if (message_arena != submessage_arena) {
      dwrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dwrf, submessage_arena);
    }
    set_has_dwrf();
    file_format_.dwrf_ = dwrf;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&partition_index_, &from.partition_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&partition_index_)) + sizeof(length_));
  clear_has_path_type();
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_file_format();
  switch (from.file_format_case()) {
    case kParquet: {
      _internal_mutable_parquet()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(from._internal_parquet());
      break;
    }
    case kArrow: {
      _internal_mutable_arrow()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(from._internal_arrow());
      break;
    }
    case kOrc: {
      _internal_mutable_orc()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(from._internal_orc());
      break;
    }
    case kExtension: {
      _internal_mutable_extension()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extension());
      break;
    }
    case kDwrf: {
      _internal_mutable_dwrf()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(from._internal_dwrf());
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
}

void ReadRel_LocalFiles_FileOrFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&partition_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&partition_index_)) + sizeof(length_));
  clear_has_path_type();
  clear_has_file_format();
}

ReadRel_LocalFiles_FileOrFiles::~ReadRel_LocalFiles_FileOrFiles() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles_FileOrFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_path_type()) {
    clear_path_type();
  }
  if (has_file_format()) {
    clear_file_format();
  }
}

void ReadRel_LocalFiles_FileOrFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles_FileOrFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_FileOrFiles_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles_FileOrFiles::clear_path_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  switch (path_type_case()) {
    case kUriPath: {
      path_type_.uri_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kUriPathGlob: {
      path_type_.uri_path_glob_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kUriFile: {
      path_type_.uri_file_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kUriFolder: {
      path_type_.uri_folder_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}

void ReadRel_LocalFiles_FileOrFiles::clear_file_format() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  switch (file_format_case()) {
    case kParquet: {
      if (GetArena() == nullptr) {
        delete file_format_.parquet_;
      }
      break;
    }
    case kArrow: {
      if (GetArena() == nullptr) {
        delete file_format_.arrow_;
      }
      break;
    }
    case kOrc: {
      if (GetArena() == nullptr) {
        delete file_format_.orc_;
      }
      break;
    }
    case kExtension: {
      if (GetArena() == nullptr) {
        delete file_format_.extension_;
      }
      break;
    }
    case kDwrf: {
      if (GetArena() == nullptr) {
        delete file_format_.dwrf_;
      }
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = FILE_FORMAT_NOT_SET;
}


void ReadRel_LocalFiles_FileOrFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&partition_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&partition_index_)) + sizeof(length_));
  clear_path_type();
  clear_file_format();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri_path_glob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uri_path_glob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uri_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri_folder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uri_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 partition_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          partition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_parquet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_orc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extension = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dwrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles_FileOrFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri_path = 1;
  if (_internal_has_uri_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path().data(), static_cast<int>(this->_internal_uri_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri_path(), target);
  }

  // string uri_path_glob = 2;
  if (_internal_has_uri_path_glob()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path_glob().data(), static_cast<int>(this->_internal_uri_path_glob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri_path_glob(), target);
  }

  // string uri_file = 3;
  if (_internal_has_uri_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_file().data(), static_cast<int>(this->_internal_uri_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri_file(), target);
  }

  // string uri_folder = 4;
  if (_internal_has_uri_folder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_folder().data(), static_cast<int>(this->_internal_uri_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri_folder(), target);
  }

  // uint64 partition_index = 6;
  if (this->partition_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_partition_index(), target);
  }

  // uint64 start = 7;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_start(), target);
  }

  // uint64 length = 8;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_length(), target);
  }

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
  if (_internal_has_parquet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::parquet(this), target, stream);
  }

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
  if (_internal_has_arrow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::arrow(this), target, stream);
  }

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
  if (_internal_has_orc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::orc(this), target, stream);
  }

  // .google.protobuf.Any extension = 12;
  if (_internal_has_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::extension(this), target, stream);
  }

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
  if (_internal_has_dwrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::dwrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 partition_index = 6;
  if (this->partition_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_partition_index());
  }

  // uint64 start = 7;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start());
  }

  // uint64 length = 8;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  switch (path_type_case()) {
    // string uri_path = 1;
    case kUriPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path());
      break;
    }
    // string uri_path_glob = 2;
    case kUriPathGlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path_glob());
      break;
    }
    // string uri_file = 3;
    case kUriFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_file());
      break;
    }
    // string uri_folder = 4;
    case kUriFolder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  switch (file_format_case()) {
    // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
    case kParquet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_format_.parquet_);
      break;
    }
    // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
    case kArrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_format_.arrow_);
      break;
    }
    // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
    case kOrc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_format_.orc_);
      break;
    }
    // .google.protobuf.Any extension = 12;
    case kExtension: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_format_.extension_);
      break;
    }
    // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
    case kDwrf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_format_.dwrf_);
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles_FileOrFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles_FileOrFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles_FileOrFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles_FileOrFiles::MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partition_index() != 0) {
    _internal_set_partition_index(from._internal_partition_index());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.file_format_case()) {
    case kParquet: {
      _internal_mutable_parquet()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(from._internal_parquet());
      break;
    }
    case kArrow: {
      _internal_mutable_arrow()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(from._internal_arrow());
      break;
    }
    case kOrc: {
      _internal_mutable_orc()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(from._internal_orc());
      break;
    }
    case kExtension: {
      _internal_mutable_extension()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extension());
      break;
    }
    case kDwrf: {
      _internal_mutable_dwrf()->::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(from._internal_dwrf());
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles::InternalSwap(ReadRel_LocalFiles_FileOrFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, length_)
      + sizeof(ReadRel_LocalFiles_FileOrFiles::length_)
      - PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, partition_index_)>(
          reinterpret_cast<char*>(&partition_index_),
          reinterpret_cast<char*>(&other->partition_index_));
  swap(path_type_, other->path_type_);
  swap(file_format_, other->file_format_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel_LocalFiles::InitAsDefaultInstance() {
  ::substrait::proto::_ReadRel_LocalFiles_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ReadRel_LocalFiles::_Internal {
 public:
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ReadRel_LocalFiles* msg);
};

const ::substrait::proto::extensions::AdvancedExtension&
ReadRel_LocalFiles::_Internal::advanced_extension(const ReadRel_LocalFiles* msg) {
  return *msg->advanced_extension_;
}
void ReadRel_LocalFiles::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ReadRel_LocalFiles::ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel.LocalFiles)
}
ReadRel_LocalFiles::ReadRel_LocalFiles(const ReadRel_LocalFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel.LocalFiles)
}

void ReadRel_LocalFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto.base);
  advanced_extension_ = nullptr;
}

ReadRel_LocalFiles::~ReadRel_LocalFiles() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel.LocalFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel_LocalFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ReadRel_LocalFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles* _this = reinterpret_cast< ReadRel_LocalFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel_LocalFiles& ReadRel_LocalFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRel_LocalFiles_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel_LocalFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel.LocalFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.ReadRel.LocalFiles.FileOrFiles items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel_LocalFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel.LocalFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.ReadRel.LocalFiles.FileOrFiles items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel.LocalFiles)
  return target;
}

size_t ReadRel_LocalFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel.LocalFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.ReadRel.LocalFiles.FileOrFiles items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel_LocalFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel_LocalFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel_LocalFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel.LocalFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel.LocalFiles)
    MergeFrom(*source);
  }
}

void ReadRel_LocalFiles::MergeFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void ReadRel_LocalFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel_LocalFiles::CopyFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles::InternalSwap(ReadRel_LocalFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRel::InitAsDefaultInstance() {
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->base_schema_ = const_cast< ::substrait::proto::NamedStruct*>(
      ::substrait::proto::NamedStruct::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->best_effort_filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->projection_ = const_cast< ::substrait::proto::Expression_MaskExpression*>(
      ::substrait::proto::Expression_MaskExpression::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_.virtual_table_ = const_cast< ::substrait::proto::ReadRel_VirtualTable*>(
      ::substrait::proto::ReadRel_VirtualTable::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_.local_files_ = const_cast< ::substrait::proto::ReadRel_LocalFiles*>(
      ::substrait::proto::ReadRel_LocalFiles::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_.named_table_ = const_cast< ::substrait::proto::ReadRel_NamedTable*>(
      ::substrait::proto::ReadRel_NamedTable::internal_default_instance());
  ::substrait::proto::_ReadRel_default_instance_.extension_table_ = const_cast< ::substrait::proto::ReadRel_ExtensionTable*>(
      ::substrait::proto::ReadRel_ExtensionTable::internal_default_instance());
}
class ReadRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ReadRel* msg);
  static const ::substrait::proto::NamedStruct& base_schema(const ReadRel* msg);
  static const ::substrait::proto::Expression& filter(const ReadRel* msg);
  static const ::substrait::proto::Expression& best_effort_filter(const ReadRel* msg);
  static const ::substrait::proto::Expression_MaskExpression& projection(const ReadRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ReadRel* msg);
  static const ::substrait::proto::ReadRel_VirtualTable& virtual_table(const ReadRel* msg);
  static const ::substrait::proto::ReadRel_LocalFiles& local_files(const ReadRel* msg);
  static const ::substrait::proto::ReadRel_NamedTable& named_table(const ReadRel* msg);
  static const ::substrait::proto::ReadRel_ExtensionTable& extension_table(const ReadRel* msg);
};

const ::substrait::proto::RelCommon&
ReadRel::_Internal::common(const ReadRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::NamedStruct&
ReadRel::_Internal::base_schema(const ReadRel* msg) {
  return *msg->base_schema_;
}
const ::substrait::proto::Expression&
ReadRel::_Internal::filter(const ReadRel* msg) {
  return *msg->filter_;
}
const ::substrait::proto::Expression&
ReadRel::_Internal::best_effort_filter(const ReadRel* msg) {
  return *msg->best_effort_filter_;
}
const ::substrait::proto::Expression_MaskExpression&
ReadRel::_Internal::projection(const ReadRel* msg) {
  return *msg->projection_;
}
const ::substrait::proto::extensions::AdvancedExtension&
ReadRel::_Internal::advanced_extension(const ReadRel* msg) {
  return *msg->advanced_extension_;
}
const ::substrait::proto::ReadRel_VirtualTable&
ReadRel::_Internal::virtual_table(const ReadRel* msg) {
  return *msg->read_type_.virtual_table_;
}
const ::substrait::proto::ReadRel_LocalFiles&
ReadRel::_Internal::local_files(const ReadRel* msg) {
  return *msg->read_type_.local_files_;
}
const ::substrait::proto::ReadRel_NamedTable&
ReadRel::_Internal::named_table(const ReadRel* msg) {
  return *msg->read_type_.named_table_;
}
const ::substrait::proto::ReadRel_ExtensionTable&
ReadRel::_Internal::extension_table(const ReadRel* msg) {
  return *msg->read_type_.extension_table_;
}
void ReadRel::clear_base_schema() {
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
}
void ReadRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
void ReadRel::set_allocated_virtual_table(::substrait::proto::ReadRel_VirtualTable* virtual_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (virtual_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtual_table);
    if (message_arena != submessage_arena) {
      virtual_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_table, submessage_arena);
    }
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.virtual_table)
}
void ReadRel::set_allocated_local_files(::substrait::proto::ReadRel_LocalFiles* local_files) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (local_files) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_files);
    if (message_arena != submessage_arena) {
      local_files = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_files, submessage_arena);
    }
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.local_files)
}
void ReadRel::set_allocated_named_table(::substrait::proto::ReadRel_NamedTable* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.named_table)
}
void ReadRel::set_allocated_extension_table(::substrait::proto::ReadRel_ExtensionTable* extension_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_read_type();
  if (extension_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_table);
    if (message_arena != submessage_arena) {
      extension_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_table, submessage_arena);
    }
    set_has_extension_table();
    read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.extension_table)
}
ReadRel::ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReadRel)
}
ReadRel::ReadRel(const ReadRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_base_schema()) {
    base_schema_ = new ::substrait::proto::NamedStruct(*from.base_schema_);
  } else {
    base_schema_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::substrait::proto::Expression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_projection()) {
    projection_ = new ::substrait::proto::Expression_MaskExpression(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  if (from._internal_has_best_effort_filter()) {
    best_effort_filter_ = new ::substrait::proto::Expression(*from.best_effort_filter_);
  } else {
    best_effort_filter_ = nullptr;
  }
  clear_has_read_type();
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::substrait::proto::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::substrait::proto::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::proto::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::proto::ReadRel_ExtensionTable::MergeFrom(from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReadRel)
}

void ReadRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_effort_filter_) -
      reinterpret_cast<char*>(&common_)) + sizeof(best_effort_filter_));
  clear_has_read_type();
}

ReadRel::~ReadRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReadRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete base_schema_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete projection_;
  if (this != internal_default_instance()) delete advanced_extension_;
  if (this != internal_default_instance()) delete best_effort_filter_;
  if (has_read_type()) {
    clear_read_type();
  }
}

void ReadRel::ArenaDtor(void* object) {
  ReadRel* _this = reinterpret_cast< ReadRel* >(object);
  (void)_this;
}
void ReadRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRel& ReadRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReadRel::clear_read_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ReadRel)
  switch (read_type_case()) {
    case kVirtualTable: {
      if (GetArena() == nullptr) {
        delete read_type_.virtual_table_;
      }
      break;
    }
    case kLocalFiles: {
      if (GetArena() == nullptr) {
        delete read_type_.local_files_;
      }
      break;
    }
    case kNamedTable: {
      if (GetArena() == nullptr) {
        delete read_type_.named_table_;
      }
      break;
    }
    case kExtensionTable: {
      if (GetArena() == nullptr) {
        delete read_type_.extension_table_;
      }
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}


void ReadRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReadRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArena() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  if (GetArena() == nullptr && best_effort_filter_ != nullptr) {
    delete best_effort_filter_;
  }
  best_effort_filter_ = nullptr;
  clear_read_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NamedStruct base_schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression projection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.VirtualTable virtual_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.LocalFiles local_files = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_files(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.NamedTable named_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReadRel.ExtensionTable extension_table = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression best_effort_filter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_effort_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReadRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.NamedStruct base_schema = 2;
  if (this->has_base_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base_schema(this), target, stream);
  }

  // .substrait.proto.Expression filter = 3;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filter(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression projection = 4;
  if (this->has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::projection(this), target, stream);
  }

  // .substrait.proto.ReadRel.VirtualTable virtual_table = 5;
  if (_internal_has_virtual_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::virtual_table(this), target, stream);
  }

  // .substrait.proto.ReadRel.LocalFiles local_files = 6;
  if (_internal_has_local_files()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::local_files(this), target, stream);
  }

  // .substrait.proto.ReadRel.NamedTable named_table = 7;
  if (_internal_has_named_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::named_table(this), target, stream);
  }

  // .substrait.proto.ReadRel.ExtensionTable extension_table = 8;
  if (_internal_has_extension_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::extension_table(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  // .substrait.proto.Expression best_effort_filter = 11;
  if (this->has_best_effort_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::best_effort_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReadRel)
  return target;
}

size_t ReadRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReadRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.NamedStruct base_schema = 2;
  if (this->has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_schema_);
  }

  // .substrait.proto.Expression filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .substrait.proto.Expression.MaskExpression projection = 4;
  if (this->has_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.Expression best_effort_filter = 11;
  if (this->has_best_effort_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *best_effort_filter_);
  }

  switch (read_type_case()) {
    // .substrait.proto.ReadRel.VirtualTable virtual_table = 5;
    case kVirtualTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.virtual_table_);
      break;
    }
    // .substrait.proto.ReadRel.LocalFiles local_files = 6;
    case kLocalFiles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.local_files_);
      break;
    }
    // .substrait.proto.ReadRel.NamedTable named_table = 7;
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.named_table_);
      break;
    }
    // .substrait.proto.ReadRel.ExtensionTable extension_table = 8;
    case kExtensionTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.extension_table_);
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReadRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReadRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReadRel)
    MergeFrom(*source);
  }
}

void ReadRel::MergeFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReadRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_base_schema()) {
    _internal_mutable_base_schema()->::substrait::proto::NamedStruct::MergeFrom(from._internal_base_schema());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::substrait::proto::Expression::MergeFrom(from._internal_filter());
  }
  if (from.has_projection()) {
    _internal_mutable_projection()->::substrait::proto::Expression_MaskExpression::MergeFrom(from._internal_projection());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.has_best_effort_filter()) {
    _internal_mutable_best_effort_filter()->::substrait::proto::Expression::MergeFrom(from._internal_best_effort_filter());
  }
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::substrait::proto::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::substrait::proto::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::proto::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::proto::ReadRel_ExtensionTable::MergeFrom(from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReadRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRel::CopyFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel::IsInitialized() const {
  return true;
}

void ReadRel::InternalSwap(ReadRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel, best_effort_filter_)
      + sizeof(ReadRel::best_effort_filter_)
      - PROTOBUF_FIELD_OFFSET(ReadRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
  swap(read_type_, other->read_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectRel::InitAsDefaultInstance() {
  ::substrait::proto::_ProjectRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ProjectRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_ProjectRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ProjectRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ProjectRel* msg);
  static const ::substrait::proto::Rel& input(const ProjectRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ProjectRel* msg);
};

const ::substrait::proto::RelCommon&
ProjectRel::_Internal::common(const ProjectRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
ProjectRel::_Internal::input(const ProjectRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::extensions::AdvancedExtension&
ProjectRel::_Internal::advanced_extension(const ProjectRel* msg) {
  return *msg->advanced_extension_;
}
void ProjectRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ProjectRel::ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  expressions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ProjectRel)
}
ProjectRel::ProjectRel(const ProjectRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expressions_(from.expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ProjectRel)
}

void ProjectRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

ProjectRel::~ProjectRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ProjectRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjectRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ProjectRel::ArenaDtor(void* object) {
  ProjectRel* _this = reinterpret_cast< ProjectRel* >(object);
  (void)_this;
}
void ProjectRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectRel& ProjectRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ProjectRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ProjectRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expressions_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression expressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ProjectRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.proto.Expression expressions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_expressions(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ProjectRel)
  return target;
}

size_t ProjectRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ProjectRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression expressions = 3;
  total_size += 1UL * this->_internal_expressions_size();
  for (const auto& msg : this->expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ProjectRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ProjectRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ProjectRel)
    MergeFrom(*source);
  }
}

void ProjectRel::MergeFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ProjectRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expressions_.MergeFrom(from.expressions_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void ProjectRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRel::CopyFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRel::IsInitialized() const {
  return true;
}

void ProjectRel::InternalSwap(ProjectRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  expressions_.InternalSwap(&other->expressions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectRel, advanced_extension_)
      + sizeof(ProjectRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ProjectRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinRel::InitAsDefaultInstance() {
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->post_join_filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_JoinRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class JoinRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const JoinRel* msg);
  static const ::substrait::proto::Rel& left(const JoinRel* msg);
  static const ::substrait::proto::Rel& right(const JoinRel* msg);
  static const ::substrait::proto::Expression& expression(const JoinRel* msg);
  static const ::substrait::proto::Expression& post_join_filter(const JoinRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const JoinRel* msg);
};

const ::substrait::proto::RelCommon&
JoinRel::_Internal::common(const JoinRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
JoinRel::_Internal::left(const JoinRel* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
JoinRel::_Internal::right(const JoinRel* msg) {
  return *msg->right_;
}
const ::substrait::proto::Expression&
JoinRel::_Internal::expression(const JoinRel* msg) {
  return *msg->expression_;
}
const ::substrait::proto::Expression&
JoinRel::_Internal::post_join_filter(const JoinRel* msg) {
  return *msg->post_join_filter_;
}
const ::substrait::proto::extensions::AdvancedExtension&
JoinRel::_Internal::advanced_extension(const JoinRel* msg) {
  return *msg->advanced_extension_;
}
void JoinRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
JoinRel::JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.JoinRel)
}
JoinRel::JoinRel(const JoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::substrait::proto::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_post_join_filter()) {
    post_join_filter_ = new ::substrait::proto::Expression(*from.post_join_filter_);
  } else {
    post_join_filter_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.JoinRel)
}

void JoinRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

JoinRel::~JoinRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.JoinRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete post_join_filter_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void JoinRel::ArenaDtor(void* object) {
  JoinRel* _this = reinterpret_cast< JoinRel* >(object);
  (void)_this;
}
void JoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinRel& JoinRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void JoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.JoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression expression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression post_join_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.JoinRel.JoinType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::proto::JoinRel_JoinType>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.JoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .substrait.proto.Expression expression = 4;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expression(this), target, stream);
  }

  // .substrait.proto.Expression post_join_filter = 5;
  if (this->has_post_join_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::post_join_filter(this), target, stream);
  }

  // .substrait.proto.JoinRel.JoinType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.JoinRel)
  return target;
}

size_t JoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.JoinRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.Expression expression = 4;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .substrait.proto.Expression post_join_filter = 5;
  if (this->has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_join_filter_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.JoinRel.JoinType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.JoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.JoinRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.JoinRel)
    MergeFrom(*source);
  }
}

void JoinRel::MergeFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.JoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
  }
  if (from.has_post_join_filter()) {
    _internal_mutable_post_join_filter()->::substrait::proto::Expression::MergeFrom(from._internal_post_join_filter());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void JoinRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRel::CopyFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRel::IsInitialized() const {
  return true;
}

void JoinRel::InternalSwap(JoinRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRel, type_)
      + sizeof(JoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(JoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrossRel::InitAsDefaultInstance() {
  ::substrait::proto::_CrossRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_CrossRel_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_CrossRel_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_CrossRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class CrossRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const CrossRel* msg);
  static const ::substrait::proto::Rel& left(const CrossRel* msg);
  static const ::substrait::proto::Rel& right(const CrossRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const CrossRel* msg);
};

const ::substrait::proto::RelCommon&
CrossRel::_Internal::common(const CrossRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
CrossRel::_Internal::left(const CrossRel* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
CrossRel::_Internal::right(const CrossRel* msg) {
  return *msg->right_;
}
const ::substrait::proto::extensions::AdvancedExtension&
CrossRel::_Internal::advanced_extension(const CrossRel* msg) {
  return *msg->advanced_extension_;
}
void CrossRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
CrossRel::CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.CrossRel)
}
CrossRel::CrossRel(const CrossRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.CrossRel)
}

void CrossRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

CrossRel::~CrossRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.CrossRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrossRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void CrossRel::ArenaDtor(void* object) {
  CrossRel* _this = reinterpret_cast< CrossRel* >(object);
  (void)_this;
}
void CrossRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrossRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrossRel& CrossRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void CrossRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.CrossRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrossRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.CrossRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.CrossRel)
  return target;
}

size_t CrossRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.CrossRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrossRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.CrossRel)
  GOOGLE_DCHECK_NE(&from, this);
  const CrossRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrossRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.CrossRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.CrossRel)
    MergeFrom(*source);
  }
}

void CrossRel::MergeFrom(const CrossRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.CrossRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void CrossRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.CrossRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossRel::CopyFrom(const CrossRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.CrossRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossRel::IsInitialized() const {
  return true;
}

void CrossRel::InternalSwap(CrossRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossRel, advanced_extension_)
      + sizeof(CrossRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(CrossRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchRel::InitAsDefaultInstance() {
  ::substrait::proto::_FetchRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_FetchRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_FetchRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class FetchRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const FetchRel* msg);
  static const ::substrait::proto::Rel& input(const FetchRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const FetchRel* msg);
};

const ::substrait::proto::RelCommon&
FetchRel::_Internal::common(const FetchRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
FetchRel::_Internal::input(const FetchRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::extensions::AdvancedExtension&
FetchRel::_Internal::advanced_extension(const FetchRel* msg) {
  return *msg->advanced_extension_;
}
void FetchRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
FetchRel::FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.FetchRel)
}
FetchRel::FetchRel(const FetchRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.FetchRel)
}

void FetchRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&common_)) + sizeof(count_));
}

FetchRel::~FetchRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.FetchRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void FetchRel::ArenaDtor(void* object) {
  FetchRel* _this = reinterpret_cast< FetchRel* >(object);
  (void)_this;
}
void FetchRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchRel& FetchRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void FetchRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.FetchRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.FetchRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.FetchRel)
  return target;
}

size_t FetchRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.FetchRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.FetchRel)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.FetchRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.FetchRel)
    MergeFrom(*source);
  }
}

void FetchRel::MergeFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.FetchRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchRel::CopyFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRel::IsInitialized() const {
  return true;
}

void FetchRel::InternalSwap(FetchRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchRel, count_)
      + sizeof(FetchRel::count_)
      - PROTOBUF_FIELD_OFFSET(FetchRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregateRel_Grouping::InitAsDefaultInstance() {
}
class AggregateRel_Grouping::_Internal {
 public:
};

AggregateRel_Grouping::AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  grouping_expressions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.AggregateRel.Grouping)
}
AggregateRel_Grouping::AggregateRel_Grouping(const AggregateRel_Grouping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      grouping_expressions_(from.grouping_expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.AggregateRel.Grouping)
}

void AggregateRel_Grouping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

AggregateRel_Grouping::~AggregateRel_Grouping() {
  // @@protoc_insertion_point(destructor:substrait.proto.AggregateRel.Grouping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel_Grouping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AggregateRel_Grouping::ArenaDtor(void* object) {
  AggregateRel_Grouping* _this = reinterpret_cast< AggregateRel_Grouping* >(object);
  (void)_this;
}
void AggregateRel_Grouping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Grouping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregateRel_Grouping& AggregateRel_Grouping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void AggregateRel_Grouping::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.AggregateRel.Grouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grouping_expressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Grouping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression grouping_expressions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grouping_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel_Grouping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.AggregateRel.Grouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression grouping_expressions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grouping_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_grouping_expressions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.AggregateRel.Grouping)
  return target;
}

size_t AggregateRel_Grouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.AggregateRel.Grouping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression grouping_expressions = 1;
  total_size += 1UL * this->_internal_grouping_expressions_size();
  for (const auto& msg : this->grouping_expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel_Grouping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel_Grouping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel_Grouping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.AggregateRel.Grouping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.AggregateRel.Grouping)
    MergeFrom(*source);
  }
}

void AggregateRel_Grouping::MergeFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grouping_expressions_.MergeFrom(from.grouping_expressions_);
}

void AggregateRel_Grouping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel_Grouping::CopyFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Grouping::IsInitialized() const {
  return true;
}

void AggregateRel_Grouping::InternalSwap(AggregateRel_Grouping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  grouping_expressions_.InternalSwap(&other->grouping_expressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Grouping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregateRel_Measure::InitAsDefaultInstance() {
  ::substrait::proto::_AggregateRel_Measure_default_instance_._instance.get_mutable()->measure_ = const_cast< ::substrait::proto::AggregateFunction*>(
      ::substrait::proto::AggregateFunction::internal_default_instance());
  ::substrait::proto::_AggregateRel_Measure_default_instance_._instance.get_mutable()->filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class AggregateRel_Measure::_Internal {
 public:
  static const ::substrait::proto::AggregateFunction& measure(const AggregateRel_Measure* msg);
  static const ::substrait::proto::Expression& filter(const AggregateRel_Measure* msg);
};

const ::substrait::proto::AggregateFunction&
AggregateRel_Measure::_Internal::measure(const AggregateRel_Measure* msg) {
  return *msg->measure_;
}
const ::substrait::proto::Expression&
AggregateRel_Measure::_Internal::filter(const AggregateRel_Measure* msg) {
  return *msg->filter_;
}
AggregateRel_Measure::AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.AggregateRel.Measure)
}
AggregateRel_Measure::AggregateRel_Measure(const AggregateRel_Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measure()) {
    measure_ = new ::substrait::proto::AggregateFunction(*from.measure_);
  } else {
    measure_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::substrait::proto::Expression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.AggregateRel.Measure)
}

void AggregateRel_Measure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_) -
      reinterpret_cast<char*>(&measure_)) + sizeof(filter_));
}

AggregateRel_Measure::~AggregateRel_Measure() {
  // @@protoc_insertion_point(destructor:substrait.proto.AggregateRel.Measure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel_Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete measure_;
  if (this != internal_default_instance()) delete filter_;
}

void AggregateRel_Measure::ArenaDtor(void* object) {
  AggregateRel_Measure* _this = reinterpret_cast< AggregateRel_Measure* >(object);
  (void)_this;
}
void AggregateRel_Measure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregateRel_Measure& AggregateRel_Measure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void AggregateRel_Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.AggregateRel.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Measure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.AggregateFunction measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel_Measure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.AggregateRel.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.AggregateFunction measure = 1;
  if (this->has_measure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::measure(this), target, stream);
  }

  // .substrait.proto.Expression filter = 2;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.AggregateRel.Measure)
  return target;
}

size_t AggregateRel_Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.AggregateRel.Measure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.AggregateFunction measure = 1;
  if (this->has_measure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measure_);
  }

  // .substrait.proto.Expression filter = 2;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel_Measure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel_Measure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel_Measure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.AggregateRel.Measure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.AggregateRel.Measure)
    MergeFrom(*source);
  }
}

void AggregateRel_Measure::MergeFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measure()) {
    _internal_mutable_measure()->::substrait::proto::AggregateFunction::MergeFrom(from._internal_measure());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::substrait::proto::Expression::MergeFrom(from._internal_filter());
  }
}

void AggregateRel_Measure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel_Measure::CopyFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Measure::IsInitialized() const {
  return true;
}

void AggregateRel_Measure::InternalSwap(AggregateRel_Measure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, filter_)
      + sizeof(AggregateRel_Measure::filter_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, measure_)>(
          reinterpret_cast<char*>(&measure_),
          reinterpret_cast<char*>(&other->measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Measure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregateRel::InitAsDefaultInstance() {
  ::substrait::proto::_AggregateRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_AggregateRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_AggregateRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class AggregateRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const AggregateRel* msg);
  static const ::substrait::proto::Rel& input(const AggregateRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const AggregateRel* msg);
};

const ::substrait::proto::RelCommon&
AggregateRel::_Internal::common(const AggregateRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
AggregateRel::_Internal::input(const AggregateRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::extensions::AdvancedExtension&
AggregateRel::_Internal::advanced_extension(const AggregateRel* msg) {
  return *msg->advanced_extension_;
}
void AggregateRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
AggregateRel::AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groupings_(arena),
  measures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.AggregateRel)
}
AggregateRel::AggregateRel(const AggregateRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groupings_(from.groupings_),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.AggregateRel)
}

void AggregateRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

AggregateRel::~AggregateRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.AggregateRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void AggregateRel::ArenaDtor(void* object) {
  AggregateRel* _this = reinterpret_cast< AggregateRel* >(object);
  (void)_this;
}
void AggregateRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregateRel& AggregateRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void AggregateRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.AggregateRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupings_.Clear();
  measures_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.AggregateRel.Grouping groupings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.AggregateRel.Measure measures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.AggregateRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.proto.AggregateRel.Grouping groupings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groupings(i), target, stream);
  }

  // repeated .substrait.proto.AggregateRel.Measure measures = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_measures(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.AggregateRel)
  return target;
}

size_t AggregateRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.AggregateRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.AggregateRel.Grouping groupings = 3;
  total_size += 1UL * this->_internal_groupings_size();
  for (const auto& msg : this->groupings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.AggregateRel.Measure measures = 4;
  total_size += 1UL * this->_internal_measures_size();
  for (const auto& msg : this->measures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.AggregateRel)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.AggregateRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.AggregateRel)
    MergeFrom(*source);
  }
}

void AggregateRel::MergeFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.AggregateRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupings_.MergeFrom(from.groupings_);
  measures_.MergeFrom(from.measures_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void AggregateRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRel::CopyFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel::IsInitialized() const {
  return true;
}

void AggregateRel::InternalSwap(AggregateRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groupings_.InternalSwap(&other->groupings_);
  measures_.InternalSwap(&other->measures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel, advanced_extension_)
      + sizeof(AggregateRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsistentPartitionWindowRel_WindowRelFunction::InitAsDefaultInstance() {
  ::substrait::proto::_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_._instance.get_mutable()->output_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_._instance.get_mutable()->lower_bound_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound*>(
      ::substrait::proto::Expression_WindowFunction_Bound::internal_default_instance());
  ::substrait::proto::_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_._instance.get_mutable()->upper_bound_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound*>(
      ::substrait::proto::Expression_WindowFunction_Bound::internal_default_instance());
}
class ConsistentPartitionWindowRel_WindowRelFunction::_Internal {
 public:
  static const ::substrait::proto::Type& output_type(const ConsistentPartitionWindowRel_WindowRelFunction* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound& lower_bound(const ConsistentPartitionWindowRel_WindowRelFunction* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound& upper_bound(const ConsistentPartitionWindowRel_WindowRelFunction* msg);
};

const ::substrait::proto::Type&
ConsistentPartitionWindowRel_WindowRelFunction::_Internal::output_type(const ConsistentPartitionWindowRel_WindowRelFunction* msg) {
  return *msg->output_type_;
}
const ::substrait::proto::Expression_WindowFunction_Bound&
ConsistentPartitionWindowRel_WindowRelFunction::_Internal::lower_bound(const ConsistentPartitionWindowRel_WindowRelFunction* msg) {
  return *msg->lower_bound_;
}
const ::substrait::proto::Expression_WindowFunction_Bound&
ConsistentPartitionWindowRel_WindowRelFunction::_Internal::upper_bound(const ConsistentPartitionWindowRel_WindowRelFunction* msg) {
  return *msg->upper_bound_;
}
void ConsistentPartitionWindowRel_WindowRelFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
ConsistentPartitionWindowRel_WindowRelFunction::ConsistentPartitionWindowRel_WindowRelFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
}
ConsistentPartitionWindowRel_WindowRelFunction::ConsistentPartitionWindowRel_WindowRelFunction(const ConsistentPartitionWindowRel_WindowRelFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upper_bound()) {
    upper_bound_ = new ::substrait::proto::Expression_WindowFunction_Bound(*from.upper_bound_);
  } else {
    upper_bound_ = nullptr;
  }
  if (from._internal_has_lower_bound()) {
    lower_bound_ = new ::substrait::proto::Expression_WindowFunction_Bound(*from.lower_bound_);
  } else {
    lower_bound_ = nullptr;
  }
  if (from._internal_has_output_type()) {
    output_type_ = new ::substrait::proto::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  ::memcpy(&function_reference_, &from.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&bounds_type_) -
    reinterpret_cast<char*>(&function_reference_)) + sizeof(bounds_type_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
}

void ConsistentPartitionWindowRel_WindowRelFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&upper_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounds_type_) -
      reinterpret_cast<char*>(&upper_bound_)) + sizeof(bounds_type_));
}

ConsistentPartitionWindowRel_WindowRelFunction::~ConsistentPartitionWindowRel_WindowRelFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsistentPartitionWindowRel_WindowRelFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upper_bound_;
  if (this != internal_default_instance()) delete lower_bound_;
  if (this != internal_default_instance()) delete output_type_;
}

void ConsistentPartitionWindowRel_WindowRelFunction::ArenaDtor(void* object) {
  ConsistentPartitionWindowRel_WindowRelFunction* _this = reinterpret_cast< ConsistentPartitionWindowRel_WindowRelFunction* >(object);
  (void)_this;
}
void ConsistentPartitionWindowRel_WindowRelFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsistentPartitionWindowRel_WindowRelFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsistentPartitionWindowRel_WindowRelFunction& ConsistentPartitionWindowRel_WindowRelFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ConsistentPartitionWindowRel_WindowRelFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  options_.Clear();
  if (GetArena() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
  if (GetArena() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  ::memset(&function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounds_type_) -
      reinterpret_cast<char*>(&function_reference_)) + sizeof(bounds_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsistentPartitionWindowRel_WindowRelFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregationPhase phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::substrait::proto::AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type output_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionArgument arguments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invocation(static_cast<::substrait::proto::AggregateFunction_AggregationInvocation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionOption options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bounds_type(static_cast<::substrait::proto::Expression_WindowFunction_BoundsType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsistentPartitionWindowRel_WindowRelFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::upper_bound(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lower_bound(this), target, stream);
  }

  // .substrait.proto.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_phase(), target);
  }

  // .substrait.proto.Type output_type = 7;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::output_type(this), target, stream);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_arguments(i), target, stream);
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_invocation(), target);
  }

  // repeated .substrait.proto.FunctionOption options = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_options(i), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  if (this->bounds_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_bounds_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  return target;
}

size_t ConsistentPartitionWindowRel_WindowRelFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.FunctionArgument arguments = 9;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionOption options = 11;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_bound_);
  }

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_bound_);
  }

  // .substrait.proto.Type output_type = 7;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  // .substrait.proto.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->invocation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_invocation());
  }

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  if (this->bounds_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bounds_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsistentPartitionWindowRel_WindowRelFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsistentPartitionWindowRel_WindowRelFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsistentPartitionWindowRel_WindowRelFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
    MergeFrom(*source);
  }
}

void ConsistentPartitionWindowRel_WindowRelFunction::MergeFrom(const ConsistentPartitionWindowRel_WindowRelFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  options_.MergeFrom(from.options_);
  if (from.has_upper_bound()) {
    _internal_mutable_upper_bound()->::substrait::proto::Expression_WindowFunction_Bound::MergeFrom(from._internal_upper_bound());
  }
  if (from.has_lower_bound()) {
    _internal_mutable_lower_bound()->::substrait::proto::Expression_WindowFunction_Bound::MergeFrom(from._internal_lower_bound());
  }
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::substrait::proto::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from.invocation() != 0) {
    _internal_set_invocation(from._internal_invocation());
  }
  if (from.bounds_type() != 0) {
    _internal_set_bounds_type(from._internal_bounds_type());
  }
}

void ConsistentPartitionWindowRel_WindowRelFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsistentPartitionWindowRel_WindowRelFunction::CopyFrom(const ConsistentPartitionWindowRel_WindowRelFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsistentPartitionWindowRel_WindowRelFunction::IsInitialized() const {
  return true;
}

void ConsistentPartitionWindowRel_WindowRelFunction::InternalSwap(ConsistentPartitionWindowRel_WindowRelFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsistentPartitionWindowRel_WindowRelFunction, bounds_type_)
      + sizeof(ConsistentPartitionWindowRel_WindowRelFunction::bounds_type_)
      - PROTOBUF_FIELD_OFFSET(ConsistentPartitionWindowRel_WindowRelFunction, upper_bound_)>(
          reinterpret_cast<char*>(&upper_bound_),
          reinterpret_cast<char*>(&other->upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsistentPartitionWindowRel_WindowRelFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsistentPartitionWindowRel::InitAsDefaultInstance() {
  ::substrait::proto::_ConsistentPartitionWindowRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ConsistentPartitionWindowRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_ConsistentPartitionWindowRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ConsistentPartitionWindowRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ConsistentPartitionWindowRel* msg);
  static const ::substrait::proto::Rel& input(const ConsistentPartitionWindowRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ConsistentPartitionWindowRel* msg);
};

const ::substrait::proto::RelCommon&
ConsistentPartitionWindowRel::_Internal::common(const ConsistentPartitionWindowRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
ConsistentPartitionWindowRel::_Internal::input(const ConsistentPartitionWindowRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::extensions::AdvancedExtension&
ConsistentPartitionWindowRel::_Internal::advanced_extension(const ConsistentPartitionWindowRel* msg) {
  return *msg->advanced_extension_;
}
void ConsistentPartitionWindowRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ConsistentPartitionWindowRel::ConsistentPartitionWindowRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  window_functions_(arena),
  partition_expressions_(arena),
  sorts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ConsistentPartitionWindowRel)
}
ConsistentPartitionWindowRel::ConsistentPartitionWindowRel(const ConsistentPartitionWindowRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      window_functions_(from.window_functions_),
      partition_expressions_(from.partition_expressions_),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ConsistentPartitionWindowRel)
}

void ConsistentPartitionWindowRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

ConsistentPartitionWindowRel::~ConsistentPartitionWindowRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ConsistentPartitionWindowRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsistentPartitionWindowRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ConsistentPartitionWindowRel::ArenaDtor(void* object) {
  ConsistentPartitionWindowRel* _this = reinterpret_cast< ConsistentPartitionWindowRel* >(object);
  (void)_this;
}
void ConsistentPartitionWindowRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsistentPartitionWindowRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsistentPartitionWindowRel& ConsistentPartitionWindowRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ConsistentPartitionWindowRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ConsistentPartitionWindowRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_functions_.Clear();
  partition_expressions_.Clear();
  sorts_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsistentPartitionWindowRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction window_functions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_window_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression partition_expressions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partition_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.SortField sorts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsistentPartitionWindowRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ConsistentPartitionWindowRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction window_functions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_window_functions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_window_functions(i), target, stream);
  }

  // repeated .substrait.proto.Expression partition_expressions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partition_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_partition_expressions(i), target, stream);
  }

  // repeated .substrait.proto.SortField sorts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sorts(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ConsistentPartitionWindowRel)
  return target;
}

size_t ConsistentPartitionWindowRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ConsistentPartitionWindowRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction window_functions = 3;
  total_size += 1UL * this->_internal_window_functions_size();
  for (const auto& msg : this->window_functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.Expression partition_expressions = 4;
  total_size += 1UL * this->_internal_partition_expressions_size();
  for (const auto& msg : this->partition_expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.SortField sorts = 5;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsistentPartitionWindowRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ConsistentPartitionWindowRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsistentPartitionWindowRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsistentPartitionWindowRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ConsistentPartitionWindowRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ConsistentPartitionWindowRel)
    MergeFrom(*source);
  }
}

void ConsistentPartitionWindowRel::MergeFrom(const ConsistentPartitionWindowRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ConsistentPartitionWindowRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  window_functions_.MergeFrom(from.window_functions_);
  partition_expressions_.MergeFrom(from.partition_expressions_);
  sorts_.MergeFrom(from.sorts_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void ConsistentPartitionWindowRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ConsistentPartitionWindowRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsistentPartitionWindowRel::CopyFrom(const ConsistentPartitionWindowRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ConsistentPartitionWindowRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsistentPartitionWindowRel::IsInitialized() const {
  return true;
}

void ConsistentPartitionWindowRel::InternalSwap(ConsistentPartitionWindowRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  window_functions_.InternalSwap(&other->window_functions_);
  partition_expressions_.InternalSwap(&other->partition_expressions_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsistentPartitionWindowRel, advanced_extension_)
      + sizeof(ConsistentPartitionWindowRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ConsistentPartitionWindowRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsistentPartitionWindowRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortRel::InitAsDefaultInstance() {
  ::substrait::proto::_SortRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_SortRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_SortRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class SortRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const SortRel* msg);
  static const ::substrait::proto::Rel& input(const SortRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const SortRel* msg);
};

const ::substrait::proto::RelCommon&
SortRel::_Internal::common(const SortRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
SortRel::_Internal::input(const SortRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::extensions::AdvancedExtension&
SortRel::_Internal::advanced_extension(const SortRel* msg) {
  return *msg->advanced_extension_;
}
void SortRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
SortRel::SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sorts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.SortRel)
}
SortRel::SortRel(const SortRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.SortRel)
}

void SortRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

SortRel::~SortRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.SortRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void SortRel::ArenaDtor(void* object) {
  SortRel* _this = reinterpret_cast< SortRel* >(object);
  (void)_this;
}
void SortRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortRel& SortRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void SortRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.SortRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorts_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.SortRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.proto.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.SortRel)
  return target;
}

size_t SortRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.SortRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.SortRel)
  GOOGLE_DCHECK_NE(&from, this);
  const SortRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.SortRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.SortRel)
    MergeFrom(*source);
  }
}

void SortRel::MergeFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.SortRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorts_.MergeFrom(from.sorts_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void SortRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortRel::CopyFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRel::IsInitialized() const {
  return true;
}

void SortRel::InternalSwap(SortRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortRel, advanced_extension_)
      + sizeof(SortRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(SortRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterRel::InitAsDefaultInstance() {
  ::substrait::proto::_FilterRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_FilterRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_FilterRel_default_instance_._instance.get_mutable()->condition_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_FilterRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class FilterRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const FilterRel* msg);
  static const ::substrait::proto::Rel& input(const FilterRel* msg);
  static const ::substrait::proto::Expression& condition(const FilterRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const FilterRel* msg);
};

const ::substrait::proto::RelCommon&
FilterRel::_Internal::common(const FilterRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
FilterRel::_Internal::input(const FilterRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::Expression&
FilterRel::_Internal::condition(const FilterRel* msg) {
  return *msg->condition_;
}
const ::substrait::proto::extensions::AdvancedExtension&
FilterRel::_Internal::advanced_extension(const FilterRel* msg) {
  return *msg->advanced_extension_;
}
void FilterRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
FilterRel::FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.FilterRel)
}
FilterRel::FilterRel(const FilterRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::substrait::proto::Expression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.FilterRel)
}

void FilterRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advanced_extension_) -
      reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

FilterRel::~FilterRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.FilterRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void FilterRel::ArenaDtor(void* object) {
  FilterRel* _this = reinterpret_cast< FilterRel* >(object);
  (void)_this;
}
void FilterRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterRel& FilterRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void FilterRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.FilterRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.FilterRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .substrait.proto.Expression condition = 3;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.FilterRel)
  return target;
}

size_t FilterRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.FilterRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.Expression condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.FilterRel)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.FilterRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.FilterRel)
    MergeFrom(*source);
  }
}

void FilterRel::MergeFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.FilterRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::substrait::proto::Expression::MergeFrom(from._internal_condition());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void FilterRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterRel::CopyFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRel::IsInitialized() const {
  return true;
}

void FilterRel::InternalSwap(FilterRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRel, advanced_extension_)
      + sizeof(FilterRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(FilterRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRel::InitAsDefaultInstance() {
  ::substrait::proto::_SetRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_SetRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class SetRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const SetRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const SetRel* msg);
};

const ::substrait::proto::RelCommon&
SetRel::_Internal::common(const SetRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::extensions::AdvancedExtension&
SetRel::_Internal::advanced_extension(const SetRel* msg) {
  return *msg->advanced_extension_;
}
void SetRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
SetRel::SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.SetRel)
}
SetRel::SetRel(const SetRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.SetRel)
}

void SetRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&common_)) + sizeof(op_));
}

SetRel::~SetRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.SetRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void SetRel::ArenaDtor(void* object) {
  SetRel* _this = reinterpret_cast< SetRel* >(object);
  (void)_this;
}
void SetRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRel& SetRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void SetRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.SetRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Rel inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.SetRel.SetOp op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::proto::SetRel_SetOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.SetRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // repeated .substrait.proto.Rel inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // .substrait.proto.SetRel.SetOp op = 3;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.SetRel)
  return target;
}

size_t SetRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.SetRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Rel inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.SetRel.SetOp op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.SetRel)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.SetRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.SetRel)
    MergeFrom(*source);
  }
}

void SetRel::MergeFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.SetRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void SetRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRel::CopyFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRel::IsInitialized() const {
  return true;
}

void SetRel::InternalSwap(SetRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRel, op_)
      + sizeof(SetRel::op_)
      - PROTOBUF_FIELD_OFFSET(SetRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtensionSingleRel::InitAsDefaultInstance() {
  ::substrait::proto::_ExtensionSingleRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ExtensionSingleRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_ExtensionSingleRel_default_instance_._instance.get_mutable()->detail_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExtensionSingleRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ExtensionSingleRel* msg);
  static const ::substrait::proto::Rel& input(const ExtensionSingleRel* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionSingleRel* msg);
};

const ::substrait::proto::RelCommon&
ExtensionSingleRel::_Internal::common(const ExtensionSingleRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
ExtensionSingleRel::_Internal::input(const ExtensionSingleRel* msg) {
  return *msg->input_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ExtensionSingleRel::_Internal::detail(const ExtensionSingleRel* msg) {
  return *msg->detail_;
}
void ExtensionSingleRel::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionSingleRel::ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExtensionSingleRel)
}
ExtensionSingleRel::ExtensionSingleRel(const ExtensionSingleRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExtensionSingleRel)
}

void ExtensionSingleRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_) -
      reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionSingleRel::~ExtensionSingleRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExtensionSingleRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtensionSingleRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionSingleRel::ArenaDtor(void* object) {
  ExtensionSingleRel* _this = reinterpret_cast< ExtensionSingleRel* >(object);
  (void)_this;
}
void ExtensionSingleRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionSingleRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionSingleRel& ExtensionSingleRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExtensionSingleRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExtensionSingleRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionSingleRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionSingleRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExtensionSingleRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .google.protobuf.Any detail = 3;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExtensionSingleRel)
  return target;
}

size_t ExtensionSingleRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExtensionSingleRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .google.protobuf.Any detail = 3;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionSingleRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExtensionSingleRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtensionSingleRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtensionSingleRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExtensionSingleRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExtensionSingleRel)
    MergeFrom(*source);
  }
}

void ExtensionSingleRel::MergeFrom(const ExtensionSingleRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExtensionSingleRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
}

void ExtensionSingleRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExtensionSingleRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionSingleRel::CopyFrom(const ExtensionSingleRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExtensionSingleRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSingleRel::IsInitialized() const {
  return true;
}

void ExtensionSingleRel::InternalSwap(ExtensionSingleRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, detail_)
      + sizeof(ExtensionSingleRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionSingleRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtensionLeafRel::InitAsDefaultInstance() {
  ::substrait::proto::_ExtensionLeafRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ExtensionLeafRel_default_instance_._instance.get_mutable()->detail_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExtensionLeafRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ExtensionLeafRel* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionLeafRel* msg);
};

const ::substrait::proto::RelCommon&
ExtensionLeafRel::_Internal::common(const ExtensionLeafRel* msg) {
  return *msg->common_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ExtensionLeafRel::_Internal::detail(const ExtensionLeafRel* msg) {
  return *msg->detail_;
}
void ExtensionLeafRel::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionLeafRel::ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExtensionLeafRel)
}
ExtensionLeafRel::ExtensionLeafRel(const ExtensionLeafRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExtensionLeafRel)
}

void ExtensionLeafRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_) -
      reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionLeafRel::~ExtensionLeafRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExtensionLeafRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtensionLeafRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionLeafRel::ArenaDtor(void* object) {
  ExtensionLeafRel* _this = reinterpret_cast< ExtensionLeafRel* >(object);
  (void)_this;
}
void ExtensionLeafRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionLeafRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionLeafRel& ExtensionLeafRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionLeafRel_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExtensionLeafRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExtensionLeafRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionLeafRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionLeafRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExtensionLeafRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .google.protobuf.Any detail = 2;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExtensionLeafRel)
  return target;
}

size_t ExtensionLeafRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExtensionLeafRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .google.protobuf.Any detail = 2;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionLeafRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExtensionLeafRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtensionLeafRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtensionLeafRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExtensionLeafRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExtensionLeafRel)
    MergeFrom(*source);
  }
}

void ExtensionLeafRel::MergeFrom(const ExtensionLeafRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExtensionLeafRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
}

void ExtensionLeafRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExtensionLeafRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionLeafRel::CopyFrom(const ExtensionLeafRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExtensionLeafRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionLeafRel::IsInitialized() const {
  return true;
}

void ExtensionLeafRel::InternalSwap(ExtensionLeafRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, detail_)
      + sizeof(ExtensionLeafRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionLeafRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtensionMultiRel::InitAsDefaultInstance() {
  ::substrait::proto::_ExtensionMultiRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ExtensionMultiRel_default_instance_._instance.get_mutable()->detail_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExtensionMultiRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ExtensionMultiRel* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionMultiRel* msg);
};

const ::substrait::proto::RelCommon&
ExtensionMultiRel::_Internal::common(const ExtensionMultiRel* msg) {
  return *msg->common_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ExtensionMultiRel::_Internal::detail(const ExtensionMultiRel* msg) {
  return *msg->detail_;
}
void ExtensionMultiRel::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionMultiRel::ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExtensionMultiRel)
}
ExtensionMultiRel::ExtensionMultiRel(const ExtensionMultiRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExtensionMultiRel)
}

void ExtensionMultiRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detail_) -
      reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionMultiRel::~ExtensionMultiRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExtensionMultiRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtensionMultiRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionMultiRel::ArenaDtor(void* object) {
  ExtensionMultiRel* _this = reinterpret_cast< ExtensionMultiRel* >(object);
  (void)_this;
}
void ExtensionMultiRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionMultiRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionMultiRel& ExtensionMultiRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExtensionMultiRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExtensionMultiRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionMultiRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Rel inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionMultiRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExtensionMultiRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // repeated .substrait.proto.Rel inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // .google.protobuf.Any detail = 3;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExtensionMultiRel)
  return target;
}

size_t ExtensionMultiRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExtensionMultiRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Rel inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .google.protobuf.Any detail = 3;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionMultiRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExtensionMultiRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtensionMultiRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtensionMultiRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExtensionMultiRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExtensionMultiRel)
    MergeFrom(*source);
  }
}

void ExtensionMultiRel::MergeFrom(const ExtensionMultiRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExtensionMultiRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
}

void ExtensionMultiRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExtensionMultiRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionMultiRel::CopyFrom(const ExtensionMultiRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExtensionMultiRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionMultiRel::IsInitialized() const {
  return true;
}

void ExtensionMultiRel::InternalSwap(ExtensionMultiRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, detail_)
      + sizeof(ExtensionMultiRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionMultiRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_ScatterFields::InitAsDefaultInstance() {
}
class ExchangeRel_ScatterFields::_Internal {
 public:
};

ExchangeRel_ScatterFields::ExchangeRel_ScatterFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.ScatterFields)
}
ExchangeRel_ScatterFields::ExchangeRel_ScatterFields(const ExchangeRel_ScatterFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.ScatterFields)
}

void ExchangeRel_ScatterFields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

ExchangeRel_ScatterFields::~ExchangeRel_ScatterFields() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.ScatterFields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_ScatterFields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExchangeRel_ScatterFields::ArenaDtor(void* object) {
  ExchangeRel_ScatterFields* _this = reinterpret_cast< ExchangeRel_ScatterFields* >(object);
  (void)_this;
}
void ExchangeRel_ScatterFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_ScatterFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_ScatterFields& ExchangeRel_ScatterFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_ScatterFields::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.ScatterFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_ScatterFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.FieldReference fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_ScatterFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.ScatterFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.FieldReference fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.ScatterFields)
  return target;
}

size_t ExchangeRel_ScatterFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.ScatterFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.FieldReference fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_ScatterFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.ScatterFields)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_ScatterFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_ScatterFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.ScatterFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.ScatterFields)
    MergeFrom(*source);
  }
}

void ExchangeRel_ScatterFields::MergeFrom(const ExchangeRel_ScatterFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.ScatterFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void ExchangeRel_ScatterFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.ScatterFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_ScatterFields::CopyFrom(const ExchangeRel_ScatterFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.ScatterFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_ScatterFields::IsInitialized() const {
  return true;
}

void ExchangeRel_ScatterFields::InternalSwap(ExchangeRel_ScatterFields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_ScatterFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_SingleBucketExpression::InitAsDefaultInstance() {
  ::substrait::proto::_ExchangeRel_SingleBucketExpression_default_instance_._instance.get_mutable()->expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class ExchangeRel_SingleBucketExpression::_Internal {
 public:
  static const ::substrait::proto::Expression& expression(const ExchangeRel_SingleBucketExpression* msg);
};

const ::substrait::proto::Expression&
ExchangeRel_SingleBucketExpression::_Internal::expression(const ExchangeRel_SingleBucketExpression* msg) {
  return *msg->expression_;
}
ExchangeRel_SingleBucketExpression::ExchangeRel_SingleBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.SingleBucketExpression)
}
ExchangeRel_SingleBucketExpression::ExchangeRel_SingleBucketExpression(const ExchangeRel_SingleBucketExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expression()) {
    expression_ = new ::substrait::proto::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.SingleBucketExpression)
}

void ExchangeRel_SingleBucketExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  expression_ = nullptr;
}

ExchangeRel_SingleBucketExpression::~ExchangeRel_SingleBucketExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.SingleBucketExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_SingleBucketExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expression_;
}

void ExchangeRel_SingleBucketExpression::ArenaDtor(void* object) {
  ExchangeRel_SingleBucketExpression* _this = reinterpret_cast< ExchangeRel_SingleBucketExpression* >(object);
  (void)_this;
}
void ExchangeRel_SingleBucketExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_SingleBucketExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_SingleBucketExpression& ExchangeRel_SingleBucketExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_SingleBucketExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_SingleBucketExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_SingleBucketExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.SingleBucketExpression)
  return target;
}

size_t ExchangeRel_SingleBucketExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_SingleBucketExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_SingleBucketExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_SingleBucketExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.SingleBucketExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.SingleBucketExpression)
    MergeFrom(*source);
  }
}

void ExchangeRel_SingleBucketExpression::MergeFrom(const ExchangeRel_SingleBucketExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
  }
}

void ExchangeRel_SingleBucketExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_SingleBucketExpression::CopyFrom(const ExchangeRel_SingleBucketExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.SingleBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_SingleBucketExpression::IsInitialized() const {
  return true;
}

void ExchangeRel_SingleBucketExpression::InternalSwap(ExchangeRel_SingleBucketExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_SingleBucketExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_MultiBucketExpression::InitAsDefaultInstance() {
  ::substrait::proto::_ExchangeRel_MultiBucketExpression_default_instance_._instance.get_mutable()->expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class ExchangeRel_MultiBucketExpression::_Internal {
 public:
  static const ::substrait::proto::Expression& expression(const ExchangeRel_MultiBucketExpression* msg);
};

const ::substrait::proto::Expression&
ExchangeRel_MultiBucketExpression::_Internal::expression(const ExchangeRel_MultiBucketExpression* msg) {
  return *msg->expression_;
}
ExchangeRel_MultiBucketExpression::ExchangeRel_MultiBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.MultiBucketExpression)
}
ExchangeRel_MultiBucketExpression::ExchangeRel_MultiBucketExpression(const ExchangeRel_MultiBucketExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expression()) {
    expression_ = new ::substrait::proto::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  constrained_to_count_ = from.constrained_to_count_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.MultiBucketExpression)
}

void ExchangeRel_MultiBucketExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&expression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constrained_to_count_) -
      reinterpret_cast<char*>(&expression_)) + sizeof(constrained_to_count_));
}

ExchangeRel_MultiBucketExpression::~ExchangeRel_MultiBucketExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.MultiBucketExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_MultiBucketExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expression_;
}

void ExchangeRel_MultiBucketExpression::ArenaDtor(void* object) {
  ExchangeRel_MultiBucketExpression* _this = reinterpret_cast< ExchangeRel_MultiBucketExpression* >(object);
  (void)_this;
}
void ExchangeRel_MultiBucketExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_MultiBucketExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_MultiBucketExpression& ExchangeRel_MultiBucketExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_MultiBucketExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  constrained_to_count_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_MultiBucketExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool constrained_to_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          constrained_to_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_MultiBucketExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  // bool constrained_to_count = 2;
  if (this->constrained_to_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_constrained_to_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.MultiBucketExpression)
  return target;
}

size_t ExchangeRel_MultiBucketExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // bool constrained_to_count = 2;
  if (this->constrained_to_count() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_MultiBucketExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_MultiBucketExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_MultiBucketExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.MultiBucketExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.MultiBucketExpression)
    MergeFrom(*source);
  }
}

void ExchangeRel_MultiBucketExpression::MergeFrom(const ExchangeRel_MultiBucketExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
  }
  if (from.constrained_to_count() != 0) {
    _internal_set_constrained_to_count(from._internal_constrained_to_count());
  }
}

void ExchangeRel_MultiBucketExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_MultiBucketExpression::CopyFrom(const ExchangeRel_MultiBucketExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.MultiBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_MultiBucketExpression::IsInitialized() const {
  return true;
}

void ExchangeRel_MultiBucketExpression::InternalSwap(ExchangeRel_MultiBucketExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRel_MultiBucketExpression, constrained_to_count_)
      + sizeof(ExchangeRel_MultiBucketExpression::constrained_to_count_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRel_MultiBucketExpression, expression_)>(
          reinterpret_cast<char*>(&expression_),
          reinterpret_cast<char*>(&other->expression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_MultiBucketExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_Broadcast::InitAsDefaultInstance() {
}
class ExchangeRel_Broadcast::_Internal {
 public:
};

ExchangeRel_Broadcast::ExchangeRel_Broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.Broadcast)
}
ExchangeRel_Broadcast::ExchangeRel_Broadcast(const ExchangeRel_Broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.Broadcast)
}

void ExchangeRel_Broadcast::SharedCtor() {
}

ExchangeRel_Broadcast::~ExchangeRel_Broadcast() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.Broadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_Broadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExchangeRel_Broadcast::ArenaDtor(void* object) {
  ExchangeRel_Broadcast* _this = reinterpret_cast< ExchangeRel_Broadcast* >(object);
  (void)_this;
}
void ExchangeRel_Broadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_Broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_Broadcast& ExchangeRel_Broadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeRel_Broadcast_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_Broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_Broadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_Broadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.Broadcast)
  return target;
}

size_t ExchangeRel_Broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.Broadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_Broadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_Broadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_Broadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.Broadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.Broadcast)
    MergeFrom(*source);
  }
}

void ExchangeRel_Broadcast::MergeFrom(const ExchangeRel_Broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExchangeRel_Broadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_Broadcast::CopyFrom(const ExchangeRel_Broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_Broadcast::IsInitialized() const {
  return true;
}

void ExchangeRel_Broadcast::InternalSwap(ExchangeRel_Broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_Broadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_RoundRobin::InitAsDefaultInstance() {
}
class ExchangeRel_RoundRobin::_Internal {
 public:
};

ExchangeRel_RoundRobin::ExchangeRel_RoundRobin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.RoundRobin)
}
ExchangeRel_RoundRobin::ExchangeRel_RoundRobin(const ExchangeRel_RoundRobin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exact_ = from.exact_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.RoundRobin)
}

void ExchangeRel_RoundRobin::SharedCtor() {
  exact_ = false;
}

ExchangeRel_RoundRobin::~ExchangeRel_RoundRobin() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.RoundRobin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_RoundRobin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExchangeRel_RoundRobin::ArenaDtor(void* object) {
  ExchangeRel_RoundRobin* _this = reinterpret_cast< ExchangeRel_RoundRobin* >(object);
  (void)_this;
}
void ExchangeRel_RoundRobin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_RoundRobin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_RoundRobin& ExchangeRel_RoundRobin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeRel_RoundRobin_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_RoundRobin::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.RoundRobin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exact_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_RoundRobin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool exact = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exact_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_RoundRobin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.RoundRobin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exact = 1;
  if (this->exact() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.RoundRobin)
  return target;
}

size_t ExchangeRel_RoundRobin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.RoundRobin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exact = 1;
  if (this->exact() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_RoundRobin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.RoundRobin)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_RoundRobin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_RoundRobin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.RoundRobin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.RoundRobin)
    MergeFrom(*source);
  }
}

void ExchangeRel_RoundRobin::MergeFrom(const ExchangeRel_RoundRobin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.RoundRobin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exact() != 0) {
    _internal_set_exact(from._internal_exact());
  }
}

void ExchangeRel_RoundRobin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.RoundRobin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_RoundRobin::CopyFrom(const ExchangeRel_RoundRobin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.RoundRobin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_RoundRobin::IsInitialized() const {
  return true;
}

void ExchangeRel_RoundRobin::InternalSwap(ExchangeRel_RoundRobin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exact_, other->exact_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_RoundRobin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel_ExchangeTarget::InitAsDefaultInstance() {
  ::substrait::proto::_ExchangeRel_ExchangeTarget_default_instance_.uri_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_ExchangeRel_ExchangeTarget_default_instance_.extended_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExchangeRel_ExchangeTarget::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& extended(const ExchangeRel_ExchangeTarget* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ExchangeRel_ExchangeTarget::_Internal::extended(const ExchangeRel_ExchangeTarget* msg) {
  return *msg->target_type_.extended_;
}
void ExchangeRel_ExchangeTarget::set_allocated_extended(PROTOBUF_NAMESPACE_ID::Any* extended) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_target_type();
  if (extended) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extended)->GetArena();
    if (message_arena != submessage_arena) {
      extended = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extended, submessage_arena);
    }
    set_has_extended();
    target_type_.extended_ = extended;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.ExchangeTarget.extended)
}
void ExchangeRel_ExchangeTarget::clear_extended() {
  if (_internal_has_extended()) {
    if (GetArena() == nullptr) {
      delete target_type_.extended_;
    }
    clear_has_target_type();
  }
}
ExchangeRel_ExchangeTarget::ExchangeRel_ExchangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partition_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel.ExchangeTarget)
}
ExchangeRel_ExchangeTarget::ExchangeRel_ExchangeTarget(const ExchangeRel_ExchangeTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partition_id_(from.partition_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target_type();
  switch (from.target_type_case()) {
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case kExtended: {
      _internal_mutable_extended()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extended());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel.ExchangeTarget)
}

void ExchangeRel_ExchangeTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_target_type();
}

ExchangeRel_ExchangeTarget::~ExchangeRel_ExchangeTarget() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel.ExchangeTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel_ExchangeTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_target_type()) {
    clear_target_type();
  }
}

void ExchangeRel_ExchangeTarget::ArenaDtor(void* object) {
  ExchangeRel_ExchangeTarget* _this = reinterpret_cast< ExchangeRel_ExchangeTarget* >(object);
  (void)_this;
}
void ExchangeRel_ExchangeTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel_ExchangeTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel_ExchangeTarget& ExchangeRel_ExchangeTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeRel_ExchangeTarget_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel_ExchangeTarget::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ExchangeRel.ExchangeTarget)
  switch (target_type_case()) {
    case kUri: {
      target_type_.uri_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kExtended: {
      if (GetArena() == nullptr) {
        delete target_type_.extended_;
      }
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}


void ExchangeRel_ExchangeTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel.ExchangeTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_id_.Clear();
  clear_target_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_ExchangeTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 partition_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_partition_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_partition_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ExchangeRel.ExchangeTarget.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any extended = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extended(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel_ExchangeTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel.ExchangeTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 partition_id = 1;
  {
    int byte_size = _partition_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_partition_id(), byte_size, target);
    }
  }

  // string uri = 2;
  if (_internal_has_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ExchangeRel.ExchangeTarget.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // .google.protobuf.Any extended = 3;
  if (_internal_has_extended()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extended(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel.ExchangeTarget)
  return target;
}

size_t ExchangeRel_ExchangeTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel.ExchangeTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 partition_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->partition_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _partition_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (target_type_case()) {
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
      break;
    }
    // .google.protobuf.Any extended = 3;
    case kExtended: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_type_.extended_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel_ExchangeTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel.ExchangeTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel_ExchangeTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel_ExchangeTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel.ExchangeTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel.ExchangeTarget)
    MergeFrom(*source);
  }
}

void ExchangeRel_ExchangeTarget::MergeFrom(const ExchangeRel_ExchangeTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel.ExchangeTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_id_.MergeFrom(from.partition_id_);
  switch (from.target_type_case()) {
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case kExtended: {
      _internal_mutable_extended()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_extended());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
}

void ExchangeRel_ExchangeTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel.ExchangeTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel_ExchangeTarget::CopyFrom(const ExchangeRel_ExchangeTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel.ExchangeTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_ExchangeTarget::IsInitialized() const {
  return true;
}

void ExchangeRel_ExchangeTarget::InternalSwap(ExchangeRel_ExchangeTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partition_id_.InternalSwap(&other->partition_id_);
  swap(target_type_, other->target_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_ExchangeTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangeRel::InitAsDefaultInstance() {
  ::substrait::proto::_ExchangeRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_.scatter_by_fields_ = const_cast< ::substrait::proto::ExchangeRel_ScatterFields*>(
      ::substrait::proto::ExchangeRel_ScatterFields::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_.single_target_ = const_cast< ::substrait::proto::ExchangeRel_SingleBucketExpression*>(
      ::substrait::proto::ExchangeRel_SingleBucketExpression::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_.multi_target_ = const_cast< ::substrait::proto::ExchangeRel_MultiBucketExpression*>(
      ::substrait::proto::ExchangeRel_MultiBucketExpression::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_.round_robin_ = const_cast< ::substrait::proto::ExchangeRel_RoundRobin*>(
      ::substrait::proto::ExchangeRel_RoundRobin::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_.broadcast_ = const_cast< ::substrait::proto::ExchangeRel_Broadcast*>(
      ::substrait::proto::ExchangeRel_Broadcast::internal_default_instance());
  ::substrait::proto::_ExchangeRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ExchangeRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ExchangeRel* msg);
  static const ::substrait::proto::Rel& input(const ExchangeRel* msg);
  static const ::substrait::proto::ExchangeRel_ScatterFields& scatter_by_fields(const ExchangeRel* msg);
  static const ::substrait::proto::ExchangeRel_SingleBucketExpression& single_target(const ExchangeRel* msg);
  static const ::substrait::proto::ExchangeRel_MultiBucketExpression& multi_target(const ExchangeRel* msg);
  static const ::substrait::proto::ExchangeRel_RoundRobin& round_robin(const ExchangeRel* msg);
  static const ::substrait::proto::ExchangeRel_Broadcast& broadcast(const ExchangeRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const ExchangeRel* msg);
};

const ::substrait::proto::RelCommon&
ExchangeRel::_Internal::common(const ExchangeRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
ExchangeRel::_Internal::input(const ExchangeRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::ExchangeRel_ScatterFields&
ExchangeRel::_Internal::scatter_by_fields(const ExchangeRel* msg) {
  return *msg->exchange_kind_.scatter_by_fields_;
}
const ::substrait::proto::ExchangeRel_SingleBucketExpression&
ExchangeRel::_Internal::single_target(const ExchangeRel* msg) {
  return *msg->exchange_kind_.single_target_;
}
const ::substrait::proto::ExchangeRel_MultiBucketExpression&
ExchangeRel::_Internal::multi_target(const ExchangeRel* msg) {
  return *msg->exchange_kind_.multi_target_;
}
const ::substrait::proto::ExchangeRel_RoundRobin&
ExchangeRel::_Internal::round_robin(const ExchangeRel* msg) {
  return *msg->exchange_kind_.round_robin_;
}
const ::substrait::proto::ExchangeRel_Broadcast&
ExchangeRel::_Internal::broadcast(const ExchangeRel* msg) {
  return *msg->exchange_kind_.broadcast_;
}
const ::substrait::proto::extensions::AdvancedExtension&
ExchangeRel::_Internal::advanced_extension(const ExchangeRel* msg) {
  return *msg->advanced_extension_;
}
void ExchangeRel::set_allocated_scatter_by_fields(::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exchange_kind();
  if (scatter_by_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scatter_by_fields);
    if (message_arena != submessage_arena) {
      scatter_by_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scatter_by_fields, submessage_arena);
    }
    set_has_scatter_by_fields();
    exchange_kind_.scatter_by_fields_ = scatter_by_fields;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.scatter_by_fields)
}
void ExchangeRel::set_allocated_single_target(::substrait::proto::ExchangeRel_SingleBucketExpression* single_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exchange_kind();
  if (single_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(single_target);
    if (message_arena != submessage_arena) {
      single_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_target, submessage_arena);
    }
    set_has_single_target();
    exchange_kind_.single_target_ = single_target;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.single_target)
}
void ExchangeRel::set_allocated_multi_target(::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exchange_kind();
  if (multi_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi_target);
    if (message_arena != submessage_arena) {
      multi_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_target, submessage_arena);
    }
    set_has_multi_target();
    exchange_kind_.multi_target_ = multi_target;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.multi_target)
}
void ExchangeRel::set_allocated_round_robin(::substrait::proto::ExchangeRel_RoundRobin* round_robin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exchange_kind();
  if (round_robin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(round_robin);
    if (message_arena != submessage_arena) {
      round_robin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, round_robin, submessage_arena);
    }
    set_has_round_robin();
    exchange_kind_.round_robin_ = round_robin;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.round_robin)
}
void ExchangeRel::set_allocated_broadcast(::substrait::proto::ExchangeRel_Broadcast* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exchange_kind();
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(broadcast);
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    set_has_broadcast();
    exchange_kind_.broadcast_ = broadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.broadcast)
}
void ExchangeRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ExchangeRel::ExchangeRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExchangeRel)
}
ExchangeRel::ExchangeRel(const ExchangeRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  partition_count_ = from.partition_count_;
  clear_has_exchange_kind();
  switch (from.exchange_kind_case()) {
    case kScatterByFields: {
      _internal_mutable_scatter_by_fields()->::substrait::proto::ExchangeRel_ScatterFields::MergeFrom(from._internal_scatter_by_fields());
      break;
    }
    case kSingleTarget: {
      _internal_mutable_single_target()->::substrait::proto::ExchangeRel_SingleBucketExpression::MergeFrom(from._internal_single_target());
      break;
    }
    case kMultiTarget: {
      _internal_mutable_multi_target()->::substrait::proto::ExchangeRel_MultiBucketExpression::MergeFrom(from._internal_multi_target());
      break;
    }
    case kRoundRobin: {
      _internal_mutable_round_robin()->::substrait::proto::ExchangeRel_RoundRobin::MergeFrom(from._internal_round_robin());
      break;
    }
    case kBroadcast: {
      _internal_mutable_broadcast()->::substrait::proto::ExchangeRel_Broadcast::MergeFrom(from._internal_broadcast());
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExchangeRel)
}

void ExchangeRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partition_count_) -
      reinterpret_cast<char*>(&common_)) + sizeof(partition_count_));
  clear_has_exchange_kind();
}

ExchangeRel::~ExchangeRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExchangeRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
  if (has_exchange_kind()) {
    clear_exchange_kind();
  }
}

void ExchangeRel::ArenaDtor(void* object) {
  ExchangeRel* _this = reinterpret_cast< ExchangeRel* >(object);
  (void)_this;
}
void ExchangeRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeRel& ExchangeRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExchangeRel::clear_exchange_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ExchangeRel)
  switch (exchange_kind_case()) {
    case kScatterByFields: {
      if (GetArena() == nullptr) {
        delete exchange_kind_.scatter_by_fields_;
      }
      break;
    }
    case kSingleTarget: {
      if (GetArena() == nullptr) {
        delete exchange_kind_.single_target_;
      }
      break;
    }
    case kMultiTarget: {
      if (GetArena() == nullptr) {
        delete exchange_kind_.multi_target_;
      }
      break;
    }
    case kRoundRobin: {
      if (GetArena() == nullptr) {
        delete exchange_kind_.round_robin_;
      }
      break;
    }
    case kBroadcast: {
      if (GetArena() == nullptr) {
        delete exchange_kind_.broadcast_;
      }
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXCHANGE_KIND_NOT_SET;
}


void ExchangeRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExchangeRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  partition_count_ = 0;
  clear_exchange_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partition_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ExchangeRel.ExchangeTarget targets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel.ScatterFields scatter_by_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scatter_by_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel.SingleBucketExpression single_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel.MultiBucketExpression multi_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel.RoundRobin round_robin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_round_robin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel.Broadcast broadcast = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExchangeRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // int32 partition_count = 3;
  if (this->partition_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_count(), target);
  }

  // repeated .substrait.proto.ExchangeRel.ExchangeTarget targets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_targets(i), target, stream);
  }

  // .substrait.proto.ExchangeRel.ScatterFields scatter_by_fields = 5;
  if (_internal_has_scatter_by_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::scatter_by_fields(this), target, stream);
  }

  // .substrait.proto.ExchangeRel.SingleBucketExpression single_target = 6;
  if (_internal_has_single_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::single_target(this), target, stream);
  }

  // .substrait.proto.ExchangeRel.MultiBucketExpression multi_target = 7;
  if (_internal_has_multi_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::multi_target(this), target, stream);
  }

  // .substrait.proto.ExchangeRel.RoundRobin round_robin = 8;
  if (_internal_has_round_robin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::round_robin(this), target, stream);
  }

  // .substrait.proto.ExchangeRel.Broadcast broadcast = 9;
  if (_internal_has_broadcast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::broadcast(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExchangeRel)
  return target;
}

size_t ExchangeRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExchangeRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.ExchangeRel.ExchangeTarget targets = 4;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // int32 partition_count = 3;
  if (this->partition_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partition_count());
  }

  switch (exchange_kind_case()) {
    // .substrait.proto.ExchangeRel.ScatterFields scatter_by_fields = 5;
    case kScatterByFields: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exchange_kind_.scatter_by_fields_);
      break;
    }
    // .substrait.proto.ExchangeRel.SingleBucketExpression single_target = 6;
    case kSingleTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exchange_kind_.single_target_);
      break;
    }
    // .substrait.proto.ExchangeRel.MultiBucketExpression multi_target = 7;
    case kMultiTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exchange_kind_.multi_target_);
      break;
    }
    // .substrait.proto.ExchangeRel.RoundRobin round_robin = 8;
    case kRoundRobin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exchange_kind_.round_robin_);
      break;
    }
    // .substrait.proto.ExchangeRel.Broadcast broadcast = 9;
    case kBroadcast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exchange_kind_.broadcast_);
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExchangeRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExchangeRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExchangeRel)
    MergeFrom(*source);
  }
}

void ExchangeRel::MergeFrom(const ExchangeRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExchangeRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.partition_count() != 0) {
    _internal_set_partition_count(from._internal_partition_count());
  }
  switch (from.exchange_kind_case()) {
    case kScatterByFields: {
      _internal_mutable_scatter_by_fields()->::substrait::proto::ExchangeRel_ScatterFields::MergeFrom(from._internal_scatter_by_fields());
      break;
    }
    case kSingleTarget: {
      _internal_mutable_single_target()->::substrait::proto::ExchangeRel_SingleBucketExpression::MergeFrom(from._internal_single_target());
      break;
    }
    case kMultiTarget: {
      _internal_mutable_multi_target()->::substrait::proto::ExchangeRel_MultiBucketExpression::MergeFrom(from._internal_multi_target());
      break;
    }
    case kRoundRobin: {
      _internal_mutable_round_robin()->::substrait::proto::ExchangeRel_RoundRobin::MergeFrom(from._internal_round_robin());
      break;
    }
    case kBroadcast: {
      _internal_mutable_broadcast()->::substrait::proto::ExchangeRel_Broadcast::MergeFrom(from._internal_broadcast());
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
}

void ExchangeRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExchangeRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRel::CopyFrom(const ExchangeRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExchangeRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel::IsInitialized() const {
  return true;
}

void ExchangeRel::InternalSwap(ExchangeRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRel, partition_count_)
      + sizeof(ExchangeRel::partition_count_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
  swap(exchange_kind_, other->exchange_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpandRel_ExpandField::InitAsDefaultInstance() {
  ::substrait::proto::_ExpandRel_ExpandField_default_instance_.switching_field_ = const_cast< ::substrait::proto::ExpandRel_SwitchingField*>(
      ::substrait::proto::ExpandRel_SwitchingField::internal_default_instance());
  ::substrait::proto::_ExpandRel_ExpandField_default_instance_.consistent_field_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class ExpandRel_ExpandField::_Internal {
 public:
  static const ::substrait::proto::ExpandRel_SwitchingField& switching_field(const ExpandRel_ExpandField* msg);
  static const ::substrait::proto::Expression& consistent_field(const ExpandRel_ExpandField* msg);
};

const ::substrait::proto::ExpandRel_SwitchingField&
ExpandRel_ExpandField::_Internal::switching_field(const ExpandRel_ExpandField* msg) {
  return *msg->field_type_.switching_field_;
}
const ::substrait::proto::Expression&
ExpandRel_ExpandField::_Internal::consistent_field(const ExpandRel_ExpandField* msg) {
  return *msg->field_type_.consistent_field_;
}
void ExpandRel_ExpandField::set_allocated_switching_field(::substrait::proto::ExpandRel_SwitchingField* switching_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_field_type();
  if (switching_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(switching_field);
    if (message_arena != submessage_arena) {
      switching_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switching_field, submessage_arena);
    }
    set_has_switching_field();
    field_type_.switching_field_ = switching_field;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpandRel.ExpandField.switching_field)
}
void ExpandRel_ExpandField::set_allocated_consistent_field(::substrait::proto::Expression* consistent_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_field_type();
  if (consistent_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consistent_field);
    if (message_arena != submessage_arena) {
      consistent_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistent_field, submessage_arena);
    }
    set_has_consistent_field();
    field_type_.consistent_field_ = consistent_field;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpandRel.ExpandField.consistent_field)
}
ExpandRel_ExpandField::ExpandRel_ExpandField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExpandRel.ExpandField)
}
ExpandRel_ExpandField::ExpandRel_ExpandField(const ExpandRel_ExpandField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_field_type();
  switch (from.field_type_case()) {
    case kSwitchingField: {
      _internal_mutable_switching_field()->::substrait::proto::ExpandRel_SwitchingField::MergeFrom(from._internal_switching_field());
      break;
    }
    case kConsistentField: {
      _internal_mutable_consistent_field()->::substrait::proto::Expression::MergeFrom(from._internal_consistent_field());
      break;
    }
    case FIELD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExpandRel.ExpandField)
}

void ExpandRel_ExpandField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_field_type();
}

ExpandRel_ExpandField::~ExpandRel_ExpandField() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExpandRel.ExpandField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandRel_ExpandField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_field_type()) {
    clear_field_type();
  }
}

void ExpandRel_ExpandField::ArenaDtor(void* object) {
  ExpandRel_ExpandField* _this = reinterpret_cast< ExpandRel_ExpandField* >(object);
  (void)_this;
}
void ExpandRel_ExpandField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandRel_ExpandField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpandRel_ExpandField& ExpandRel_ExpandField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExpandRel_ExpandField::clear_field_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ExpandRel.ExpandField)
  switch (field_type_case()) {
    case kSwitchingField: {
      if (GetArena() == nullptr) {
        delete field_type_.switching_field_;
      }
      break;
    }
    case kConsistentField: {
      if (GetArena() == nullptr) {
        delete field_type_.consistent_field_;
      }
      break;
    }
    case FIELD_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELD_TYPE_NOT_SET;
}


void ExpandRel_ExpandField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExpandRel.ExpandField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_field_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandRel_ExpandField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.ExpandRel.SwitchingField switching_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_switching_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression consistent_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistent_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandRel_ExpandField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExpandRel.ExpandField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.ExpandRel.SwitchingField switching_field = 2;
  if (_internal_has_switching_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::switching_field(this), target, stream);
  }

  // .substrait.proto.Expression consistent_field = 3;
  if (_internal_has_consistent_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::consistent_field(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExpandRel.ExpandField)
  return target;
}

size_t ExpandRel_ExpandField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExpandRel.ExpandField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (field_type_case()) {
    // .substrait.proto.ExpandRel.SwitchingField switching_field = 2;
    case kSwitchingField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_type_.switching_field_);
      break;
    }
    // .substrait.proto.Expression consistent_field = 3;
    case kConsistentField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_type_.consistent_field_);
      break;
    }
    case FIELD_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandRel_ExpandField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExpandRel.ExpandField)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandRel_ExpandField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandRel_ExpandField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExpandRel.ExpandField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExpandRel.ExpandField)
    MergeFrom(*source);
  }
}

void ExpandRel_ExpandField::MergeFrom(const ExpandRel_ExpandField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExpandRel.ExpandField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.field_type_case()) {
    case kSwitchingField: {
      _internal_mutable_switching_field()->::substrait::proto::ExpandRel_SwitchingField::MergeFrom(from._internal_switching_field());
      break;
    }
    case kConsistentField: {
      _internal_mutable_consistent_field()->::substrait::proto::Expression::MergeFrom(from._internal_consistent_field());
      break;
    }
    case FIELD_TYPE_NOT_SET: {
      break;
    }
  }
}

void ExpandRel_ExpandField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExpandRel.ExpandField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandRel_ExpandField::CopyFrom(const ExpandRel_ExpandField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExpandRel.ExpandField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandRel_ExpandField::IsInitialized() const {
  return true;
}

void ExpandRel_ExpandField::InternalSwap(ExpandRel_ExpandField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(field_type_, other->field_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandRel_ExpandField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpandRel_SwitchingField::InitAsDefaultInstance() {
}
class ExpandRel_SwitchingField::_Internal {
 public:
};

ExpandRel_SwitchingField::ExpandRel_SwitchingField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  duplicates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExpandRel.SwitchingField)
}
ExpandRel_SwitchingField::ExpandRel_SwitchingField(const ExpandRel_SwitchingField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      duplicates_(from.duplicates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExpandRel.SwitchingField)
}

void ExpandRel_SwitchingField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

ExpandRel_SwitchingField::~ExpandRel_SwitchingField() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExpandRel.SwitchingField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandRel_SwitchingField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExpandRel_SwitchingField::ArenaDtor(void* object) {
  ExpandRel_SwitchingField* _this = reinterpret_cast< ExpandRel_SwitchingField* >(object);
  (void)_this;
}
void ExpandRel_SwitchingField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandRel_SwitchingField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpandRel_SwitchingField& ExpandRel_SwitchingField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExpandRel_SwitchingField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExpandRel.SwitchingField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duplicates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandRel_SwitchingField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression duplicates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_duplicates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandRel_SwitchingField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExpandRel.SwitchingField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression duplicates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_duplicates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_duplicates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExpandRel.SwitchingField)
  return target;
}

size_t ExpandRel_SwitchingField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExpandRel.SwitchingField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression duplicates = 1;
  total_size += 1UL * this->_internal_duplicates_size();
  for (const auto& msg : this->duplicates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandRel_SwitchingField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExpandRel.SwitchingField)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandRel_SwitchingField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandRel_SwitchingField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExpandRel.SwitchingField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExpandRel.SwitchingField)
    MergeFrom(*source);
  }
}

void ExpandRel_SwitchingField::MergeFrom(const ExpandRel_SwitchingField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExpandRel.SwitchingField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  duplicates_.MergeFrom(from.duplicates_);
}

void ExpandRel_SwitchingField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExpandRel.SwitchingField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandRel_SwitchingField::CopyFrom(const ExpandRel_SwitchingField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExpandRel.SwitchingField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandRel_SwitchingField::IsInitialized() const {
  return true;
}

void ExpandRel_SwitchingField::InternalSwap(ExpandRel_SwitchingField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  duplicates_.InternalSwap(&other->duplicates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandRel_SwitchingField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpandRel::InitAsDefaultInstance() {
  ::substrait::proto::_ExpandRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_ExpandRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class ExpandRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const ExpandRel* msg);
  static const ::substrait::proto::Rel& input(const ExpandRel* msg);
};

const ::substrait::proto::RelCommon&
ExpandRel::_Internal::common(const ExpandRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
ExpandRel::_Internal::input(const ExpandRel* msg) {
  return *msg->input_;
}
ExpandRel::ExpandRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExpandRel)
}
ExpandRel::ExpandRel(const ExpandRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExpandRel)
}

void ExpandRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_) -
      reinterpret_cast<char*>(&common_)) + sizeof(input_));
}

ExpandRel::~ExpandRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExpandRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
}

void ExpandRel::ArenaDtor(void* object) {
  ExpandRel* _this = reinterpret_cast< ExpandRel* >(object);
  (void)_this;
}
void ExpandRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpandRel& ExpandRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExpandRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExpandRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ExpandRel.ExpandField fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExpandRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.proto.ExpandRel.ExpandField fields = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExpandRel)
  return target;
}

size_t ExpandRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExpandRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.ExpandRel.ExpandField fields = 4;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExpandRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExpandRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExpandRel)
    MergeFrom(*source);
  }
}

void ExpandRel::MergeFrom(const ExpandRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExpandRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
}

void ExpandRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExpandRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandRel::CopyFrom(const ExpandRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExpandRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandRel::IsInitialized() const {
  return true;
}

void ExpandRel::InternalSwap(ExpandRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandRel, input_)
      + sizeof(ExpandRel::input_)
      - PROTOBUF_FIELD_OFFSET(ExpandRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelRoot::InitAsDefaultInstance() {
  ::substrait::proto::_RelRoot_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class RelRoot::_Internal {
 public:
  static const ::substrait::proto::Rel& input(const RelRoot* msg);
};

const ::substrait::proto::Rel&
RelRoot::_Internal::input(const RelRoot* msg) {
  return *msg->input_;
}
RelRoot::RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.RelRoot)
}
RelRoot::RelRoot(const RelRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.RelRoot)
}

void RelRoot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto.base);
  input_ = nullptr;
}

RelRoot::~RelRoot() {
  // @@protoc_insertion_point(destructor:substrait.proto.RelRoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelRoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete input_;
}

void RelRoot::ArenaDtor(void* object) {
  RelRoot* _this = reinterpret_cast< RelRoot* >(object);
  (void)_this;
}
void RelRoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelRoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelRoot& RelRoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void RelRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.RelRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelRoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Rel input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.RelRoot.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelRoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.RelRoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Rel input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.RelRoot.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.RelRoot)
  return target;
}

size_t RelRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.RelRoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.proto.Rel input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelRoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.RelRoot)
  GOOGLE_DCHECK_NE(&from, this);
  const RelRoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelRoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.RelRoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.RelRoot)
    MergeFrom(*source);
  }
}

void RelRoot::MergeFrom(const RelRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.RelRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
}

void RelRoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.RelRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelRoot::CopyFrom(const RelRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.RelRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelRoot::IsInitialized() const {
  return true;
}

void RelRoot::InternalSwap(RelRoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelRoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rel::InitAsDefaultInstance() {
  ::substrait::proto::_Rel_default_instance_.read_ = const_cast< ::substrait::proto::ReadRel*>(
      ::substrait::proto::ReadRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.filter_ = const_cast< ::substrait::proto::FilterRel*>(
      ::substrait::proto::FilterRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.fetch_ = const_cast< ::substrait::proto::FetchRel*>(
      ::substrait::proto::FetchRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.aggregate_ = const_cast< ::substrait::proto::AggregateRel*>(
      ::substrait::proto::AggregateRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.sort_ = const_cast< ::substrait::proto::SortRel*>(
      ::substrait::proto::SortRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.join_ = const_cast< ::substrait::proto::JoinRel*>(
      ::substrait::proto::JoinRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.project_ = const_cast< ::substrait::proto::ProjectRel*>(
      ::substrait::proto::ProjectRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.set_ = const_cast< ::substrait::proto::SetRel*>(
      ::substrait::proto::SetRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.extension_single_ = const_cast< ::substrait::proto::ExtensionSingleRel*>(
      ::substrait::proto::ExtensionSingleRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.extension_multi_ = const_cast< ::substrait::proto::ExtensionMultiRel*>(
      ::substrait::proto::ExtensionMultiRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.extension_leaf_ = const_cast< ::substrait::proto::ExtensionLeafRel*>(
      ::substrait::proto::ExtensionLeafRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.cross_ = const_cast< ::substrait::proto::CrossRel*>(
      ::substrait::proto::CrossRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.reference_ = const_cast< ::substrait::proto::ReferenceRel*>(
      ::substrait::proto::ReferenceRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.write_ = const_cast< ::substrait::proto::WriteRel*>(
      ::substrait::proto::WriteRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.ddl_ = const_cast< ::substrait::proto::DdlRel*>(
      ::substrait::proto::DdlRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.hash_join_ = const_cast< ::substrait::proto::HashJoinRel*>(
      ::substrait::proto::HashJoinRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.merge_join_ = const_cast< ::substrait::proto::MergeJoinRel*>(
      ::substrait::proto::MergeJoinRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.nested_loop_join_ = const_cast< ::substrait::proto::NestedLoopJoinRel*>(
      ::substrait::proto::NestedLoopJoinRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.window_ = const_cast< ::substrait::proto::ConsistentPartitionWindowRel*>(
      ::substrait::proto::ConsistentPartitionWindowRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.exchange_ = const_cast< ::substrait::proto::ExchangeRel*>(
      ::substrait::proto::ExchangeRel::internal_default_instance());
  ::substrait::proto::_Rel_default_instance_.expand_ = const_cast< ::substrait::proto::ExpandRel*>(
      ::substrait::proto::ExpandRel::internal_default_instance());
}
class Rel::_Internal {
 public:
  static const ::substrait::proto::ReadRel& read(const Rel* msg);
  static const ::substrait::proto::FilterRel& filter(const Rel* msg);
  static const ::substrait::proto::FetchRel& fetch(const Rel* msg);
  static const ::substrait::proto::AggregateRel& aggregate(const Rel* msg);
  static const ::substrait::proto::SortRel& sort(const Rel* msg);
  static const ::substrait::proto::JoinRel& join(const Rel* msg);
  static const ::substrait::proto::ProjectRel& project(const Rel* msg);
  static const ::substrait::proto::SetRel& set(const Rel* msg);
  static const ::substrait::proto::ExtensionSingleRel& extension_single(const Rel* msg);
  static const ::substrait::proto::ExtensionMultiRel& extension_multi(const Rel* msg);
  static const ::substrait::proto::ExtensionLeafRel& extension_leaf(const Rel* msg);
  static const ::substrait::proto::CrossRel& cross(const Rel* msg);
  static const ::substrait::proto::ReferenceRel& reference(const Rel* msg);
  static const ::substrait::proto::WriteRel& write(const Rel* msg);
  static const ::substrait::proto::DdlRel& ddl(const Rel* msg);
  static const ::substrait::proto::HashJoinRel& hash_join(const Rel* msg);
  static const ::substrait::proto::MergeJoinRel& merge_join(const Rel* msg);
  static const ::substrait::proto::NestedLoopJoinRel& nested_loop_join(const Rel* msg);
  static const ::substrait::proto::ConsistentPartitionWindowRel& window(const Rel* msg);
  static const ::substrait::proto::ExchangeRel& exchange(const Rel* msg);
  static const ::substrait::proto::ExpandRel& expand(const Rel* msg);
};

const ::substrait::proto::ReadRel&
Rel::_Internal::read(const Rel* msg) {
  return *msg->rel_type_.read_;
}
const ::substrait::proto::FilterRel&
Rel::_Internal::filter(const Rel* msg) {
  return *msg->rel_type_.filter_;
}
const ::substrait::proto::FetchRel&
Rel::_Internal::fetch(const Rel* msg) {
  return *msg->rel_type_.fetch_;
}
const ::substrait::proto::AggregateRel&
Rel::_Internal::aggregate(const Rel* msg) {
  return *msg->rel_type_.aggregate_;
}
const ::substrait::proto::SortRel&
Rel::_Internal::sort(const Rel* msg) {
  return *msg->rel_type_.sort_;
}
const ::substrait::proto::JoinRel&
Rel::_Internal::join(const Rel* msg) {
  return *msg->rel_type_.join_;
}
const ::substrait::proto::ProjectRel&
Rel::_Internal::project(const Rel* msg) {
  return *msg->rel_type_.project_;
}
const ::substrait::proto::SetRel&
Rel::_Internal::set(const Rel* msg) {
  return *msg->rel_type_.set_;
}
const ::substrait::proto::ExtensionSingleRel&
Rel::_Internal::extension_single(const Rel* msg) {
  return *msg->rel_type_.extension_single_;
}
const ::substrait::proto::ExtensionMultiRel&
Rel::_Internal::extension_multi(const Rel* msg) {
  return *msg->rel_type_.extension_multi_;
}
const ::substrait::proto::ExtensionLeafRel&
Rel::_Internal::extension_leaf(const Rel* msg) {
  return *msg->rel_type_.extension_leaf_;
}
const ::substrait::proto::CrossRel&
Rel::_Internal::cross(const Rel* msg) {
  return *msg->rel_type_.cross_;
}
const ::substrait::proto::ReferenceRel&
Rel::_Internal::reference(const Rel* msg) {
  return *msg->rel_type_.reference_;
}
const ::substrait::proto::WriteRel&
Rel::_Internal::write(const Rel* msg) {
  return *msg->rel_type_.write_;
}
const ::substrait::proto::DdlRel&
Rel::_Internal::ddl(const Rel* msg) {
  return *msg->rel_type_.ddl_;
}
const ::substrait::proto::HashJoinRel&
Rel::_Internal::hash_join(const Rel* msg) {
  return *msg->rel_type_.hash_join_;
}
const ::substrait::proto::MergeJoinRel&
Rel::_Internal::merge_join(const Rel* msg) {
  return *msg->rel_type_.merge_join_;
}
const ::substrait::proto::NestedLoopJoinRel&
Rel::_Internal::nested_loop_join(const Rel* msg) {
  return *msg->rel_type_.nested_loop_join_;
}
const ::substrait::proto::ConsistentPartitionWindowRel&
Rel::_Internal::window(const Rel* msg) {
  return *msg->rel_type_.window_;
}
const ::substrait::proto::ExchangeRel&
Rel::_Internal::exchange(const Rel* msg) {
  return *msg->rel_type_.exchange_;
}
const ::substrait::proto::ExpandRel&
Rel::_Internal::expand(const Rel* msg) {
  return *msg->rel_type_.expand_;
}
void Rel::set_allocated_read(::substrait::proto::ReadRel* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read);
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.read)
}
void Rel::set_allocated_filter(::substrait::proto::FilterRel* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.filter)
}
void Rel::set_allocated_fetch(::substrait::proto::FetchRel* fetch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (fetch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch);
    if (message_arena != submessage_arena) {
      fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch, submessage_arena);
    }
    set_has_fetch();
    rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.fetch)
}
void Rel::set_allocated_aggregate(::substrait::proto::AggregateRel* aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aggregate);
    if (message_arena != submessage_arena) {
      aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.aggregate)
}
void Rel::set_allocated_sort(::substrait::proto::SortRel* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.sort)
}
void Rel::set_allocated_join(::substrait::proto::JoinRel* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.join)
}
void Rel::set_allocated_project(::substrait::proto::ProjectRel* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.project)
}
void Rel::set_allocated_set(::substrait::proto::SetRel* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.set)
}
void Rel::set_allocated_extension_single(::substrait::proto::ExtensionSingleRel* extension_single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (extension_single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_single);
    if (message_arena != submessage_arena) {
      extension_single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_single, submessage_arena);
    }
    set_has_extension_single();
    rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.extension_single)
}
void Rel::set_allocated_extension_multi(::substrait::proto::ExtensionMultiRel* extension_multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (extension_multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_multi);
    if (message_arena != submessage_arena) {
      extension_multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_multi, submessage_arena);
    }
    set_has_extension_multi();
    rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.extension_multi)
}
void Rel::set_allocated_extension_leaf(::substrait::proto::ExtensionLeafRel* extension_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (extension_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_leaf);
    if (message_arena != submessage_arena) {
      extension_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_leaf, submessage_arena);
    }
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.extension_leaf)
}
void Rel::set_allocated_cross(::substrait::proto::CrossRel* cross) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (cross) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cross);
    if (message_arena != submessage_arena) {
      cross = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross, submessage_arena);
    }
    set_has_cross();
    rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.cross)
}
void Rel::set_allocated_reference(::substrait::proto::ReferenceRel* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    rel_type_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.reference)
}
void Rel::set_allocated_write(::substrait::proto::WriteRel* write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(write);
    if (message_arena != submessage_arena) {
      write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write, submessage_arena);
    }
    set_has_write();
    rel_type_.write_ = write;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.write)
}
void Rel::set_allocated_ddl(::substrait::proto::DdlRel* ddl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (ddl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ddl);
    if (message_arena != submessage_arena) {
      ddl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ddl, submessage_arena);
    }
    set_has_ddl();
    rel_type_.ddl_ = ddl;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.ddl)
}
void Rel::set_allocated_hash_join(::substrait::proto::HashJoinRel* hash_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (hash_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hash_join);
    if (message_arena != submessage_arena) {
      hash_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_join, submessage_arena);
    }
    set_has_hash_join();
    rel_type_.hash_join_ = hash_join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.hash_join)
}
void Rel::set_allocated_merge_join(::substrait::proto::MergeJoinRel* merge_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (merge_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(merge_join);
    if (message_arena != submessage_arena) {
      merge_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_join, submessage_arena);
    }
    set_has_merge_join();
    rel_type_.merge_join_ = merge_join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.merge_join)
}
void Rel::set_allocated_nested_loop_join(::substrait::proto::NestedLoopJoinRel* nested_loop_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (nested_loop_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_loop_join);
    if (message_arena != submessage_arena) {
      nested_loop_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_loop_join, submessage_arena);
    }
    set_has_nested_loop_join();
    rel_type_.nested_loop_join_ = nested_loop_join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.nested_loop_join)
}
void Rel::set_allocated_window(::substrait::proto::ConsistentPartitionWindowRel* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    set_has_window();
    rel_type_.window_ = window;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.window)
}
void Rel::set_allocated_exchange(::substrait::proto::ExchangeRel* exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exchange);
    if (message_arena != submessage_arena) {
      exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange, submessage_arena);
    }
    set_has_exchange();
    rel_type_.exchange_ = exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.exchange)
}
void Rel::set_allocated_expand(::substrait::proto::ExpandRel* expand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (expand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expand);
    if (message_arena != submessage_arena) {
      expand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expand, submessage_arena);
    }
    set_has_expand();
    rel_type_.expand_ = expand;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Rel.expand)
}
Rel::Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Rel)
}
Rel::Rel(const Rel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRead: {
      _internal_mutable_read()->::substrait::proto::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::substrait::proto::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::substrait::proto::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::substrait::proto::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::substrait::proto::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::substrait::proto::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::substrait::proto::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::substrait::proto::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _internal_mutable_extension_single()->::substrait::proto::ExtensionSingleRel::MergeFrom(from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _internal_mutable_extension_multi()->::substrait::proto::ExtensionMultiRel::MergeFrom(from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _internal_mutable_extension_leaf()->::substrait::proto::ExtensionLeafRel::MergeFrom(from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _internal_mutable_cross()->::substrait::proto::CrossRel::MergeFrom(from._internal_cross());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::substrait::proto::ReferenceRel::MergeFrom(from._internal_reference());
      break;
    }
    case kWrite: {
      _internal_mutable_write()->::substrait::proto::WriteRel::MergeFrom(from._internal_write());
      break;
    }
    case kDdl: {
      _internal_mutable_ddl()->::substrait::proto::DdlRel::MergeFrom(from._internal_ddl());
      break;
    }
    case kHashJoin: {
      _internal_mutable_hash_join()->::substrait::proto::HashJoinRel::MergeFrom(from._internal_hash_join());
      break;
    }
    case kMergeJoin: {
      _internal_mutable_merge_join()->::substrait::proto::MergeJoinRel::MergeFrom(from._internal_merge_join());
      break;
    }
    case kNestedLoopJoin: {
      _internal_mutable_nested_loop_join()->::substrait::proto::NestedLoopJoinRel::MergeFrom(from._internal_nested_loop_join());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::substrait::proto::ConsistentPartitionWindowRel::MergeFrom(from._internal_window());
      break;
    }
    case kExchange: {
      _internal_mutable_exchange()->::substrait::proto::ExchangeRel::MergeFrom(from._internal_exchange());
      break;
    }
    case kExpand: {
      _internal_mutable_expand()->::substrait::proto::ExpandRel::MergeFrom(from._internal_expand());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Rel)
}

void Rel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_rel_type();
}

Rel::~Rel() {
  // @@protoc_insertion_point(destructor:substrait.proto.Rel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void Rel::ArenaDtor(void* object) {
  Rel* _this = reinterpret_cast< Rel* >(object);
  (void)_this;
}
void Rel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rel& Rel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Rel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Rel)
  switch (rel_type_case()) {
    case kRead: {
      if (GetArena() == nullptr) {
        delete rel_type_.read_;
      }
      break;
    }
    case kFilter: {
      if (GetArena() == nullptr) {
        delete rel_type_.filter_;
      }
      break;
    }
    case kFetch: {
      if (GetArena() == nullptr) {
        delete rel_type_.fetch_;
      }
      break;
    }
    case kAggregate: {
      if (GetArena() == nullptr) {
        delete rel_type_.aggregate_;
      }
      break;
    }
    case kSort: {
      if (GetArena() == nullptr) {
        delete rel_type_.sort_;
      }
      break;
    }
    case kJoin: {
      if (GetArena() == nullptr) {
        delete rel_type_.join_;
      }
      break;
    }
    case kProject: {
      if (GetArena() == nullptr) {
        delete rel_type_.project_;
      }
      break;
    }
    case kSet: {
      if (GetArena() == nullptr) {
        delete rel_type_.set_;
      }
      break;
    }
    case kExtensionSingle: {
      if (GetArena() == nullptr) {
        delete rel_type_.extension_single_;
      }
      break;
    }
    case kExtensionMulti: {
      if (GetArena() == nullptr) {
        delete rel_type_.extension_multi_;
      }
      break;
    }
    case kExtensionLeaf: {
      if (GetArena() == nullptr) {
        delete rel_type_.extension_leaf_;
      }
      break;
    }
    case kCross: {
      if (GetArena() == nullptr) {
        delete rel_type_.cross_;
      }
      break;
    }
    case kReference: {
      if (GetArena() == nullptr) {
        delete rel_type_.reference_;
      }
      break;
    }
    case kWrite: {
      if (GetArena() == nullptr) {
        delete rel_type_.write_;
      }
      break;
    }
    case kDdl: {
      if (GetArena() == nullptr) {
        delete rel_type_.ddl_;
      }
      break;
    }
    case kHashJoin: {
      if (GetArena() == nullptr) {
        delete rel_type_.hash_join_;
      }
      break;
    }
    case kMergeJoin: {
      if (GetArena() == nullptr) {
        delete rel_type_.merge_join_;
      }
      break;
    }
    case kNestedLoopJoin: {
      if (GetArena() == nullptr) {
        delete rel_type_.nested_loop_join_;
      }
      break;
    }
    case kWindow: {
      if (GetArena() == nullptr) {
        delete rel_type_.window_;
      }
      break;
    }
    case kExchange: {
      if (GetArena() == nullptr) {
        delete rel_type_.exchange_;
      }
      break;
    }
    case kExpand: {
      if (GetArena() == nullptr) {
        delete rel_type_.expand_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}


void Rel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Rel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.ReadRel read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.FilterRel filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.FetchRel fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregateRel aggregate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.SortRel sort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.JoinRel join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ProjectRel project = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.SetRel set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExtensionSingleRel extension_single = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_single(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExtensionMultiRel extension_multi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_multi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExtensionLeafRel extension_leaf = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.CrossRel cross = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.HashJoinRel hash_join = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.MergeJoinRel merge_join = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExchangeRel exchange = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExpandRel expand = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_expand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ConsistentPartitionWindowRel window = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NestedLoopJoinRel nested_loop_join = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_loop_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.WriteRel write = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.DdlRel ddl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ddl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ReferenceRel reference = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Rel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.ReadRel read = 1;
  if (_internal_has_read()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::read(this), target, stream);
  }

  // .substrait.proto.FilterRel filter = 2;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  // .substrait.proto.FetchRel fetch = 3;
  if (_internal_has_fetch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fetch(this), target, stream);
  }

  // .substrait.proto.AggregateRel aggregate = 4;
  if (_internal_has_aggregate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aggregate(this), target, stream);
  }

  // .substrait.proto.SortRel sort = 5;
  if (_internal_has_sort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sort(this), target, stream);
  }

  // .substrait.proto.JoinRel join = 6;
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::join(this), target, stream);
  }

  // .substrait.proto.ProjectRel project = 7;
  if (_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::project(this), target, stream);
  }

  // .substrait.proto.SetRel set = 8;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::set(this), target, stream);
  }

  // .substrait.proto.ExtensionSingleRel extension_single = 9;
  if (_internal_has_extension_single()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::extension_single(this), target, stream);
  }

  // .substrait.proto.ExtensionMultiRel extension_multi = 10;
  if (_internal_has_extension_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::extension_multi(this), target, stream);
  }

  // .substrait.proto.ExtensionLeafRel extension_leaf = 11;
  if (_internal_has_extension_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::extension_leaf(this), target, stream);
  }

  // .substrait.proto.CrossRel cross = 12;
  if (_internal_has_cross()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cross(this), target, stream);
  }

  // .substrait.proto.HashJoinRel hash_join = 13;
  if (_internal_has_hash_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hash_join(this), target, stream);
  }

  // .substrait.proto.MergeJoinRel merge_join = 14;
  if (_internal_has_merge_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::merge_join(this), target, stream);
  }

  // .substrait.proto.ExchangeRel exchange = 15;
  if (_internal_has_exchange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::exchange(this), target, stream);
  }

  // .substrait.proto.ExpandRel expand = 16;
  if (_internal_has_expand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::expand(this), target, stream);
  }

  // .substrait.proto.ConsistentPartitionWindowRel window = 17;
  if (_internal_has_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::window(this), target, stream);
  }

  // .substrait.proto.NestedLoopJoinRel nested_loop_join = 18;
  if (_internal_has_nested_loop_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::nested_loop_join(this), target, stream);
  }

  // .substrait.proto.WriteRel write = 19;
  if (_internal_has_write()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::write(this), target, stream);
  }

  // .substrait.proto.DdlRel ddl = 20;
  if (_internal_has_ddl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ddl(this), target, stream);
  }

  // .substrait.proto.ReferenceRel reference = 21;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Rel)
  return target;
}

size_t Rel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Rel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.proto.ReadRel read = 1;
    case kRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.read_);
      break;
    }
    // .substrait.proto.FilterRel filter = 2;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.filter_);
      break;
    }
    // .substrait.proto.FetchRel fetch = 3;
    case kFetch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.fetch_);
      break;
    }
    // .substrait.proto.AggregateRel aggregate = 4;
    case kAggregate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.aggregate_);
      break;
    }
    // .substrait.proto.SortRel sort = 5;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.sort_);
      break;
    }
    // .substrait.proto.JoinRel join = 6;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.join_);
      break;
    }
    // .substrait.proto.ProjectRel project = 7;
    case kProject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.project_);
      break;
    }
    // .substrait.proto.SetRel set = 8;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.set_);
      break;
    }
    // .substrait.proto.ExtensionSingleRel extension_single = 9;
    case kExtensionSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_single_);
      break;
    }
    // .substrait.proto.ExtensionMultiRel extension_multi = 10;
    case kExtensionMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_multi_);
      break;
    }
    // .substrait.proto.ExtensionLeafRel extension_leaf = 11;
    case kExtensionLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_leaf_);
      break;
    }
    // .substrait.proto.CrossRel cross = 12;
    case kCross: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.cross_);
      break;
    }
    // .substrait.proto.ReferenceRel reference = 21;
    case kReference: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.reference_);
      break;
    }
    // .substrait.proto.WriteRel write = 19;
    case kWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.write_);
      break;
    }
    // .substrait.proto.DdlRel ddl = 20;
    case kDdl: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.ddl_);
      break;
    }
    // .substrait.proto.HashJoinRel hash_join = 13;
    case kHashJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.hash_join_);
      break;
    }
    // .substrait.proto.MergeJoinRel merge_join = 14;
    case kMergeJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.merge_join_);
      break;
    }
    // .substrait.proto.NestedLoopJoinRel nested_loop_join = 18;
    case kNestedLoopJoin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.nested_loop_join_);
      break;
    }
    // .substrait.proto.ConsistentPartitionWindowRel window = 17;
    case kWindow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.window_);
      break;
    }
    // .substrait.proto.ExchangeRel exchange = 15;
    case kExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.exchange_);
      break;
    }
    // .substrait.proto.ExpandRel expand = 16;
    case kExpand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.expand_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Rel)
  GOOGLE_DCHECK_NE(&from, this);
  const Rel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Rel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Rel)
    MergeFrom(*source);
  }
}

void Rel::MergeFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Rel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRead: {
      _internal_mutable_read()->::substrait::proto::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::substrait::proto::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::substrait::proto::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::substrait::proto::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::substrait::proto::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::substrait::proto::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::substrait::proto::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::substrait::proto::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _internal_mutable_extension_single()->::substrait::proto::ExtensionSingleRel::MergeFrom(from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _internal_mutable_extension_multi()->::substrait::proto::ExtensionMultiRel::MergeFrom(from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _internal_mutable_extension_leaf()->::substrait::proto::ExtensionLeafRel::MergeFrom(from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _internal_mutable_cross()->::substrait::proto::CrossRel::MergeFrom(from._internal_cross());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::substrait::proto::ReferenceRel::MergeFrom(from._internal_reference());
      break;
    }
    case kWrite: {
      _internal_mutable_write()->::substrait::proto::WriteRel::MergeFrom(from._internal_write());
      break;
    }
    case kDdl: {
      _internal_mutable_ddl()->::substrait::proto::DdlRel::MergeFrom(from._internal_ddl());
      break;
    }
    case kHashJoin: {
      _internal_mutable_hash_join()->::substrait::proto::HashJoinRel::MergeFrom(from._internal_hash_join());
      break;
    }
    case kMergeJoin: {
      _internal_mutable_merge_join()->::substrait::proto::MergeJoinRel::MergeFrom(from._internal_merge_join());
      break;
    }
    case kNestedLoopJoin: {
      _internal_mutable_nested_loop_join()->::substrait::proto::NestedLoopJoinRel::MergeFrom(from._internal_nested_loop_join());
      break;
    }
    case kWindow: {
      _internal_mutable_window()->::substrait::proto::ConsistentPartitionWindowRel::MergeFrom(from._internal_window());
      break;
    }
    case kExchange: {
      _internal_mutable_exchange()->::substrait::proto::ExchangeRel::MergeFrom(from._internal_exchange());
      break;
    }
    case kExpand: {
      _internal_mutable_expand()->::substrait::proto::ExpandRel::MergeFrom(from._internal_expand());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
}

void Rel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rel::CopyFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rel::IsInitialized() const {
  return true;
}

void Rel::InternalSwap(Rel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rel_type_, other->rel_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedObjectWrite::InitAsDefaultInstance() {
  ::substrait::proto::_NamedObjectWrite_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class NamedObjectWrite::_Internal {
 public:
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const NamedObjectWrite* msg);
};

const ::substrait::proto::extensions::AdvancedExtension&
NamedObjectWrite::_Internal::advanced_extension(const NamedObjectWrite* msg) {
  return *msg->advanced_extension_;
}
void NamedObjectWrite::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
NamedObjectWrite::NamedObjectWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.NamedObjectWrite)
}
NamedObjectWrite::NamedObjectWrite(const NamedObjectWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.NamedObjectWrite)
}

void NamedObjectWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto.base);
  advanced_extension_ = nullptr;
}

NamedObjectWrite::~NamedObjectWrite() {
  // @@protoc_insertion_point(destructor:substrait.proto.NamedObjectWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedObjectWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void NamedObjectWrite::ArenaDtor(void* object) {
  NamedObjectWrite* _this = reinterpret_cast< NamedObjectWrite* >(object);
  (void)_this;
}
void NamedObjectWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectWrite& NamedObjectWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectWrite_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.NamedObjectWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedObjectWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.NamedObjectWrite.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.NamedObjectWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.NamedObjectWrite.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.NamedObjectWrite)
  return target;
}

size_t NamedObjectWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.NamedObjectWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.NamedObjectWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedObjectWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedObjectWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.NamedObjectWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.NamedObjectWrite)
    MergeFrom(*source);
  }
}

void NamedObjectWrite::MergeFrom(const NamedObjectWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.NamedObjectWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
}

void NamedObjectWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.NamedObjectWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedObjectWrite::CopyFrom(const NamedObjectWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.NamedObjectWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectWrite::IsInitialized() const {
  return true;
}

void NamedObjectWrite::InternalSwap(NamedObjectWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedObjectWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtensionObject::InitAsDefaultInstance() {
  ::substrait::proto::_ExtensionObject_default_instance_._instance.get_mutable()->detail_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExtensionObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionObject* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ExtensionObject::_Internal::detail(const ExtensionObject* msg) {
  return *msg->detail_;
}
void ExtensionObject::clear_detail() {
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionObject::ExtensionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExtensionObject)
}
ExtensionObject::ExtensionObject(const ExtensionObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detail()) {
    detail_ = new PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExtensionObject)
}

void ExtensionObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto.base);
  detail_ = nullptr;
}

ExtensionObject::~ExtensionObject() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExtensionObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtensionObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionObject::ArenaDtor(void* object) {
  ExtensionObject* _this = reinterpret_cast< ExtensionObject* >(object);
  (void)_this;
}
void ExtensionObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionObject& ExtensionObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionObject_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ExtensionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExtensionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExtensionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExtensionObject)
  return target;
}

size_t ExtensionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExtensionObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExtensionObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtensionObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtensionObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExtensionObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExtensionObject)
    MergeFrom(*source);
  }
}

void ExtensionObject::MergeFrom(const ExtensionObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExtensionObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detail()) {
    _internal_mutable_detail()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
}

void ExtensionObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExtensionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionObject::CopyFrom(const ExtensionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExtensionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionObject::IsInitialized() const {
  return true;
}

void ExtensionObject::InternalSwap(ExtensionObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(detail_, other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DdlRel::InitAsDefaultInstance() {
  ::substrait::proto::_DdlRel_default_instance_.named_object_ = const_cast< ::substrait::proto::NamedObjectWrite*>(
      ::substrait::proto::NamedObjectWrite::internal_default_instance());
  ::substrait::proto::_DdlRel_default_instance_.extension_object_ = const_cast< ::substrait::proto::ExtensionObject*>(
      ::substrait::proto::ExtensionObject::internal_default_instance());
  ::substrait::proto::_DdlRel_default_instance_._instance.get_mutable()->table_schema_ = const_cast< ::substrait::proto::NamedStruct*>(
      ::substrait::proto::NamedStruct::internal_default_instance());
  ::substrait::proto::_DdlRel_default_instance_._instance.get_mutable()->table_defaults_ = const_cast< ::substrait::proto::Expression_Literal_Struct*>(
      ::substrait::proto::Expression_Literal_Struct::internal_default_instance());
  ::substrait::proto::_DdlRel_default_instance_._instance.get_mutable()->view_definition_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_DdlRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
}
class DdlRel::_Internal {
 public:
  static const ::substrait::proto::NamedObjectWrite& named_object(const DdlRel* msg);
  static const ::substrait::proto::ExtensionObject& extension_object(const DdlRel* msg);
  static const ::substrait::proto::NamedStruct& table_schema(const DdlRel* msg);
  static const ::substrait::proto::Expression_Literal_Struct& table_defaults(const DdlRel* msg);
  static const ::substrait::proto::Rel& view_definition(const DdlRel* msg);
  static const ::substrait::proto::RelCommon& common(const DdlRel* msg);
};

const ::substrait::proto::NamedObjectWrite&
DdlRel::_Internal::named_object(const DdlRel* msg) {
  return *msg->write_type_.named_object_;
}
const ::substrait::proto::ExtensionObject&
DdlRel::_Internal::extension_object(const DdlRel* msg) {
  return *msg->write_type_.extension_object_;
}
const ::substrait::proto::NamedStruct&
DdlRel::_Internal::table_schema(const DdlRel* msg) {
  return *msg->table_schema_;
}
const ::substrait::proto::Expression_Literal_Struct&
DdlRel::_Internal::table_defaults(const DdlRel* msg) {
  return *msg->table_defaults_;
}
const ::substrait::proto::Rel&
DdlRel::_Internal::view_definition(const DdlRel* msg) {
  return *msg->view_definition_;
}
const ::substrait::proto::RelCommon&
DdlRel::_Internal::common(const DdlRel* msg) {
  return *msg->common_;
}
void DdlRel::set_allocated_named_object(::substrait::proto::NamedObjectWrite* named_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_write_type();
  if (named_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_object);
    if (message_arena != submessage_arena) {
      named_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_object, submessage_arena);
    }
    set_has_named_object();
    write_type_.named_object_ = named_object;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.named_object)
}
void DdlRel::set_allocated_extension_object(::substrait::proto::ExtensionObject* extension_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_write_type();
  if (extension_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_object);
    if (message_arena != submessage_arena) {
      extension_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_object, submessage_arena);
    }
    set_has_extension_object();
    write_type_.extension_object_ = extension_object;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.extension_object)
}
void DdlRel::clear_table_schema() {
  if (GetArena() == nullptr && table_schema_ != nullptr) {
    delete table_schema_;
  }
  table_schema_ = nullptr;
}
DdlRel::DdlRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.DdlRel)
}
DdlRel::DdlRel(const DdlRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_schema()) {
    table_schema_ = new ::substrait::proto::NamedStruct(*from.table_schema_);
  } else {
    table_schema_ = nullptr;
  }
  if (from._internal_has_table_defaults()) {
    table_defaults_ = new ::substrait::proto::Expression_Literal_Struct(*from.table_defaults_);
  } else {
    table_defaults_ = nullptr;
  }
  if (from._internal_has_view_definition()) {
    view_definition_ = new ::substrait::proto::Rel(*from.view_definition_);
  } else {
    view_definition_ = nullptr;
  }
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&object_, &from.object_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&object_)) + sizeof(op_));
  clear_has_write_type();
  switch (from.write_type_case()) {
    case kNamedObject: {
      _internal_mutable_named_object()->::substrait::proto::NamedObjectWrite::MergeFrom(from._internal_named_object());
      break;
    }
    case kExtensionObject: {
      _internal_mutable_extension_object()->::substrait::proto::ExtensionObject::MergeFrom(from._internal_extension_object());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.DdlRel)
}

void DdlRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&table_schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&table_schema_)) + sizeof(op_));
  clear_has_write_type();
}

DdlRel::~DdlRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.DdlRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DdlRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_schema_;
  if (this != internal_default_instance()) delete table_defaults_;
  if (this != internal_default_instance()) delete view_definition_;
  if (this != internal_default_instance()) delete common_;
  if (has_write_type()) {
    clear_write_type();
  }
}

void DdlRel::ArenaDtor(void* object) {
  DdlRel* _this = reinterpret_cast< DdlRel* >(object);
  (void)_this;
}
void DdlRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DdlRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdlRel& DdlRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void DdlRel::clear_write_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.DdlRel)
  switch (write_type_case()) {
    case kNamedObject: {
      if (GetArena() == nullptr) {
        delete write_type_.named_object_;
      }
      break;
    }
    case kExtensionObject: {
      if (GetArena() == nullptr) {
        delete write_type_.extension_object_;
      }
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WRITE_TYPE_NOT_SET;
}


void DdlRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.DdlRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && table_schema_ != nullptr) {
    delete table_schema_;
  }
  table_schema_ = nullptr;
  if (GetArena() == nullptr && table_defaults_ != nullptr) {
    delete table_defaults_;
  }
  table_defaults_ = nullptr;
  if (GetArena() == nullptr && view_definition_ != nullptr) {
    delete view_definition_;
  }
  view_definition_ = nullptr;
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&object_)) + sizeof(op_));
  clear_write_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DdlRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.NamedObjectWrite named_object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExtensionObject extension_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NamedStruct table_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.Struct table_defaults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_defaults(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.DdlRel.DdlObject object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object(static_cast<::substrait::proto::DdlRel_DdlObject>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.DdlRel.DdlOp op = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::proto::DdlRel_DdlOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel view_definition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelCommon common = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdlRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.DdlRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.NamedObjectWrite named_object = 1;
  if (_internal_has_named_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::named_object(this), target, stream);
  }

  // .substrait.proto.ExtensionObject extension_object = 2;
  if (_internal_has_extension_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extension_object(this), target, stream);
  }

  // .substrait.proto.NamedStruct table_schema = 3;
  if (this->has_table_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_schema(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.Struct table_defaults = 4;
  if (this->has_table_defaults()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::table_defaults(this), target, stream);
  }

  // .substrait.proto.DdlRel.DdlObject object = 5;
  if (this->object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_object(), target);
  }

  // .substrait.proto.DdlRel.DdlOp op = 6;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_op(), target);
  }

  // .substrait.proto.Rel view_definition = 7;
  if (this->has_view_definition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::view_definition(this), target, stream);
  }

  // .substrait.proto.RelCommon common = 8;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.DdlRel)
  return target;
}

size_t DdlRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.DdlRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.NamedStruct table_schema = 3;
  if (this->has_table_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_schema_);
  }

  // .substrait.proto.Expression.Literal.Struct table_defaults = 4;
  if (this->has_table_defaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_defaults_);
  }

  // .substrait.proto.Rel view_definition = 7;
  if (this->has_view_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_definition_);
  }

  // .substrait.proto.RelCommon common = 8;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.DdlRel.DdlObject object = 5;
  if (this->object() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_object());
  }

  // .substrait.proto.DdlRel.DdlOp op = 6;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  switch (write_type_case()) {
    // .substrait.proto.NamedObjectWrite named_object = 1;
    case kNamedObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_type_.named_object_);
      break;
    }
    // .substrait.proto.ExtensionObject extension_object = 2;
    case kExtensionObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_type_.extension_object_);
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdlRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.DdlRel)
  GOOGLE_DCHECK_NE(&from, this);
  const DdlRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdlRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.DdlRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.DdlRel)
    MergeFrom(*source);
  }
}

void DdlRel::MergeFrom(const DdlRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.DdlRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_schema()) {
    _internal_mutable_table_schema()->::substrait::proto::NamedStruct::MergeFrom(from._internal_table_schema());
  }
  if (from.has_table_defaults()) {
    _internal_mutable_table_defaults()->::substrait::proto::Expression_Literal_Struct::MergeFrom(from._internal_table_defaults());
  }
  if (from.has_view_definition()) {
    _internal_mutable_view_definition()->::substrait::proto::Rel::MergeFrom(from._internal_view_definition());
  }
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.object() != 0) {
    _internal_set_object(from._internal_object());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  switch (from.write_type_case()) {
    case kNamedObject: {
      _internal_mutable_named_object()->::substrait::proto::NamedObjectWrite::MergeFrom(from._internal_named_object());
      break;
    }
    case kExtensionObject: {
      _internal_mutable_extension_object()->::substrait::proto::ExtensionObject::MergeFrom(from._internal_extension_object());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
}

void DdlRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.DdlRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdlRel::CopyFrom(const DdlRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.DdlRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdlRel::IsInitialized() const {
  return true;
}

void DdlRel::InternalSwap(DdlRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DdlRel, op_)
      + sizeof(DdlRel::op_)
      - PROTOBUF_FIELD_OFFSET(DdlRel, table_schema_)>(
          reinterpret_cast<char*>(&table_schema_),
          reinterpret_cast<char*>(&other->table_schema_));
  swap(write_type_, other->write_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdlRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteRel::InitAsDefaultInstance() {
  ::substrait::proto::_WriteRel_default_instance_.named_table_ = const_cast< ::substrait::proto::NamedObjectWrite*>(
      ::substrait::proto::NamedObjectWrite::internal_default_instance());
  ::substrait::proto::_WriteRel_default_instance_.extension_table_ = const_cast< ::substrait::proto::ExtensionObject*>(
      ::substrait::proto::ExtensionObject::internal_default_instance());
  ::substrait::proto::_WriteRel_default_instance_._instance.get_mutable()->table_schema_ = const_cast< ::substrait::proto::NamedStruct*>(
      ::substrait::proto::NamedStruct::internal_default_instance());
  ::substrait::proto::_WriteRel_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_WriteRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
}
class WriteRel::_Internal {
 public:
  static const ::substrait::proto::NamedObjectWrite& named_table(const WriteRel* msg);
  static const ::substrait::proto::ExtensionObject& extension_table(const WriteRel* msg);
  static const ::substrait::proto::NamedStruct& table_schema(const WriteRel* msg);
  static const ::substrait::proto::Rel& input(const WriteRel* msg);
  static const ::substrait::proto::RelCommon& common(const WriteRel* msg);
};

const ::substrait::proto::NamedObjectWrite&
WriteRel::_Internal::named_table(const WriteRel* msg) {
  return *msg->write_type_.named_table_;
}
const ::substrait::proto::ExtensionObject&
WriteRel::_Internal::extension_table(const WriteRel* msg) {
  return *msg->write_type_.extension_table_;
}
const ::substrait::proto::NamedStruct&
WriteRel::_Internal::table_schema(const WriteRel* msg) {
  return *msg->table_schema_;
}
const ::substrait::proto::Rel&
WriteRel::_Internal::input(const WriteRel* msg) {
  return *msg->input_;
}
const ::substrait::proto::RelCommon&
WriteRel::_Internal::common(const WriteRel* msg) {
  return *msg->common_;
}
void WriteRel::set_allocated_named_table(::substrait::proto::NamedObjectWrite* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_write_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    write_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.WriteRel.named_table)
}
void WriteRel::set_allocated_extension_table(::substrait::proto::ExtensionObject* extension_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_write_type();
  if (extension_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_table);
    if (message_arena != submessage_arena) {
      extension_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_table, submessage_arena);
    }
    set_has_extension_table();
    write_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.WriteRel.extension_table)
}
void WriteRel::clear_table_schema() {
  if (GetArena() == nullptr && table_schema_ != nullptr) {
    delete table_schema_;
  }
  table_schema_ = nullptr;
}
WriteRel::WriteRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.WriteRel)
}
WriteRel::WriteRel(const WriteRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_schema()) {
    table_schema_ = new ::substrait::proto::NamedStruct(*from.table_schema_);
  } else {
    table_schema_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&op_)) + sizeof(output_));
  clear_has_write_type();
  switch (from.write_type_case()) {
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::proto::NamedObjectWrite::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::proto::ExtensionObject::MergeFrom(from._internal_extension_table());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.WriteRel)
}

void WriteRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&table_schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&table_schema_)) + sizeof(output_));
  clear_has_write_type();
}

WriteRel::~WriteRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.WriteRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_schema_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete common_;
  if (has_write_type()) {
    clear_write_type();
  }
}

void WriteRel::ArenaDtor(void* object) {
  WriteRel* _this = reinterpret_cast< WriteRel* >(object);
  (void)_this;
}
void WriteRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteRel& WriteRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void WriteRel::clear_write_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.WriteRel)
  switch (write_type_case()) {
    case kNamedTable: {
      if (GetArena() == nullptr) {
        delete write_type_.named_table_;
      }
      break;
    }
    case kExtensionTable: {
      if (GetArena() == nullptr) {
        delete write_type_.extension_table_;
      }
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WRITE_TYPE_NOT_SET;
}


void WriteRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.WriteRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && table_schema_ != nullptr) {
    delete table_schema_;
  }
  table_schema_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&op_)) + sizeof(output_));
  clear_write_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.NamedObjectWrite named_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ExtensionObject extension_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NamedStruct table_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.WriteRel.WriteOp op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::proto::WriteRel_WriteOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.WriteRel.OutputMode output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_output(static_cast<::substrait::proto::WriteRel_OutputMode>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelCommon common = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.WriteRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.NamedObjectWrite named_table = 1;
  if (_internal_has_named_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::named_table(this), target, stream);
  }

  // .substrait.proto.ExtensionObject extension_table = 2;
  if (_internal_has_extension_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extension_table(this), target, stream);
  }

  // .substrait.proto.NamedStruct table_schema = 3;
  if (this->has_table_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_schema(this), target, stream);
  }

  // .substrait.proto.WriteRel.WriteOp op = 4;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  // .substrait.proto.Rel input = 5;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input(this), target, stream);
  }

  // .substrait.proto.WriteRel.OutputMode output = 6;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_output(), target);
  }

  // .substrait.proto.RelCommon common = 7;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.WriteRel)
  return target;
}

size_t WriteRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.WriteRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.NamedStruct table_schema = 3;
  if (this->has_table_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_schema_);
  }

  // .substrait.proto.Rel input = 5;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.RelCommon common = 7;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.WriteRel.WriteOp op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // .substrait.proto.WriteRel.OutputMode output = 6;
  if (this->output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output());
  }

  switch (write_type_case()) {
    // .substrait.proto.NamedObjectWrite named_table = 1;
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_type_.named_table_);
      break;
    }
    // .substrait.proto.ExtensionObject extension_table = 2;
    case kExtensionTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_type_.extension_table_);
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.WriteRel)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.WriteRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.WriteRel)
    MergeFrom(*source);
  }
}

void WriteRel::MergeFrom(const WriteRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.WriteRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_schema()) {
    _internal_mutable_table_schema()->::substrait::proto::NamedStruct::MergeFrom(from._internal_table_schema());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
  switch (from.write_type_case()) {
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::proto::NamedObjectWrite::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::proto::ExtensionObject::MergeFrom(from._internal_extension_table());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
}

void WriteRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.WriteRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRel::CopyFrom(const WriteRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.WriteRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRel::IsInitialized() const {
  return true;
}

void WriteRel::InternalSwap(WriteRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteRel, output_)
      + sizeof(WriteRel::output_)
      - PROTOBUF_FIELD_OFFSET(WriteRel, table_schema_)>(
          reinterpret_cast<char*>(&table_schema_),
          reinterpret_cast<char*>(&other->table_schema_));
  swap(write_type_, other->write_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComparisonJoinKey_ComparisonType::InitAsDefaultInstance() {
  ::substrait::proto::_ComparisonJoinKey_ComparisonType_default_instance_.simple_ = 0;
  ::substrait::proto::_ComparisonJoinKey_ComparisonType_default_instance_.custom_function_reference_ = 0u;
}
class ComparisonJoinKey_ComparisonType::_Internal {
 public:
};

ComparisonJoinKey_ComparisonType::ComparisonJoinKey_ComparisonType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ComparisonJoinKey.ComparisonType)
}
ComparisonJoinKey_ComparisonType::ComparisonJoinKey_ComparisonType(const ComparisonJoinKey_ComparisonType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner_type();
  switch (from.inner_type_case()) {
    case kSimple: {
      _internal_set_simple(from._internal_simple());
      break;
    }
    case kCustomFunctionReference: {
      _internal_set_custom_function_reference(from._internal_custom_function_reference());
      break;
    }
    case INNER_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ComparisonJoinKey.ComparisonType)
}

void ComparisonJoinKey_ComparisonType::SharedCtor() {
  clear_has_inner_type();
}

ComparisonJoinKey_ComparisonType::~ComparisonJoinKey_ComparisonType() {
  // @@protoc_insertion_point(destructor:substrait.proto.ComparisonJoinKey.ComparisonType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComparisonJoinKey_ComparisonType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner_type()) {
    clear_inner_type();
  }
}

void ComparisonJoinKey_ComparisonType::ArenaDtor(void* object) {
  ComparisonJoinKey_ComparisonType* _this = reinterpret_cast< ComparisonJoinKey_ComparisonType* >(object);
  (void)_this;
}
void ComparisonJoinKey_ComparisonType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComparisonJoinKey_ComparisonType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComparisonJoinKey_ComparisonType& ComparisonJoinKey_ComparisonType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComparisonJoinKey_ComparisonType_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ComparisonJoinKey_ComparisonType::clear_inner_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  switch (inner_type_case()) {
    case kSimple: {
      // No need to clear
      break;
    }
    case kCustomFunctionReference: {
      // No need to clear
      break;
    }
    case INNER_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_TYPE_NOT_SET;
}


void ComparisonJoinKey_ComparisonType::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComparisonJoinKey_ComparisonType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.ComparisonJoinKey.SimpleComparisonType simple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_simple(static_cast<::substrait::proto::ComparisonJoinKey_SimpleComparisonType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 custom_function_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_custom_function_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComparisonJoinKey_ComparisonType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.ComparisonJoinKey.SimpleComparisonType simple = 1;
  if (_internal_has_simple()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_simple(), target);
  }

  // uint32 custom_function_reference = 2;
  if (_internal_has_custom_function_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_custom_function_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ComparisonJoinKey.ComparisonType)
  return target;
}

size_t ComparisonJoinKey_ComparisonType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_type_case()) {
    // .substrait.proto.ComparisonJoinKey.SimpleComparisonType simple = 1;
    case kSimple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_simple());
      break;
    }
    // uint32 custom_function_reference = 2;
    case kCustomFunctionReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_function_reference());
      break;
    }
    case INNER_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComparisonJoinKey_ComparisonType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonJoinKey_ComparisonType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComparisonJoinKey_ComparisonType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ComparisonJoinKey.ComparisonType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ComparisonJoinKey.ComparisonType)
    MergeFrom(*source);
  }
}

void ComparisonJoinKey_ComparisonType::MergeFrom(const ComparisonJoinKey_ComparisonType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_type_case()) {
    case kSimple: {
      _internal_set_simple(from._internal_simple());
      break;
    }
    case kCustomFunctionReference: {
      _internal_set_custom_function_reference(from._internal_custom_function_reference());
      break;
    }
    case INNER_TYPE_NOT_SET: {
      break;
    }
  }
}

void ComparisonJoinKey_ComparisonType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonJoinKey_ComparisonType::CopyFrom(const ComparisonJoinKey_ComparisonType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ComparisonJoinKey.ComparisonType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonJoinKey_ComparisonType::IsInitialized() const {
  return true;
}

void ComparisonJoinKey_ComparisonType::InternalSwap(ComparisonJoinKey_ComparisonType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_type_, other->inner_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComparisonJoinKey_ComparisonType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComparisonJoinKey::InitAsDefaultInstance() {
  ::substrait::proto::_ComparisonJoinKey_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Expression_FieldReference*>(
      ::substrait::proto::Expression_FieldReference::internal_default_instance());
  ::substrait::proto::_ComparisonJoinKey_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Expression_FieldReference*>(
      ::substrait::proto::Expression_FieldReference::internal_default_instance());
  ::substrait::proto::_ComparisonJoinKey_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::substrait::proto::ComparisonJoinKey_ComparisonType*>(
      ::substrait::proto::ComparisonJoinKey_ComparisonType::internal_default_instance());
}
class ComparisonJoinKey::_Internal {
 public:
  static const ::substrait::proto::Expression_FieldReference& left(const ComparisonJoinKey* msg);
  static const ::substrait::proto::Expression_FieldReference& right(const ComparisonJoinKey* msg);
  static const ::substrait::proto::ComparisonJoinKey_ComparisonType& comparison(const ComparisonJoinKey* msg);
};

const ::substrait::proto::Expression_FieldReference&
ComparisonJoinKey::_Internal::left(const ComparisonJoinKey* msg) {
  return *msg->left_;
}
const ::substrait::proto::Expression_FieldReference&
ComparisonJoinKey::_Internal::right(const ComparisonJoinKey* msg) {
  return *msg->right_;
}
const ::substrait::proto::ComparisonJoinKey_ComparisonType&
ComparisonJoinKey::_Internal::comparison(const ComparisonJoinKey* msg) {
  return *msg->comparison_;
}
ComparisonJoinKey::ComparisonJoinKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ComparisonJoinKey)
}
ComparisonJoinKey::ComparisonJoinKey(const ComparisonJoinKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Expression_FieldReference(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Expression_FieldReference(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_comparison()) {
    comparison_ = new ::substrait::proto::ComparisonJoinKey_ComparisonType(*from.comparison_);
  } else {
    comparison_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ComparisonJoinKey)
}

void ComparisonJoinKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparison_) -
      reinterpret_cast<char*>(&left_)) + sizeof(comparison_));
}

ComparisonJoinKey::~ComparisonJoinKey() {
  // @@protoc_insertion_point(destructor:substrait.proto.ComparisonJoinKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComparisonJoinKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete comparison_;
}

void ComparisonJoinKey::ArenaDtor(void* object) {
  ComparisonJoinKey* _this = reinterpret_cast< ComparisonJoinKey* >(object);
  (void)_this;
}
void ComparisonJoinKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComparisonJoinKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComparisonJoinKey& ComparisonJoinKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ComparisonJoinKey::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ComparisonJoinKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && comparison_ != nullptr) {
    delete comparison_;
  }
  comparison_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComparisonJoinKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.FieldReference left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.FieldReference right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.ComparisonJoinKey.ComparisonType comparison = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_comparison(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComparisonJoinKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ComparisonJoinKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.FieldReference left = 1;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Expression.FieldReference right = 2;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right(this), target, stream);
  }

  // .substrait.proto.ComparisonJoinKey.ComparisonType comparison = 3;
  if (this->has_comparison()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::comparison(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ComparisonJoinKey)
  return target;
}

size_t ComparisonJoinKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ComparisonJoinKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.FieldReference left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Expression.FieldReference right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.ComparisonJoinKey.ComparisonType comparison = 3;
  if (this->has_comparison()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparison_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComparisonJoinKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ComparisonJoinKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonJoinKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComparisonJoinKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ComparisonJoinKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ComparisonJoinKey)
    MergeFrom(*source);
  }
}

void ComparisonJoinKey::MergeFrom(const ComparisonJoinKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ComparisonJoinKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Expression_FieldReference::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Expression_FieldReference::MergeFrom(from._internal_right());
  }
  if (from.has_comparison()) {
    _internal_mutable_comparison()->::substrait::proto::ComparisonJoinKey_ComparisonType::MergeFrom(from._internal_comparison());
  }
}

void ComparisonJoinKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ComparisonJoinKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonJoinKey::CopyFrom(const ComparisonJoinKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ComparisonJoinKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonJoinKey::IsInitialized() const {
  return true;
}

void ComparisonJoinKey::InternalSwap(ComparisonJoinKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComparisonJoinKey, comparison_)
      + sizeof(ComparisonJoinKey::comparison_)
      - PROTOBUF_FIELD_OFFSET(ComparisonJoinKey, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComparisonJoinKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashJoinRel::InitAsDefaultInstance() {
  ::substrait::proto::_HashJoinRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_HashJoinRel_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_HashJoinRel_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_HashJoinRel_default_instance_._instance.get_mutable()->post_join_filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_HashJoinRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class HashJoinRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const HashJoinRel* msg);
  static const ::substrait::proto::Rel& left(const HashJoinRel* msg);
  static const ::substrait::proto::Rel& right(const HashJoinRel* msg);
  static const ::substrait::proto::Expression& post_join_filter(const HashJoinRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const HashJoinRel* msg);
};

const ::substrait::proto::RelCommon&
HashJoinRel::_Internal::common(const HashJoinRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
HashJoinRel::_Internal::left(const HashJoinRel* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
HashJoinRel::_Internal::right(const HashJoinRel* msg) {
  return *msg->right_;
}
const ::substrait::proto::Expression&
HashJoinRel::_Internal::post_join_filter(const HashJoinRel* msg) {
  return *msg->post_join_filter_;
}
const ::substrait::proto::extensions::AdvancedExtension&
HashJoinRel::_Internal::advanced_extension(const HashJoinRel* msg) {
  return *msg->advanced_extension_;
}
void HashJoinRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
HashJoinRel::HashJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  left_keys_(arena),
  right_keys_(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.HashJoinRel)
}
HashJoinRel::HashJoinRel(const HashJoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      left_keys_(from.left_keys_),
      right_keys_(from.right_keys_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_post_join_filter()) {
    post_join_filter_ = new ::substrait::proto::Expression(*from.post_join_filter_);
  } else {
    post_join_filter_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.HashJoinRel)
}

void HashJoinRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

HashJoinRel::~HashJoinRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.HashJoinRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashJoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete post_join_filter_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void HashJoinRel::ArenaDtor(void* object) {
  HashJoinRel* _this = reinterpret_cast< HashJoinRel* >(object);
  (void)_this;
}
void HashJoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashJoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashJoinRel& HashJoinRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void HashJoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.HashJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_keys_.Clear();
  right_keys_.Clear();
  keys_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashJoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression post_join_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.HashJoinRel.JoinType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::proto::HashJoinRel_JoinType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ComparisonJoinKey keys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashJoinRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.HashJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_left_keys(i), target, stream);
  }

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_right_keys(i), target, stream);
  }

  // .substrait.proto.Expression post_join_filter = 6;
  if (this->has_post_join_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::post_join_filter(this), target, stream);
  }

  // .substrait.proto.HashJoinRel.JoinType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_keys(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.HashJoinRel)
  return target;
}

size_t HashJoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.HashJoinRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  total_size += 1UL * this->_internal_left_keys_size();
  for (const auto& msg : this->left_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  total_size += 1UL * this->_internal_right_keys_size();
  for (const auto& msg : this->right_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.Expression post_join_filter = 6;
  if (this->has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_join_filter_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.HashJoinRel.JoinType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashJoinRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.HashJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  const HashJoinRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashJoinRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.HashJoinRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.HashJoinRel)
    MergeFrom(*source);
  }
}

void HashJoinRel::MergeFrom(const HashJoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.HashJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_keys_.MergeFrom(from.left_keys_);
  right_keys_.MergeFrom(from.right_keys_);
  keys_.MergeFrom(from.keys_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_post_join_filter()) {
    _internal_mutable_post_join_filter()->::substrait::proto::Expression::MergeFrom(from._internal_post_join_filter());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void HashJoinRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.HashJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashJoinRel::CopyFrom(const HashJoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.HashJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashJoinRel::IsInitialized() const {
  return true;
}

void HashJoinRel::InternalSwap(HashJoinRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  left_keys_.InternalSwap(&other->left_keys_);
  right_keys_.InternalSwap(&other->right_keys_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashJoinRel, type_)
      + sizeof(HashJoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(HashJoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashJoinRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MergeJoinRel::InitAsDefaultInstance() {
  ::substrait::proto::_MergeJoinRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_MergeJoinRel_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_MergeJoinRel_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_MergeJoinRel_default_instance_._instance.get_mutable()->post_join_filter_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_MergeJoinRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class MergeJoinRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const MergeJoinRel* msg);
  static const ::substrait::proto::Rel& left(const MergeJoinRel* msg);
  static const ::substrait::proto::Rel& right(const MergeJoinRel* msg);
  static const ::substrait::proto::Expression& post_join_filter(const MergeJoinRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const MergeJoinRel* msg);
};

const ::substrait::proto::RelCommon&
MergeJoinRel::_Internal::common(const MergeJoinRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
MergeJoinRel::_Internal::left(const MergeJoinRel* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
MergeJoinRel::_Internal::right(const MergeJoinRel* msg) {
  return *msg->right_;
}
const ::substrait::proto::Expression&
MergeJoinRel::_Internal::post_join_filter(const MergeJoinRel* msg) {
  return *msg->post_join_filter_;
}
const ::substrait::proto::extensions::AdvancedExtension&
MergeJoinRel::_Internal::advanced_extension(const MergeJoinRel* msg) {
  return *msg->advanced_extension_;
}
void MergeJoinRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
MergeJoinRel::MergeJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  left_keys_(arena),
  right_keys_(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.MergeJoinRel)
}
MergeJoinRel::MergeJoinRel(const MergeJoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      left_keys_(from.left_keys_),
      right_keys_(from.right_keys_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_post_join_filter()) {
    post_join_filter_ = new ::substrait::proto::Expression(*from.post_join_filter_);
  } else {
    post_join_filter_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.MergeJoinRel)
}

void MergeJoinRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

MergeJoinRel::~MergeJoinRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.MergeJoinRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeJoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete post_join_filter_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void MergeJoinRel::ArenaDtor(void* object) {
  MergeJoinRel* _this = reinterpret_cast< MergeJoinRel* >(object);
  (void)_this;
}
void MergeJoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeJoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeJoinRel& MergeJoinRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void MergeJoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.MergeJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_keys_.Clear();
  right_keys_.Clear();
  keys_.Clear();
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeJoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression post_join_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.MergeJoinRel.JoinType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::proto::MergeJoinRel_JoinType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ComparisonJoinKey keys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeJoinRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.MergeJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_left_keys(i), target, stream);
  }

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_right_keys(i), target, stream);
  }

  // .substrait.proto.Expression post_join_filter = 6;
  if (this->has_post_join_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::post_join_filter(this), target, stream);
  }

  // .substrait.proto.MergeJoinRel.JoinType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_keys(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.MergeJoinRel)
  return target;
}

size_t MergeJoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.MergeJoinRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  total_size += 1UL * this->_internal_left_keys_size();
  for (const auto& msg : this->left_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  total_size += 1UL * this->_internal_right_keys_size();
  for (const auto& msg : this->right_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.Expression post_join_filter = 6;
  if (this->has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_join_filter_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.MergeJoinRel.JoinType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeJoinRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.MergeJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeJoinRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeJoinRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.MergeJoinRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.MergeJoinRel)
    MergeFrom(*source);
  }
}

void MergeJoinRel::MergeFrom(const MergeJoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.MergeJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_keys_.MergeFrom(from.left_keys_);
  right_keys_.MergeFrom(from.right_keys_);
  keys_.MergeFrom(from.keys_);
  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_post_join_filter()) {
    _internal_mutable_post_join_filter()->::substrait::proto::Expression::MergeFrom(from._internal_post_join_filter());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MergeJoinRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.MergeJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeJoinRel::CopyFrom(const MergeJoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.MergeJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeJoinRel::IsInitialized() const {
  return true;
}

void MergeJoinRel::InternalSwap(MergeJoinRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  left_keys_.InternalSwap(&other->left_keys_);
  right_keys_.InternalSwap(&other->right_keys_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeJoinRel, type_)
      + sizeof(MergeJoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(MergeJoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeJoinRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NestedLoopJoinRel::InitAsDefaultInstance() {
  ::substrait::proto::_NestedLoopJoinRel_default_instance_._instance.get_mutable()->common_ = const_cast< ::substrait::proto::RelCommon*>(
      ::substrait::proto::RelCommon::internal_default_instance());
  ::substrait::proto::_NestedLoopJoinRel_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_NestedLoopJoinRel_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_NestedLoopJoinRel_default_instance_._instance.get_mutable()->expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_NestedLoopJoinRel_default_instance_._instance.get_mutable()->advanced_extension_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class NestedLoopJoinRel::_Internal {
 public:
  static const ::substrait::proto::RelCommon& common(const NestedLoopJoinRel* msg);
  static const ::substrait::proto::Rel& left(const NestedLoopJoinRel* msg);
  static const ::substrait::proto::Rel& right(const NestedLoopJoinRel* msg);
  static const ::substrait::proto::Expression& expression(const NestedLoopJoinRel* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extension(const NestedLoopJoinRel* msg);
};

const ::substrait::proto::RelCommon&
NestedLoopJoinRel::_Internal::common(const NestedLoopJoinRel* msg) {
  return *msg->common_;
}
const ::substrait::proto::Rel&
NestedLoopJoinRel::_Internal::left(const NestedLoopJoinRel* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
NestedLoopJoinRel::_Internal::right(const NestedLoopJoinRel* msg) {
  return *msg->right_;
}
const ::substrait::proto::Expression&
NestedLoopJoinRel::_Internal::expression(const NestedLoopJoinRel* msg) {
  return *msg->expression_;
}
const ::substrait::proto::extensions::AdvancedExtension&
NestedLoopJoinRel::_Internal::advanced_extension(const NestedLoopJoinRel* msg) {
  return *msg->advanced_extension_;
}
void NestedLoopJoinRel::clear_advanced_extension() {
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
NestedLoopJoinRel::NestedLoopJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.NestedLoopJoinRel)
}
NestedLoopJoinRel::NestedLoopJoinRel(const NestedLoopJoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::proto::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::substrait::proto::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.NestedLoopJoinRel)
}

void NestedLoopJoinRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

NestedLoopJoinRel::~NestedLoopJoinRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.NestedLoopJoinRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NestedLoopJoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void NestedLoopJoinRel::ArenaDtor(void* object) {
  NestedLoopJoinRel* _this = reinterpret_cast< NestedLoopJoinRel* >(object);
  (void)_this;
}
void NestedLoopJoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NestedLoopJoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NestedLoopJoinRel& NestedLoopJoinRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void NestedLoopJoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.NestedLoopJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArena() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedLoopJoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression expression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NestedLoopJoinRel.JoinType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::proto::NestedLoopJoinRel_JoinType>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NestedLoopJoinRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.NestedLoopJoinRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .substrait.proto.Expression expression = 4;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expression(this), target, stream);
  }

  // .substrait.proto.NestedLoopJoinRel.JoinType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.NestedLoopJoinRel)
  return target;
}

size_t NestedLoopJoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.NestedLoopJoinRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.RelCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.proto.Rel left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.Expression expression = 4;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  if (this->has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.proto.NestedLoopJoinRel.JoinType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedLoopJoinRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.NestedLoopJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedLoopJoinRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NestedLoopJoinRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.NestedLoopJoinRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.NestedLoopJoinRel)
    MergeFrom(*source);
  }
}

void NestedLoopJoinRel::MergeFrom(const NestedLoopJoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.NestedLoopJoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::substrait::proto::RelCommon::MergeFrom(from._internal_common());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Rel::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
  }
  if (from.has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void NestedLoopJoinRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.NestedLoopJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedLoopJoinRel::CopyFrom(const NestedLoopJoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.NestedLoopJoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedLoopJoinRel::IsInitialized() const {
  return true;
}

void NestedLoopJoinRel::InternalSwap(NestedLoopJoinRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedLoopJoinRel, type_)
      + sizeof(NestedLoopJoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(NestedLoopJoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedLoopJoinRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionArgument::InitAsDefaultInstance() {
  ::substrait::proto::_FunctionArgument_default_instance_.enum__.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_FunctionArgument_default_instance_.type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_FunctionArgument_default_instance_.value_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class FunctionArgument::_Internal {
 public:
  static const ::substrait::proto::Type& type(const FunctionArgument* msg);
  static const ::substrait::proto::Expression& value(const FunctionArgument* msg);
};

const ::substrait::proto::Type&
FunctionArgument::_Internal::type(const FunctionArgument* msg) {
  return *msg->arg_type_.type_;
}
const ::substrait::proto::Expression&
FunctionArgument::_Internal::value(const FunctionArgument* msg) {
  return *msg->arg_type_.value_;
}
void FunctionArgument::set_allocated_type(::substrait::proto::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_arg_type();
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
    arg_type_.type_ = type;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FunctionArgument.type)
}
void FunctionArgument::clear_type() {
  if (_internal_has_type()) {
    if (GetArena() == nullptr) {
      delete arg_type_.type_;
    }
    clear_has_arg_type();
  }
}
void FunctionArgument::set_allocated_value(::substrait::proto::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_arg_type();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    arg_type_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FunctionArgument.value)
}
FunctionArgument::FunctionArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.FunctionArgument)
}
FunctionArgument::FunctionArgument(const FunctionArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_arg_type();
  switch (from.arg_type_case()) {
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kType: {
      _internal_mutable_type()->::substrait::proto::Type::MergeFrom(from._internal_type());
      break;
    }
    case kValue: {
      _internal_mutable_value()->::substrait::proto::Expression::MergeFrom(from._internal_value());
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.FunctionArgument)
}

void FunctionArgument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_arg_type();
}

FunctionArgument::~FunctionArgument() {
  // @@protoc_insertion_point(destructor:substrait.proto.FunctionArgument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionArgument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_arg_type()) {
    clear_arg_type();
  }
}

void FunctionArgument::ArenaDtor(void* object) {
  FunctionArgument* _this = reinterpret_cast< FunctionArgument* >(object);
  (void)_this;
}
void FunctionArgument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionArgument& FunctionArgument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void FunctionArgument::clear_arg_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.FunctionArgument)
  switch (arg_type_case()) {
    case kEnum: {
      arg_type_.enum__.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kType: {
      if (GetArena() == nullptr) {
        delete arg_type_.type_;
      }
      break;
    }
    case kValue: {
      if (GetArena() == nullptr) {
        delete arg_type_.value_;
      }
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARG_TYPE_NOT_SET;
}


void FunctionArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.FunctionArgument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_arg_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionArgument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.FunctionArgument.enum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionArgument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.FunctionArgument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string enum = 1;
  if (_internal_has_enum_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enum_().data(), static_cast<int>(this->_internal_enum_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.FunctionArgument.enum");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_(), target);
  }

  // .substrait.proto.Type type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // .substrait.proto.Expression value = 3;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.FunctionArgument)
  return target;
}

size_t FunctionArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.FunctionArgument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (arg_type_case()) {
    // string enum = 1;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_());
      break;
    }
    // .substrait.proto.Type type = 2;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arg_type_.type_);
      break;
    }
    // .substrait.proto.Expression value = 3;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arg_type_.value_);
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionArgument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.FunctionArgument)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionArgument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionArgument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.FunctionArgument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.FunctionArgument)
    MergeFrom(*source);
  }
}

void FunctionArgument::MergeFrom(const FunctionArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.FunctionArgument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.arg_type_case()) {
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kType: {
      _internal_mutable_type()->::substrait::proto::Type::MergeFrom(from._internal_type());
      break;
    }
    case kValue: {
      _internal_mutable_value()->::substrait::proto::Expression::MergeFrom(from._internal_value());
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
}

void FunctionArgument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.FunctionArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionArgument::CopyFrom(const FunctionArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.FunctionArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgument::IsInitialized() const {
  return true;
}

void FunctionArgument::InternalSwap(FunctionArgument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(arg_type_, other->arg_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionArgument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionOption::InitAsDefaultInstance() {
}
class FunctionOption::_Internal {
 public:
};

FunctionOption::FunctionOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.FunctionOption)
}
FunctionOption::FunctionOption(const FunctionOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preference_(from.preference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.FunctionOption)
}

void FunctionOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FunctionOption::~FunctionOption() {
  // @@protoc_insertion_point(destructor:substrait.proto.FunctionOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionOption::ArenaDtor(void* object) {
  FunctionOption* _this = reinterpret_cast< FunctionOption* >(object);
  (void)_this;
}
void FunctionOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionOption& FunctionOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionOption_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void FunctionOption::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.FunctionOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preference_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.FunctionOption.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string preference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_preference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.FunctionOption.preference"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.FunctionOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.FunctionOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string preference = 2;
  for (int i = 0, n = this->_internal_preference_size(); i < n; i++) {
    const auto& s = this->_internal_preference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.FunctionOption.preference");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.FunctionOption)
  return target;
}

size_t FunctionOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.FunctionOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string preference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(preference_.size());
  for (int i = 0, n = preference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      preference_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.FunctionOption)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.FunctionOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.FunctionOption)
    MergeFrom(*source);
  }
}

void FunctionOption::MergeFrom(const FunctionOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.FunctionOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preference_.MergeFrom(from.preference_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void FunctionOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.FunctionOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionOption::CopyFrom(const FunctionOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.FunctionOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionOption::IsInitialized() const {
  return true;
}

void FunctionOption::InternalSwap(FunctionOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preference_.InternalSwap(&other->preference_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Enum_Empty::InitAsDefaultInstance() {
}
class Expression_Enum_Empty::_Internal {
 public:
};

Expression_Enum_Empty::Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Enum.Empty)
}
Expression_Enum_Empty::Expression_Enum_Empty(const Expression_Enum_Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Enum.Empty)
}

void Expression_Enum_Empty::SharedCtor() {
}

Expression_Enum_Empty::~Expression_Enum_Empty() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Enum.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Enum_Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Enum_Empty::ArenaDtor(void* object) {
  Expression_Enum_Empty* _this = reinterpret_cast< Expression_Enum_Empty* >(object);
  (void)_this;
}
void Expression_Enum_Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Enum_Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Enum_Empty& Expression_Enum_Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Enum_Empty_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Enum_Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Enum.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Enum_Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Enum_Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Enum.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Enum.Empty)
  return target;
}

size_t Expression_Enum_Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Enum.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Enum_Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Enum.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Enum_Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Enum_Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Enum.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Enum.Empty)
    MergeFrom(*source);
  }
}

void Expression_Enum_Empty::MergeFrom(const Expression_Enum_Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Enum.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_Enum_Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Enum.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Enum_Empty::CopyFrom(const Expression_Enum_Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Enum.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Enum_Empty::IsInitialized() const {
  return true;
}

void Expression_Enum_Empty::InternalSwap(Expression_Enum_Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum_Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Enum::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Enum_default_instance_.specified_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Enum_default_instance_.unspecified_ = const_cast< ::substrait::proto::Expression_Enum_Empty*>(
      ::substrait::proto::Expression_Enum_Empty::internal_default_instance());
}
class Expression_Enum::_Internal {
 public:
  static const ::substrait::proto::Expression_Enum_Empty& unspecified(const Expression_Enum* msg);
};

const ::substrait::proto::Expression_Enum_Empty&
Expression_Enum::_Internal::unspecified(const Expression_Enum* msg) {
  return *msg->enum_kind_.unspecified_;
}
void Expression_Enum::set_allocated_unspecified(::substrait::proto::Expression_Enum_Empty* unspecified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_enum_kind();
  if (unspecified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unspecified);
    if (message_arena != submessage_arena) {
      unspecified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unspecified, submessage_arena);
    }
    set_has_unspecified();
    enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Enum.unspecified)
}
Expression_Enum::Expression_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Enum)
}
Expression_Enum::Expression_Enum(const Expression_Enum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_enum_kind();
  switch (from.enum_kind_case()) {
    case kSpecified: {
      _internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _internal_mutable_unspecified()->::substrait::proto::Expression_Enum_Empty::MergeFrom(from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Enum)
}

void Expression_Enum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_enum_kind();
}

Expression_Enum::~Expression_Enum() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Enum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Enum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_enum_kind()) {
    clear_enum_kind();
  }
}

void Expression_Enum::ArenaDtor(void* object) {
  Expression_Enum* _this = reinterpret_cast< Expression_Enum* >(object);
  (void)_this;
}
void Expression_Enum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Enum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Enum& Expression_Enum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Enum_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Enum::clear_enum_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.Enum)
  switch (enum_kind_case()) {
    case kSpecified: {
      enum_kind_.specified_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kUnspecified: {
      if (GetArena() == nullptr) {
        delete enum_kind_.unspecified_;
      }
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENUM_KIND_NOT_SET;
}


void Expression_Enum::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Enum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_enum_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Enum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string specified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_specified();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.Enum.specified"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Enum.Empty unspecified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unspecified(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Enum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Enum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string specified = 1;
  if (_internal_has_specified()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specified().data(), static_cast<int>(this->_internal_specified().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.Enum.specified");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_specified(), target);
  }

  // .substrait.proto.Expression.Enum.Empty unspecified = 2;
  if (_internal_has_unspecified()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unspecified(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Enum)
  return target;
}

size_t Expression_Enum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Enum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (enum_kind_case()) {
    // string specified = 1;
    case kSpecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specified());
      break;
    }
    // .substrait.proto.Expression.Enum.Empty unspecified = 2;
    case kUnspecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enum_kind_.unspecified_);
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Enum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Enum)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Enum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Enum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Enum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Enum)
    MergeFrom(*source);
  }
}

void Expression_Enum::MergeFrom(const Expression_Enum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Enum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.enum_kind_case()) {
    case kSpecified: {
      _internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _internal_mutable_unspecified()->::substrait::proto::Expression_Enum_Empty::MergeFrom(from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_Enum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Enum::CopyFrom(const Expression_Enum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Enum::IsInitialized() const {
  return true;
}

void Expression_Enum::InternalSwap(Expression_Enum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enum_kind_, other->enum_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_VarChar::InitAsDefaultInstance() {
}
class Expression_Literal_VarChar::_Internal {
 public:
};

Expression_Literal_VarChar::Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.VarChar)
}
Expression_Literal_VarChar::Expression_Literal_VarChar(const Expression_Literal_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.VarChar)
}

void Expression_Literal_VarChar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  length_ = 0u;
}

Expression_Literal_VarChar::~Expression_Literal_VarChar() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.VarChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_VarChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_Literal_VarChar::ArenaDtor(void* object) {
  Expression_Literal_VarChar* _this = reinterpret_cast< Expression_Literal_VarChar* >(object);
  (void)_this;
}
void Expression_Literal_VarChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_VarChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_VarChar& Expression_Literal_VarChar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_VarChar_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_VarChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.Literal.VarChar.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_VarChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.Literal.VarChar.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.VarChar)
  return target;
}

size_t Expression_Literal_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.VarChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_VarChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_VarChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_VarChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.VarChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.VarChar)
    MergeFrom(*source);
  }
}

void Expression_Literal_VarChar::MergeFrom(const Expression_Literal_VarChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void Expression_Literal_VarChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_VarChar::CopyFrom(const Expression_Literal_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_VarChar::IsInitialized() const {
  return true;
}

void Expression_Literal_VarChar::InternalSwap(Expression_Literal_VarChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_VarChar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_Decimal::InitAsDefaultInstance() {
}
class Expression_Literal_Decimal::_Internal {
 public:
};

Expression_Literal_Decimal::Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.Decimal)
}
Expression_Literal_Decimal::Expression_Literal_Decimal(const Expression_Literal_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.Decimal)
}

void Expression_Literal_Decimal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
}

Expression_Literal_Decimal::~Expression_Literal_Decimal() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_Literal_Decimal::ArenaDtor(void* object) {
  Expression_Literal_Decimal* _this = reinterpret_cast< Expression_Literal_Decimal* >(object);
  (void)_this;
}
void Expression_Literal_Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_Decimal& Expression_Literal_Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_Decimal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.Decimal)
  return target;
}

size_t Expression_Literal_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.Decimal)
    MergeFrom(*source);
  }
}

void Expression_Literal_Decimal::MergeFrom(const Expression_Literal_Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void Expression_Literal_Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Decimal::CopyFrom(const Expression_Literal_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Decimal::IsInitialized() const {
  return true;
}

void Expression_Literal_Decimal::InternalSwap(Expression_Literal_Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, scale_)
      + sizeof(Expression_Literal_Decimal::scale_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, precision_)>(
          reinterpret_cast<char*>(&precision_),
          reinterpret_cast<char*>(&other->precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_Map_KeyValue::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Literal_Map_KeyValue_default_instance_._instance.get_mutable()->key_ = const_cast< ::substrait::proto::Expression_Literal*>(
      ::substrait::proto::Expression_Literal::internal_default_instance());
  ::substrait::proto::_Expression_Literal_Map_KeyValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::substrait::proto::Expression_Literal*>(
      ::substrait::proto::Expression_Literal::internal_default_instance());
}
class Expression_Literal_Map_KeyValue::_Internal {
 public:
  static const ::substrait::proto::Expression_Literal& key(const Expression_Literal_Map_KeyValue* msg);
  static const ::substrait::proto::Expression_Literal& value(const Expression_Literal_Map_KeyValue* msg);
};

const ::substrait::proto::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::key(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->key_;
}
const ::substrait::proto::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::value(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->value_;
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.Map.KeyValue)
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(const Expression_Literal_Map_KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::substrait::proto::Expression_Literal(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::substrait::proto::Expression_Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.Map.KeyValue)
}

void Expression_Literal_Map_KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Expression_Literal_Map_KeyValue::~Expression_Literal_Map_KeyValue() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.Map.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Map_KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void Expression_Literal_Map_KeyValue::ArenaDtor(void* object) {
  Expression_Literal_Map_KeyValue* _this = reinterpret_cast< Expression_Literal_Map_KeyValue* >(object);
  (void)_this;
}
void Expression_Literal_Map_KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Map_KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_Map_KeyValue& Expression_Literal_Map_KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_Map_KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map_KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Literal key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Map_KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .substrait.proto.Expression.Literal value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.Map.KeyValue)
  return target;
}

size_t Expression_Literal_Map_KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.Map.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .substrait.proto.Expression.Literal value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Map_KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Map_KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Map_KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.Map.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.Map.KeyValue)
    MergeFrom(*source);
  }
}

void Expression_Literal_Map_KeyValue::MergeFrom(const Expression_Literal_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_value());
  }
}

void Expression_Literal_Map_KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Map_KeyValue::CopyFrom(const Expression_Literal_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map_KeyValue::IsInitialized() const {
  return true;
}

void Expression_Literal_Map_KeyValue::InternalSwap(Expression_Literal_Map_KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, value_)
      + sizeof(Expression_Literal_Map_KeyValue::value_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map_KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_Map::InitAsDefaultInstance() {
}
class Expression_Literal_Map::_Internal {
 public:
};

Expression_Literal_Map::Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.Map)
}
Expression_Literal_Map::Expression_Literal_Map(const Expression_Literal_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_values_(from.key_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.Map)
}

void Expression_Literal_Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Literal_Map::~Expression_Literal_Map() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_Map::ArenaDtor(void* object) {
  Expression_Literal_Map* _this = reinterpret_cast< Expression_Literal_Map* >(object);
  (void)_this;
}
void Expression_Literal_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_Map& Expression_Literal_Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.Literal.Map.KeyValue key_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal.Map.KeyValue key_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_key_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.Map)
  return target;
}

size_t Expression_Literal_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal.Map.KeyValue key_values = 1;
  total_size += 1UL * this->_internal_key_values_size();
  for (const auto& msg : this->key_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.Map)
    MergeFrom(*source);
  }
}

void Expression_Literal_Map::MergeFrom(const Expression_Literal_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_values_.MergeFrom(from.key_values_);
}

void Expression_Literal_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Map::CopyFrom(const Expression_Literal_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map::IsInitialized() const {
  return true;
}

void Expression_Literal_Map::InternalSwap(Expression_Literal_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_values_.InternalSwap(&other->key_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_IntervalYearToMonth::InitAsDefaultInstance() {
}
class Expression_Literal_IntervalYearToMonth::_Internal {
 public:
};

Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.IntervalYearToMonth)
}
Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(const Expression_Literal_IntervalYearToMonth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&years_, &from.years_,
    static_cast<size_t>(reinterpret_cast<char*>(&months_) -
    reinterpret_cast<char*>(&years_)) + sizeof(months_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.IntervalYearToMonth)
}

void Expression_Literal_IntervalYearToMonth::SharedCtor() {
  ::memset(&years_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&months_) -
      reinterpret_cast<char*>(&years_)) + sizeof(months_));
}

Expression_Literal_IntervalYearToMonth::~Expression_Literal_IntervalYearToMonth() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.IntervalYearToMonth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_IntervalYearToMonth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_IntervalYearToMonth::ArenaDtor(void* object) {
  Expression_Literal_IntervalYearToMonth* _this = reinterpret_cast< Expression_Literal_IntervalYearToMonth* >(object);
  (void)_this;
}
void Expression_Literal_IntervalYearToMonth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_IntervalYearToMonth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_IntervalYearToMonth& Expression_Literal_IntervalYearToMonth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_IntervalYearToMonth_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_IntervalYearToMonth::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&years_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&months_) -
      reinterpret_cast<char*>(&years_)) + sizeof(months_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalYearToMonth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 years = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          years_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 months = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          months_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_IntervalYearToMonth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->years() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_years(), target);
  }

  // int32 months = 2;
  if (this->months() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_months(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.IntervalYearToMonth)
  return target;
}

size_t Expression_Literal_IntervalYearToMonth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->years() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_years());
  }

  // int32 months = 2;
  if (this->months() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_months());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_IntervalYearToMonth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_IntervalYearToMonth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_IntervalYearToMonth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.IntervalYearToMonth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.IntervalYearToMonth)
    MergeFrom(*source);
  }
}

void Expression_Literal_IntervalYearToMonth::MergeFrom(const Expression_Literal_IntervalYearToMonth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.years() != 0) {
    _internal_set_years(from._internal_years());
  }
  if (from.months() != 0) {
    _internal_set_months(from._internal_months());
  }
}

void Expression_Literal_IntervalYearToMonth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_IntervalYearToMonth::CopyFrom(const Expression_Literal_IntervalYearToMonth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.IntervalYearToMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalYearToMonth::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalYearToMonth::InternalSwap(Expression_Literal_IntervalYearToMonth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, months_)
      + sizeof(Expression_Literal_IntervalYearToMonth::months_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, years_)>(
          reinterpret_cast<char*>(&years_),
          reinterpret_cast<char*>(&other->years_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalYearToMonth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_IntervalDayToSecond::InitAsDefaultInstance() {
}
class Expression_Literal_IntervalDayToSecond::_Internal {
 public:
};

Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.IntervalDayToSecond)
}
Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(const Expression_Literal_IntervalDayToSecond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&days_, &from.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&microseconds_) -
    reinterpret_cast<char*>(&days_)) + sizeof(microseconds_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.IntervalDayToSecond)
}

void Expression_Literal_IntervalDayToSecond::SharedCtor() {
  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microseconds_) -
      reinterpret_cast<char*>(&days_)) + sizeof(microseconds_));
}

Expression_Literal_IntervalDayToSecond::~Expression_Literal_IntervalDayToSecond() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.IntervalDayToSecond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_IntervalDayToSecond::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_IntervalDayToSecond::ArenaDtor(void* object) {
  Expression_Literal_IntervalDayToSecond* _this = reinterpret_cast< Expression_Literal_IntervalDayToSecond* >(object);
  (void)_this;
}
void Expression_Literal_IntervalDayToSecond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_IntervalDayToSecond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_IntervalDayToSecond& Expression_Literal_IntervalDayToSecond::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_IntervalDayToSecond_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_IntervalDayToSecond::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microseconds_) -
      reinterpret_cast<char*>(&days_)) + sizeof(microseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalDayToSecond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 microseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_IntervalDayToSecond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_days(), target);
  }

  // int32 seconds = 2;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seconds(), target);
  }

  // int32 microseconds = 3;
  if (this->microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_microseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.IntervalDayToSecond)
  return target;
}

size_t Expression_Literal_IntervalDayToSecond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // int32 seconds = 2;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  // int32 microseconds = 3;
  if (this->microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_microseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_IntervalDayToSecond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_IntervalDayToSecond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_IntervalDayToSecond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.IntervalDayToSecond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.IntervalDayToSecond)
    MergeFrom(*source);
  }
}

void Expression_Literal_IntervalDayToSecond::MergeFrom(const Expression_Literal_IntervalDayToSecond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.microseconds() != 0) {
    _internal_set_microseconds(from._internal_microseconds());
  }
}

void Expression_Literal_IntervalDayToSecond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_IntervalDayToSecond::CopyFrom(const Expression_Literal_IntervalDayToSecond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.IntervalDayToSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalDayToSecond::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalDayToSecond::InternalSwap(Expression_Literal_IntervalDayToSecond* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, microseconds_)
      + sizeof(Expression_Literal_IntervalDayToSecond::microseconds_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, days_)>(
          reinterpret_cast<char*>(&days_),
          reinterpret_cast<char*>(&other->days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalDayToSecond::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_Struct::InitAsDefaultInstance() {
}
class Expression_Literal_Struct::_Internal {
 public:
};

Expression_Literal_Struct::Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.Struct)
}
Expression_Literal_Struct::Expression_Literal_Struct(const Expression_Literal_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.Struct)
}

void Expression_Literal_Struct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Literal_Struct::~Expression_Literal_Struct() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.Struct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_Struct::ArenaDtor(void* object) {
  Expression_Literal_Struct* _this = reinterpret_cast< Expression_Literal_Struct* >(object);
  (void)_this;
}
void Expression_Literal_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_Struct& Expression_Literal_Struct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.Literal fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_Struct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.Struct)
  return target;
}

size_t Expression_Literal_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.Struct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_Struct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_Struct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_Struct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.Struct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.Struct)
    MergeFrom(*source);
  }
}

void Expression_Literal_Struct::MergeFrom(const Expression_Literal_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void Expression_Literal_Struct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_Struct::CopyFrom(const Expression_Literal_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Struct::IsInitialized() const {
  return true;
}

void Expression_Literal_Struct::InternalSwap(Expression_Literal_Struct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Struct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_List::InitAsDefaultInstance() {
}
class Expression_Literal_List::_Internal {
 public:
};

Expression_Literal_List::Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.List)
}
Expression_Literal_List::Expression_Literal_List(const Expression_Literal_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.List)
}

void Expression_Literal_List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Literal_List::~Expression_Literal_List() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Literal_List::ArenaDtor(void* object) {
  Expression_Literal_List* _this = reinterpret_cast< Expression_Literal_List* >(object);
  (void)_this;
}
void Expression_Literal_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_List& Expression_Literal_List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_List::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.Literal values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.List)
  return target;
}

size_t Expression_Literal_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Literal values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.List)
    MergeFrom(*source);
  }
}

void Expression_Literal_List::MergeFrom(const Expression_Literal_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Expression_Literal_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_List::CopyFrom(const Expression_Literal_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_List::IsInitialized() const {
  return true;
}

void Expression_Literal_List::InternalSwap(Expression_Literal_List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal_UserDefined::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Literal_UserDefined_default_instance_._instance.get_mutable()->value_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Expression_Literal_UserDefined::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const Expression_Literal_UserDefined* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Expression_Literal_UserDefined::_Internal::value(const Expression_Literal_UserDefined* msg) {
  return *msg->value_;
}
void Expression_Literal_UserDefined::clear_type_parameters() {
  type_parameters_.Clear();
}
void Expression_Literal_UserDefined::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Expression_Literal_UserDefined::Expression_Literal_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal.UserDefined)
}
Expression_Literal_UserDefined::Expression_Literal_UserDefined(const Expression_Literal_UserDefined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_parameters_(from.type_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  type_reference_ = from.type_reference_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal.UserDefined)
}

void Expression_Literal_UserDefined::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_reference_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_reference_));
}

Expression_Literal_UserDefined::~Expression_Literal_UserDefined() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal.UserDefined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal_UserDefined::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Expression_Literal_UserDefined::ArenaDtor(void* object) {
  Expression_Literal_UserDefined* _this = reinterpret_cast< Expression_Literal_UserDefined* >(object);
  (void)_this;
}
void Expression_Literal_UserDefined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal_UserDefined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal_UserDefined& Expression_Literal_UserDefined::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_UserDefined_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal_UserDefined::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal.UserDefined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_parameters_.Clear();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  type_reference_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_UserDefined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Type.Parameter type_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal_UserDefined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal.UserDefined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_reference = 1;
  if (this->type_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_reference(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // repeated .substrait.proto.Type.Parameter type_parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_type_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal.UserDefined)
  return target;
}

size_t Expression_Literal_UserDefined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal.UserDefined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Type.Parameter type_parameters = 3;
  total_size += 1UL * this->_internal_type_parameters_size();
  for (const auto& msg : this->type_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // uint32 type_reference = 1;
  if (this->type_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal_UserDefined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal.UserDefined)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal_UserDefined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal_UserDefined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal.UserDefined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal.UserDefined)
    MergeFrom(*source);
  }
}

void Expression_Literal_UserDefined::MergeFrom(const Expression_Literal_UserDefined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal.UserDefined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_parameters_.MergeFrom(from.type_parameters_);
  if (from.has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  if (from.type_reference() != 0) {
    _internal_set_type_reference(from._internal_type_reference());
  }
}

void Expression_Literal_UserDefined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal_UserDefined::CopyFrom(const Expression_Literal_UserDefined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_UserDefined::IsInitialized() const {
  return true;
}

void Expression_Literal_UserDefined::InternalSwap(Expression_Literal_UserDefined* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_parameters_.InternalSwap(&other->type_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_UserDefined, type_reference_)
      + sizeof(Expression_Literal_UserDefined::type_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_UserDefined, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_UserDefined::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Literal::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Literal_default_instance_.boolean_ = false;
  ::substrait::proto::_Expression_Literal_default_instance_.i8_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.i16_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.i32_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.i64_ = PROTOBUF_LONGLONG(0);
  ::substrait::proto::_Expression_Literal_default_instance_.fp32_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.fp64_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Literal_default_instance_.binary_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Literal_default_instance_.timestamp_ = PROTOBUF_LONGLONG(0);
  ::substrait::proto::_Expression_Literal_default_instance_.date_ = 0;
  ::substrait::proto::_Expression_Literal_default_instance_.time_ = PROTOBUF_LONGLONG(0);
  ::substrait::proto::_Expression_Literal_default_instance_.interval_year_to_month_ = const_cast< ::substrait::proto::Expression_Literal_IntervalYearToMonth*>(
      ::substrait::proto::Expression_Literal_IntervalYearToMonth::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.interval_day_to_second_ = const_cast< ::substrait::proto::Expression_Literal_IntervalDayToSecond*>(
      ::substrait::proto::Expression_Literal_IntervalDayToSecond::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.fixed_char_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Literal_default_instance_.var_char_ = const_cast< ::substrait::proto::Expression_Literal_VarChar*>(
      ::substrait::proto::Expression_Literal_VarChar::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.fixed_binary_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Literal_default_instance_.decimal_ = const_cast< ::substrait::proto::Expression_Literal_Decimal*>(
      ::substrait::proto::Expression_Literal_Decimal::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.struct__ = const_cast< ::substrait::proto::Expression_Literal_Struct*>(
      ::substrait::proto::Expression_Literal_Struct::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.map_ = const_cast< ::substrait::proto::Expression_Literal_Map*>(
      ::substrait::proto::Expression_Literal_Map::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.timestamp_tz_ = PROTOBUF_LONGLONG(0);
  ::substrait::proto::_Expression_Literal_default_instance_.uuid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Expression_Literal_default_instance_.null_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.list_ = const_cast< ::substrait::proto::Expression_Literal_List*>(
      ::substrait::proto::Expression_Literal_List::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.empty_list_ = const_cast< ::substrait::proto::Type_List*>(
      ::substrait::proto::Type_List::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.empty_map_ = const_cast< ::substrait::proto::Type_Map*>(
      ::substrait::proto::Type_Map::internal_default_instance());
  ::substrait::proto::_Expression_Literal_default_instance_.user_defined_ = const_cast< ::substrait::proto::Expression_Literal_UserDefined*>(
      ::substrait::proto::Expression_Literal_UserDefined::internal_default_instance());
}
class Expression_Literal::_Internal {
 public:
  static const ::substrait::proto::Expression_Literal_IntervalYearToMonth& interval_year_to_month(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_IntervalDayToSecond& interval_day_to_second(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_VarChar& var_char(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_Decimal& decimal(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_Struct& struct_(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_Map& map(const Expression_Literal* msg);
  static const ::substrait::proto::Type& null(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_List& list(const Expression_Literal* msg);
  static const ::substrait::proto::Type_List& empty_list(const Expression_Literal* msg);
  static const ::substrait::proto::Type_Map& empty_map(const Expression_Literal* msg);
  static const ::substrait::proto::Expression_Literal_UserDefined& user_defined(const Expression_Literal* msg);
};

const ::substrait::proto::Expression_Literal_IntervalYearToMonth&
Expression_Literal::_Internal::interval_year_to_month(const Expression_Literal* msg) {
  return *msg->literal_type_.interval_year_to_month_;
}
const ::substrait::proto::Expression_Literal_IntervalDayToSecond&
Expression_Literal::_Internal::interval_day_to_second(const Expression_Literal* msg) {
  return *msg->literal_type_.interval_day_to_second_;
}
const ::substrait::proto::Expression_Literal_VarChar&
Expression_Literal::_Internal::var_char(const Expression_Literal* msg) {
  return *msg->literal_type_.var_char_;
}
const ::substrait::proto::Expression_Literal_Decimal&
Expression_Literal::_Internal::decimal(const Expression_Literal* msg) {
  return *msg->literal_type_.decimal_;
}
const ::substrait::proto::Expression_Literal_Struct&
Expression_Literal::_Internal::struct_(const Expression_Literal* msg) {
  return *msg->literal_type_.struct__;
}
const ::substrait::proto::Expression_Literal_Map&
Expression_Literal::_Internal::map(const Expression_Literal* msg) {
  return *msg->literal_type_.map_;
}
const ::substrait::proto::Type&
Expression_Literal::_Internal::null(const Expression_Literal* msg) {
  return *msg->literal_type_.null_;
}
const ::substrait::proto::Expression_Literal_List&
Expression_Literal::_Internal::list(const Expression_Literal* msg) {
  return *msg->literal_type_.list_;
}
const ::substrait::proto::Type_List&
Expression_Literal::_Internal::empty_list(const Expression_Literal* msg) {
  return *msg->literal_type_.empty_list_;
}
const ::substrait::proto::Type_Map&
Expression_Literal::_Internal::empty_map(const Expression_Literal* msg) {
  return *msg->literal_type_.empty_map_;
}
const ::substrait::proto::Expression_Literal_UserDefined&
Expression_Literal::_Internal::user_defined(const Expression_Literal* msg) {
  return *msg->literal_type_.user_defined_;
}
void Expression_Literal::set_allocated_interval_year_to_month(::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (interval_year_to_month) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_year_to_month);
    if (message_arena != submessage_arena) {
      interval_year_to_month = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year_to_month, submessage_arena);
    }
    set_has_interval_year_to_month();
    literal_type_.interval_year_to_month_ = interval_year_to_month;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.interval_year_to_month)
}
void Expression_Literal::set_allocated_interval_day_to_second(::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (interval_day_to_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_day_to_second);
    if (message_arena != submessage_arena) {
      interval_day_to_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day_to_second, submessage_arena);
    }
    set_has_interval_day_to_second();
    literal_type_.interval_day_to_second_ = interval_day_to_second;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.interval_day_to_second)
}
void Expression_Literal::set_allocated_var_char(::substrait::proto::Expression_Literal_VarChar* var_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (var_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_char);
    if (message_arena != submessage_arena) {
      var_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_char, submessage_arena);
    }
    set_has_var_char();
    literal_type_.var_char_ = var_char;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.var_char)
}
void Expression_Literal::set_allocated_decimal(::substrait::proto::Expression_Literal_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    literal_type_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.decimal)
}
void Expression_Literal::set_allocated_struct_(::substrait::proto::Expression_Literal_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    literal_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.struct)
}
void Expression_Literal::set_allocated_map(::substrait::proto::Expression_Literal_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    literal_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.map)
}
void Expression_Literal::set_allocated_null(::substrait::proto::Type* null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null)->GetArena();
    if (message_arena != submessage_arena) {
      null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null, submessage_arena);
    }
    set_has_null();
    literal_type_.null_ = null;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.null)
}
void Expression_Literal::clear_null() {
  if (_internal_has_null()) {
    if (GetArena() == nullptr) {
      delete literal_type_.null_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_list(::substrait::proto::Expression_Literal_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    literal_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.list)
}
void Expression_Literal::set_allocated_empty_list(::substrait::proto::Type_List* empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_list)->GetArena();
    if (message_arena != submessage_arena) {
      empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_list, submessage_arena);
    }
    set_has_empty_list();
    literal_type_.empty_list_ = empty_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.empty_list)
}
void Expression_Literal::clear_empty_list() {
  if (_internal_has_empty_list()) {
    if (GetArena() == nullptr) {
      delete literal_type_.empty_list_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_empty_map(::substrait::proto::Type_Map* empty_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (empty_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_map)->GetArena();
    if (message_arena != submessage_arena) {
      empty_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_map, submessage_arena);
    }
    set_has_empty_map();
    literal_type_.empty_map_ = empty_map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.empty_map)
}
void Expression_Literal::clear_empty_map() {
  if (_internal_has_empty_map()) {
    if (GetArena() == nullptr) {
      delete literal_type_.empty_map_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_user_defined(::substrait::proto::Expression_Literal_UserDefined* user_defined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_literal_type();
  if (user_defined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_defined);
    if (message_arena != submessage_arena) {
      user_defined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined, submessage_arena);
    }
    set_has_user_defined();
    literal_type_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.user_defined)
}
Expression_Literal::Expression_Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Literal)
}
Expression_Literal::Expression_Literal(const Expression_Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nullable_, &from.nullable_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_variation_reference_) -
    reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_has_literal_type();
  switch (from.literal_type_case()) {
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _internal_mutable_interval_year_to_month()->::substrait::proto::Expression_Literal_IntervalYearToMonth::MergeFrom(from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _internal_mutable_interval_day_to_second()->::substrait::proto::Expression_Literal_IntervalDayToSecond::MergeFrom(from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _internal_mutable_var_char()->::substrait::proto::Expression_Literal_VarChar::MergeFrom(from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::substrait::proto::Expression_Literal_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_Literal_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_Literal_Map::MergeFrom(from._internal_map());
      break;
    }
    case kTimestampTz: {
      _internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _internal_mutable_null()->::substrait::proto::Type::MergeFrom(from._internal_null());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_Literal_List::MergeFrom(from._internal_list());
      break;
    }
    case kEmptyList: {
      _internal_mutable_empty_list()->::substrait::proto::Type_List::MergeFrom(from._internal_empty_list());
      break;
    }
    case kEmptyMap: {
      _internal_mutable_empty_map()->::substrait::proto::Type_Map::MergeFrom(from._internal_empty_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::substrait::proto::Expression_Literal_UserDefined::MergeFrom(from._internal_user_defined());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Literal)
}

void Expression_Literal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_reference_) -
      reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_has_literal_type();
}

Expression_Literal::~Expression_Literal() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Literal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_literal_type()) {
    clear_literal_type();
  }
}

void Expression_Literal::ArenaDtor(void* object) {
  Expression_Literal* _this = reinterpret_cast< Expression_Literal* >(object);
  (void)_this;
}
void Expression_Literal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Literal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Literal& Expression_Literal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_Literal_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Literal::clear_literal_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.Literal)
  switch (literal_type_case()) {
    case kBoolean: {
      // No need to clear
      break;
    }
    case kI8: {
      // No need to clear
      break;
    }
    case kI16: {
      // No need to clear
      break;
    }
    case kI32: {
      // No need to clear
      break;
    }
    case kI64: {
      // No need to clear
      break;
    }
    case kFp32: {
      // No need to clear
      break;
    }
    case kFp64: {
      // No need to clear
      break;
    }
    case kString: {
      literal_type_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kBinary: {
      literal_type_.binary_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kTimestamp: {
      // No need to clear
      break;
    }
    case kDate: {
      // No need to clear
      break;
    }
    case kTime: {
      // No need to clear
      break;
    }
    case kIntervalYearToMonth: {
      if (GetArena() == nullptr) {
        delete literal_type_.interval_year_to_month_;
      }
      break;
    }
    case kIntervalDayToSecond: {
      if (GetArena() == nullptr) {
        delete literal_type_.interval_day_to_second_;
      }
      break;
    }
    case kFixedChar: {
      literal_type_.fixed_char_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kVarChar: {
      if (GetArena() == nullptr) {
        delete literal_type_.var_char_;
      }
      break;
    }
    case kFixedBinary: {
      literal_type_.fixed_binary_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kDecimal: {
      if (GetArena() == nullptr) {
        delete literal_type_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArena() == nullptr) {
        delete literal_type_.struct__;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete literal_type_.map_;
      }
      break;
    }
    case kTimestampTz: {
      // No need to clear
      break;
    }
    case kUuid: {
      literal_type_.uuid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kNull: {
      if (GetArena() == nullptr) {
        delete literal_type_.null_;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete literal_type_.list_;
      }
      break;
    }
    case kEmptyList: {
      if (GetArena() == nullptr) {
        delete literal_type_.empty_list_;
      }
      break;
    }
    case kEmptyMap: {
      if (GetArena() == nullptr) {
        delete literal_type_.empty_map_;
      }
      break;
    }
    case kUserDefined: {
      if (GetArena() == nullptr) {
        delete literal_type_.user_defined_;
      }
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LITERAL_TYPE_NOT_SET;
}


void Expression_Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_reference_) -
      reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_literal_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool boolean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_i8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_i16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fp32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _internal_set_fp32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double fp64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_fp64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.Literal.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _internal_set_date(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _internal_set_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year_to_month(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day_to_second(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fixed_char = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_fixed_char();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.Literal.fixed_char"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.VarChar var_char = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_char(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fixed_binary = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_fixed_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.Decimal decimal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.Struct struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.Map map = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp_tz = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type null = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_null(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.List list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.List empty_list = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Map empty_map = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Literal.UserDefined user_defined = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nullable = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Literal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Literal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool boolean = 1;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_boolean(), target);
  }

  // int32 i8 = 2;
  if (_internal_has_i8()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i8(), target);
  }

  // int32 i16 = 3;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i16(), target);
  }

  // int32 i32 = 5;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_i32(), target);
  }

  // int64 i64 = 7;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_i64(), target);
  }

  // float fp32 = 10;
  if (_internal_has_fp32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fp32(), target);
  }

  // double fp64 = 11;
  if (_internal_has_fp64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_fp64(), target);
  }

  // string string = 12;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.Literal.string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string(), target);
  }

  // bytes binary = 13;
  if (_internal_has_binary()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_binary(), target);
  }

  // int64 timestamp = 14;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // int32 date = 16;
  if (_internal_has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_date(), target);
  }

  // int64 time = 17;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_time(), target);
  }

  // .substrait.proto.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
  if (_internal_has_interval_year_to_month()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::interval_year_to_month(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
  if (_internal_has_interval_day_to_second()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::interval_day_to_second(this), target, stream);
  }

  // string fixed_char = 21;
  if (_internal_has_fixed_char()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixed_char().data(), static_cast<int>(this->_internal_fixed_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.Literal.fixed_char");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_fixed_char(), target);
  }

  // .substrait.proto.Expression.Literal.VarChar var_char = 22;
  if (_internal_has_var_char()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::var_char(this), target, stream);
  }

  // bytes fixed_binary = 23;
  if (_internal_has_fixed_binary()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_fixed_binary(), target);
  }

  // .substrait.proto.Expression.Literal.Decimal decimal = 24;
  if (_internal_has_decimal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::decimal(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.Struct struct = 25;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::struct_(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.Map map = 26;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::map(this), target, stream);
  }

  // int64 timestamp_tz = 27;
  if (_internal_has_timestamp_tz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_timestamp_tz(), target);
  }

  // bytes uuid = 28;
  if (_internal_has_uuid()) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_uuid(), target);
  }

  // .substrait.proto.Type null = 29;
  if (_internal_has_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::null(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.List list = 30;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::list(this), target, stream);
  }

  // .substrait.proto.Type.List empty_list = 31;
  if (_internal_has_empty_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::empty_list(this), target, stream);
  }

  // .substrait.proto.Type.Map empty_map = 32;
  if (_internal_has_empty_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::empty_map(this), target, stream);
  }

  // .substrait.proto.Expression.Literal.UserDefined user_defined = 33;
  if (_internal_has_user_defined()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::user_defined(this), target, stream);
  }

  // bool nullable = 50;
  if (this->nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_nullable(), target);
  }

  // uint32 type_variation_reference = 51;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_type_variation_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Literal)
  return target;
}

size_t Expression_Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Literal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool nullable = 50;
  if (this->nullable() != 0) {
    total_size += 2 + 1;
  }

  // uint32 type_variation_reference = 51;
  if (this->type_variation_reference() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  switch (literal_type_case()) {
    // bool boolean = 1;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // int32 i8 = 2;
    case kI8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i8());
      break;
    }
    // int32 i16 = 3;
    case kI16: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i16());
      break;
    }
    // int32 i32 = 5;
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i32());
      break;
    }
    // int64 i64 = 7;
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_i64());
      break;
    }
    // float fp32 = 10;
    case kFp32: {
      total_size += 1 + 4;
      break;
    }
    // double fp64 = 11;
    case kFp64: {
      total_size += 1 + 8;
      break;
    }
    // string string = 12;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // bytes binary = 13;
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary());
      break;
    }
    // int64 timestamp = 14;
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp());
      break;
    }
    // int32 date = 16;
    case kDate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date());
      break;
    }
    // int64 time = 17;
    case kTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
      break;
    }
    // .substrait.proto.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
    case kIntervalYearToMonth: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.interval_year_to_month_);
      break;
    }
    // .substrait.proto.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
    case kIntervalDayToSecond: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.interval_day_to_second_);
      break;
    }
    // string fixed_char = 21;
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fixed_char());
      break;
    }
    // .substrait.proto.Expression.Literal.VarChar var_char = 22;
    case kVarChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.var_char_);
      break;
    }
    // bytes fixed_binary = 23;
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fixed_binary());
      break;
    }
    // .substrait.proto.Expression.Literal.Decimal decimal = 24;
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.decimal_);
      break;
    }
    // .substrait.proto.Expression.Literal.Struct struct = 25;
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.struct__);
      break;
    }
    // .substrait.proto.Expression.Literal.Map map = 26;
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.map_);
      break;
    }
    // int64 timestamp_tz = 27;
    case kTimestampTz: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_tz());
      break;
    }
    // bytes uuid = 28;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
      break;
    }
    // .substrait.proto.Type null = 29;
    case kNull: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.null_);
      break;
    }
    // .substrait.proto.Expression.Literal.List list = 30;
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.list_);
      break;
    }
    // .substrait.proto.Type.List empty_list = 31;
    case kEmptyList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.empty_list_);
      break;
    }
    // .substrait.proto.Type.Map empty_map = 32;
    case kEmptyMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.empty_map_);
      break;
    }
    // .substrait.proto.Expression.Literal.UserDefined user_defined = 33;
    case kUserDefined: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *literal_type_.user_defined_);
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Literal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Literal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Literal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Literal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Literal)
    MergeFrom(*source);
  }
}

void Expression_Literal::MergeFrom(const Expression_Literal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nullable() != 0) {
    _internal_set_nullable(from._internal_nullable());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  switch (from.literal_type_case()) {
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _internal_mutable_interval_year_to_month()->::substrait::proto::Expression_Literal_IntervalYearToMonth::MergeFrom(from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _internal_mutable_interval_day_to_second()->::substrait::proto::Expression_Literal_IntervalDayToSecond::MergeFrom(from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _internal_mutable_var_char()->::substrait::proto::Expression_Literal_VarChar::MergeFrom(from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::substrait::proto::Expression_Literal_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_Literal_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_Literal_Map::MergeFrom(from._internal_map());
      break;
    }
    case kTimestampTz: {
      _internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _internal_mutable_null()->::substrait::proto::Type::MergeFrom(from._internal_null());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_Literal_List::MergeFrom(from._internal_list());
      break;
    }
    case kEmptyList: {
      _internal_mutable_empty_list()->::substrait::proto::Type_List::MergeFrom(from._internal_empty_list());
      break;
    }
    case kEmptyMap: {
      _internal_mutable_empty_map()->::substrait::proto::Type_Map::MergeFrom(from._internal_empty_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::substrait::proto::Expression_Literal_UserDefined::MergeFrom(from._internal_user_defined());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_Literal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Literal::CopyFrom(const Expression_Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal::IsInitialized() const {
  return true;
}

void Expression_Literal::InternalSwap(Expression_Literal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal, type_variation_reference_)
      + sizeof(Expression_Literal::type_variation_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal, nullable_)>(
          reinterpret_cast<char*>(&nullable_),
          reinterpret_cast<char*>(&other->nullable_));
  swap(literal_type_, other->literal_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Nested_Map_KeyValue::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Nested_Map_KeyValue_default_instance_._instance.get_mutable()->key_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_Expression_Nested_Map_KeyValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_Nested_Map_KeyValue::_Internal {
 public:
  static const ::substrait::proto::Expression& key(const Expression_Nested_Map_KeyValue* msg);
  static const ::substrait::proto::Expression& value(const Expression_Nested_Map_KeyValue* msg);
};

const ::substrait::proto::Expression&
Expression_Nested_Map_KeyValue::_Internal::key(const Expression_Nested_Map_KeyValue* msg) {
  return *msg->key_;
}
const ::substrait::proto::Expression&
Expression_Nested_Map_KeyValue::_Internal::value(const Expression_Nested_Map_KeyValue* msg) {
  return *msg->value_;
}
Expression_Nested_Map_KeyValue::Expression_Nested_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Nested.Map.KeyValue)
}
Expression_Nested_Map_KeyValue::Expression_Nested_Map_KeyValue(const Expression_Nested_Map_KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::substrait::proto::Expression(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::substrait::proto::Expression(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Nested.Map.KeyValue)
}

void Expression_Nested_Map_KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Expression_Nested_Map_KeyValue::~Expression_Nested_Map_KeyValue() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Nested.Map.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Nested_Map_KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void Expression_Nested_Map_KeyValue::ArenaDtor(void* object) {
  Expression_Nested_Map_KeyValue* _this = reinterpret_cast< Expression_Nested_Map_KeyValue* >(object);
  (void)_this;
}
void Expression_Nested_Map_KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Nested_Map_KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Nested_Map_KeyValue& Expression_Nested_Map_KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Nested_Map_KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Nested.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Nested_Map_KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Nested_Map_KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Nested.Map.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .substrait.proto.Expression value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Nested.Map.KeyValue)
  return target;
}

size_t Expression_Nested_Map_KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Nested.Map.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .substrait.proto.Expression value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Nested_Map_KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Nested.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Nested_Map_KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Nested_Map_KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Nested.Map.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Nested.Map.KeyValue)
    MergeFrom(*source);
  }
}

void Expression_Nested_Map_KeyValue::MergeFrom(const Expression_Nested_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Nested.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::substrait::proto::Expression::MergeFrom(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::substrait::proto::Expression::MergeFrom(from._internal_value());
  }
}

void Expression_Nested_Map_KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Nested.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Nested_Map_KeyValue::CopyFrom(const Expression_Nested_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Nested.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Nested_Map_KeyValue::IsInitialized() const {
  return true;
}

void Expression_Nested_Map_KeyValue::InternalSwap(Expression_Nested_Map_KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Nested_Map_KeyValue, value_)
      + sizeof(Expression_Nested_Map_KeyValue::value_)
      - PROTOBUF_FIELD_OFFSET(Expression_Nested_Map_KeyValue, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Nested_Map_KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Nested_Map::InitAsDefaultInstance() {
}
class Expression_Nested_Map::_Internal {
 public:
};

Expression_Nested_Map::Expression_Nested_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Nested.Map)
}
Expression_Nested_Map::Expression_Nested_Map(const Expression_Nested_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_values_(from.key_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Nested.Map)
}

void Expression_Nested_Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Nested_Map::~Expression_Nested_Map() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Nested.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Nested_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Nested_Map::ArenaDtor(void* object) {
  Expression_Nested_Map* _this = reinterpret_cast< Expression_Nested_Map* >(object);
  (void)_this;
}
void Expression_Nested_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Nested_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Nested_Map& Expression_Nested_Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Nested_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Nested.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Nested_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.Nested.Map.KeyValue key_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Nested_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Nested.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Nested.Map.KeyValue key_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_key_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Nested.Map)
  return target;
}

size_t Expression_Nested_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Nested.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.Nested.Map.KeyValue key_values = 1;
  total_size += 1UL * this->_internal_key_values_size();
  for (const auto& msg : this->key_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Nested_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Nested.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Nested_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Nested_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Nested.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Nested.Map)
    MergeFrom(*source);
  }
}

void Expression_Nested_Map::MergeFrom(const Expression_Nested_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Nested.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_values_.MergeFrom(from.key_values_);
}

void Expression_Nested_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Nested.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Nested_Map::CopyFrom(const Expression_Nested_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Nested.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Nested_Map::IsInitialized() const {
  return true;
}

void Expression_Nested_Map::InternalSwap(Expression_Nested_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_values_.InternalSwap(&other->key_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Nested_Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Nested_Struct::InitAsDefaultInstance() {
}
class Expression_Nested_Struct::_Internal {
 public:
};

Expression_Nested_Struct::Expression_Nested_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Nested.Struct)
}
Expression_Nested_Struct::Expression_Nested_Struct(const Expression_Nested_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Nested.Struct)
}

void Expression_Nested_Struct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Nested_Struct::~Expression_Nested_Struct() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Nested.Struct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Nested_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Nested_Struct::ArenaDtor(void* object) {
  Expression_Nested_Struct* _this = reinterpret_cast< Expression_Nested_Struct* >(object);
  (void)_this;
}
void Expression_Nested_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Nested_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Nested_Struct& Expression_Nested_Struct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Nested_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Nested.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Nested_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Nested_Struct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Nested.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Nested.Struct)
  return target;
}

size_t Expression_Nested_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Nested.Struct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Nested_Struct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Nested.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Nested_Struct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Nested_Struct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Nested.Struct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Nested.Struct)
    MergeFrom(*source);
  }
}

void Expression_Nested_Struct::MergeFrom(const Expression_Nested_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Nested.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void Expression_Nested_Struct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Nested.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Nested_Struct::CopyFrom(const Expression_Nested_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Nested.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Nested_Struct::IsInitialized() const {
  return true;
}

void Expression_Nested_Struct::InternalSwap(Expression_Nested_Struct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Nested_Struct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Nested_List::InitAsDefaultInstance() {
}
class Expression_Nested_List::_Internal {
 public:
};

Expression_Nested_List::Expression_Nested_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Nested.List)
}
Expression_Nested_List::Expression_Nested_List(const Expression_Nested_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Nested.List)
}

void Expression_Nested_List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_Nested_List::~Expression_Nested_List() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Nested.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Nested_List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_Nested_List::ArenaDtor(void* object) {
  Expression_Nested_List* _this = reinterpret_cast< Expression_Nested_List* >(object);
  (void)_this;
}
void Expression_Nested_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Nested_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Nested_List& Expression_Nested_List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Nested_List::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Nested.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Nested_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Nested_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Nested.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Nested.List)
  return target;
}

size_t Expression_Nested_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Nested.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Nested_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Nested.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Nested_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Nested_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Nested.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Nested.List)
    MergeFrom(*source);
  }
}

void Expression_Nested_List::MergeFrom(const Expression_Nested_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Nested.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Expression_Nested_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Nested.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Nested_List::CopyFrom(const Expression_Nested_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Nested.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Nested_List::IsInitialized() const {
  return true;
}

void Expression_Nested_List::InternalSwap(Expression_Nested_List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Nested_List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Nested::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Nested_default_instance_.struct__ = const_cast< ::substrait::proto::Expression_Nested_Struct*>(
      ::substrait::proto::Expression_Nested_Struct::internal_default_instance());
  ::substrait::proto::_Expression_Nested_default_instance_.list_ = const_cast< ::substrait::proto::Expression_Nested_List*>(
      ::substrait::proto::Expression_Nested_List::internal_default_instance());
  ::substrait::proto::_Expression_Nested_default_instance_.map_ = const_cast< ::substrait::proto::Expression_Nested_Map*>(
      ::substrait::proto::Expression_Nested_Map::internal_default_instance());
}
class Expression_Nested::_Internal {
 public:
  static const ::substrait::proto::Expression_Nested_Struct& struct_(const Expression_Nested* msg);
  static const ::substrait::proto::Expression_Nested_List& list(const Expression_Nested* msg);
  static const ::substrait::proto::Expression_Nested_Map& map(const Expression_Nested* msg);
};

const ::substrait::proto::Expression_Nested_Struct&
Expression_Nested::_Internal::struct_(const Expression_Nested* msg) {
  return *msg->nested_type_.struct__;
}
const ::substrait::proto::Expression_Nested_List&
Expression_Nested::_Internal::list(const Expression_Nested* msg) {
  return *msg->nested_type_.list_;
}
const ::substrait::proto::Expression_Nested_Map&
Expression_Nested::_Internal::map(const Expression_Nested* msg) {
  return *msg->nested_type_.map_;
}
void Expression_Nested::set_allocated_struct_(::substrait::proto::Expression_Nested_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_nested_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    nested_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Nested.struct)
}
void Expression_Nested::set_allocated_list(::substrait::proto::Expression_Nested_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_nested_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    nested_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Nested.list)
}
void Expression_Nested::set_allocated_map(::substrait::proto::Expression_Nested_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_nested_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    nested_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Nested.map)
}
Expression_Nested::Expression_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Nested)
}
Expression_Nested::Expression_Nested(const Expression_Nested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nullable_, &from.nullable_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_variation_reference_) -
    reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_has_nested_type();
  switch (from.nested_type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_Nested_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_Nested_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_Nested_Map::MergeFrom(from._internal_map());
      break;
    }
    case NESTED_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Nested)
}

void Expression_Nested::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_reference_) -
      reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_has_nested_type();
}

Expression_Nested::~Expression_Nested() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Nested)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Nested::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_nested_type()) {
    clear_nested_type();
  }
}

void Expression_Nested::ArenaDtor(void* object) {
  Expression_Nested* _this = reinterpret_cast< Expression_Nested* >(object);
  (void)_this;
}
void Expression_Nested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Nested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Nested& Expression_Nested::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Nested::clear_nested_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.Nested)
  switch (nested_type_case()) {
    case kStruct: {
      if (GetArena() == nullptr) {
        delete nested_type_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete nested_type_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete nested_type_.map_;
      }
      break;
    }
    case NESTED_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NESTED_TYPE_NOT_SET;
}


void Expression_Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_reference_) -
      reinterpret_cast<char*>(&nullable_)) + sizeof(type_variation_reference_));
  clear_nested_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Nested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool nullable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Nested.Struct struct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Nested.List list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Nested.Map map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Nested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool nullable = 1;
  if (this->nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_nullable(), target);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Expression.Nested.Struct struct = 3;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::struct_(this), target, stream);
  }

  // .substrait.proto.Expression.Nested.List list = 4;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::list(this), target, stream);
  }

  // .substrait.proto.Expression.Nested.Map map = 5;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Nested)
  return target;
}

size_t Expression_Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Nested)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool nullable = 1;
  if (this->nullable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  switch (nested_type_case()) {
    // .substrait.proto.Expression.Nested.Struct struct = 3;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nested_type_.struct__);
      break;
    }
    // .substrait.proto.Expression.Nested.List list = 4;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nested_type_.list_);
      break;
    }
    // .substrait.proto.Expression.Nested.Map map = 5;
    case kMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nested_type_.map_);
      break;
    }
    case NESTED_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Nested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Nested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Nested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Nested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Nested)
    MergeFrom(*source);
  }
}

void Expression_Nested::MergeFrom(const Expression_Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nullable() != 0) {
    _internal_set_nullable(from._internal_nullable());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  switch (from.nested_type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_Nested_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_Nested_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_Nested_Map::MergeFrom(from._internal_map());
      break;
    }
    case NESTED_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_Nested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Nested::CopyFrom(const Expression_Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Nested::IsInitialized() const {
  return true;
}

void Expression_Nested::InternalSwap(Expression_Nested* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Nested, type_variation_reference_)
      + sizeof(Expression_Nested::type_variation_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_Nested, nullable_)>(
          reinterpret_cast<char*>(&nullable_),
          reinterpret_cast<char*>(&other->nullable_));
  swap(nested_type_, other->nested_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Nested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_ScalarFunction::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_ScalarFunction_default_instance_._instance.get_mutable()->output_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
}
class Expression_ScalarFunction::_Internal {
 public:
  static const ::substrait::proto::Type& output_type(const Expression_ScalarFunction* msg);
};

const ::substrait::proto::Type&
Expression_ScalarFunction::_Internal::output_type(const Expression_ScalarFunction* msg) {
  return *msg->output_type_;
}
void Expression_ScalarFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
Expression_ScalarFunction::Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena),
  arguments_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.ScalarFunction)
}
Expression_ScalarFunction::Expression_ScalarFunction(const Expression_ScalarFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_),
      arguments_(from.arguments_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::substrait::proto::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  function_reference_ = from.function_reference_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.ScalarFunction)
}

void Expression_ScalarFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&output_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_reference_) -
      reinterpret_cast<char*>(&output_type_)) + sizeof(function_reference_));
}

Expression_ScalarFunction::~Expression_ScalarFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.ScalarFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ScalarFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
}

void Expression_ScalarFunction::ArenaDtor(void* object) {
  Expression_ScalarFunction* _this = reinterpret_cast< Expression_ScalarFunction* >(object);
  (void)_this;
}
void Expression_ScalarFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ScalarFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_ScalarFunction& Expression_ScalarFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_ScalarFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.ScalarFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  arguments_.Clear();
  options_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  function_reference_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ScalarFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression args = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type output_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionArgument arguments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionOption options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ScalarFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.ScalarFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // .substrait.proto.Type output_type = 3;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output_type(this), target, stream);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_arguments(i), target, stream);
  }

  // repeated .substrait.proto.FunctionOption options = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.ScalarFunction)
  return target;
}

size_t Expression_ScalarFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.ScalarFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 4;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionOption options = 5;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Type output_type = 3;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ScalarFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.ScalarFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ScalarFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ScalarFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.ScalarFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.ScalarFunction)
    MergeFrom(*source);
  }
}

void Expression_ScalarFunction::MergeFrom(const Expression_ScalarFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.ScalarFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  arguments_.MergeFrom(from.arguments_);
  options_.MergeFrom(from.options_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::substrait::proto::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
}

void Expression_ScalarFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.ScalarFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ScalarFunction::CopyFrom(const Expression_ScalarFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.ScalarFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ScalarFunction::IsInitialized() const {
  return true;
}

void Expression_ScalarFunction::InternalSwap(Expression_ScalarFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  arguments_.InternalSwap(&other->arguments_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, function_reference_)
      + sizeof(Expression_ScalarFunction::function_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, output_type_)>(
          reinterpret_cast<char*>(&output_type_),
          reinterpret_cast<char*>(&other->output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ScalarFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction_Bound_Preceding::InitAsDefaultInstance() {
}
class Expression_WindowFunction_Bound_Preceding::_Internal {
 public:
};

Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction.Bound.Preceding)
}
Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(const Expression_WindowFunction_Bound_Preceding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction.Bound.Preceding)
}

void Expression_WindowFunction_Bound_Preceding::SharedCtor() {
  offset_ = PROTOBUF_LONGLONG(0);
}

Expression_WindowFunction_Bound_Preceding::~Expression_WindowFunction_Bound_Preceding() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Preceding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Preceding::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Preceding* _this = reinterpret_cast< Expression_WindowFunction_Bound_Preceding* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Preceding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Preceding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction_Bound_Preceding& Expression_WindowFunction_Bound_Preceding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_WindowFunction_Bound_Preceding_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction_Bound_Preceding::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Preceding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Preceding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  return target;
}

size_t Expression_WindowFunction_Bound_Preceding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Preceding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Preceding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Preceding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction.Bound.Preceding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction.Bound.Preceding)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Preceding::MergeFrom(const Expression_WindowFunction_Bound_Preceding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_WindowFunction_Bound_Preceding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Preceding::CopyFrom(const Expression_WindowFunction_Bound_Preceding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Preceding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Preceding::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Preceding::InternalSwap(Expression_WindowFunction_Bound_Preceding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Preceding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction_Bound_Following::InitAsDefaultInstance() {
}
class Expression_WindowFunction_Bound_Following::_Internal {
 public:
};

Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction.Bound.Following)
}
Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(const Expression_WindowFunction_Bound_Following& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction.Bound.Following)
}

void Expression_WindowFunction_Bound_Following::SharedCtor() {
  offset_ = PROTOBUF_LONGLONG(0);
}

Expression_WindowFunction_Bound_Following::~Expression_WindowFunction_Bound_Following() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction.Bound.Following)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Following::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Following::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Following* _this = reinterpret_cast< Expression_WindowFunction_Bound_Following* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Following::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Following::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction_Bound_Following& Expression_WindowFunction_Bound_Following::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_WindowFunction_Bound_Following_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction_Bound_Following::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Following::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Following::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction.Bound.Following)
  return target;
}

size_t Expression_WindowFunction_Bound_Following::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Following::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Following* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Following>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction.Bound.Following)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction.Bound.Following)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Following::MergeFrom(const Expression_WindowFunction_Bound_Following& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_WindowFunction_Bound_Following::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Following::CopyFrom(const Expression_WindowFunction_Bound_Following& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Following)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Following::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Following::InternalSwap(Expression_WindowFunction_Bound_Following* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Following::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction_Bound_CurrentRow::InitAsDefaultInstance() {
}
class Expression_WindowFunction_Bound_CurrentRow::_Internal {
 public:
};

Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
}
Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(const Expression_WindowFunction_Bound_CurrentRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
}

void Expression_WindowFunction_Bound_CurrentRow::SharedCtor() {
}

Expression_WindowFunction_Bound_CurrentRow::~Expression_WindowFunction_Bound_CurrentRow() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_CurrentRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_CurrentRow::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_CurrentRow* _this = reinterpret_cast< Expression_WindowFunction_Bound_CurrentRow* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_CurrentRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_CurrentRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction_Bound_CurrentRow& Expression_WindowFunction_Bound_CurrentRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_WindowFunction_Bound_CurrentRow_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction_Bound_CurrentRow::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_CurrentRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_CurrentRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  return target;
}

size_t Expression_WindowFunction_Bound_CurrentRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_CurrentRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_CurrentRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_CurrentRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_CurrentRow::MergeFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_WindowFunction_Bound_CurrentRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_CurrentRow::CopyFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_CurrentRow::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_CurrentRow::InternalSwap(Expression_WindowFunction_Bound_CurrentRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_CurrentRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction_Bound_Unbounded::InitAsDefaultInstance() {
}
class Expression_WindowFunction_Bound_Unbounded::_Internal {
 public:
};

Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
}
Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(const Expression_WindowFunction_Bound_Unbounded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
}

void Expression_WindowFunction_Bound_Unbounded::SharedCtor() {
}

Expression_WindowFunction_Bound_Unbounded::~Expression_WindowFunction_Bound_Unbounded() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound_Unbounded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_WindowFunction_Bound_Unbounded::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound_Unbounded* _this = reinterpret_cast< Expression_WindowFunction_Bound_Unbounded* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound_Unbounded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound_Unbounded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction_Bound_Unbounded& Expression_WindowFunction_Bound_Unbounded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_WindowFunction_Bound_Unbounded_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction_Bound_Unbounded::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Unbounded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound_Unbounded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  return target;
}

size_t Expression_WindowFunction_Bound_Unbounded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound_Unbounded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound_Unbounded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound_Unbounded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound_Unbounded::MergeFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_WindowFunction_Bound_Unbounded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound_Unbounded::CopyFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Unbounded::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Unbounded::InternalSwap(Expression_WindowFunction_Bound_Unbounded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Unbounded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction_Bound::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_WindowFunction_Bound_default_instance_.preceding_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound_Preceding*>(
      ::substrait::proto::Expression_WindowFunction_Bound_Preceding::internal_default_instance());
  ::substrait::proto::_Expression_WindowFunction_Bound_default_instance_.following_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound_Following*>(
      ::substrait::proto::Expression_WindowFunction_Bound_Following::internal_default_instance());
  ::substrait::proto::_Expression_WindowFunction_Bound_default_instance_.current_row_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow*>(
      ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow::internal_default_instance());
  ::substrait::proto::_Expression_WindowFunction_Bound_default_instance_.unbounded_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound_Unbounded*>(
      ::substrait::proto::Expression_WindowFunction_Bound_Unbounded::internal_default_instance());
}
class Expression_WindowFunction_Bound::_Internal {
 public:
  static const ::substrait::proto::Expression_WindowFunction_Bound_Preceding& preceding(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound_Following& following(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow& current_row(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded& unbounded(const Expression_WindowFunction_Bound* msg);
};

const ::substrait::proto::Expression_WindowFunction_Bound_Preceding&
Expression_WindowFunction_Bound::_Internal::preceding(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.preceding_;
}
const ::substrait::proto::Expression_WindowFunction_Bound_Following&
Expression_WindowFunction_Bound::_Internal::following(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.following_;
}
const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow&
Expression_WindowFunction_Bound::_Internal::current_row(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.current_row_;
}
const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded&
Expression_WindowFunction_Bound::_Internal::unbounded(const Expression_WindowFunction_Bound* msg) {
  return *msg->kind_.unbounded_;
}
void Expression_WindowFunction_Bound::set_allocated_preceding(::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (preceding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(preceding);
    if (message_arena != submessage_arena) {
      preceding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preceding, submessage_arena);
    }
    set_has_preceding();
    kind_.preceding_ = preceding;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.Bound.preceding)
}
void Expression_WindowFunction_Bound::set_allocated_following(::substrait::proto::Expression_WindowFunction_Bound_Following* following) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (following) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(following);
    if (message_arena != submessage_arena) {
      following = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, following, submessage_arena);
    }
    set_has_following();
    kind_.following_ = following;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.Bound.following)
}
void Expression_WindowFunction_Bound::set_allocated_current_row(::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (current_row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_row);
    if (message_arena != submessage_arena) {
      current_row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_row, submessage_arena);
    }
    set_has_current_row();
    kind_.current_row_ = current_row;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.Bound.current_row)
}
void Expression_WindowFunction_Bound::set_allocated_unbounded(::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (unbounded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unbounded);
    if (message_arena != submessage_arena) {
      unbounded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbounded, submessage_arena);
    }
    set_has_unbounded();
    kind_.unbounded_ = unbounded;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.Bound.unbounded)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction.Bound)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(const Expression_WindowFunction_Bound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kPreceding: {
      _internal_mutable_preceding()->::substrait::proto::Expression_WindowFunction_Bound_Preceding::MergeFrom(from._internal_preceding());
      break;
    }
    case kFollowing: {
      _internal_mutable_following()->::substrait::proto::Expression_WindowFunction_Bound_Following::MergeFrom(from._internal_following());
      break;
    }
    case kCurrentRow: {
      _internal_mutable_current_row()->::substrait::proto::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _internal_mutable_unbounded()->::substrait::proto::Expression_WindowFunction_Bound_Unbounded::MergeFrom(from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction.Bound)
}

void Expression_WindowFunction_Bound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_kind();
}

Expression_WindowFunction_Bound::~Expression_WindowFunction_Bound() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction.Bound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction_Bound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_WindowFunction_Bound::ArenaDtor(void* object) {
  Expression_WindowFunction_Bound* _this = reinterpret_cast< Expression_WindowFunction_Bound* >(object);
  (void)_this;
}
void Expression_WindowFunction_Bound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction_Bound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction_Bound& Expression_WindowFunction_Bound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_WindowFunction_Bound_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction_Bound::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.WindowFunction.Bound)
  switch (kind_case()) {
    case kPreceding: {
      if (GetArena() == nullptr) {
        delete kind_.preceding_;
      }
      break;
    }
    case kFollowing: {
      if (GetArena() == nullptr) {
        delete kind_.following_;
      }
      break;
    }
    case kCurrentRow: {
      if (GetArena() == nullptr) {
        delete kind_.current_row_;
      }
      break;
    }
    case kUnbounded: {
      if (GetArena() == nullptr) {
        delete kind_.unbounded_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Expression_WindowFunction_Bound::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.WindowFunction.Bound.Preceding preceding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preceding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound.Following following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_following(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_row(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbounded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction_Bound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction.Bound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.WindowFunction.Bound.Preceding preceding = 1;
  if (_internal_has_preceding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preceding(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound.Following following = 2;
  if (_internal_has_following()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::following(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
  if (_internal_has_current_row()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current_row(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
  if (_internal_has_unbounded()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::unbounded(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction.Bound)
  return target;
}

size_t Expression_WindowFunction_Bound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction.Bound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .substrait.proto.Expression.WindowFunction.Bound.Preceding preceding = 1;
    case kPreceding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.preceding_);
      break;
    }
    // .substrait.proto.Expression.WindowFunction.Bound.Following following = 2;
    case kFollowing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.following_);
      break;
    }
    // .substrait.proto.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
    case kCurrentRow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.current_row_);
      break;
    }
    // .substrait.proto.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
    case kUnbounded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.unbounded_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction_Bound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction_Bound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction_Bound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction.Bound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction.Bound)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction_Bound::MergeFrom(const Expression_WindowFunction_Bound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction.Bound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kPreceding: {
      _internal_mutable_preceding()->::substrait::proto::Expression_WindowFunction_Bound_Preceding::MergeFrom(from._internal_preceding());
      break;
    }
    case kFollowing: {
      _internal_mutable_following()->::substrait::proto::Expression_WindowFunction_Bound_Following::MergeFrom(from._internal_following());
      break;
    }
    case kCurrentRow: {
      _internal_mutable_current_row()->::substrait::proto::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _internal_mutable_unbounded()->::substrait::proto::Expression_WindowFunction_Bound_Unbounded::MergeFrom(from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_WindowFunction_Bound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction_Bound::CopyFrom(const Expression_WindowFunction_Bound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound::InternalSwap(Expression_WindowFunction_Bound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_WindowFunction::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_WindowFunction_default_instance_._instance.get_mutable()->output_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Expression_WindowFunction_default_instance_._instance.get_mutable()->lower_bound_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound*>(
      ::substrait::proto::Expression_WindowFunction_Bound::internal_default_instance());
  ::substrait::proto::_Expression_WindowFunction_default_instance_._instance.get_mutable()->upper_bound_ = const_cast< ::substrait::proto::Expression_WindowFunction_Bound*>(
      ::substrait::proto::Expression_WindowFunction_Bound::internal_default_instance());
}
class Expression_WindowFunction::_Internal {
 public:
  static const ::substrait::proto::Type& output_type(const Expression_WindowFunction* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound& lower_bound(const Expression_WindowFunction* msg);
  static const ::substrait::proto::Expression_WindowFunction_Bound& upper_bound(const Expression_WindowFunction* msg);
};

const ::substrait::proto::Type&
Expression_WindowFunction::_Internal::output_type(const Expression_WindowFunction* msg) {
  return *msg->output_type_;
}
const ::substrait::proto::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::lower_bound(const Expression_WindowFunction* msg) {
  return *msg->lower_bound_;
}
const ::substrait::proto::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::upper_bound(const Expression_WindowFunction* msg) {
  return *msg->upper_bound_;
}
void Expression_WindowFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
Expression_WindowFunction::Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partitions_(arena),
  sorts_(arena),
  args_(arena),
  arguments_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.WindowFunction)
}
Expression_WindowFunction::Expression_WindowFunction(const Expression_WindowFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partitions_(from.partitions_),
      sorts_(from.sorts_),
      args_(from.args_),
      arguments_(from.arguments_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upper_bound()) {
    upper_bound_ = new ::substrait::proto::Expression_WindowFunction_Bound(*from.upper_bound_);
  } else {
    upper_bound_ = nullptr;
  }
  if (from._internal_has_lower_bound()) {
    lower_bound_ = new ::substrait::proto::Expression_WindowFunction_Bound(*from.lower_bound_);
  } else {
    lower_bound_ = nullptr;
  }
  if (from._internal_has_output_type()) {
    output_type_ = new ::substrait::proto::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  ::memcpy(&function_reference_, &from.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&bounds_type_) -
    reinterpret_cast<char*>(&function_reference_)) + sizeof(bounds_type_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.WindowFunction)
}

void Expression_WindowFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&upper_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounds_type_) -
      reinterpret_cast<char*>(&upper_bound_)) + sizeof(bounds_type_));
}

Expression_WindowFunction::~Expression_WindowFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.WindowFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_WindowFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete upper_bound_;
  if (this != internal_default_instance()) delete lower_bound_;
  if (this != internal_default_instance()) delete output_type_;
}

void Expression_WindowFunction::ArenaDtor(void* object) {
  Expression_WindowFunction* _this = reinterpret_cast< Expression_WindowFunction* >(object);
  (void)_this;
}
void Expression_WindowFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_WindowFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_WindowFunction& Expression_WindowFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_WindowFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.WindowFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  sorts_.Clear();
  args_.Clear();
  arguments_.Clear();
  options_.Clear();
  if (GetArena() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
  if (GetArena() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  ::memset(&function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounds_type_) -
      reinterpret_cast<char*>(&function_reference_)) + sizeof(bounds_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression partitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregationPhase phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::substrait::proto::AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type output_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression args = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionArgument arguments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invocation(static_cast<::substrait::proto::AggregateFunction_AggregationInvocation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionOption options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bounds_type(static_cast<::substrait::proto::Expression_WindowFunction_BoundsType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_WindowFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.WindowFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.proto.Expression partitions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partitions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_partitions(i), target, stream);
  }

  // repeated .substrait.proto.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::upper_bound(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lower_bound(this), target, stream);
  }

  // .substrait.proto.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_phase(), target);
  }

  // .substrait.proto.Type output_type = 7;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::output_type(this), target, stream);
  }

  // repeated .substrait.proto.Expression args = 8 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_args(i), target, stream);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_arguments(i), target, stream);
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_invocation(), target);
  }

  // repeated .substrait.proto.FunctionOption options = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_options(i), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  if (this->bounds_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_bounds_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.WindowFunction)
  return target;
}

size_t Expression_WindowFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.WindowFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression partitions = 2;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.Expression args = 8 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 9;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionOption options = 11;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_bound_);
  }

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_bound_);
  }

  // .substrait.proto.Type output_type = 7;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  // .substrait.proto.AggregationPhase phase = 6;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->invocation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_invocation());
  }

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  if (this->bounds_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bounds_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_WindowFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.WindowFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_WindowFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_WindowFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.WindowFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.WindowFunction)
    MergeFrom(*source);
  }
}

void Expression_WindowFunction::MergeFrom(const Expression_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.WindowFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  sorts_.MergeFrom(from.sorts_);
  args_.MergeFrom(from.args_);
  arguments_.MergeFrom(from.arguments_);
  options_.MergeFrom(from.options_);
  if (from.has_upper_bound()) {
    _internal_mutable_upper_bound()->::substrait::proto::Expression_WindowFunction_Bound::MergeFrom(from._internal_upper_bound());
  }
  if (from.has_lower_bound()) {
    _internal_mutable_lower_bound()->::substrait::proto::Expression_WindowFunction_Bound::MergeFrom(from._internal_lower_bound());
  }
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::substrait::proto::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from.invocation() != 0) {
    _internal_set_invocation(from._internal_invocation());
  }
  if (from.bounds_type() != 0) {
    _internal_set_bounds_type(from._internal_bounds_type());
  }
}

void Expression_WindowFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_WindowFunction::CopyFrom(const Expression_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction::IsInitialized() const {
  return true;
}

void Expression_WindowFunction::InternalSwap(Expression_WindowFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partitions_.InternalSwap(&other->partitions_);
  sorts_.InternalSwap(&other->sorts_);
  args_.InternalSwap(&other->args_);
  arguments_.InternalSwap(&other->arguments_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, bounds_type_)
      + sizeof(Expression_WindowFunction::bounds_type_)
      - PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, upper_bound_)>(
          reinterpret_cast<char*>(&upper_bound_),
          reinterpret_cast<char*>(&other->upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_IfThen_IfClause::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_IfThen_IfClause_default_instance_._instance.get_mutable()->if__ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_Expression_IfThen_IfClause_default_instance_._instance.get_mutable()->then_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_IfThen_IfClause::_Internal {
 public:
  static const ::substrait::proto::Expression& if_(const Expression_IfThen_IfClause* msg);
  static const ::substrait::proto::Expression& then(const Expression_IfThen_IfClause* msg);
};

const ::substrait::proto::Expression&
Expression_IfThen_IfClause::_Internal::if_(const Expression_IfThen_IfClause* msg) {
  return *msg->if__;
}
const ::substrait::proto::Expression&
Expression_IfThen_IfClause::_Internal::then(const Expression_IfThen_IfClause* msg) {
  return *msg->then_;
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.IfThen.IfClause)
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(const Expression_IfThen_IfClause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    if__ = new ::substrait::proto::Expression(*from.if__);
  } else {
    if__ = nullptr;
  }
  if (from._internal_has_then()) {
    then_ = new ::substrait::proto::Expression(*from.then_);
  } else {
    then_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.IfThen.IfClause)
}

void Expression_IfThen_IfClause::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&if__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&then_) -
      reinterpret_cast<char*>(&if__)) + sizeof(then_));
}

Expression_IfThen_IfClause::~Expression_IfThen_IfClause() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.IfThen.IfClause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_IfThen_IfClause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete if__;
  if (this != internal_default_instance()) delete then_;
}

void Expression_IfThen_IfClause::ArenaDtor(void* object) {
  Expression_IfThen_IfClause* _this = reinterpret_cast< Expression_IfThen_IfClause* >(object);
  (void)_this;
}
void Expression_IfThen_IfClause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_IfThen_IfClause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_IfThen_IfClause& Expression_IfThen_IfClause::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_IfThen_IfClause::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.IfThen.IfClause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen_IfClause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_IfThen_IfClause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.IfThen.IfClause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression if = 1;
  if (this->has_if_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::if_(this), target, stream);
  }

  // .substrait.proto.Expression then = 2;
  if (this->has_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.IfThen.IfClause)
  return target;
}

size_t Expression_IfThen_IfClause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.IfThen.IfClause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression if = 1;
  if (this->has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *if__);
  }

  // .substrait.proto.Expression then = 2;
  if (this->has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_IfThen_IfClause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.IfThen.IfClause)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_IfThen_IfClause* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_IfThen_IfClause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.IfThen.IfClause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.IfThen.IfClause)
    MergeFrom(*source);
  }
}

void Expression_IfThen_IfClause::MergeFrom(const Expression_IfThen_IfClause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.IfThen.IfClause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_()) {
    _internal_mutable_if_()->::substrait::proto::Expression::MergeFrom(from._internal_if_());
  }
  if (from.has_then()) {
    _internal_mutable_then()->::substrait::proto::Expression::MergeFrom(from._internal_then());
  }
}

void Expression_IfThen_IfClause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.IfThen.IfClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_IfThen_IfClause::CopyFrom(const Expression_IfThen_IfClause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.IfThen.IfClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen_IfClause::IsInitialized() const {
  return true;
}

void Expression_IfThen_IfClause::InternalSwap(Expression_IfThen_IfClause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, then_)
      + sizeof(Expression_IfThen_IfClause::then_)
      - PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, if__)>(
          reinterpret_cast<char*>(&if__),
          reinterpret_cast<char*>(&other->if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen_IfClause::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_IfThen::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_IfThen_default_instance_._instance.get_mutable()->else__ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_IfThen::_Internal {
 public:
  static const ::substrait::proto::Expression& else_(const Expression_IfThen* msg);
};

const ::substrait::proto::Expression&
Expression_IfThen::_Internal::else_(const Expression_IfThen* msg) {
  return *msg->else__;
}
Expression_IfThen::Expression_IfThen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ifs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.IfThen)
}
Expression_IfThen::Expression_IfThen(const Expression_IfThen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ifs_(from.ifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    else__ = new ::substrait::proto::Expression(*from.else__);
  } else {
    else__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.IfThen)
}

void Expression_IfThen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  else__ = nullptr;
}

Expression_IfThen::~Expression_IfThen() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.IfThen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_IfThen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete else__;
}

void Expression_IfThen::ArenaDtor(void* object) {
  Expression_IfThen* _this = reinterpret_cast< Expression_IfThen* >(object);
  (void)_this;
}
void Expression_IfThen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_IfThen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_IfThen& Expression_IfThen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_IfThen::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.IfThen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ifs_.Clear();
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.IfThen.IfClause ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_IfThen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.IfThen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.IfThen.IfClause ifs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ifs(i), target, stream);
  }

  // .substrait.proto.Expression else = 2;
  if (this->has_else_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::else_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.IfThen)
  return target;
}

size_t Expression_IfThen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.IfThen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.IfThen.IfClause ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression else = 2;
  if (this->has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_IfThen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.IfThen)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_IfThen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_IfThen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.IfThen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.IfThen)
    MergeFrom(*source);
  }
}

void Expression_IfThen::MergeFrom(const Expression_IfThen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.IfThen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ifs_.MergeFrom(from.ifs_);
  if (from.has_else_()) {
    _internal_mutable_else_()->::substrait::proto::Expression::MergeFrom(from._internal_else_());
  }
}

void Expression_IfThen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.IfThen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_IfThen::CopyFrom(const Expression_IfThen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.IfThen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen::IsInitialized() const {
  return true;
}

void Expression_IfThen::InternalSwap(Expression_IfThen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ifs_.InternalSwap(&other->ifs_);
  swap(else__, other->else__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Cast::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Cast_default_instance_._instance.get_mutable()->type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Expression_Cast_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_Cast::_Internal {
 public:
  static const ::substrait::proto::Type& type(const Expression_Cast* msg);
  static const ::substrait::proto::Expression& input(const Expression_Cast* msg);
};

const ::substrait::proto::Type&
Expression_Cast::_Internal::type(const Expression_Cast* msg) {
  return *msg->type_;
}
const ::substrait::proto::Expression&
Expression_Cast::_Internal::input(const Expression_Cast* msg) {
  return *msg->input_;
}
void Expression_Cast::clear_type() {
  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
Expression_Cast::Expression_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Cast)
}
Expression_Cast::Expression_Cast(const Expression_Cast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::substrait::proto::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Expression(*from.input_);
  } else {
    input_ = nullptr;
  }
  failure_behavior_ = from.failure_behavior_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Cast)
}

void Expression_Cast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_behavior_) -
      reinterpret_cast<char*>(&type_)) + sizeof(failure_behavior_));
}

Expression_Cast::~Expression_Cast() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Cast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Cast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete input_;
}

void Expression_Cast::ArenaDtor(void* object) {
  Expression_Cast* _this = reinterpret_cast< Expression_Cast* >(object);
  (void)_this;
}
void Expression_Cast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Cast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Cast& Expression_Cast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Cast::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  failure_behavior_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Cast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Cast.FailureBehavior failure_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failure_behavior(static_cast<::substrait::proto::Expression_Cast_FailureBehavior>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Cast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Type type = 1;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // .substrait.proto.Expression input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .substrait.proto.Expression.Cast.FailureBehavior failure_behavior = 3;
  if (this->failure_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_failure_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Cast)
  return target;
}

size_t Expression_Cast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Cast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .substrait.proto.Expression input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.proto.Expression.Cast.FailureBehavior failure_behavior = 3;
  if (this->failure_behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failure_behavior());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Cast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Cast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Cast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Cast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Cast)
    MergeFrom(*source);
  }
}

void Expression_Cast::MergeFrom(const Expression_Cast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::substrait::proto::Type::MergeFrom(from._internal_type());
  }
  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Expression::MergeFrom(from._internal_input());
  }
  if (from.failure_behavior() != 0) {
    _internal_set_failure_behavior(from._internal_failure_behavior());
  }
}

void Expression_Cast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Cast::CopyFrom(const Expression_Cast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Cast::IsInitialized() const {
  return true;
}

void Expression_Cast::InternalSwap(Expression_Cast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Cast, failure_behavior_)
      + sizeof(Expression_Cast::failure_behavior_)
      - PROTOBUF_FIELD_OFFSET(Expression_Cast, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Cast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_SwitchExpression_IfValue::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_SwitchExpression_IfValue_default_instance_._instance.get_mutable()->if__ = const_cast< ::substrait::proto::Expression_Literal*>(
      ::substrait::proto::Expression_Literal::internal_default_instance());
  ::substrait::proto::_Expression_SwitchExpression_IfValue_default_instance_._instance.get_mutable()->then_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_SwitchExpression_IfValue::_Internal {
 public:
  static const ::substrait::proto::Expression_Literal& if_(const Expression_SwitchExpression_IfValue* msg);
  static const ::substrait::proto::Expression& then(const Expression_SwitchExpression_IfValue* msg);
};

const ::substrait::proto::Expression_Literal&
Expression_SwitchExpression_IfValue::_Internal::if_(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->if__;
}
const ::substrait::proto::Expression&
Expression_SwitchExpression_IfValue::_Internal::then(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->then_;
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.SwitchExpression.IfValue)
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(const Expression_SwitchExpression_IfValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    if__ = new ::substrait::proto::Expression_Literal(*from.if__);
  } else {
    if__ = nullptr;
  }
  if (from._internal_has_then()) {
    then_ = new ::substrait::proto::Expression(*from.then_);
  } else {
    then_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.SwitchExpression.IfValue)
}

void Expression_SwitchExpression_IfValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&if__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&then_) -
      reinterpret_cast<char*>(&if__)) + sizeof(then_));
}

Expression_SwitchExpression_IfValue::~Expression_SwitchExpression_IfValue() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.SwitchExpression.IfValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SwitchExpression_IfValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete if__;
  if (this != internal_default_instance()) delete then_;
}

void Expression_SwitchExpression_IfValue::ArenaDtor(void* object) {
  Expression_SwitchExpression_IfValue* _this = reinterpret_cast< Expression_SwitchExpression_IfValue* >(object);
  (void)_this;
}
void Expression_SwitchExpression_IfValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SwitchExpression_IfValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_SwitchExpression_IfValue& Expression_SwitchExpression_IfValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_SwitchExpression_IfValue::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.SwitchExpression.IfValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression_IfValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Literal if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SwitchExpression_IfValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.SwitchExpression.IfValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal if = 1;
  if (this->has_if_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::if_(this), target, stream);
  }

  // .substrait.proto.Expression then = 2;
  if (this->has_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.SwitchExpression.IfValue)
  return target;
}

size_t Expression_SwitchExpression_IfValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.SwitchExpression.IfValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal if = 1;
  if (this->has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *if__);
  }

  // .substrait.proto.Expression then = 2;
  if (this->has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SwitchExpression_IfValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.SwitchExpression.IfValue)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SwitchExpression_IfValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SwitchExpression_IfValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.SwitchExpression.IfValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.SwitchExpression.IfValue)
    MergeFrom(*source);
  }
}

void Expression_SwitchExpression_IfValue::MergeFrom(const Expression_SwitchExpression_IfValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.SwitchExpression.IfValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_()) {
    _internal_mutable_if_()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_if_());
  }
  if (from.has_then()) {
    _internal_mutable_then()->::substrait::proto::Expression::MergeFrom(from._internal_then());
  }
}

void Expression_SwitchExpression_IfValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.SwitchExpression.IfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SwitchExpression_IfValue::CopyFrom(const Expression_SwitchExpression_IfValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.SwitchExpression.IfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression_IfValue::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression_IfValue::InternalSwap(Expression_SwitchExpression_IfValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, then_)
      + sizeof(Expression_SwitchExpression_IfValue::then_)
      - PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, if__)>(
          reinterpret_cast<char*>(&if__),
          reinterpret_cast<char*>(&other->if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression_IfValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_SwitchExpression::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_SwitchExpression_default_instance_._instance.get_mutable()->match_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_Expression_SwitchExpression_default_instance_._instance.get_mutable()->else__ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_SwitchExpression::_Internal {
 public:
  static const ::substrait::proto::Expression& match(const Expression_SwitchExpression* msg);
  static const ::substrait::proto::Expression& else_(const Expression_SwitchExpression* msg);
};

const ::substrait::proto::Expression&
Expression_SwitchExpression::_Internal::match(const Expression_SwitchExpression* msg) {
  return *msg->match_;
}
const ::substrait::proto::Expression&
Expression_SwitchExpression::_Internal::else_(const Expression_SwitchExpression* msg) {
  return *msg->else__;
}
Expression_SwitchExpression::Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ifs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.SwitchExpression)
}
Expression_SwitchExpression::Expression_SwitchExpression(const Expression_SwitchExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ifs_(from.ifs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    else__ = new ::substrait::proto::Expression(*from.else__);
  } else {
    else__ = nullptr;
  }
  if (from._internal_has_match()) {
    match_ = new ::substrait::proto::Expression(*from.match_);
  } else {
    match_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.SwitchExpression)
}

void Expression_SwitchExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&else__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_) -
      reinterpret_cast<char*>(&else__)) + sizeof(match_));
}

Expression_SwitchExpression::~Expression_SwitchExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.SwitchExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SwitchExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete else__;
  if (this != internal_default_instance()) delete match_;
}

void Expression_SwitchExpression::ArenaDtor(void* object) {
  Expression_SwitchExpression* _this = reinterpret_cast< Expression_SwitchExpression* >(object);
  (void)_this;
}
void Expression_SwitchExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SwitchExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_SwitchExpression& Expression_SwitchExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_SwitchExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.SwitchExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ifs_.Clear();
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
  if (GetArena() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.SwitchExpression.IfValue ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SwitchExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.SwitchExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.SwitchExpression.IfValue ifs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ifs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ifs(i), target, stream);
  }

  // .substrait.proto.Expression else = 2;
  if (this->has_else_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::else_(this), target, stream);
  }

  // .substrait.proto.Expression match = 3;
  if (this->has_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::match(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.SwitchExpression)
  return target;
}

size_t Expression_SwitchExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.SwitchExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.SwitchExpression.IfValue ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression else = 2;
  if (this->has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else__);
  }

  // .substrait.proto.Expression match = 3;
  if (this->has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SwitchExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.SwitchExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SwitchExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SwitchExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.SwitchExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.SwitchExpression)
    MergeFrom(*source);
  }
}

void Expression_SwitchExpression::MergeFrom(const Expression_SwitchExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.SwitchExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ifs_.MergeFrom(from.ifs_);
  if (from.has_else_()) {
    _internal_mutable_else_()->::substrait::proto::Expression::MergeFrom(from._internal_else_());
  }
  if (from.has_match()) {
    _internal_mutable_match()->::substrait::proto::Expression::MergeFrom(from._internal_match());
  }
}

void Expression_SwitchExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.SwitchExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SwitchExpression::CopyFrom(const Expression_SwitchExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.SwitchExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression::InternalSwap(Expression_SwitchExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ifs_.InternalSwap(&other->ifs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression, match_)
      + sizeof(Expression_SwitchExpression::match_)
      - PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression, else__)>(
          reinterpret_cast<char*>(&else__),
          reinterpret_cast<char*>(&other->else__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_SingularOrList::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_SingularOrList_default_instance_._instance.get_mutable()->value_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
}
class Expression_SingularOrList::_Internal {
 public:
  static const ::substrait::proto::Expression& value(const Expression_SingularOrList* msg);
};

const ::substrait::proto::Expression&
Expression_SingularOrList::_Internal::value(const Expression_SingularOrList* msg) {
  return *msg->value_;
}
Expression_SingularOrList::Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.SingularOrList)
}
Expression_SingularOrList::Expression_SingularOrList(const Expression_SingularOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::substrait::proto::Expression(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.SingularOrList)
}

void Expression_SingularOrList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  value_ = nullptr;
}

Expression_SingularOrList::~Expression_SingularOrList() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.SingularOrList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_SingularOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Expression_SingularOrList::ArenaDtor(void* object) {
  Expression_SingularOrList* _this = reinterpret_cast< Expression_SingularOrList* >(object);
  (void)_this;
}
void Expression_SingularOrList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_SingularOrList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_SingularOrList& Expression_SingularOrList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_SingularOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.SingularOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SingularOrList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_SingularOrList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.SingularOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // repeated .substrait.proto.Expression options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.SingularOrList)
  return target;
}

size_t Expression_SingularOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.SingularOrList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_SingularOrList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.SingularOrList)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_SingularOrList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_SingularOrList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.SingularOrList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.SingularOrList)
    MergeFrom(*source);
  }
}

void Expression_SingularOrList::MergeFrom(const Expression_SingularOrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.SingularOrList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.has_value()) {
    _internal_mutable_value()->::substrait::proto::Expression::MergeFrom(from._internal_value());
  }
}

void Expression_SingularOrList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.SingularOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_SingularOrList::CopyFrom(const Expression_SingularOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.SingularOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SingularOrList::IsInitialized() const {
  return true;
}

void Expression_SingularOrList::InternalSwap(Expression_SingularOrList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SingularOrList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MultiOrList_Record::InitAsDefaultInstance() {
}
class Expression_MultiOrList_Record::_Internal {
 public:
};

Expression_MultiOrList_Record::Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MultiOrList.Record)
}
Expression_MultiOrList_Record::Expression_MultiOrList_Record(const Expression_MultiOrList_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MultiOrList.Record)
}

void Expression_MultiOrList_Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_MultiOrList_Record::~Expression_MultiOrList_Record() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MultiOrList.Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MultiOrList_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MultiOrList_Record::ArenaDtor(void* object) {
  Expression_MultiOrList_Record* _this = reinterpret_cast< Expression_MultiOrList_Record* >(object);
  (void)_this;
}
void Expression_MultiOrList_Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MultiOrList_Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MultiOrList_Record& Expression_MultiOrList_Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MultiOrList_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MultiOrList.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList_Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MultiOrList_Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MultiOrList.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MultiOrList.Record)
  return target;
}

size_t Expression_MultiOrList_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MultiOrList.Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MultiOrList_Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MultiOrList.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MultiOrList_Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MultiOrList_Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MultiOrList.Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MultiOrList.Record)
    MergeFrom(*source);
  }
}

void Expression_MultiOrList_Record::MergeFrom(const Expression_MultiOrList_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MultiOrList.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void Expression_MultiOrList_Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MultiOrList.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MultiOrList_Record::CopyFrom(const Expression_MultiOrList_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MultiOrList.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList_Record::IsInitialized() const {
  return true;
}

void Expression_MultiOrList_Record::InternalSwap(Expression_MultiOrList_Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList_Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MultiOrList::InitAsDefaultInstance() {
}
class Expression_MultiOrList::_Internal {
 public:
};

Expression_MultiOrList::Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MultiOrList)
}
Expression_MultiOrList::Expression_MultiOrList(const Expression_MultiOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MultiOrList)
}

void Expression_MultiOrList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_MultiOrList::~Expression_MultiOrList() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MultiOrList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MultiOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MultiOrList::ArenaDtor(void* object) {
  Expression_MultiOrList* _this = reinterpret_cast< Expression_MultiOrList* >(object);
  (void)_this;
}
void Expression_MultiOrList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MultiOrList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MultiOrList& Expression_MultiOrList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MultiOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MultiOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression.MultiOrList.Record options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MultiOrList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MultiOrList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  // repeated .substrait.proto.Expression.MultiOrList.Record options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MultiOrList)
  return target;
}

size_t Expression_MultiOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MultiOrList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.Expression.MultiOrList.Record options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MultiOrList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MultiOrList)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MultiOrList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MultiOrList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MultiOrList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MultiOrList)
    MergeFrom(*source);
  }
}

void Expression_MultiOrList::MergeFrom(const Expression_MultiOrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MultiOrList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  options_.MergeFrom(from.options_);
}

void Expression_MultiOrList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MultiOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MultiOrList::CopyFrom(const Expression_MultiOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MultiOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList::IsInitialized() const {
  return true;
}

void Expression_MultiOrList::InternalSwap(Expression_MultiOrList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  options_.InternalSwap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_EmbeddedFunction_PythonPickleFunction::InitAsDefaultInstance() {
}
class Expression_EmbeddedFunction_PythonPickleFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prerequisite_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
}
Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(const Expression_EmbeddedFunction_PythonPickleFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prerequisite_(from.prerequisite_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function().empty()) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
}

void Expression_EmbeddedFunction_PythonPickleFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto.base);
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_EmbeddedFunction_PythonPickleFunction::~Expression_EmbeddedFunction_PythonPickleFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction_PythonPickleFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_EmbeddedFunction_PythonPickleFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction_PythonPickleFunction* _this = reinterpret_cast< Expression_EmbeddedFunction_PythonPickleFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction_PythonPickleFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction_PythonPickleFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_EmbeddedFunction_PythonPickleFunction& Expression_EmbeddedFunction_PythonPickleFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_EmbeddedFunction_PythonPickleFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_EmbeddedFunction_PythonPickleFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prerequisite_.Clear();
  function_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_PythonPickleFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction_PythonPickleFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes function = 1;
  if (this->function().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_function(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  return target;
}

size_t Expression_EmbeddedFunction_PythonPickleFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prerequisite_.size());
  for (int i = 0, n = prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prerequisite_.Get(i));
  }

  // bytes function = 1;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction_PythonPickleFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction_PythonPickleFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prerequisite_.MergeFrom(from.prerequisite_);
  if (from.function().size() > 0) {
    _internal_set_function(from._internal_function());
  }
}

void Expression_EmbeddedFunction_PythonPickleFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction_PythonPickleFunction::CopyFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_PythonPickleFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_PythonPickleFunction::InternalSwap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prerequisite_.InternalSwap(&other->prerequisite_);
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_PythonPickleFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_EmbeddedFunction_WebAssemblyFunction::InitAsDefaultInstance() {
}
class Expression_EmbeddedFunction_WebAssemblyFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prerequisite_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
}
Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(const Expression_EmbeddedFunction_WebAssemblyFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prerequisite_(from.prerequisite_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script().empty()) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_script(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
}

void Expression_EmbeddedFunction_WebAssemblyFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto.base);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_EmbeddedFunction_WebAssemblyFunction::~Expression_EmbeddedFunction_WebAssemblyFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction_WebAssemblyFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_EmbeddedFunction_WebAssemblyFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction_WebAssemblyFunction* _this = reinterpret_cast< Expression_EmbeddedFunction_WebAssemblyFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction_WebAssemblyFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction_WebAssemblyFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_EmbeddedFunction_WebAssemblyFunction& Expression_EmbeddedFunction_WebAssemblyFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_EmbeddedFunction_WebAssemblyFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_EmbeddedFunction_WebAssemblyFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prerequisite_.Clear();
  script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (this->script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  return target;
}

size_t Expression_EmbeddedFunction_WebAssemblyFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prerequisite_.size());
  for (int i = 0, n = prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prerequisite_.Get(i));
  }

  // bytes script = 1;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction_WebAssemblyFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction_WebAssemblyFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prerequisite_.MergeFrom(from.prerequisite_);
  if (from.script().size() > 0) {
    _internal_set_script(from._internal_script());
  }
}

void Expression_EmbeddedFunction_WebAssemblyFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction_WebAssemblyFunction::CopyFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_WebAssemblyFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_WebAssemblyFunction::InternalSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prerequisite_.InternalSwap(&other->prerequisite_);
  script_.Swap(&other->script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_WebAssemblyFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_EmbeddedFunction::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_EmbeddedFunction_default_instance_._instance.get_mutable()->output_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Expression_EmbeddedFunction_default_instance_.python_pickle_function_ = const_cast< ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction*>(
      ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction::internal_default_instance());
  ::substrait::proto::_Expression_EmbeddedFunction_default_instance_.web_assembly_function_ = const_cast< ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction*>(
      ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction::internal_default_instance());
}
class Expression_EmbeddedFunction::_Internal {
 public:
  static const ::substrait::proto::Type& output_type(const Expression_EmbeddedFunction* msg);
  static const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction& python_pickle_function(const Expression_EmbeddedFunction* msg);
  static const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction& web_assembly_function(const Expression_EmbeddedFunction* msg);
};

const ::substrait::proto::Type&
Expression_EmbeddedFunction::_Internal::output_type(const Expression_EmbeddedFunction* msg) {
  return *msg->output_type_;
}
const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction&
Expression_EmbeddedFunction::_Internal::python_pickle_function(const Expression_EmbeddedFunction* msg) {
  return *msg->kind_.python_pickle_function_;
}
const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction&
Expression_EmbeddedFunction::_Internal::web_assembly_function(const Expression_EmbeddedFunction* msg) {
  return *msg->kind_.web_assembly_function_;
}
void Expression_EmbeddedFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
void Expression_EmbeddedFunction::set_allocated_python_pickle_function(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (python_pickle_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(python_pickle_function);
    if (message_arena != submessage_arena) {
      python_pickle_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_pickle_function, submessage_arena);
    }
    set_has_python_pickle_function();
    kind_.python_pickle_function_ = python_pickle_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
}
void Expression_EmbeddedFunction::set_allocated_web_assembly_function(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (web_assembly_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(web_assembly_function);
    if (message_arena != submessage_arena) {
      web_assembly_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_assembly_function, submessage_arena);
    }
    set_has_web_assembly_function();
    kind_.web_assembly_function_ = web_assembly_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.EmbeddedFunction)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(const Expression_EmbeddedFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::substrait::proto::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _internal_mutable_python_pickle_function()->::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _internal_mutable_web_assembly_function()->::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.EmbeddedFunction)
}

void Expression_EmbeddedFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto.base);
  output_type_ = nullptr;
  clear_has_kind();
}

Expression_EmbeddedFunction::~Expression_EmbeddedFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.EmbeddedFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_EmbeddedFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_EmbeddedFunction::ArenaDtor(void* object) {
  Expression_EmbeddedFunction* _this = reinterpret_cast< Expression_EmbeddedFunction* >(object);
  (void)_this;
}
void Expression_EmbeddedFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_EmbeddedFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_EmbeddedFunction& Expression_EmbeddedFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_EmbeddedFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_EmbeddedFunction::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.EmbeddedFunction)
  switch (kind_case()) {
    case kPythonPickleFunction: {
      if (GetArena() == nullptr) {
        delete kind_.python_pickle_function_;
      }
      break;
    }
    case kWebAssemblyFunction: {
      if (GetArena() == nullptr) {
        delete kind_.web_assembly_function_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Expression_EmbeddedFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.EmbeddedFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression arguments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type output_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_pickle_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_assembly_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_EmbeddedFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.EmbeddedFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression arguments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arguments(i), target, stream);
  }

  // .substrait.proto.Type output_type = 2;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_type(this), target, stream);
  }

  // .substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
  if (_internal_has_python_pickle_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::python_pickle_function(this), target, stream);
  }

  // .substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
  if (_internal_has_web_assembly_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::web_assembly_function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.EmbeddedFunction)
  return target;
}

size_t Expression_EmbeddedFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.EmbeddedFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression arguments = 1;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Type output_type = 2;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  switch (kind_case()) {
    // .substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
    case kPythonPickleFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.python_pickle_function_);
      break;
    }
    // .substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
    case kWebAssemblyFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.web_assembly_function_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_EmbeddedFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.EmbeddedFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_EmbeddedFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_EmbeddedFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.EmbeddedFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.EmbeddedFunction)
    MergeFrom(*source);
  }
}

void Expression_EmbeddedFunction::MergeFrom(const Expression_EmbeddedFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.EmbeddedFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::substrait::proto::Type::MergeFrom(from._internal_output_type());
  }
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _internal_mutable_python_pickle_function()->::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _internal_mutable_web_assembly_function()->::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Expression_EmbeddedFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.EmbeddedFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_EmbeddedFunction::CopyFrom(const Expression_EmbeddedFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.EmbeddedFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction::InternalSwap(Expression_EmbeddedFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arguments_.InternalSwap(&other->arguments_);
  swap(output_type_, other->output_type_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_ReferenceSegment_MapKey::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_ReferenceSegment_MapKey_default_instance_._instance.get_mutable()->map_key_ = const_cast< ::substrait::proto::Expression_Literal*>(
      ::substrait::proto::Expression_Literal::internal_default_instance());
  ::substrait::proto::_Expression_ReferenceSegment_MapKey_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_ReferenceSegment*>(
      ::substrait::proto::Expression_ReferenceSegment::internal_default_instance());
}
class Expression_ReferenceSegment_MapKey::_Internal {
 public:
  static const ::substrait::proto::Expression_Literal& map_key(const Expression_ReferenceSegment_MapKey* msg);
  static const ::substrait::proto::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_MapKey* msg);
};

const ::substrait::proto::Expression_Literal&
Expression_ReferenceSegment_MapKey::_Internal::map_key(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->map_key_;
}
const ::substrait::proto::Expression_ReferenceSegment&
Expression_ReferenceSegment_MapKey::_Internal::child(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.ReferenceSegment.MapKey)
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(const Expression_ReferenceSegment_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_key()) {
    map_key_ = new ::substrait::proto::Expression_Literal(*from.map_key_);
  } else {
    map_key_ = nullptr;
  }
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.ReferenceSegment.MapKey)
}

void Expression_ReferenceSegment_MapKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&map_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_) -
      reinterpret_cast<char*>(&map_key_)) + sizeof(child_));
}

Expression_ReferenceSegment_MapKey::~Expression_ReferenceSegment_MapKey() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.ReferenceSegment.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete map_key_;
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_MapKey::ArenaDtor(void* object) {
  Expression_ReferenceSegment_MapKey* _this = reinterpret_cast< Expression_ReferenceSegment_MapKey* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_ReferenceSegment_MapKey& Expression_ReferenceSegment_MapKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_ReferenceSegment_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && map_key_ != nullptr) {
    delete map_key_;
  }
  map_key_ = nullptr;
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Literal map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal map_key = 1;
  if (this->has_map_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_key(this), target, stream);
  }

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.ReferenceSegment.MapKey)
  return target;
}

size_t Expression_ReferenceSegment_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal map_key = 1;
  if (this->has_map_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key_);
  }

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.ReferenceSegment.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.ReferenceSegment.MapKey)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_MapKey::MergeFrom(const Expression_ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_key()) {
    _internal_mutable_map_key()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_map_key());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
}

void Expression_ReferenceSegment_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_MapKey::CopyFrom(const Expression_ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_MapKey::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_MapKey::InternalSwap(Expression_ReferenceSegment_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, child_)
      + sizeof(Expression_ReferenceSegment_MapKey::child_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, map_key_)>(
          reinterpret_cast<char*>(&map_key_),
          reinterpret_cast<char*>(&other->map_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_MapKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_ReferenceSegment_StructField::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_ReferenceSegment_StructField_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_ReferenceSegment*>(
      ::substrait::proto::Expression_ReferenceSegment::internal_default_instance());
}
class Expression_ReferenceSegment_StructField::_Internal {
 public:
  static const ::substrait::proto::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_StructField* msg);
};

const ::substrait::proto::Expression_ReferenceSegment&
Expression_ReferenceSegment_StructField::_Internal::child(const Expression_ReferenceSegment_StructField* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.ReferenceSegment.StructField)
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(const Expression_ReferenceSegment_StructField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.ReferenceSegment.StructField)
}

void Expression_ReferenceSegment_StructField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

Expression_ReferenceSegment_StructField::~Expression_ReferenceSegment_StructField() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.ReferenceSegment.StructField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_StructField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_StructField::ArenaDtor(void* object) {
  Expression_ReferenceSegment_StructField* _this = reinterpret_cast< Expression_ReferenceSegment_StructField* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_StructField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_StructField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_ReferenceSegment_StructField& Expression_ReferenceSegment_StructField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_ReferenceSegment_StructField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_StructField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_StructField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.ReferenceSegment.StructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.ReferenceSegment.StructField)
  return target;
}

size_t Expression_ReferenceSegment_StructField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.ReferenceSegment.StructField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_StructField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_StructField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_StructField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.ReferenceSegment.StructField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.ReferenceSegment.StructField)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_StructField::MergeFrom(const Expression_ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_ReferenceSegment_StructField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_StructField::CopyFrom(const Expression_ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_StructField::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_StructField::InternalSwap(Expression_ReferenceSegment_StructField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, field_)
      + sizeof(Expression_ReferenceSegment_StructField::field_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_StructField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_ReferenceSegment_ListElement::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_ReferenceSegment_ListElement_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_ReferenceSegment*>(
      ::substrait::proto::Expression_ReferenceSegment::internal_default_instance());
}
class Expression_ReferenceSegment_ListElement::_Internal {
 public:
  static const ::substrait::proto::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_ListElement* msg);
};

const ::substrait::proto::Expression_ReferenceSegment&
Expression_ReferenceSegment_ListElement::_Internal::child(const Expression_ReferenceSegment_ListElement* msg) {
  return *msg->child_;
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.ReferenceSegment.ListElement)
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(const Expression_ReferenceSegment_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_ReferenceSegment(*from.child_);
  } else {
    child_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.ReferenceSegment.ListElement)
}

void Expression_ReferenceSegment_ListElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&child_)) + sizeof(offset_));
}

Expression_ReferenceSegment_ListElement::~Expression_ReferenceSegment_ListElement() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.ReferenceSegment.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_ReferenceSegment_ListElement::ArenaDtor(void* object) {
  Expression_ReferenceSegment_ListElement* _this = reinterpret_cast< Expression_ReferenceSegment_ListElement* >(object);
  (void)_this;
}
void Expression_ReferenceSegment_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_ReferenceSegment_ListElement& Expression_ReferenceSegment_ListElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_ReferenceSegment_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.ReferenceSegment.ListElement)
  return target;
}

size_t Expression_ReferenceSegment_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.ReferenceSegment.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.ReferenceSegment.ListElement)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment_ListElement::MergeFrom(const Expression_ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_ReferenceSegment::MergeFrom(from._internal_child());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Expression_ReferenceSegment_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment_ListElement::CopyFrom(const Expression_ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_ListElement::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_ListElement::InternalSwap(Expression_ReferenceSegment_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, offset_)
      + sizeof(Expression_ReferenceSegment_ListElement::offset_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_ListElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_ReferenceSegment::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_ReferenceSegment_default_instance_.map_key_ = const_cast< ::substrait::proto::Expression_ReferenceSegment_MapKey*>(
      ::substrait::proto::Expression_ReferenceSegment_MapKey::internal_default_instance());
  ::substrait::proto::_Expression_ReferenceSegment_default_instance_.struct_field_ = const_cast< ::substrait::proto::Expression_ReferenceSegment_StructField*>(
      ::substrait::proto::Expression_ReferenceSegment_StructField::internal_default_instance());
  ::substrait::proto::_Expression_ReferenceSegment_default_instance_.list_element_ = const_cast< ::substrait::proto::Expression_ReferenceSegment_ListElement*>(
      ::substrait::proto::Expression_ReferenceSegment_ListElement::internal_default_instance());
}
class Expression_ReferenceSegment::_Internal {
 public:
  static const ::substrait::proto::Expression_ReferenceSegment_MapKey& map_key(const Expression_ReferenceSegment* msg);
  static const ::substrait::proto::Expression_ReferenceSegment_StructField& struct_field(const Expression_ReferenceSegment* msg);
  static const ::substrait::proto::Expression_ReferenceSegment_ListElement& list_element(const Expression_ReferenceSegment* msg);
};

const ::substrait::proto::Expression_ReferenceSegment_MapKey&
Expression_ReferenceSegment::_Internal::map_key(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.map_key_;
}
const ::substrait::proto::Expression_ReferenceSegment_StructField&
Expression_ReferenceSegment::_Internal::struct_field(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.struct_field_;
}
const ::substrait::proto::Expression_ReferenceSegment_ListElement&
Expression_ReferenceSegment::_Internal::list_element(const Expression_ReferenceSegment* msg) {
  return *msg->reference_type_.list_element_;
}
void Expression_ReferenceSegment::set_allocated_map_key(::substrait::proto::Expression_ReferenceSegment_MapKey* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    set_has_map_key();
    reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.map_key)
}
void Expression_ReferenceSegment::set_allocated_struct_field(::substrait::proto::Expression_ReferenceSegment_StructField* struct_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (struct_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_field);
    if (message_arena != submessage_arena) {
      struct_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_field, submessage_arena);
    }
    set_has_struct_field();
    reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.struct_field)
}
void Expression_ReferenceSegment::set_allocated_list_element(::substrait::proto::Expression_ReferenceSegment_ListElement* list_element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (list_element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_element);
    if (message_arena != submessage_arena) {
      list_element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_element, submessage_arena);
    }
    set_has_list_element();
    reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.list_element)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.ReferenceSegment)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(const Expression_ReferenceSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::substrait::proto::Expression_ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::substrait::proto::Expression_ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::substrait::proto::Expression_ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.ReferenceSegment)
}

void Expression_ReferenceSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_reference_type();
}

Expression_ReferenceSegment::~Expression_ReferenceSegment() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.ReferenceSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_ReferenceSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
}

void Expression_ReferenceSegment::ArenaDtor(void* object) {
  Expression_ReferenceSegment* _this = reinterpret_cast< Expression_ReferenceSegment* >(object);
  (void)_this;
}
void Expression_ReferenceSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_ReferenceSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_ReferenceSegment& Expression_ReferenceSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_ReferenceSegment_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_ReferenceSegment::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.ReferenceSegment)
  switch (reference_type_case()) {
    case kMapKey: {
      if (GetArena() == nullptr) {
        delete reference_type_.map_key_;
      }
      break;
    }
    case kStructField: {
      if (GetArena() == nullptr) {
        delete reference_type_.struct_field_;
      }
      break;
    }
    case kListElement: {
      if (GetArena() == nullptr) {
        delete reference_type_.list_element_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}


void Expression_ReferenceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.ReferenceSegment.MapKey map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ReferenceSegment.StructField struct_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ReferenceSegment.ListElement list_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_ReferenceSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.ReferenceSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.ReferenceSegment.MapKey map_key = 1;
  if (_internal_has_map_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_key(this), target, stream);
  }

  // .substrait.proto.Expression.ReferenceSegment.StructField struct_field = 2;
  if (_internal_has_struct_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::struct_field(this), target, stream);
  }

  // .substrait.proto.Expression.ReferenceSegment.ListElement list_element = 3;
  if (_internal_has_list_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::list_element(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.ReferenceSegment)
  return target;
}

size_t Expression_ReferenceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.ReferenceSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .substrait.proto.Expression.ReferenceSegment.MapKey map_key = 1;
    case kMapKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.map_key_);
      break;
    }
    // .substrait.proto.Expression.ReferenceSegment.StructField struct_field = 2;
    case kStructField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.struct_field_);
      break;
    }
    // .substrait.proto.Expression.ReferenceSegment.ListElement list_element = 3;
    case kListElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.list_element_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_ReferenceSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_ReferenceSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_ReferenceSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.ReferenceSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.ReferenceSegment)
    MergeFrom(*source);
  }
}

void Expression_ReferenceSegment::MergeFrom(const Expression_ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kMapKey: {
      _internal_mutable_map_key()->::substrait::proto::Expression_ReferenceSegment_MapKey::MergeFrom(from._internal_map_key());
      break;
    }
    case kStructField: {
      _internal_mutable_struct_field()->::substrait::proto::Expression_ReferenceSegment_StructField::MergeFrom(from._internal_struct_field());
      break;
    }
    case kListElement: {
      _internal_mutable_list_element()->::substrait::proto::Expression_ReferenceSegment_ListElement::MergeFrom(from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_ReferenceSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_ReferenceSegment::CopyFrom(const Expression_ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment::InternalSwap(Expression_ReferenceSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_Select::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_Select_default_instance_.struct__ = const_cast< ::substrait::proto::Expression_MaskExpression_StructSelect*>(
      ::substrait::proto::Expression_MaskExpression_StructSelect::internal_default_instance());
  ::substrait::proto::_Expression_MaskExpression_Select_default_instance_.list_ = const_cast< ::substrait::proto::Expression_MaskExpression_ListSelect*>(
      ::substrait::proto::Expression_MaskExpression_ListSelect::internal_default_instance());
  ::substrait::proto::_Expression_MaskExpression_Select_default_instance_.map_ = const_cast< ::substrait::proto::Expression_MaskExpression_MapSelect*>(
      ::substrait::proto::Expression_MaskExpression_MapSelect::internal_default_instance());
}
class Expression_MaskExpression_Select::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_StructSelect& struct_(const Expression_MaskExpression_Select* msg);
  static const ::substrait::proto::Expression_MaskExpression_ListSelect& list(const Expression_MaskExpression_Select* msg);
  static const ::substrait::proto::Expression_MaskExpression_MapSelect& map(const Expression_MaskExpression_Select* msg);
};

const ::substrait::proto::Expression_MaskExpression_StructSelect&
Expression_MaskExpression_Select::_Internal::struct_(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.struct__;
}
const ::substrait::proto::Expression_MaskExpression_ListSelect&
Expression_MaskExpression_Select::_Internal::list(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.list_;
}
const ::substrait::proto::Expression_MaskExpression_MapSelect&
Expression_MaskExpression_Select::_Internal::map(const Expression_MaskExpression_Select* msg) {
  return *msg->type_.map_;
}
void Expression_MaskExpression_Select::set_allocated_struct_(::substrait::proto::Expression_MaskExpression_StructSelect* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.Select.struct)
}
void Expression_MaskExpression_Select::set_allocated_list(::substrait::proto::Expression_MaskExpression_ListSelect* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.Select.list)
}
void Expression_MaskExpression_Select::set_allocated_map(::substrait::proto::Expression_MaskExpression_MapSelect* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.Select.map)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.Select)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(const Expression_MaskExpression_Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.Select)
}

void Expression_MaskExpression_Select::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_type();
}

Expression_MaskExpression_Select::~Expression_MaskExpression_Select() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.Select)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_Select::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_Select::ArenaDtor(void* object) {
  Expression_MaskExpression_Select* _this = reinterpret_cast< Expression_MaskExpression_Select* >(object);
  (void)_this;
}
void Expression_MaskExpression_Select::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_Select& Expression_MaskExpression_Select::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_Select::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.MaskExpression.Select)
  switch (type_case()) {
    case kStruct: {
      if (GetArena() == nullptr) {
        delete type_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete type_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete type_.map_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_Select::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_Select::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.MaskExpression.StructSelect struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.ListSelect list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.MapSelect map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_Select::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.Select)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.StructSelect struct = 1;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::struct_(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.ListSelect list = 2;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::list(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.MapSelect map = 3;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.Select)
  return target;
}

size_t Expression_MaskExpression_Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.Select)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .substrait.proto.Expression.MaskExpression.StructSelect struct = 1;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.struct__);
      break;
    }
    // .substrait.proto.Expression.MaskExpression.ListSelect list = 2;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.list_);
      break;
    }
    // .substrait.proto.Expression.MaskExpression.MapSelect map = 3;
    case kMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.map_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_Select::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_Select* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_Select>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.Select)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.Select)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_Select::MergeFrom(const Expression_MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Expression_MaskExpression_ListSelect::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Expression_MaskExpression_MapSelect::MergeFrom(from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_Select::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_Select::CopyFrom(const Expression_MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_Select::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_Select::InternalSwap(Expression_MaskExpression_Select* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_Select::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_StructSelect::InitAsDefaultInstance() {
}
class Expression_MaskExpression_StructSelect::_Internal {
 public:
};

Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  struct_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.StructSelect)
}
Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(const Expression_MaskExpression_StructSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      struct_items_(from.struct_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.StructSelect)
}

void Expression_MaskExpression_StructSelect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
}

Expression_MaskExpression_StructSelect::~Expression_MaskExpression_StructSelect() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.StructSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_StructSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_StructSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_StructSelect* _this = reinterpret_cast< Expression_MaskExpression_StructSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_StructSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_StructSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_StructSelect& Expression_MaskExpression_StructSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_StructSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  struct_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.MaskExpression.StructItem struct_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_struct_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_StructSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.StructSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.MaskExpression.StructItem struct_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_struct_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_struct_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.StructSelect)
  return target;
}

size_t Expression_MaskExpression_StructSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.StructSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.MaskExpression.StructItem struct_items = 1;
  total_size += 1UL * this->_internal_struct_items_size();
  for (const auto& msg : this->struct_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_StructSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_StructSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_StructSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.StructSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.StructSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_StructSelect::MergeFrom(const Expression_MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  struct_items_.MergeFrom(from.struct_items_);
}

void Expression_MaskExpression_StructSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_StructSelect::CopyFrom(const Expression_MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructSelect::InternalSwap(Expression_MaskExpression_StructSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  struct_items_.InternalSwap(&other->struct_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_StructItem::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_StructItem_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_MaskExpression_Select*>(
      ::substrait::proto::Expression_MaskExpression_Select::internal_default_instance());
}
class Expression_MaskExpression_StructItem::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_Select& child(const Expression_MaskExpression_StructItem* msg);
};

const ::substrait::proto::Expression_MaskExpression_Select&
Expression_MaskExpression_StructItem::_Internal::child(const Expression_MaskExpression_StructItem* msg) {
  return *msg->child_;
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.StructItem)
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(const Expression_MaskExpression_StructItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.StructItem)
}

void Expression_MaskExpression_StructItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&child_)) + sizeof(field_));
}

Expression_MaskExpression_StructItem::~Expression_MaskExpression_StructItem() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.StructItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_StructItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_MaskExpression_StructItem::ArenaDtor(void* object) {
  Expression_MaskExpression_StructItem* _this = reinterpret_cast< Expression_MaskExpression_StructItem* >(object);
  (void)_this;
}
void Expression_MaskExpression_StructItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_StructItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_StructItem& Expression_MaskExpression_StructItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_StructItem::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_StructItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.StructItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.StructItem)
  return target;
}

size_t Expression_MaskExpression_StructItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.StructItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_StructItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_StructItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_StructItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.StructItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.StructItem)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_StructItem::MergeFrom(const Expression_MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_MaskExpression_StructItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_StructItem::CopyFrom(const Expression_MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructItem::InternalSwap(Expression_MaskExpression_StructItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, field_)
      + sizeof(Expression_MaskExpression_StructItem::field_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::InitAsDefaultInstance() {
}
class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_ = from.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedCtor() {
  field_ = 0;
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::~Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::InitAsDefaultInstance() {
}
class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::~Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, end_)
      + sizeof(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::end_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_ListSelect_ListSelectItem::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_.item_ = const_cast< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*>(
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::internal_default_instance());
  ::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_.slice_ = const_cast< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*>(
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::internal_default_instance());
}
class Expression_MaskExpression_ListSelect_ListSelectItem::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
  static const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
};

const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.item_;
}
const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->type_.slice_;
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_item(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    type_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_slice(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (slice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice);
    if (message_arena != submessage_arena) {
      slice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
    type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(const Expression_MaskExpression_ListSelect_ListSelectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
}

void Expression_MaskExpression_ListSelect_ListSelectItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_type();
}

Expression_MaskExpression_ListSelect_ListSelectItem::~Expression_MaskExpression_ListSelect_ListSelectItem() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect_ListSelectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect_ListSelectItem* _this = reinterpret_cast< Expression_MaskExpression_ListSelect_ListSelectItem* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect_ListSelectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect_ListSelectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_ListSelect_ListSelectItem& Expression_MaskExpression_ListSelect_ListSelectItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_ListSelectItem_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_ListSelect_ListSelectItem::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  switch (type_case()) {
    case kItem: {
      if (GetArena() == nullptr) {
        delete type_.item_;
      }
      break;
    }
    case kSlice: {
      if (GetArena() == nullptr) {
        delete type_.slice_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_ListSelect_ListSelectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
  if (_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
  if (_internal_has_slice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.item_);
      break;
    }
    // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
    case kSlice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.slice_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect_ListSelectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect_ListSelectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect_ListSelectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kItem: {
      _internal_mutable_item()->::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(from._internal_item());
      break;
    }
    case kSlice: {
      _internal_mutable_slice()->::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect_ListSelectItem::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_ListSelect::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_ListSelect_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_MaskExpression_Select*>(
      ::substrait::proto::Expression_MaskExpression_Select::internal_default_instance());
}
class Expression_MaskExpression_ListSelect::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_Select& child(const Expression_MaskExpression_ListSelect* msg);
};

const ::substrait::proto::Expression_MaskExpression_Select&
Expression_MaskExpression_ListSelect::_Internal::child(const Expression_MaskExpression_ListSelect* msg) {
  return *msg->child_;
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.ListSelect)
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(const Expression_MaskExpression_ListSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selection_(from.selection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.ListSelect)
}

void Expression_MaskExpression_ListSelect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  child_ = nullptr;
}

Expression_MaskExpression_ListSelect::~Expression_MaskExpression_ListSelect() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.ListSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_ListSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Expression_MaskExpression_ListSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_ListSelect* _this = reinterpret_cast< Expression_MaskExpression_ListSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_ListSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_ListSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_ListSelect& Expression_MaskExpression_ListSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_ListSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_.Clear();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_ListSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.ListSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_selection(i), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.ListSelect)
  return target;
}

size_t Expression_MaskExpression_ListSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.ListSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  total_size += 1UL * this->_internal_selection_size();
  for (const auto& msg : this->selection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_ListSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_ListSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_ListSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.ListSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.ListSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_ListSelect::MergeFrom(const Expression_MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_.MergeFrom(from.selection_);
  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
}

void Expression_MaskExpression_ListSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_ListSelect::CopyFrom(const Expression_MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect::InternalSwap(Expression_MaskExpression_ListSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selection_.InternalSwap(&other->selection_);
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_MapSelect_MapKey::InitAsDefaultInstance() {
}
class Expression_MaskExpression_MapSelect_MapKey::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
}
Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(const Expression_MaskExpression_MapSelect_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key().empty()) {
    map_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
}

void Expression_MaskExpression_MapSelect_MapKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto.base);
  map_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_MaskExpression_MapSelect_MapKey::~Expression_MaskExpression_MapSelect_MapKey() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_MaskExpression_MapSelect_MapKey::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect_MapKey* _this = reinterpret_cast< Expression_MaskExpression_MapSelect_MapKey* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect_MapKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect_MapKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_MapSelect_MapKey& Expression_MaskExpression_MapSelect_MapKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_MapSelect_MapKey_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_MapSelect_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect_MapKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key().data(), static_cast<int>(this->_internal_map_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key = 1;
  if (this->map_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect_MapKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect_MapKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect_MapKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect_MapKey::MergeFrom(const Expression_MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key().size() > 0) {
    _internal_set_map_key(from._internal_map_key());
  }
}

void Expression_MaskExpression_MapSelect_MapKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect_MapKey::CopyFrom(const Expression_MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKey::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKey::InternalSwap(Expression_MaskExpression_MapSelect_MapKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_.Swap(&other->map_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_MapSelect_MapKeyExpression::InitAsDefaultInstance() {
}
class Expression_MaskExpression_MapSelect_MapKeyExpression::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
}
Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(const Expression_MaskExpression_MapSelect_MapKeyExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_key_expression().empty()) {
    map_key_expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_key_expression(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto.base);
  map_key_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Expression_MaskExpression_MapSelect_MapKeyExpression::~Expression_MaskExpression_MapSelect_MapKeyExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_key_expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect_MapKeyExpression* _this = reinterpret_cast< Expression_MaskExpression_MapSelect_MapKeyExpression* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect_MapKeyExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect_MapKeyExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_MapSelect_MapKeyExpression& Expression_MaskExpression_MapSelect_MapKeyExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_MapSelect_MapKeyExpression_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_MapSelect_MapKeyExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_key_expression_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string map_key_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_key_expression();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key_expression().data(), static_cast<int>(this->_internal_map_key_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKeyExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (this->map_key_expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key_expression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect_MapKeyExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect_MapKeyExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_key_expression().size() > 0) {
    _internal_set_map_key_expression(from._internal_map_key_expression());
  }
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKeyExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::InternalSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_key_expression_.Swap(&other->map_key_expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKeyExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression_MapSelect::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_.key_ = const_cast< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey*>(
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey::internal_default_instance());
  ::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_.expression_ = const_cast< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression*>(
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression::internal_default_instance());
  ::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_._instance.get_mutable()->child_ = const_cast< ::substrait::proto::Expression_MaskExpression_Select*>(
      ::substrait::proto::Expression_MaskExpression_Select::internal_default_instance());
}
class Expression_MaskExpression_MapSelect::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey& key(const Expression_MaskExpression_MapSelect* msg);
  static const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression& expression(const Expression_MaskExpression_MapSelect* msg);
  static const ::substrait::proto::Expression_MaskExpression_Select& child(const Expression_MaskExpression_MapSelect* msg);
};

const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey&
Expression_MaskExpression_MapSelect::_Internal::key(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->select_.key_;
}
const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression&
Expression_MaskExpression_MapSelect::_Internal::expression(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->select_.expression_;
}
const ::substrait::proto::Expression_MaskExpression_Select&
Expression_MaskExpression_MapSelect::_Internal::child(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->child_;
}
void Expression_MaskExpression_MapSelect::set_allocated_key(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    select_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.key)
}
void Expression_MaskExpression_MapSelect::set_allocated_expression(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_select();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.expression)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression.MapSelect)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(const Expression_MaskExpression_MapSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::substrait::proto::Expression_MaskExpression_Select(*from.child_);
  } else {
    child_ = nullptr;
  }
  clear_has_select();
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::substrait::proto::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression.MapSelect)
}

void Expression_MaskExpression_MapSelect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  child_ = nullptr;
  clear_has_select();
}

Expression_MaskExpression_MapSelect::~Expression_MaskExpression_MapSelect() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression.MapSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression_MapSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (has_select()) {
    clear_select();
  }
}

void Expression_MaskExpression_MapSelect::ArenaDtor(void* object) {
  Expression_MaskExpression_MapSelect* _this = reinterpret_cast< Expression_MaskExpression_MapSelect* >(object);
  (void)_this;
}
void Expression_MaskExpression_MapSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression_MapSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression_MapSelect& Expression_MaskExpression_MapSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_ListSelect_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression_MapSelect::clear_select() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.MaskExpression.MapSelect)
  switch (select_case()) {
    case kKey: {
      if (GetArena() == nullptr) {
        delete select_.key_;
      }
      break;
    }
    case kExpression: {
      if (GetArena() == nullptr) {
        delete select_.expression_;
      }
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SELECT_NOT_SET;
}


void Expression_MaskExpression_MapSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  clear_select();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.MaskExpression.MapSelect.MapKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression.Select child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression_MapSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression.MapSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.MapSelect.MapKey key = 1;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression.Select child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression.MapSelect)
  return target;
}

size_t Expression_MaskExpression_MapSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression.MapSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.Select child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  switch (select_case()) {
    // .substrait.proto.Expression.MaskExpression.MapSelect.MapKey key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.key_);
      break;
    }
    // .substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *select_.expression_);
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression_MapSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression_MapSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression_MapSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression.MapSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression.MapSelect)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression_MapSelect::MergeFrom(const Expression_MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::substrait::proto::Expression_MaskExpression_Select::MergeFrom(from._internal_child());
  }
  switch (from.select_case()) {
    case kKey: {
      _internal_mutable_key()->::substrait::proto::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(from._internal_key());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
}

void Expression_MaskExpression_MapSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression_MapSelect::CopyFrom(const Expression_MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect::InternalSwap(Expression_MaskExpression_MapSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(child_, other->child_);
  swap(select_, other->select_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_MaskExpression::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_MaskExpression_default_instance_._instance.get_mutable()->select_ = const_cast< ::substrait::proto::Expression_MaskExpression_StructSelect*>(
      ::substrait::proto::Expression_MaskExpression_StructSelect::internal_default_instance());
}
class Expression_MaskExpression::_Internal {
 public:
  static const ::substrait::proto::Expression_MaskExpression_StructSelect& select(const Expression_MaskExpression* msg);
};

const ::substrait::proto::Expression_MaskExpression_StructSelect&
Expression_MaskExpression::_Internal::select(const Expression_MaskExpression* msg) {
  return *msg->select_;
}
Expression_MaskExpression::Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.MaskExpression)
}
Expression_MaskExpression::Expression_MaskExpression(const Expression_MaskExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select()) {
    select_ = new ::substrait::proto::Expression_MaskExpression_StructSelect(*from.select_);
  } else {
    select_ = nullptr;
  }
  maintain_singular_struct_ = from.maintain_singular_struct_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.MaskExpression)
}

void Expression_MaskExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&select_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maintain_singular_struct_) -
      reinterpret_cast<char*>(&select_)) + sizeof(maintain_singular_struct_));
}

Expression_MaskExpression::~Expression_MaskExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.MaskExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_MaskExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete select_;
}

void Expression_MaskExpression::ArenaDtor(void* object) {
  Expression_MaskExpression* _this = reinterpret_cast< Expression_MaskExpression* >(object);
  (void)_this;
}
void Expression_MaskExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_MaskExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_MaskExpression& Expression_MaskExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_MaskExpression_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_MaskExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && select_ != nullptr) {
    delete select_;
  }
  select_ = nullptr;
  maintain_singular_struct_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.MaskExpression.StructSelect select = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool maintain_singular_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maintain_singular_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_MaskExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.MaskExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select(this), target, stream);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_maintain_singular_struct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.MaskExpression)
  return target;
}

size_t Expression_MaskExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.MaskExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression.MaskExpression.StructSelect select = 1;
  if (this->has_select()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_);
  }

  // bool maintain_singular_struct = 2;
  if (this->maintain_singular_struct() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_MaskExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_MaskExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_MaskExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.MaskExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.MaskExpression)
    MergeFrom(*source);
  }
}

void Expression_MaskExpression::MergeFrom(const Expression_MaskExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.MaskExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_select()) {
    _internal_mutable_select()->::substrait::proto::Expression_MaskExpression_StructSelect::MergeFrom(from._internal_select());
  }
  if (from.maintain_singular_struct() != 0) {
    _internal_set_maintain_singular_struct(from._internal_maintain_singular_struct());
  }
}

void Expression_MaskExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_MaskExpression::CopyFrom(const Expression_MaskExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression::InternalSwap(Expression_MaskExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, maintain_singular_struct_)
      + sizeof(Expression_MaskExpression::maintain_singular_struct_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, select_)>(
          reinterpret_cast<char*>(&select_),
          reinterpret_cast<char*>(&other->select_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_FieldReference_RootReference::InitAsDefaultInstance() {
}
class Expression_FieldReference_RootReference::_Internal {
 public:
};

Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.FieldReference.RootReference)
}
Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(const Expression_FieldReference_RootReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.FieldReference.RootReference)
}

void Expression_FieldReference_RootReference::SharedCtor() {
}

Expression_FieldReference_RootReference::~Expression_FieldReference_RootReference() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.FieldReference.RootReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_FieldReference_RootReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_FieldReference_RootReference::ArenaDtor(void* object) {
  Expression_FieldReference_RootReference* _this = reinterpret_cast< Expression_FieldReference_RootReference* >(object);
  (void)_this;
}
void Expression_FieldReference_RootReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_FieldReference_RootReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_FieldReference_RootReference& Expression_FieldReference_RootReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_FieldReference_RootReference_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_FieldReference_RootReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.FieldReference.RootReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference_RootReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_FieldReference_RootReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.FieldReference.RootReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.FieldReference.RootReference)
  return target;
}

size_t Expression_FieldReference_RootReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.FieldReference.RootReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_FieldReference_RootReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.FieldReference.RootReference)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_FieldReference_RootReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_FieldReference_RootReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.FieldReference.RootReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.FieldReference.RootReference)
    MergeFrom(*source);
  }
}

void Expression_FieldReference_RootReference::MergeFrom(const Expression_FieldReference_RootReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.FieldReference.RootReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Expression_FieldReference_RootReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.FieldReference.RootReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_FieldReference_RootReference::CopyFrom(const Expression_FieldReference_RootReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.FieldReference.RootReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference_RootReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference_RootReference::InternalSwap(Expression_FieldReference_RootReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference_RootReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_FieldReference_OuterReference::InitAsDefaultInstance() {
}
class Expression_FieldReference_OuterReference::_Internal {
 public:
};

Expression_FieldReference_OuterReference::Expression_FieldReference_OuterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.FieldReference.OuterReference)
}
Expression_FieldReference_OuterReference::Expression_FieldReference_OuterReference(const Expression_FieldReference_OuterReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steps_out_ = from.steps_out_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.FieldReference.OuterReference)
}

void Expression_FieldReference_OuterReference::SharedCtor() {
  steps_out_ = 0u;
}

Expression_FieldReference_OuterReference::~Expression_FieldReference_OuterReference() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.FieldReference.OuterReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_FieldReference_OuterReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Expression_FieldReference_OuterReference::ArenaDtor(void* object) {
  Expression_FieldReference_OuterReference* _this = reinterpret_cast< Expression_FieldReference_OuterReference* >(object);
  (void)_this;
}
void Expression_FieldReference_OuterReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_FieldReference_OuterReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_FieldReference_OuterReference& Expression_FieldReference_OuterReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Expression_FieldReference_OuterReference_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_FieldReference_OuterReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.FieldReference.OuterReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_out_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference_OuterReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 steps_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          steps_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_FieldReference_OuterReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.FieldReference.OuterReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 steps_out = 1;
  if (this->steps_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_steps_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.FieldReference.OuterReference)
  return target;
}

size_t Expression_FieldReference_OuterReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.FieldReference.OuterReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 steps_out = 1;
  if (this->steps_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_steps_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_FieldReference_OuterReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.FieldReference.OuterReference)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_FieldReference_OuterReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_FieldReference_OuterReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.FieldReference.OuterReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.FieldReference.OuterReference)
    MergeFrom(*source);
  }
}

void Expression_FieldReference_OuterReference::MergeFrom(const Expression_FieldReference_OuterReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.FieldReference.OuterReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.steps_out() != 0) {
    _internal_set_steps_out(from._internal_steps_out());
  }
}

void Expression_FieldReference_OuterReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.FieldReference.OuterReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_FieldReference_OuterReference::CopyFrom(const Expression_FieldReference_OuterReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.FieldReference.OuterReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference_OuterReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference_OuterReference::InternalSwap(Expression_FieldReference_OuterReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(steps_out_, other->steps_out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference_OuterReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_FieldReference::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_FieldReference_default_instance_.direct_reference_ = const_cast< ::substrait::proto::Expression_ReferenceSegment*>(
      ::substrait::proto::Expression_ReferenceSegment::internal_default_instance());
  ::substrait::proto::_Expression_FieldReference_default_instance_.masked_reference_ = const_cast< ::substrait::proto::Expression_MaskExpression*>(
      ::substrait::proto::Expression_MaskExpression::internal_default_instance());
  ::substrait::proto::_Expression_FieldReference_default_instance_.expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_Expression_FieldReference_default_instance_.root_reference_ = const_cast< ::substrait::proto::Expression_FieldReference_RootReference*>(
      ::substrait::proto::Expression_FieldReference_RootReference::internal_default_instance());
  ::substrait::proto::_Expression_FieldReference_default_instance_.outer_reference_ = const_cast< ::substrait::proto::Expression_FieldReference_OuterReference*>(
      ::substrait::proto::Expression_FieldReference_OuterReference::internal_default_instance());
}
class Expression_FieldReference::_Internal {
 public:
  static const ::substrait::proto::Expression_ReferenceSegment& direct_reference(const Expression_FieldReference* msg);
  static const ::substrait::proto::Expression_MaskExpression& masked_reference(const Expression_FieldReference* msg);
  static const ::substrait::proto::Expression& expression(const Expression_FieldReference* msg);
  static const ::substrait::proto::Expression_FieldReference_RootReference& root_reference(const Expression_FieldReference* msg);
  static const ::substrait::proto::Expression_FieldReference_OuterReference& outer_reference(const Expression_FieldReference* msg);
};

const ::substrait::proto::Expression_ReferenceSegment&
Expression_FieldReference::_Internal::direct_reference(const Expression_FieldReference* msg) {
  return *msg->reference_type_.direct_reference_;
}
const ::substrait::proto::Expression_MaskExpression&
Expression_FieldReference::_Internal::masked_reference(const Expression_FieldReference* msg) {
  return *msg->reference_type_.masked_reference_;
}
const ::substrait::proto::Expression&
Expression_FieldReference::_Internal::expression(const Expression_FieldReference* msg) {
  return *msg->root_type_.expression_;
}
const ::substrait::proto::Expression_FieldReference_RootReference&
Expression_FieldReference::_Internal::root_reference(const Expression_FieldReference* msg) {
  return *msg->root_type_.root_reference_;
}
const ::substrait::proto::Expression_FieldReference_OuterReference&
Expression_FieldReference::_Internal::outer_reference(const Expression_FieldReference* msg) {
  return *msg->root_type_.outer_reference_;
}
void Expression_FieldReference::set_allocated_direct_reference(::substrait::proto::Expression_ReferenceSegment* direct_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (direct_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct_reference);
    if (message_arena != submessage_arena) {
      direct_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_reference, submessage_arena);
    }
    set_has_direct_reference();
    reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.FieldReference.direct_reference)
}
void Expression_FieldReference::set_allocated_masked_reference(::substrait::proto::Expression_MaskExpression* masked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_reference_type();
  if (masked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(masked_reference);
    if (message_arena != submessage_arena) {
      masked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_reference, submessage_arena);
    }
    set_has_masked_reference();
    reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.FieldReference.masked_reference)
}
void Expression_FieldReference::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_root_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    root_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.FieldReference.expression)
}
void Expression_FieldReference::set_allocated_root_reference(::substrait::proto::Expression_FieldReference_RootReference* root_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_root_type();
  if (root_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_reference);
    if (message_arena != submessage_arena) {
      root_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_reference, submessage_arena);
    }
    set_has_root_reference();
    root_type_.root_reference_ = root_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.FieldReference.root_reference)
}
void Expression_FieldReference::set_allocated_outer_reference(::substrait::proto::Expression_FieldReference_OuterReference* outer_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_root_type();
  if (outer_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outer_reference);
    if (message_arena != submessage_arena) {
      outer_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outer_reference, submessage_arena);
    }
    set_has_outer_reference();
    root_type_.outer_reference_ = outer_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.FieldReference.outer_reference)
}
Expression_FieldReference::Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.FieldReference)
}
Expression_FieldReference::Expression_FieldReference(const Expression_FieldReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::substrait::proto::Expression_ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::substrait::proto::Expression_MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_root_type();
  switch (from.root_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kRootReference: {
      _internal_mutable_root_reference()->::substrait::proto::Expression_FieldReference_RootReference::MergeFrom(from._internal_root_reference());
      break;
    }
    case kOuterReference: {
      _internal_mutable_outer_reference()->::substrait::proto::Expression_FieldReference_OuterReference::MergeFrom(from._internal_outer_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.FieldReference)
}

void Expression_FieldReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_reference_type();
  clear_has_root_type();
}

Expression_FieldReference::~Expression_FieldReference() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.FieldReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_FieldReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
  if (has_root_type()) {
    clear_root_type();
  }
}

void Expression_FieldReference::ArenaDtor(void* object) {
  Expression_FieldReference* _this = reinterpret_cast< Expression_FieldReference* >(object);
  (void)_this;
}
void Expression_FieldReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_FieldReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_FieldReference& Expression_FieldReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_FieldReference::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.FieldReference)
  switch (reference_type_case()) {
    case kDirectReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.direct_reference_;
      }
      break;
    }
    case kMaskedReference: {
      if (GetArena() == nullptr) {
        delete reference_type_.masked_reference_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}

void Expression_FieldReference::clear_root_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.FieldReference)
  switch (root_type_case()) {
    case kExpression: {
      if (GetArena() == nullptr) {
        delete root_type_.expression_;
      }
      break;
    }
    case kRootReference: {
      if (GetArena() == nullptr) {
        delete root_type_.root_reference_;
      }
      break;
    }
    case kOuterReference: {
      if (GetArena() == nullptr) {
        delete root_type_.outer_reference_;
      }
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ROOT_TYPE_NOT_SET;
}


void Expression_FieldReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  clear_root_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.ReferenceSegment direct_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MaskExpression masked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression expression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.FieldReference.RootReference root_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.FieldReference.OuterReference outer_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_outer_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_FieldReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.FieldReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.ReferenceSegment direct_reference = 1;
  if (_internal_has_direct_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct_reference(this), target, stream);
  }

  // .substrait.proto.Expression.MaskExpression masked_reference = 2;
  if (_internal_has_masked_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::masked_reference(this), target, stream);
  }

  // .substrait.proto.Expression expression = 3;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expression(this), target, stream);
  }

  // .substrait.proto.Expression.FieldReference.RootReference root_reference = 4;
  if (_internal_has_root_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::root_reference(this), target, stream);
  }

  // .substrait.proto.Expression.FieldReference.OuterReference outer_reference = 5;
  if (_internal_has_outer_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::outer_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.FieldReference)
  return target;
}

size_t Expression_FieldReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.FieldReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .substrait.proto.Expression.ReferenceSegment direct_reference = 1;
    case kDirectReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.direct_reference_);
      break;
    }
    // .substrait.proto.Expression.MaskExpression masked_reference = 2;
    case kMaskedReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_type_.masked_reference_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (root_type_case()) {
    // .substrait.proto.Expression expression = 3;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_type_.expression_);
      break;
    }
    // .substrait.proto.Expression.FieldReference.RootReference root_reference = 4;
    case kRootReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_type_.root_reference_);
      break;
    }
    // .substrait.proto.Expression.FieldReference.OuterReference outer_reference = 5;
    case kOuterReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_type_.outer_reference_);
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_FieldReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_FieldReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_FieldReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.FieldReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.FieldReference)
    MergeFrom(*source);
  }
}

void Expression_FieldReference::MergeFrom(const Expression_FieldReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.FieldReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kDirectReference: {
      _internal_mutable_direct_reference()->::substrait::proto::Expression_ReferenceSegment::MergeFrom(from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _internal_mutable_masked_reference()->::substrait::proto::Expression_MaskExpression::MergeFrom(from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.root_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kRootReference: {
      _internal_mutable_root_reference()->::substrait::proto::Expression_FieldReference_RootReference::MergeFrom(from._internal_root_reference());
      break;
    }
    case kOuterReference: {
      _internal_mutable_outer_reference()->::substrait::proto::Expression_FieldReference_OuterReference::MergeFrom(from._internal_outer_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_FieldReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_FieldReference::CopyFrom(const Expression_FieldReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference::InternalSwap(Expression_FieldReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reference_type_, other->reference_type_);
  swap(root_type_, other->root_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Subquery_Scalar::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Subquery_Scalar_default_instance_._instance.get_mutable()->input_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class Expression_Subquery_Scalar::_Internal {
 public:
  static const ::substrait::proto::Rel& input(const Expression_Subquery_Scalar* msg);
};

const ::substrait::proto::Rel&
Expression_Subquery_Scalar::_Internal::input(const Expression_Subquery_Scalar* msg) {
  return *msg->input_;
}
Expression_Subquery_Scalar::Expression_Subquery_Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Subquery.Scalar)
}
Expression_Subquery_Scalar::Expression_Subquery_Scalar(const Expression_Subquery_Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::substrait::proto::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Subquery.Scalar)
}

void Expression_Subquery_Scalar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  input_ = nullptr;
}

Expression_Subquery_Scalar::~Expression_Subquery_Scalar() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Subquery.Scalar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Subquery_Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete input_;
}

void Expression_Subquery_Scalar::ArenaDtor(void* object) {
  Expression_Subquery_Scalar* _this = reinterpret_cast< Expression_Subquery_Scalar* >(object);
  (void)_this;
}
void Expression_Subquery_Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Subquery_Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Subquery_Scalar& Expression_Subquery_Scalar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Subquery_Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Subquery.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Rel input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Subquery_Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Subquery.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Rel input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Subquery.Scalar)
  return target;
}

size_t Expression_Subquery_Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Subquery.Scalar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Rel input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Subquery_Scalar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Subquery.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Subquery_Scalar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Subquery_Scalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Subquery.Scalar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Subquery.Scalar)
    MergeFrom(*source);
  }
}

void Expression_Subquery_Scalar::MergeFrom(const Expression_Subquery_Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Subquery.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    _internal_mutable_input()->::substrait::proto::Rel::MergeFrom(from._internal_input());
  }
}

void Expression_Subquery_Scalar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Subquery.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Subquery_Scalar::CopyFrom(const Expression_Subquery_Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Subquery.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_Scalar::IsInitialized() const {
  return true;
}

void Expression_Subquery_Scalar::InternalSwap(Expression_Subquery_Scalar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_Scalar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Subquery_InPredicate::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Subquery_InPredicate_default_instance_._instance.get_mutable()->haystack_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class Expression_Subquery_InPredicate::_Internal {
 public:
  static const ::substrait::proto::Rel& haystack(const Expression_Subquery_InPredicate* msg);
};

const ::substrait::proto::Rel&
Expression_Subquery_InPredicate::_Internal::haystack(const Expression_Subquery_InPredicate* msg) {
  return *msg->haystack_;
}
Expression_Subquery_InPredicate::Expression_Subquery_InPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  needles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Subquery.InPredicate)
}
Expression_Subquery_InPredicate::Expression_Subquery_InPredicate(const Expression_Subquery_InPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      needles_(from.needles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_haystack()) {
    haystack_ = new ::substrait::proto::Rel(*from.haystack_);
  } else {
    haystack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Subquery.InPredicate)
}

void Expression_Subquery_InPredicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  haystack_ = nullptr;
}

Expression_Subquery_InPredicate::~Expression_Subquery_InPredicate() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Subquery.InPredicate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Subquery_InPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete haystack_;
}

void Expression_Subquery_InPredicate::ArenaDtor(void* object) {
  Expression_Subquery_InPredicate* _this = reinterpret_cast< Expression_Subquery_InPredicate* >(object);
  (void)_this;
}
void Expression_Subquery_InPredicate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Subquery_InPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Subquery_InPredicate& Expression_Subquery_InPredicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Subquery_InPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Subquery.InPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needles_.Clear();
  if (GetArena() == nullptr && haystack_ != nullptr) {
    delete haystack_;
  }
  haystack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_InPredicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Expression needles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_needles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel haystack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_haystack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Subquery_InPredicate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Subquery.InPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression needles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_needles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_needles(i), target, stream);
  }

  // .substrait.proto.Rel haystack = 2;
  if (this->has_haystack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::haystack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Subquery.InPredicate)
  return target;
}

size_t Expression_Subquery_InPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Subquery.InPredicate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression needles = 1;
  total_size += 1UL * this->_internal_needles_size();
  for (const auto& msg : this->needles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Rel haystack = 2;
  if (this->has_haystack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *haystack_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Subquery_InPredicate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Subquery.InPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Subquery_InPredicate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Subquery_InPredicate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Subquery.InPredicate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Subquery.InPredicate)
    MergeFrom(*source);
  }
}

void Expression_Subquery_InPredicate::MergeFrom(const Expression_Subquery_InPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Subquery.InPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  needles_.MergeFrom(from.needles_);
  if (from.has_haystack()) {
    _internal_mutable_haystack()->::substrait::proto::Rel::MergeFrom(from._internal_haystack());
  }
}

void Expression_Subquery_InPredicate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Subquery.InPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Subquery_InPredicate::CopyFrom(const Expression_Subquery_InPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Subquery.InPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_InPredicate::IsInitialized() const {
  return true;
}

void Expression_Subquery_InPredicate::InternalSwap(Expression_Subquery_InPredicate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  needles_.InternalSwap(&other->needles_);
  swap(haystack_, other->haystack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_InPredicate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Subquery_SetPredicate::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Subquery_SetPredicate_default_instance_._instance.get_mutable()->tuples_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class Expression_Subquery_SetPredicate::_Internal {
 public:
  static const ::substrait::proto::Rel& tuples(const Expression_Subquery_SetPredicate* msg);
};

const ::substrait::proto::Rel&
Expression_Subquery_SetPredicate::_Internal::tuples(const Expression_Subquery_SetPredicate* msg) {
  return *msg->tuples_;
}
Expression_Subquery_SetPredicate::Expression_Subquery_SetPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Subquery.SetPredicate)
}
Expression_Subquery_SetPredicate::Expression_Subquery_SetPredicate(const Expression_Subquery_SetPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tuples()) {
    tuples_ = new ::substrait::proto::Rel(*from.tuples_);
  } else {
    tuples_ = nullptr;
  }
  predicate_op_ = from.predicate_op_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Subquery.SetPredicate)
}

void Expression_Subquery_SetPredicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&tuples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predicate_op_) -
      reinterpret_cast<char*>(&tuples_)) + sizeof(predicate_op_));
}

Expression_Subquery_SetPredicate::~Expression_Subquery_SetPredicate() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Subquery.SetPredicate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Subquery_SetPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tuples_;
}

void Expression_Subquery_SetPredicate::ArenaDtor(void* object) {
  Expression_Subquery_SetPredicate* _this = reinterpret_cast< Expression_Subquery_SetPredicate* >(object);
  (void)_this;
}
void Expression_Subquery_SetPredicate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Subquery_SetPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Subquery_SetPredicate& Expression_Subquery_SetPredicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Subquery_SetPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Subquery.SetPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tuples_ != nullptr) {
    delete tuples_;
  }
  tuples_ = nullptr;
  predicate_op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_SetPredicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_predicate_op(static_cast<::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel tuples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Subquery_SetPredicate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Subquery.SetPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
  if (this->predicate_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_predicate_op(), target);
  }

  // .substrait.proto.Rel tuples = 2;
  if (this->has_tuples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tuples(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Subquery.SetPredicate)
  return target;
}

size_t Expression_Subquery_SetPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Subquery.SetPredicate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Rel tuples = 2;
  if (this->has_tuples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tuples_);
  }

  // .substrait.proto.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
  if (this->predicate_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predicate_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Subquery_SetPredicate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Subquery.SetPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Subquery_SetPredicate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Subquery_SetPredicate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Subquery.SetPredicate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Subquery.SetPredicate)
    MergeFrom(*source);
  }
}

void Expression_Subquery_SetPredicate::MergeFrom(const Expression_Subquery_SetPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Subquery.SetPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tuples()) {
    _internal_mutable_tuples()->::substrait::proto::Rel::MergeFrom(from._internal_tuples());
  }
  if (from.predicate_op() != 0) {
    _internal_set_predicate_op(from._internal_predicate_op());
  }
}

void Expression_Subquery_SetPredicate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Subquery.SetPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Subquery_SetPredicate::CopyFrom(const Expression_Subquery_SetPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Subquery.SetPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_SetPredicate::IsInitialized() const {
  return true;
}

void Expression_Subquery_SetPredicate::InternalSwap(Expression_Subquery_SetPredicate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetPredicate, predicate_op_)
      + sizeof(Expression_Subquery_SetPredicate::predicate_op_)
      - PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetPredicate, tuples_)>(
          reinterpret_cast<char*>(&tuples_),
          reinterpret_cast<char*>(&other->tuples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_SetPredicate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Subquery_SetComparison::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Subquery_SetComparison_default_instance_._instance.get_mutable()->left_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_Expression_Subquery_SetComparison_default_instance_._instance.get_mutable()->right_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
}
class Expression_Subquery_SetComparison::_Internal {
 public:
  static const ::substrait::proto::Expression& left(const Expression_Subquery_SetComparison* msg);
  static const ::substrait::proto::Rel& right(const Expression_Subquery_SetComparison* msg);
};

const ::substrait::proto::Expression&
Expression_Subquery_SetComparison::_Internal::left(const Expression_Subquery_SetComparison* msg) {
  return *msg->left_;
}
const ::substrait::proto::Rel&
Expression_Subquery_SetComparison::_Internal::right(const Expression_Subquery_SetComparison* msg) {
  return *msg->right_;
}
Expression_Subquery_SetComparison::Expression_Subquery_SetComparison(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Subquery.SetComparison)
}
Expression_Subquery_SetComparison::Expression_Subquery_SetComparison(const Expression_Subquery_SetComparison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::substrait::proto::Expression(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::proto::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  ::memcpy(&reduction_op_, &from.reduction_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&comparison_op_) -
    reinterpret_cast<char*>(&reduction_op_)) + sizeof(comparison_op_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Subquery.SetComparison)
}

void Expression_Subquery_SetComparison::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparison_op_) -
      reinterpret_cast<char*>(&left_)) + sizeof(comparison_op_));
}

Expression_Subquery_SetComparison::~Expression_Subquery_SetComparison() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Subquery.SetComparison)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Subquery_SetComparison::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void Expression_Subquery_SetComparison::ArenaDtor(void* object) {
  Expression_Subquery_SetComparison* _this = reinterpret_cast< Expression_Subquery_SetComparison* >(object);
  (void)_this;
}
void Expression_Subquery_SetComparison::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Subquery_SetComparison::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Subquery_SetComparison& Expression_Subquery_SetComparison::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Subquery_SetComparison::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Subquery.SetComparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  ::memset(&reduction_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparison_op_) -
      reinterpret_cast<char*>(&reduction_op_)) + sizeof(comparison_op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_SetComparison::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reduction_op(static_cast<::substrait::proto::Expression_Subquery_SetComparison_ReductionOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_comparison_op(static_cast<::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Rel right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Subquery_SetComparison::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Subquery.SetComparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
  if (this->reduction_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reduction_op(), target);
  }

  // .substrait.proto.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
  if (this->comparison_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comparison_op(), target);
  }

  // .substrait.proto.Expression left = 3;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::left(this), target, stream);
  }

  // .substrait.proto.Rel right = 4;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Subquery.SetComparison)
  return target;
}

size_t Expression_Subquery_SetComparison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Subquery.SetComparison)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression left = 3;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.proto.Rel right = 4;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.proto.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
  if (this->reduction_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reduction_op());
  }

  // .substrait.proto.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
  if (this->comparison_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comparison_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Subquery_SetComparison::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Subquery.SetComparison)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Subquery_SetComparison* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Subquery_SetComparison>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Subquery.SetComparison)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Subquery.SetComparison)
    MergeFrom(*source);
  }
}

void Expression_Subquery_SetComparison::MergeFrom(const Expression_Subquery_SetComparison& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Subquery.SetComparison)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::substrait::proto::Expression::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::substrait::proto::Rel::MergeFrom(from._internal_right());
  }
  if (from.reduction_op() != 0) {
    _internal_set_reduction_op(from._internal_reduction_op());
  }
  if (from.comparison_op() != 0) {
    _internal_set_comparison_op(from._internal_comparison_op());
  }
}

void Expression_Subquery_SetComparison::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Subquery.SetComparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Subquery_SetComparison::CopyFrom(const Expression_Subquery_SetComparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Subquery.SetComparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_SetComparison::IsInitialized() const {
  return true;
}

void Expression_Subquery_SetComparison::InternalSwap(Expression_Subquery_SetComparison* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetComparison, comparison_op_)
      + sizeof(Expression_Subquery_SetComparison::comparison_op_)
      - PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetComparison, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_SetComparison::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression_Subquery::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_Subquery_default_instance_.scalar_ = const_cast< ::substrait::proto::Expression_Subquery_Scalar*>(
      ::substrait::proto::Expression_Subquery_Scalar::internal_default_instance());
  ::substrait::proto::_Expression_Subquery_default_instance_.in_predicate_ = const_cast< ::substrait::proto::Expression_Subquery_InPredicate*>(
      ::substrait::proto::Expression_Subquery_InPredicate::internal_default_instance());
  ::substrait::proto::_Expression_Subquery_default_instance_.set_predicate_ = const_cast< ::substrait::proto::Expression_Subquery_SetPredicate*>(
      ::substrait::proto::Expression_Subquery_SetPredicate::internal_default_instance());
  ::substrait::proto::_Expression_Subquery_default_instance_.set_comparison_ = const_cast< ::substrait::proto::Expression_Subquery_SetComparison*>(
      ::substrait::proto::Expression_Subquery_SetComparison::internal_default_instance());
}
class Expression_Subquery::_Internal {
 public:
  static const ::substrait::proto::Expression_Subquery_Scalar& scalar(const Expression_Subquery* msg);
  static const ::substrait::proto::Expression_Subquery_InPredicate& in_predicate(const Expression_Subquery* msg);
  static const ::substrait::proto::Expression_Subquery_SetPredicate& set_predicate(const Expression_Subquery* msg);
  static const ::substrait::proto::Expression_Subquery_SetComparison& set_comparison(const Expression_Subquery* msg);
};

const ::substrait::proto::Expression_Subquery_Scalar&
Expression_Subquery::_Internal::scalar(const Expression_Subquery* msg) {
  return *msg->subquery_type_.scalar_;
}
const ::substrait::proto::Expression_Subquery_InPredicate&
Expression_Subquery::_Internal::in_predicate(const Expression_Subquery* msg) {
  return *msg->subquery_type_.in_predicate_;
}
const ::substrait::proto::Expression_Subquery_SetPredicate&
Expression_Subquery::_Internal::set_predicate(const Expression_Subquery* msg) {
  return *msg->subquery_type_.set_predicate_;
}
const ::substrait::proto::Expression_Subquery_SetComparison&
Expression_Subquery::_Internal::set_comparison(const Expression_Subquery* msg) {
  return *msg->subquery_type_.set_comparison_;
}
void Expression_Subquery::set_allocated_scalar(::substrait::proto::Expression_Subquery_Scalar* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_subquery_type();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalar);
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    subquery_type_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.scalar)
}
void Expression_Subquery::set_allocated_in_predicate(::substrait::proto::Expression_Subquery_InPredicate* in_predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_subquery_type();
  if (in_predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(in_predicate);
    if (message_arena != submessage_arena) {
      in_predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_predicate, submessage_arena);
    }
    set_has_in_predicate();
    subquery_type_.in_predicate_ = in_predicate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.in_predicate)
}
void Expression_Subquery::set_allocated_set_predicate(::substrait::proto::Expression_Subquery_SetPredicate* set_predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_subquery_type();
  if (set_predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_predicate);
    if (message_arena != submessage_arena) {
      set_predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_predicate, submessage_arena);
    }
    set_has_set_predicate();
    subquery_type_.set_predicate_ = set_predicate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.set_predicate)
}
void Expression_Subquery::set_allocated_set_comparison(::substrait::proto::Expression_Subquery_SetComparison* set_comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_subquery_type();
  if (set_comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_comparison);
    if (message_arena != submessage_arena) {
      set_comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_comparison, submessage_arena);
    }
    set_has_set_comparison();
    subquery_type_.set_comparison_ = set_comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.set_comparison)
}
Expression_Subquery::Expression_Subquery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression.Subquery)
}
Expression_Subquery::Expression_Subquery(const Expression_Subquery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_subquery_type();
  switch (from.subquery_type_case()) {
    case kScalar: {
      _internal_mutable_scalar()->::substrait::proto::Expression_Subquery_Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kInPredicate: {
      _internal_mutable_in_predicate()->::substrait::proto::Expression_Subquery_InPredicate::MergeFrom(from._internal_in_predicate());
      break;
    }
    case kSetPredicate: {
      _internal_mutable_set_predicate()->::substrait::proto::Expression_Subquery_SetPredicate::MergeFrom(from._internal_set_predicate());
      break;
    }
    case kSetComparison: {
      _internal_mutable_set_comparison()->::substrait::proto::Expression_Subquery_SetComparison::MergeFrom(from._internal_set_comparison());
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression.Subquery)
}

void Expression_Subquery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_subquery_type();
}

Expression_Subquery::~Expression_Subquery() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression.Subquery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression_Subquery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_subquery_type()) {
    clear_subquery_type();
  }
}

void Expression_Subquery::ArenaDtor(void* object) {
  Expression_Subquery* _this = reinterpret_cast< Expression_Subquery* >(object);
  (void)_this;
}
void Expression_Subquery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression_Subquery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression_Subquery& Expression_Subquery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression_Subquery::clear_subquery_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression.Subquery)
  switch (subquery_type_case()) {
    case kScalar: {
      if (GetArena() == nullptr) {
        delete subquery_type_.scalar_;
      }
      break;
    }
    case kInPredicate: {
      if (GetArena() == nullptr) {
        delete subquery_type_.in_predicate_;
      }
      break;
    }
    case kSetPredicate: {
      if (GetArena() == nullptr) {
        delete subquery_type_.set_predicate_;
      }
      break;
    }
    case kSetComparison: {
      if (GetArena() == nullptr) {
        delete subquery_type_.set_comparison_;
      }
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBQUERY_TYPE_NOT_SET;
}


void Expression_Subquery::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression.Subquery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_subquery_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Subquery.Scalar scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Subquery.InPredicate in_predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Subquery.SetPredicate set_predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Subquery.SetComparison set_comparison = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_comparison(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression_Subquery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression.Subquery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Subquery.Scalar scalar = 1;
  if (_internal_has_scalar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalar(this), target, stream);
  }

  // .substrait.proto.Expression.Subquery.InPredicate in_predicate = 2;
  if (_internal_has_in_predicate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::in_predicate(this), target, stream);
  }

  // .substrait.proto.Expression.Subquery.SetPredicate set_predicate = 3;
  if (_internal_has_set_predicate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_predicate(this), target, stream);
  }

  // .substrait.proto.Expression.Subquery.SetComparison set_comparison = 4;
  if (_internal_has_set_comparison()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::set_comparison(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression.Subquery)
  return target;
}

size_t Expression_Subquery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression.Subquery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (subquery_type_case()) {
    // .substrait.proto.Expression.Subquery.Scalar scalar = 1;
    case kScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subquery_type_.scalar_);
      break;
    }
    // .substrait.proto.Expression.Subquery.InPredicate in_predicate = 2;
    case kInPredicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subquery_type_.in_predicate_);
      break;
    }
    // .substrait.proto.Expression.Subquery.SetPredicate set_predicate = 3;
    case kSetPredicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subquery_type_.set_predicate_);
      break;
    }
    // .substrait.proto.Expression.Subquery.SetComparison set_comparison = 4;
    case kSetComparison: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subquery_type_.set_comparison_);
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression_Subquery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression.Subquery)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression_Subquery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression_Subquery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression.Subquery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression.Subquery)
    MergeFrom(*source);
  }
}

void Expression_Subquery::MergeFrom(const Expression_Subquery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression.Subquery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.subquery_type_case()) {
    case kScalar: {
      _internal_mutable_scalar()->::substrait::proto::Expression_Subquery_Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kInPredicate: {
      _internal_mutable_in_predicate()->::substrait::proto::Expression_Subquery_InPredicate::MergeFrom(from._internal_in_predicate());
      break;
    }
    case kSetPredicate: {
      _internal_mutable_set_predicate()->::substrait::proto::Expression_Subquery_SetPredicate::MergeFrom(from._internal_set_predicate());
      break;
    }
    case kSetComparison: {
      _internal_mutable_set_comparison()->::substrait::proto::Expression_Subquery_SetComparison::MergeFrom(from._internal_set_comparison());
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression_Subquery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression.Subquery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression_Subquery::CopyFrom(const Expression_Subquery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression.Subquery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery::IsInitialized() const {
  return true;
}

void Expression_Subquery::InternalSwap(Expression_Subquery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(subquery_type_, other->subquery_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Expression::InitAsDefaultInstance() {
  ::substrait::proto::_Expression_default_instance_.literal_ = const_cast< ::substrait::proto::Expression_Literal*>(
      ::substrait::proto::Expression_Literal::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.selection_ = const_cast< ::substrait::proto::Expression_FieldReference*>(
      ::substrait::proto::Expression_FieldReference::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.scalar_function_ = const_cast< ::substrait::proto::Expression_ScalarFunction*>(
      ::substrait::proto::Expression_ScalarFunction::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.window_function_ = const_cast< ::substrait::proto::Expression_WindowFunction*>(
      ::substrait::proto::Expression_WindowFunction::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.if_then_ = const_cast< ::substrait::proto::Expression_IfThen*>(
      ::substrait::proto::Expression_IfThen::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.switch_expression_ = const_cast< ::substrait::proto::Expression_SwitchExpression*>(
      ::substrait::proto::Expression_SwitchExpression::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.singular_or_list_ = const_cast< ::substrait::proto::Expression_SingularOrList*>(
      ::substrait::proto::Expression_SingularOrList::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.multi_or_list_ = const_cast< ::substrait::proto::Expression_MultiOrList*>(
      ::substrait::proto::Expression_MultiOrList::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.cast_ = const_cast< ::substrait::proto::Expression_Cast*>(
      ::substrait::proto::Expression_Cast::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.subquery_ = const_cast< ::substrait::proto::Expression_Subquery*>(
      ::substrait::proto::Expression_Subquery::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.nested_ = const_cast< ::substrait::proto::Expression_Nested*>(
      ::substrait::proto::Expression_Nested::internal_default_instance());
  ::substrait::proto::_Expression_default_instance_.enum__ = const_cast< ::substrait::proto::Expression_Enum*>(
      ::substrait::proto::Expression_Enum::internal_default_instance());
}
class Expression::_Internal {
 public:
  static const ::substrait::proto::Expression_Literal& literal(const Expression* msg);
  static const ::substrait::proto::Expression_FieldReference& selection(const Expression* msg);
  static const ::substrait::proto::Expression_ScalarFunction& scalar_function(const Expression* msg);
  static const ::substrait::proto::Expression_WindowFunction& window_function(const Expression* msg);
  static const ::substrait::proto::Expression_IfThen& if_then(const Expression* msg);
  static const ::substrait::proto::Expression_SwitchExpression& switch_expression(const Expression* msg);
  static const ::substrait::proto::Expression_SingularOrList& singular_or_list(const Expression* msg);
  static const ::substrait::proto::Expression_MultiOrList& multi_or_list(const Expression* msg);
  static const ::substrait::proto::Expression_Cast& cast(const Expression* msg);
  static const ::substrait::proto::Expression_Subquery& subquery(const Expression* msg);
  static const ::substrait::proto::Expression_Nested& nested(const Expression* msg);
  static const ::substrait::proto::Expression_Enum& enum_(const Expression* msg);
};

const ::substrait::proto::Expression_Literal&
Expression::_Internal::literal(const Expression* msg) {
  return *msg->rex_type_.literal_;
}
const ::substrait::proto::Expression_FieldReference&
Expression::_Internal::selection(const Expression* msg) {
  return *msg->rex_type_.selection_;
}
const ::substrait::proto::Expression_ScalarFunction&
Expression::_Internal::scalar_function(const Expression* msg) {
  return *msg->rex_type_.scalar_function_;
}
const ::substrait::proto::Expression_WindowFunction&
Expression::_Internal::window_function(const Expression* msg) {
  return *msg->rex_type_.window_function_;
}
const ::substrait::proto::Expression_IfThen&
Expression::_Internal::if_then(const Expression* msg) {
  return *msg->rex_type_.if_then_;
}
const ::substrait::proto::Expression_SwitchExpression&
Expression::_Internal::switch_expression(const Expression* msg) {
  return *msg->rex_type_.switch_expression_;
}
const ::substrait::proto::Expression_SingularOrList&
Expression::_Internal::singular_or_list(const Expression* msg) {
  return *msg->rex_type_.singular_or_list_;
}
const ::substrait::proto::Expression_MultiOrList&
Expression::_Internal::multi_or_list(const Expression* msg) {
  return *msg->rex_type_.multi_or_list_;
}
const ::substrait::proto::Expression_Cast&
Expression::_Internal::cast(const Expression* msg) {
  return *msg->rex_type_.cast_;
}
const ::substrait::proto::Expression_Subquery&
Expression::_Internal::subquery(const Expression* msg) {
  return *msg->rex_type_.subquery_;
}
const ::substrait::proto::Expression_Nested&
Expression::_Internal::nested(const Expression* msg) {
  return *msg->rex_type_.nested_;
}
const ::substrait::proto::Expression_Enum&
Expression::_Internal::enum_(const Expression* msg) {
  return *msg->rex_type_.enum__;
}
void Expression::set_allocated_literal(::substrait::proto::Expression_Literal* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(literal);
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    set_has_literal();
    rex_type_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.literal)
}
void Expression::set_allocated_selection(::substrait::proto::Expression_FieldReference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    set_has_selection();
    rex_type_.selection_ = selection;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.selection)
}
void Expression::set_allocated_scalar_function(::substrait::proto::Expression_ScalarFunction* scalar_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (scalar_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalar_function);
    if (message_arena != submessage_arena) {
      scalar_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar_function, submessage_arena);
    }
    set_has_scalar_function();
    rex_type_.scalar_function_ = scalar_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.scalar_function)
}
void Expression::set_allocated_window_function(::substrait::proto::Expression_WindowFunction* window_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (window_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_function);
    if (message_arena != submessage_arena) {
      window_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_function, submessage_arena);
    }
    set_has_window_function();
    rex_type_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.window_function)
}
void Expression::set_allocated_if_then(::substrait::proto::Expression_IfThen* if_then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (if_then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(if_then);
    if (message_arena != submessage_arena) {
      if_then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_then, submessage_arena);
    }
    set_has_if_then();
    rex_type_.if_then_ = if_then;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.if_then)
}
void Expression::set_allocated_switch_expression(::substrait::proto::Expression_SwitchExpression* switch_expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (switch_expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(switch_expression);
    if (message_arena != submessage_arena) {
      switch_expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_expression, submessage_arena);
    }
    set_has_switch_expression();
    rex_type_.switch_expression_ = switch_expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.switch_expression)
}
void Expression::set_allocated_singular_or_list(::substrait::proto::Expression_SingularOrList* singular_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (singular_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(singular_or_list);
    if (message_arena != submessage_arena) {
      singular_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singular_or_list, submessage_arena);
    }
    set_has_singular_or_list();
    rex_type_.singular_or_list_ = singular_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.singular_or_list)
}
void Expression::set_allocated_multi_or_list(::substrait::proto::Expression_MultiOrList* multi_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (multi_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi_or_list);
    if (message_arena != submessage_arena) {
      multi_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_or_list, submessage_arena);
    }
    set_has_multi_or_list();
    rex_type_.multi_or_list_ = multi_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.multi_or_list)
}
void Expression::set_allocated_cast(::substrait::proto::Expression_Cast* cast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (cast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cast);
    if (message_arena != submessage_arena) {
      cast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast, submessage_arena);
    }
    set_has_cast();
    rex_type_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.cast)
}
void Expression::set_allocated_subquery(::substrait::proto::Expression_Subquery* subquery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (subquery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subquery);
    if (message_arena != submessage_arena) {
      subquery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subquery, submessage_arena);
    }
    set_has_subquery();
    rex_type_.subquery_ = subquery;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.subquery)
}
void Expression::set_allocated_nested(::substrait::proto::Expression_Nested* nested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (nested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested);
    if (message_arena != submessage_arena) {
      nested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested, submessage_arena);
    }
    set_has_nested();
    rex_type_.nested_ = nested;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.nested)
}
void Expression::set_allocated_enum_(::substrait::proto::Expression_Enum* enum_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rex_type();
  if (enum_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(enum_);
    if (message_arena != submessage_arena) {
      enum_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    rex_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.enum)
}
Expression::Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Expression)
}
Expression::Expression(const Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rex_type();
  switch (from.rex_type_case()) {
    case kLiteral: {
      _internal_mutable_literal()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_literal());
      break;
    }
    case kSelection: {
      _internal_mutable_selection()->::substrait::proto::Expression_FieldReference::MergeFrom(from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _internal_mutable_scalar_function()->::substrait::proto::Expression_ScalarFunction::MergeFrom(from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _internal_mutable_window_function()->::substrait::proto::Expression_WindowFunction::MergeFrom(from._internal_window_function());
      break;
    }
    case kIfThen: {
      _internal_mutable_if_then()->::substrait::proto::Expression_IfThen::MergeFrom(from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _internal_mutable_switch_expression()->::substrait::proto::Expression_SwitchExpression::MergeFrom(from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _internal_mutable_singular_or_list()->::substrait::proto::Expression_SingularOrList::MergeFrom(from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _internal_mutable_multi_or_list()->::substrait::proto::Expression_MultiOrList::MergeFrom(from._internal_multi_or_list());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::substrait::proto::Expression_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case kSubquery: {
      _internal_mutable_subquery()->::substrait::proto::Expression_Subquery::MergeFrom(from._internal_subquery());
      break;
    }
    case kNested: {
      _internal_mutable_nested()->::substrait::proto::Expression_Nested::MergeFrom(from._internal_nested());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::substrait::proto::Expression_Enum::MergeFrom(from._internal_enum_());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Expression)
}

void Expression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  clear_has_rex_type();
}

Expression::~Expression() {
  // @@protoc_insertion_point(destructor:substrait.proto.Expression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_rex_type()) {
    clear_rex_type();
  }
}

void Expression::ArenaDtor(void* object) {
  Expression* _this = reinterpret_cast< Expression* >(object);
  (void)_this;
}
void Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Expression& Expression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void Expression::clear_rex_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Expression)
  switch (rex_type_case()) {
    case kLiteral: {
      if (GetArena() == nullptr) {
        delete rex_type_.literal_;
      }
      break;
    }
    case kSelection: {
      if (GetArena() == nullptr) {
        delete rex_type_.selection_;
      }
      break;
    }
    case kScalarFunction: {
      if (GetArena() == nullptr) {
        delete rex_type_.scalar_function_;
      }
      break;
    }
    case kWindowFunction: {
      if (GetArena() == nullptr) {
        delete rex_type_.window_function_;
      }
      break;
    }
    case kIfThen: {
      if (GetArena() == nullptr) {
        delete rex_type_.if_then_;
      }
      break;
    }
    case kSwitchExpression: {
      if (GetArena() == nullptr) {
        delete rex_type_.switch_expression_;
      }
      break;
    }
    case kSingularOrList: {
      if (GetArena() == nullptr) {
        delete rex_type_.singular_or_list_;
      }
      break;
    }
    case kMultiOrList: {
      if (GetArena() == nullptr) {
        delete rex_type_.multi_or_list_;
      }
      break;
    }
    case kCast: {
      if (GetArena() == nullptr) {
        delete rex_type_.cast_;
      }
      break;
    }
    case kSubquery: {
      if (GetArena() == nullptr) {
        delete rex_type_.subquery_;
      }
      break;
    }
    case kNested: {
      if (GetArena() == nullptr) {
        delete rex_type_.nested_;
      }
      break;
    }
    case kEnum: {
      if (GetArena() == nullptr) {
        delete rex_type_.enum__;
      }
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REX_TYPE_NOT_SET;
}


void Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rex_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression.Literal literal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.FieldReference selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.ScalarFunction scalar_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.WindowFunction window_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.IfThen if_then = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.SwitchExpression switch_expression = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.SingularOrList singular_or_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_singular_or_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.MultiOrList multi_or_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_or_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Enum enum = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Cast cast = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Subquery subquery = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_subquery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Expression.Nested nested = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression.Literal literal = 1;
  if (_internal_has_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::literal(this), target, stream);
  }

  // .substrait.proto.Expression.FieldReference selection = 2;
  if (_internal_has_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection(this), target, stream);
  }

  // .substrait.proto.Expression.ScalarFunction scalar_function = 3;
  if (_internal_has_scalar_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scalar_function(this), target, stream);
  }

  // .substrait.proto.Expression.WindowFunction window_function = 5;
  if (_internal_has_window_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::window_function(this), target, stream);
  }

  // .substrait.proto.Expression.IfThen if_then = 6;
  if (_internal_has_if_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::if_then(this), target, stream);
  }

  // .substrait.proto.Expression.SwitchExpression switch_expression = 7;
  if (_internal_has_switch_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::switch_expression(this), target, stream);
  }

  // .substrait.proto.Expression.SingularOrList singular_or_list = 8;
  if (_internal_has_singular_or_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::singular_or_list(this), target, stream);
  }

  // .substrait.proto.Expression.MultiOrList multi_or_list = 9;
  if (_internal_has_multi_or_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::multi_or_list(this), target, stream);
  }

  // .substrait.proto.Expression.Enum enum = 10 [deprecated = true];
  if (_internal_has_enum_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::enum_(this), target, stream);
  }

  // .substrait.proto.Expression.Cast cast = 11;
  if (_internal_has_cast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cast(this), target, stream);
  }

  // .substrait.proto.Expression.Subquery subquery = 12;
  if (_internal_has_subquery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::subquery(this), target, stream);
  }

  // .substrait.proto.Expression.Nested nested = 13;
  if (_internal_has_nested()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::nested(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Expression)
  return target;
}

size_t Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rex_type_case()) {
    // .substrait.proto.Expression.Literal literal = 1;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.literal_);
      break;
    }
    // .substrait.proto.Expression.FieldReference selection = 2;
    case kSelection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.selection_);
      break;
    }
    // .substrait.proto.Expression.ScalarFunction scalar_function = 3;
    case kScalarFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.scalar_function_);
      break;
    }
    // .substrait.proto.Expression.WindowFunction window_function = 5;
    case kWindowFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.window_function_);
      break;
    }
    // .substrait.proto.Expression.IfThen if_then = 6;
    case kIfThen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.if_then_);
      break;
    }
    // .substrait.proto.Expression.SwitchExpression switch_expression = 7;
    case kSwitchExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.switch_expression_);
      break;
    }
    // .substrait.proto.Expression.SingularOrList singular_or_list = 8;
    case kSingularOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.singular_or_list_);
      break;
    }
    // .substrait.proto.Expression.MultiOrList multi_or_list = 9;
    case kMultiOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.multi_or_list_);
      break;
    }
    // .substrait.proto.Expression.Cast cast = 11;
    case kCast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.cast_);
      break;
    }
    // .substrait.proto.Expression.Subquery subquery = 12;
    case kSubquery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.subquery_);
      break;
    }
    // .substrait.proto.Expression.Nested nested = 13;
    case kNested: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.nested_);
      break;
    }
    // .substrait.proto.Expression.Enum enum = 10 [deprecated = true];
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rex_type_.enum__);
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  const Expression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Expression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Expression)
    MergeFrom(*source);
  }
}

void Expression::MergeFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rex_type_case()) {
    case kLiteral: {
      _internal_mutable_literal()->::substrait::proto::Expression_Literal::MergeFrom(from._internal_literal());
      break;
    }
    case kSelection: {
      _internal_mutable_selection()->::substrait::proto::Expression_FieldReference::MergeFrom(from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _internal_mutable_scalar_function()->::substrait::proto::Expression_ScalarFunction::MergeFrom(from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _internal_mutable_window_function()->::substrait::proto::Expression_WindowFunction::MergeFrom(from._internal_window_function());
      break;
    }
    case kIfThen: {
      _internal_mutable_if_then()->::substrait::proto::Expression_IfThen::MergeFrom(from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _internal_mutable_switch_expression()->::substrait::proto::Expression_SwitchExpression::MergeFrom(from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _internal_mutable_singular_or_list()->::substrait::proto::Expression_SingularOrList::MergeFrom(from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _internal_mutable_multi_or_list()->::substrait::proto::Expression_MultiOrList::MergeFrom(from._internal_multi_or_list());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::substrait::proto::Expression_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case kSubquery: {
      _internal_mutable_subquery()->::substrait::proto::Expression_Subquery::MergeFrom(from._internal_subquery());
      break;
    }
    case kNested: {
      _internal_mutable_nested()->::substrait::proto::Expression_Nested::MergeFrom(from._internal_nested());
      break;
    }
    case kEnum: {
      _internal_mutable_enum_()->::substrait::proto::Expression_Enum::MergeFrom(from._internal_enum_());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
}

void Expression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression::CopyFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  return true;
}

void Expression::InternalSwap(Expression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rex_type_, other->rex_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SortField::InitAsDefaultInstance() {
  ::substrait::proto::_SortField_default_instance_._instance.get_mutable()->expr_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_SortField_default_instance_.direction_ = 0;
  ::substrait::proto::_SortField_default_instance_.comparison_function_reference_ = 0u;
}
class SortField::_Internal {
 public:
  static const ::substrait::proto::Expression& expr(const SortField* msg);
};

const ::substrait::proto::Expression&
SortField::_Internal::expr(const SortField* msg) {
  return *msg->expr_;
}
SortField::SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.SortField)
}
SortField::SortField(const SortField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expr()) {
    expr_ = new ::substrait::proto::Expression(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  clear_has_sort_kind();
  switch (from.sort_kind_case()) {
    case kDirection: {
      _internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.SortField)
}

void SortField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  expr_ = nullptr;
  clear_has_sort_kind();
}

SortField::~SortField() {
  // @@protoc_insertion_point(destructor:substrait.proto.SortField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SortField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expr_;
  if (has_sort_kind()) {
    clear_sort_kind();
  }
}

void SortField::ArenaDtor(void* object) {
  SortField* _this = reinterpret_cast< SortField* >(object);
  (void)_this;
}
void SortField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SortField& SortField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void SortField::clear_sort_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.SortField)
  switch (sort_kind_case()) {
    case kDirection: {
      // No need to clear
      break;
    }
    case kComparisonFunctionReference: {
      // No need to clear
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SORT_KIND_NOT_SET;
}


void SortField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.SortField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
  clear_sort_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression expr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.SortField.SortDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::substrait::proto::SortField_SortDirection>(val));
        } else goto handle_unusual;
        continue;
      // uint32 comparison_function_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.SortField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression expr = 1;
  if (this->has_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expr(this), target, stream);
  }

  // .substrait.proto.SortField.SortDirection direction = 2;
  if (_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // uint32 comparison_function_reference = 3;
  if (_internal_has_comparison_function_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_comparison_function_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.SortField)
  return target;
}

size_t SortField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.SortField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Expression expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  switch (sort_kind_case()) {
    // .substrait.proto.SortField.SortDirection direction = 2;
    case kDirection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
      break;
    }
    // uint32 comparison_function_reference = 3;
    case kComparisonFunctionReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SortField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.SortField)
  GOOGLE_DCHECK_NE(&from, this);
  const SortField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SortField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.SortField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.SortField)
    MergeFrom(*source);
  }
}

void SortField::MergeFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.SortField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    _internal_mutable_expr()->::substrait::proto::Expression::MergeFrom(from._internal_expr());
  }
  switch (from.sort_kind_case()) {
    case kDirection: {
      _internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
}

void SortField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortField::CopyFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortField::IsInitialized() const {
  return true;
}

void SortField::InternalSwap(SortField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(expr_, other->expr_);
  swap(sort_kind_, other->sort_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregateFunction::InitAsDefaultInstance() {
  ::substrait::proto::_AggregateFunction_default_instance_._instance.get_mutable()->output_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
}
class AggregateFunction::_Internal {
 public:
  static const ::substrait::proto::Type& output_type(const AggregateFunction* msg);
};

const ::substrait::proto::Type&
AggregateFunction::_Internal::output_type(const AggregateFunction* msg) {
  return *msg->output_type_;
}
void AggregateFunction::clear_output_type() {
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
}
AggregateFunction::AggregateFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena),
  sorts_(arena),
  arguments_(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.AggregateFunction)
}
AggregateFunction::AggregateFunction(const AggregateFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_),
      sorts_(from.sorts_),
      arguments_(from.arguments_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    output_type_ = new ::substrait::proto::Type(*from.output_type_);
  } else {
    output_type_ = nullptr;
  }
  ::memcpy(&function_reference_, &from.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&invocation_) -
    reinterpret_cast<char*>(&function_reference_)) + sizeof(invocation_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.AggregateFunction)
}

void AggregateFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  ::memset(&output_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invocation_) -
      reinterpret_cast<char*>(&output_type_)) + sizeof(invocation_));
}

AggregateFunction::~AggregateFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.AggregateFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_type_;
}

void AggregateFunction::ArenaDtor(void* object) {
  AggregateFunction* _this = reinterpret_cast< AggregateFunction* >(object);
  (void)_this;
}
void AggregateFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregateFunction& AggregateFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void AggregateFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.AggregateFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  sorts_.Clear();
  arguments_.Clear();
  options_.Clear();
  if (GetArena() == nullptr && output_type_ != nullptr) {
    delete output_type_;
  }
  output_type_ = nullptr;
  ::memset(&function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invocation_) -
      reinterpret_cast<char*>(&function_reference_)) + sizeof(invocation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Expression args = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregationPhase phase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::substrait::proto::AggregationPhase>(val));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type output_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invocation(static_cast<::substrait::proto::AggregateFunction_AggregationInvocation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionArgument arguments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.FunctionOption options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.AggregateFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // repeated .substrait.proto.SortField sorts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .substrait.proto.AggregationPhase phase = 4;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_phase(), target);
  }

  // .substrait.proto.Type output_type = 5;
  if (this->has_output_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::output_type(this), target, stream);
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 6;
  if (this->invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_invocation(), target);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arguments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_arguments(i), target, stream);
  }

  // repeated .substrait.proto.FunctionOption options = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.AggregateFunction)
  return target;
}

size_t AggregateFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.AggregateFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionArgument arguments = 7;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.FunctionOption options = 8;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.proto.Type output_type = 5;
  if (this->has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_type_);
  }

  // uint32 function_reference = 1;
  if (this->function_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_reference());
  }

  // .substrait.proto.AggregationPhase phase = 4;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 6;
  if (this->invocation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_invocation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.AggregateFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.AggregateFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.AggregateFunction)
    MergeFrom(*source);
  }
}

void AggregateFunction::MergeFrom(const AggregateFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.AggregateFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  sorts_.MergeFrom(from.sorts_);
  arguments_.MergeFrom(from.arguments_);
  options_.MergeFrom(from.options_);
  if (from.has_output_type()) {
    _internal_mutable_output_type()->::substrait::proto::Type::MergeFrom(from._internal_output_type());
  }
  if (from.function_reference() != 0) {
    _internal_set_function_reference(from._internal_function_reference());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from.invocation() != 0) {
    _internal_set_invocation(from._internal_invocation());
  }
}

void AggregateFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.AggregateFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateFunction::CopyFrom(const AggregateFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.AggregateFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateFunction::IsInitialized() const {
  return true;
}

void AggregateFunction::InternalSwap(AggregateFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  sorts_.InternalSwap(&other->sorts_);
  arguments_.InternalSwap(&other->arguments_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateFunction, invocation_)
      + sizeof(AggregateFunction::invocation_)
      - PROTOBUF_FIELD_OFFSET(AggregateFunction, output_type_)>(
          reinterpret_cast<char*>(&output_type_),
          reinterpret_cast<char*>(&other->output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceRel::InitAsDefaultInstance() {
}
class ReferenceRel::_Internal {
 public:
};

ReferenceRel::ReferenceRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ReferenceRel)
}
ReferenceRel::ReferenceRel(const ReferenceRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subtree_ordinal_ = from.subtree_ordinal_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ReferenceRel)
}

void ReferenceRel::SharedCtor() {
  subtree_ordinal_ = 0;
}

ReferenceRel::~ReferenceRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.ReferenceRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReferenceRel::ArenaDtor(void* object) {
  ReferenceRel* _this = reinterpret_cast< ReferenceRel* >(object);
  (void)_this;
}
void ReferenceRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceRel& ReferenceRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceRel_substrait_2fproto_2falgebra_2eproto.base);
  return *internal_default_instance();
}


void ReferenceRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ReferenceRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtree_ordinal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 subtree_ordinal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subtree_ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ReferenceRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 subtree_ordinal = 1;
  if (this->subtree_ordinal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_subtree_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ReferenceRel)
  return target;
}

size_t ReferenceRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ReferenceRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 subtree_ordinal = 1;
  if (this->subtree_ordinal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtree_ordinal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ReferenceRel)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ReferenceRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ReferenceRel)
    MergeFrom(*source);
  }
}

void ReferenceRel::MergeFrom(const ReferenceRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ReferenceRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subtree_ordinal() != 0) {
    _internal_set_subtree_ordinal(from._internal_subtree_ordinal());
  }
}

void ReferenceRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ReferenceRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceRel::CopyFrom(const ReferenceRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ReferenceRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceRel::IsInitialized() const {
  return true;
}

void ReferenceRel::InternalSwap(ReferenceRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(subtree_ordinal_, other->subtree_ordinal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceRel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon_Direct* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon_Direct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon_Direct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon_Emit* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon_Emit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon_Emit >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon_Hint_Stats* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon_Hint_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon_Hint_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon_Hint_RuntimeConstraint* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon_Hint_RuntimeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon_Hint_RuntimeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon_Hint* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon_Hint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon_Hint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelCommon* Arena::CreateMaybeMessage< ::substrait::proto::RelCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_NamedTable* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_NamedTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_NamedTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_VirtualTable* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_VirtualTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_VirtualTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_ExtensionTable* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_ExtensionTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_ExtensionTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel_LocalFiles* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel_LocalFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReadRel* Arena::CreateMaybeMessage< ::substrait::proto::ReadRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReadRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ProjectRel* Arena::CreateMaybeMessage< ::substrait::proto::ProjectRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ProjectRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::JoinRel* Arena::CreateMaybeMessage< ::substrait::proto::JoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::JoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::CrossRel* Arena::CreateMaybeMessage< ::substrait::proto::CrossRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::CrossRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::FetchRel* Arena::CreateMaybeMessage< ::substrait::proto::FetchRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::FetchRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::AggregateRel_Grouping* Arena::CreateMaybeMessage< ::substrait::proto::AggregateRel_Grouping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::AggregateRel_Grouping >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::AggregateRel_Measure* Arena::CreateMaybeMessage< ::substrait::proto::AggregateRel_Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::AggregateRel_Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::AggregateRel* Arena::CreateMaybeMessage< ::substrait::proto::AggregateRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::AggregateRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* Arena::CreateMaybeMessage< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ConsistentPartitionWindowRel* Arena::CreateMaybeMessage< ::substrait::proto::ConsistentPartitionWindowRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ConsistentPartitionWindowRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::SortRel* Arena::CreateMaybeMessage< ::substrait::proto::SortRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::SortRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::FilterRel* Arena::CreateMaybeMessage< ::substrait::proto::FilterRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::FilterRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::SetRel* Arena::CreateMaybeMessage< ::substrait::proto::SetRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::SetRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExtensionSingleRel* Arena::CreateMaybeMessage< ::substrait::proto::ExtensionSingleRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExtensionSingleRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExtensionLeafRel* Arena::CreateMaybeMessage< ::substrait::proto::ExtensionLeafRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExtensionLeafRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExtensionMultiRel* Arena::CreateMaybeMessage< ::substrait::proto::ExtensionMultiRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExtensionMultiRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_ScatterFields* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_ScatterFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_ScatterFields >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_SingleBucketExpression* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_SingleBucketExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_SingleBucketExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_MultiBucketExpression* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_MultiBucketExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_MultiBucketExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_Broadcast* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_Broadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_Broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_RoundRobin* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_RoundRobin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_RoundRobin >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel_ExchangeTarget* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel_ExchangeTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel_ExchangeTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExchangeRel* Arena::CreateMaybeMessage< ::substrait::proto::ExchangeRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExchangeRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExpandRel_ExpandField* Arena::CreateMaybeMessage< ::substrait::proto::ExpandRel_ExpandField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExpandRel_ExpandField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExpandRel_SwitchingField* Arena::CreateMaybeMessage< ::substrait::proto::ExpandRel_SwitchingField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExpandRel_SwitchingField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExpandRel* Arena::CreateMaybeMessage< ::substrait::proto::ExpandRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExpandRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::RelRoot* Arena::CreateMaybeMessage< ::substrait::proto::RelRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::RelRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Rel* Arena::CreateMaybeMessage< ::substrait::proto::Rel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Rel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::NamedObjectWrite* Arena::CreateMaybeMessage< ::substrait::proto::NamedObjectWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::NamedObjectWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExtensionObject* Arena::CreateMaybeMessage< ::substrait::proto::ExtensionObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExtensionObject >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::DdlRel* Arena::CreateMaybeMessage< ::substrait::proto::DdlRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::DdlRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::WriteRel* Arena::CreateMaybeMessage< ::substrait::proto::WriteRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::WriteRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ComparisonJoinKey_ComparisonType* Arena::CreateMaybeMessage< ::substrait::proto::ComparisonJoinKey_ComparisonType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ComparisonJoinKey_ComparisonType >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ComparisonJoinKey* Arena::CreateMaybeMessage< ::substrait::proto::ComparisonJoinKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ComparisonJoinKey >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::HashJoinRel* Arena::CreateMaybeMessage< ::substrait::proto::HashJoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::HashJoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::MergeJoinRel* Arena::CreateMaybeMessage< ::substrait::proto::MergeJoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::MergeJoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::NestedLoopJoinRel* Arena::CreateMaybeMessage< ::substrait::proto::NestedLoopJoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::NestedLoopJoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::FunctionArgument* Arena::CreateMaybeMessage< ::substrait::proto::FunctionArgument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::FunctionArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::FunctionOption* Arena::CreateMaybeMessage< ::substrait::proto::FunctionOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::FunctionOption >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Enum_Empty* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Enum_Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Enum_Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Enum* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Enum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Enum >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_VarChar* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_Decimal* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_Map_KeyValue* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_Map_KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_Map_KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_Map* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_IntervalYearToMonth* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_IntervalYearToMonth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_IntervalYearToMonth >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_IntervalDayToSecond* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_IntervalDayToSecond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_IntervalDayToSecond >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_Struct* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_List* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_List >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal_UserDefined* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal_UserDefined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal_UserDefined >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Literal* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Nested_Map_KeyValue* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Nested_Map_KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Nested_Map_KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Nested_Map* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Nested_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Nested_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Nested_Struct* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Nested_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Nested_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Nested_List* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Nested_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Nested_List >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Nested* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Nested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Nested >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_ScalarFunction* Arena::CreateMaybeMessage< ::substrait::proto::Expression_ScalarFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_ScalarFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Preceding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction_Bound_Preceding >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction_Bound_Following* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Following >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction_Bound_Following >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Unbounded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction_Bound_Unbounded >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction_Bound* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction_Bound >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_WindowFunction* Arena::CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_WindowFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_IfThen_IfClause* Arena::CreateMaybeMessage< ::substrait::proto::Expression_IfThen_IfClause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_IfThen_IfClause >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_IfThen* Arena::CreateMaybeMessage< ::substrait::proto::Expression_IfThen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_IfThen >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Cast* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Cast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Cast >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_SwitchExpression_IfValue* Arena::CreateMaybeMessage< ::substrait::proto::Expression_SwitchExpression_IfValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_SwitchExpression_IfValue >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_SwitchExpression* Arena::CreateMaybeMessage< ::substrait::proto::Expression_SwitchExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_SwitchExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_SingularOrList* Arena::CreateMaybeMessage< ::substrait::proto::Expression_SingularOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_SingularOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MultiOrList_Record* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MultiOrList_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MultiOrList_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MultiOrList* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MultiOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MultiOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Arena::CreateMaybeMessage< ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Arena::CreateMaybeMessage< ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_EmbeddedFunction* Arena::CreateMaybeMessage< ::substrait::proto::Expression_EmbeddedFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_EmbeddedFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_ReferenceSegment_MapKey* Arena::CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_ReferenceSegment_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_ReferenceSegment_StructField* Arena::CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_StructField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_ReferenceSegment_StructField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_ReferenceSegment_ListElement* Arena::CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_ReferenceSegment_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_ReferenceSegment* Arena::CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_ReferenceSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_Select* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_Select >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_StructSelect* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_StructSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_StructSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_StructItem* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_StructItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_StructItem >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_ListSelect* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_ListSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression_MapSelect* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression_MapSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_MaskExpression* Arena::CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_MaskExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_FieldReference_RootReference* Arena::CreateMaybeMessage< ::substrait::proto::Expression_FieldReference_RootReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_FieldReference_RootReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_FieldReference_OuterReference* Arena::CreateMaybeMessage< ::substrait::proto::Expression_FieldReference_OuterReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_FieldReference_OuterReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_FieldReference* Arena::CreateMaybeMessage< ::substrait::proto::Expression_FieldReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_FieldReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Subquery_Scalar* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Subquery_Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Subquery_Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Subquery_InPredicate* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Subquery_InPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Subquery_InPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Subquery_SetPredicate* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Subquery_SetPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Subquery_SetPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Subquery_SetComparison* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Subquery_SetComparison >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Subquery_SetComparison >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression_Subquery* Arena::CreateMaybeMessage< ::substrait::proto::Expression_Subquery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression_Subquery >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Expression* Arena::CreateMaybeMessage< ::substrait::proto::Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::SortField* Arena::CreateMaybeMessage< ::substrait::proto::SortField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::SortField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::AggregateFunction* Arena::CreateMaybeMessage< ::substrait::proto::AggregateFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::AggregateFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ReferenceRel* Arena::CreateMaybeMessage< ::substrait::proto::ReferenceRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ReferenceRel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
