// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/extended_expression.proto

#include "substrait/proto/extended_expression.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextended_5fexpression_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_substrait_2fproto_2fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto;
namespace substrait {
namespace proto {
class ExpressionReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpressionReference> _instance;
  const ::substrait::proto::Expression* expression_;
  const ::substrait::proto::AggregateFunction* measure_;
} _ExpressionReference_default_instance_;
class ExtendedExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtendedExpression> _instance;
} _ExtendedExpression_default_instance_;
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExpressionReference_default_instance_;
    new (ptr) ::substrait::proto::ExpressionReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExpressionReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto}, {
      &scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_ExtendedExpression_default_instance_;
    new (ptr) ::substrait::proto::ExtendedExpression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::ExtendedExpression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto}, {
      &scc_info_Version_substrait_2fproto_2fplan_2eproto.base,
      &scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto.base,
      &scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2fextended_5fexpression_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_substrait_2fproto_2fextended_5fexpression_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2fextended_5fexpression_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2fextended_5fexpression_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpressionReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpressionReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::ExpressionReferenceDefaultTypeInternal, expression_),
  offsetof(::substrait::proto::ExpressionReferenceDefaultTypeInternal, measure_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpressionReference, output_names_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExpressionReference, expr_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, version_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, extension_uris_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, referred_expr_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, base_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, advanced_extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::ExtendedExpression, expected_type_urls_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::ExpressionReference)},
  { 9, -1, sizeof(::substrait::proto::ExtendedExpression)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExpressionReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_ExtendedExpression_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2fextended_5fexpression_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)substrait/proto/extended_expression.pr"
  "oto\022\017substrait.proto\032\035substrait/proto/al"
  "gebra.proto\032+substrait/proto/extensions/"
  "extensions.proto\032\032substrait/proto/plan.p"
  "roto\032\032substrait/proto/type.proto\"\242\001\n\023Exp"
  "ressionReference\0221\n\nexpression\030\001 \001(\0132\033.s"
  "ubstrait.proto.ExpressionH\000\0225\n\007measure\030\002"
  " \001(\0132\".substrait.proto.AggregateFunction"
  "H\000\022\024\n\014output_names\030\003 \003(\tB\013\n\texpr_type\"\253\003"
  "\n\022ExtendedExpression\022)\n\007version\030\007 \001(\0132\030."
  "substrait.proto.Version\022F\n\016extension_uri"
  "s\030\001 \003(\0132..substrait.proto.extensions.Sim"
  "pleExtensionURI\022J\n\nextensions\030\002 \003(\01326.su"
  "bstrait.proto.extensions.SimpleExtension"
  "Declaration\022;\n\rreferred_expr\030\003 \003(\0132$.sub"
  "strait.proto.ExpressionReference\0221\n\013base"
  "_schema\030\004 \001(\0132\034.substrait.proto.NamedStr"
  "uct\022J\n\023advanced_extensions\030\005 \001(\0132-.subst"
  "rait.proto.extensions.AdvancedExtension\022"
  "\032\n\022expected_type_urls\030\006 \003(\tBW\n\022io.substr"
  "ait.protoP\001Z*github.com/substrait-io/sub"
  "strait-go/proto\252\002\022Substrait.Protobufb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_deps[4] = {
  &::descriptor_table_substrait_2fproto_2falgebra_2eproto,
  &::descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto,
  &::descriptor_table_substrait_2fproto_2fplan_2eproto,
  &::descriptor_table_substrait_2fproto_2ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_sccs[2] = {
  &scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto.base,
  &scc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2fextended_5fexpression_2eproto, "substrait/proto/extended_expression.proto", 884,
  &descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_once, descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_sccs, descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2fextended_5fexpression_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2fextended_5fexpression_2eproto, 2, file_level_enum_descriptors_substrait_2fproto_2fextended_5fexpression_2eproto, file_level_service_descriptors_substrait_2fproto_2fextended_5fexpression_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2fextended_5fexpression_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2fextended_5fexpression_2eproto)), true);
namespace substrait {
namespace proto {

// ===================================================================

void ExpressionReference::InitAsDefaultInstance() {
  ::substrait::proto::_ExpressionReference_default_instance_.expression_ = const_cast< ::substrait::proto::Expression*>(
      ::substrait::proto::Expression::internal_default_instance());
  ::substrait::proto::_ExpressionReference_default_instance_.measure_ = const_cast< ::substrait::proto::AggregateFunction*>(
      ::substrait::proto::AggregateFunction::internal_default_instance());
}
class ExpressionReference::_Internal {
 public:
  static const ::substrait::proto::Expression& expression(const ExpressionReference* msg);
  static const ::substrait::proto::AggregateFunction& measure(const ExpressionReference* msg);
};

const ::substrait::proto::Expression&
ExpressionReference::_Internal::expression(const ExpressionReference* msg) {
  return *msg->expr_type_.expression_;
}
const ::substrait::proto::AggregateFunction&
ExpressionReference::_Internal::measure(const ExpressionReference* msg) {
  return *msg->expr_type_.measure_;
}
void ExpressionReference::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expr_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression)->GetArena();
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    expr_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpressionReference.expression)
}
void ExpressionReference::clear_expression() {
  if (_internal_has_expression()) {
    if (GetArena() == nullptr) {
      delete expr_type_.expression_;
    }
    clear_has_expr_type();
  }
}
void ExpressionReference::set_allocated_measure(::substrait::proto::AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expr_type();
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure)->GetArena();
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    set_has_measure();
    expr_type_.measure_ = measure;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpressionReference.measure)
}
void ExpressionReference::clear_measure() {
  if (_internal_has_measure()) {
    if (GetArena() == nullptr) {
      delete expr_type_.measure_;
    }
    clear_has_expr_type();
  }
}
ExpressionReference::ExpressionReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExpressionReference)
}
ExpressionReference::ExpressionReference(const ExpressionReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_names_(from.output_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_expr_type();
  switch (from.expr_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kMeasure: {
      _internal_mutable_measure()->::substrait::proto::AggregateFunction::MergeFrom(from._internal_measure());
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExpressionReference)
}

void ExpressionReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto.base);
  clear_has_expr_type();
}

ExpressionReference::~ExpressionReference() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExpressionReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpressionReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_expr_type()) {
    clear_expr_type();
  }
}

void ExpressionReference::ArenaDtor(void* object) {
  ExpressionReference* _this = reinterpret_cast< ExpressionReference* >(object);
  (void)_this;
}
void ExpressionReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpressionReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpressionReference& ExpressionReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpressionReference_substrait_2fproto_2fextended_5fexpression_2eproto.base);
  return *internal_default_instance();
}


void ExpressionReference::clear_expr_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.ExpressionReference)
  switch (expr_type_case()) {
    case kExpression: {
      if (GetArena() == nullptr) {
        delete expr_type_.expression_;
      }
      break;
    }
    case kMeasure: {
      if (GetArena() == nullptr) {
        delete expr_type_.measure_;
      }
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_TYPE_NOT_SET;
}


void ExpressionReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExpressionReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_names_.Clear();
  clear_expr_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.AggregateFunction measure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ExpressionReference.output_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpressionReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExpressionReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Expression expression = 1;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  // .substrait.proto.AggregateFunction measure = 2;
  if (_internal_has_measure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::measure(this), target, stream);
  }

  // repeated string output_names = 3;
  for (int i = 0, n = this->_internal_output_names_size(); i < n; i++) {
    const auto& s = this->_internal_output_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ExpressionReference.output_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExpressionReference)
  return target;
}

size_t ExpressionReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExpressionReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string output_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_names_.size());
  for (int i = 0, n = output_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_names_.Get(i));
  }

  switch (expr_type_case()) {
    // .substrait.proto.Expression expression = 1;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_type_.expression_);
      break;
    }
    // .substrait.proto.AggregateFunction measure = 2;
    case kMeasure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_type_.measure_);
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpressionReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExpressionReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpressionReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpressionReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExpressionReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExpressionReference)
    MergeFrom(*source);
  }
}

void ExpressionReference::MergeFrom(const ExpressionReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExpressionReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_names_.MergeFrom(from.output_names_);
  switch (from.expr_type_case()) {
    case kExpression: {
      _internal_mutable_expression()->::substrait::proto::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case kMeasure: {
      _internal_mutable_measure()->::substrait::proto::AggregateFunction::MergeFrom(from._internal_measure());
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
}

void ExpressionReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExpressionReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionReference::CopyFrom(const ExpressionReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExpressionReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionReference::IsInitialized() const {
  return true;
}

void ExpressionReference::InternalSwap(ExpressionReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  output_names_.InternalSwap(&other->output_names_);
  swap(expr_type_, other->expr_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtendedExpression::InitAsDefaultInstance() {
  ::substrait::proto::_ExtendedExpression_default_instance_._instance.get_mutable()->version_ = const_cast< ::substrait::proto::Version*>(
      ::substrait::proto::Version::internal_default_instance());
  ::substrait::proto::_ExtendedExpression_default_instance_._instance.get_mutable()->base_schema_ = const_cast< ::substrait::proto::NamedStruct*>(
      ::substrait::proto::NamedStruct::internal_default_instance());
  ::substrait::proto::_ExtendedExpression_default_instance_._instance.get_mutable()->advanced_extensions_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class ExtendedExpression::_Internal {
 public:
  static const ::substrait::proto::Version& version(const ExtendedExpression* msg);
  static const ::substrait::proto::NamedStruct& base_schema(const ExtendedExpression* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extensions(const ExtendedExpression* msg);
};

const ::substrait::proto::Version&
ExtendedExpression::_Internal::version(const ExtendedExpression* msg) {
  return *msg->version_;
}
const ::substrait::proto::NamedStruct&
ExtendedExpression::_Internal::base_schema(const ExtendedExpression* msg) {
  return *msg->base_schema_;
}
const ::substrait::proto::extensions::AdvancedExtension&
ExtendedExpression::_Internal::advanced_extensions(const ExtendedExpression* msg) {
  return *msg->advanced_extensions_;
}
void ExtendedExpression::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void ExtendedExpression::clear_extension_uris() {
  extension_uris_.Clear();
}
void ExtendedExpression::clear_extensions() {
  extensions_.Clear();
}
void ExtendedExpression::clear_base_schema() {
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
}
void ExtendedExpression::clear_advanced_extensions() {
  if (GetArena() == nullptr && advanced_extensions_ != nullptr) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = nullptr;
}
ExtendedExpression::ExtendedExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extension_uris_(arena),
  extensions_(arena),
  referred_expr_(arena),
  expected_type_urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.ExtendedExpression)
}
ExtendedExpression::ExtendedExpression(const ExtendedExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extension_uris_(from.extension_uris_),
      extensions_(from.extensions_),
      referred_expr_(from.referred_expr_),
      expected_type_urls_(from.expected_type_urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_schema()) {
    base_schema_ = new ::substrait::proto::NamedStruct(*from.base_schema_);
  } else {
    base_schema_ = nullptr;
  }
  if (from._internal_has_advanced_extensions()) {
    advanced_extensions_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extensions_);
  } else {
    advanced_extensions_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::substrait::proto::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.ExtendedExpression)
}

void ExtendedExpression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto.base);
  ::memset(&base_schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&base_schema_)) + sizeof(version_));
}

ExtendedExpression::~ExtendedExpression() {
  // @@protoc_insertion_point(destructor:substrait.proto.ExtendedExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtendedExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_schema_;
  if (this != internal_default_instance()) delete advanced_extensions_;
  if (this != internal_default_instance()) delete version_;
}

void ExtendedExpression::ArenaDtor(void* object) {
  ExtendedExpression* _this = reinterpret_cast< ExtendedExpression* >(object);
  (void)_this;
}
void ExtendedExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtendedExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtendedExpression& ExtendedExpression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtendedExpression_substrait_2fproto_2fextended_5fexpression_2eproto.base);
  return *internal_default_instance();
}


void ExtendedExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.ExtendedExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_uris_.Clear();
  extensions_.Clear();
  referred_expr_.Clear();
  expected_type_urls_.Clear();
  if (GetArena() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
  if (GetArena() == nullptr && advanced_extensions_ != nullptr) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.ExpressionReference referred_expr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referred_expr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.NamedStruct base_schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string expected_type_urls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_type_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.ExtendedExpression.expected_type_urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Version version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendedExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.ExtendedExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_uris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_extension_uris(i), target, stream);
  }

  // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extensions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_extensions(i), target, stream);
  }

  // repeated .substrait.proto.ExpressionReference referred_expr = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_referred_expr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_referred_expr(i), target, stream);
  }

  // .substrait.proto.NamedStruct base_schema = 4;
  if (this->has_base_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::base_schema(this), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 5;
  if (this->has_advanced_extensions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::advanced_extensions(this), target, stream);
  }

  // repeated string expected_type_urls = 6;
  for (int i = 0, n = this->_internal_expected_type_urls_size(); i < n; i++) {
    const auto& s = this->_internal_expected_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.ExtendedExpression.expected_type_urls");
    target = stream->WriteString(6, s, target);
  }

  // .substrait.proto.Version version = 7;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.ExtendedExpression)
  return target;
}

size_t ExtendedExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.ExtendedExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
  total_size += 1UL * this->_internal_extension_uris_size();
  for (const auto& msg : this->extension_uris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.ExpressionReference referred_expr = 3;
  total_size += 1UL * this->_internal_referred_expr_size();
  for (const auto& msg : this->referred_expr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string expected_type_urls = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(expected_type_urls_.size());
  for (int i = 0, n = expected_type_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      expected_type_urls_.Get(i));
  }

  // .substrait.proto.NamedStruct base_schema = 4;
  if (this->has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_schema_);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 5;
  if (this->has_advanced_extensions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extensions_);
  }

  // .substrait.proto.Version version = 7;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendedExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.ExtendedExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendedExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendedExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.ExtendedExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.ExtendedExpression)
    MergeFrom(*source);
  }
}

void ExtendedExpression::MergeFrom(const ExtendedExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.ExtendedExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_uris_.MergeFrom(from.extension_uris_);
  extensions_.MergeFrom(from.extensions_);
  referred_expr_.MergeFrom(from.referred_expr_);
  expected_type_urls_.MergeFrom(from.expected_type_urls_);
  if (from.has_base_schema()) {
    _internal_mutable_base_schema()->::substrait::proto::NamedStruct::MergeFrom(from._internal_base_schema());
  }
  if (from.has_advanced_extensions()) {
    _internal_mutable_advanced_extensions()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extensions());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::substrait::proto::Version::MergeFrom(from._internal_version());
  }
}

void ExtendedExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.ExtendedExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedExpression::CopyFrom(const ExtendedExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.ExtendedExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedExpression::IsInitialized() const {
  return true;
}

void ExtendedExpression::InternalSwap(ExtendedExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extension_uris_.InternalSwap(&other->extension_uris_);
  extensions_.InternalSwap(&other->extensions_);
  referred_expr_.InternalSwap(&other->referred_expr_);
  expected_type_urls_.InternalSwap(&other->expected_type_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedExpression, version_)
      + sizeof(ExtendedExpression::version_)
      - PROTOBUF_FIELD_OFFSET(ExtendedExpression, base_schema_)>(
          reinterpret_cast<char*>(&base_schema_),
          reinterpret_cast<char*>(&other->base_schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::ExpressionReference* Arena::CreateMaybeMessage< ::substrait::proto::ExpressionReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExpressionReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::ExtendedExpression* Arena::CreateMaybeMessage< ::substrait::proto::ExtendedExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::ExtendedExpression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
