// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/plan.proto

#include "substrait/proto/plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanRel_substrait_2fproto_2fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_substrait_2fproto_2fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto;
namespace substrait {
namespace proto {
class PlanRelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanRel> _instance;
  const ::substrait::proto::Rel* rel_;
  const ::substrait::proto::RelRoot* root_;
} _PlanRel_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plan> _instance;
} _Plan_default_instance_;
class PlanVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanVersion> _instance;
} _PlanVersion_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_Plan_substrait_2fproto_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Plan_default_instance_;
    new (ptr) ::substrait::proto::Plan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Plan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Plan_substrait_2fproto_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Plan_substrait_2fproto_2fplan_2eproto}, {
      &scc_info_Version_substrait_2fproto_2fplan_2eproto.base,
      &scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_PlanRel_substrait_2fproto_2fplan_2eproto.base,
      &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_PlanRel_substrait_2fproto_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_PlanRel_default_instance_;
    new (ptr) ::substrait::proto::PlanRel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::PlanRel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanRel_substrait_2fproto_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlanRel_substrait_2fproto_2fplan_2eproto}, {
      &scc_info_AggregateFunction_substrait_2fproto_2falgebra_2eproto.base,
      &scc_info_RelRoot_substrait_2fproto_2falgebra_2eproto.base,}};

static void InitDefaultsscc_info_PlanVersion_substrait_2fproto_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_PlanVersion_default_instance_;
    new (ptr) ::substrait::proto::PlanVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::PlanVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanVersion_substrait_2fproto_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlanVersion_substrait_2fproto_2fplan_2eproto}, {
      &scc_info_Version_substrait_2fproto_2fplan_2eproto.base,}};

static void InitDefaultsscc_info_Version_substrait_2fproto_2fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Version_default_instance_;
    new (ptr) ::substrait::proto::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_substrait_2fproto_2fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_substrait_2fproto_2fplan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2fplan_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_substrait_2fproto_2fplan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2fplan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::PlanRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::PlanRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::PlanRelDefaultTypeInternal, rel_),
  offsetof(::substrait::proto::PlanRelDefaultTypeInternal, root_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::PlanRel, rel_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, version_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, extension_uris_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, relations_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, advanced_extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Plan, expected_type_urls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::PlanVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::PlanVersion, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, major_number_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, minor_number_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, patch_number_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, git_hash_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Version, producer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::PlanRel)},
  { 8, -1, sizeof(::substrait::proto::Plan)},
  { 19, -1, sizeof(::substrait::proto::PlanVersion)},
  { 25, -1, sizeof(::substrait::proto::Version)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_PlanRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Plan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_PlanVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Version_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032substrait/proto/plan.proto\022\017substrait."
  "proto\032\035substrait/proto/algebra.proto\032+su"
  "bstrait/proto/extensions/extensions.prot"
  "o\"d\n\007PlanRel\022#\n\003rel\030\001 \001(\0132\024.substrait.pr"
  "oto.RelH\000\022(\n\004root\030\002 \001(\0132\030.substrait.prot"
  "o.RelRootH\000B\n\n\010rel_type\"\332\002\n\004Plan\022)\n\007vers"
  "ion\030\006 \001(\0132\030.substrait.proto.Version\022F\n\016e"
  "xtension_uris\030\001 \003(\0132..substrait.proto.ex"
  "tensions.SimpleExtensionURI\022J\n\nextension"
  "s\030\002 \003(\01326.substrait.proto.extensions.Sim"
  "pleExtensionDeclaration\022+\n\trelations\030\003 \003"
  "(\0132\030.substrait.proto.PlanRel\022J\n\023advanced"
  "_extensions\030\004 \001(\0132-.substrait.proto.exte"
  "nsions.AdvancedExtension\022\032\n\022expected_typ"
  "e_urls\030\005 \003(\t\"8\n\013PlanVersion\022)\n\007version\030\006"
  " \001(\0132\030.substrait.proto.Version\"o\n\007Versio"
  "n\022\024\n\014major_number\030\001 \001(\r\022\024\n\014minor_number\030"
  "\002 \001(\r\022\024\n\014patch_number\030\003 \001(\r\022\020\n\010git_hash\030"
  "\004 \001(\t\022\020\n\010producer\030\005 \001(\tBW\n\022io.substrait."
  "protoP\001Z*github.com/substrait-io/substra"
  "it-go/proto\252\002\022Substrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2fplan_2eproto_deps[2] = {
  &::descriptor_table_substrait_2fproto_2falgebra_2eproto,
  &::descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2fplan_2eproto_sccs[4] = {
  &scc_info_Plan_substrait_2fproto_2fplan_2eproto.base,
  &scc_info_PlanRel_substrait_2fproto_2fplan_2eproto.base,
  &scc_info_PlanVersion_substrait_2fproto_2fplan_2eproto.base,
  &scc_info_Version_substrait_2fproto_2fplan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2fplan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2fplan_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2fplan_2eproto, "substrait/proto/plan.proto", 840,
  &descriptor_table_substrait_2fproto_2fplan_2eproto_once, descriptor_table_substrait_2fproto_2fplan_2eproto_sccs, descriptor_table_substrait_2fproto_2fplan_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2fplan_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2fplan_2eproto, 4, file_level_enum_descriptors_substrait_2fproto_2fplan_2eproto, file_level_service_descriptors_substrait_2fproto_2fplan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2fplan_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2fplan_2eproto)), true);
namespace substrait {
namespace proto {

// ===================================================================

void PlanRel::InitAsDefaultInstance() {
  ::substrait::proto::_PlanRel_default_instance_.rel_ = const_cast< ::substrait::proto::Rel*>(
      ::substrait::proto::Rel::internal_default_instance());
  ::substrait::proto::_PlanRel_default_instance_.root_ = const_cast< ::substrait::proto::RelRoot*>(
      ::substrait::proto::RelRoot::internal_default_instance());
}
class PlanRel::_Internal {
 public:
  static const ::substrait::proto::Rel& rel(const PlanRel* msg);
  static const ::substrait::proto::RelRoot& root(const PlanRel* msg);
};

const ::substrait::proto::Rel&
PlanRel::_Internal::rel(const PlanRel* msg) {
  return *msg->rel_type_.rel_;
}
const ::substrait::proto::RelRoot&
PlanRel::_Internal::root(const PlanRel* msg) {
  return *msg->rel_type_.root_;
}
void PlanRel::set_allocated_rel(::substrait::proto::Rel* rel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (rel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rel)->GetArena();
    if (message_arena != submessage_arena) {
      rel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rel, submessage_arena);
    }
    set_has_rel();
    rel_type_.rel_ = rel;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.PlanRel.rel)
}
void PlanRel::clear_rel() {
  if (_internal_has_rel()) {
    if (GetArena() == nullptr) {
      delete rel_type_.rel_;
    }
    clear_has_rel_type();
  }
}
void PlanRel::set_allocated_root(::substrait::proto::RelRoot* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rel_type();
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root)->GetArena();
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    rel_type_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.PlanRel.root)
}
void PlanRel::clear_root() {
  if (_internal_has_root()) {
    if (GetArena() == nullptr) {
      delete rel_type_.root_;
    }
    clear_has_rel_type();
  }
}
PlanRel::PlanRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.PlanRel)
}
PlanRel::PlanRel(const PlanRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRel: {
      _internal_mutable_rel()->::substrait::proto::Rel::MergeFrom(from._internal_rel());
      break;
    }
    case kRoot: {
      _internal_mutable_root()->::substrait::proto::RelRoot::MergeFrom(from._internal_root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.PlanRel)
}

void PlanRel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanRel_substrait_2fproto_2fplan_2eproto.base);
  clear_has_rel_type();
}

PlanRel::~PlanRel() {
  // @@protoc_insertion_point(destructor:substrait.proto.PlanRel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanRel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void PlanRel::ArenaDtor(void* object) {
  PlanRel* _this = reinterpret_cast< PlanRel* >(object);
  (void)_this;
}
void PlanRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanRel& PlanRel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanRel_substrait_2fproto_2fplan_2eproto.base);
  return *internal_default_instance();
}


void PlanRel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.PlanRel)
  switch (rel_type_case()) {
    case kRel: {
      if (GetArena() == nullptr) {
        delete rel_type_.rel_;
      }
      break;
    }
    case kRoot: {
      if (GetArena() == nullptr) {
        delete rel_type_.root_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}


void PlanRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.PlanRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Rel rel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.RelRoot root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanRel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.PlanRel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Rel rel = 1;
  if (_internal_has_rel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rel(this), target, stream);
  }

  // .substrait.proto.RelRoot root = 2;
  if (_internal_has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.PlanRel)
  return target;
}

size_t PlanRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.PlanRel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.proto.Rel rel = 1;
    case kRel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.rel_);
      break;
    }
    // .substrait.proto.RelRoot root = 2;
    case kRoot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.root_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanRel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.PlanRel)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanRel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanRel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.PlanRel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.PlanRel)
    MergeFrom(*source);
  }
}

void PlanRel::MergeFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.PlanRel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRel: {
      _internal_mutable_rel()->::substrait::proto::Rel::MergeFrom(from._internal_rel());
      break;
    }
    case kRoot: {
      _internal_mutable_root()->::substrait::proto::RelRoot::MergeFrom(from._internal_root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
}

void PlanRel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanRel::CopyFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanRel::IsInitialized() const {
  return true;
}

void PlanRel::InternalSwap(PlanRel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rel_type_, other->rel_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanRel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
  ::substrait::proto::_Plan_default_instance_._instance.get_mutable()->version_ = const_cast< ::substrait::proto::Version*>(
      ::substrait::proto::Version::internal_default_instance());
  ::substrait::proto::_Plan_default_instance_._instance.get_mutable()->advanced_extensions_ = const_cast< ::substrait::proto::extensions::AdvancedExtension*>(
      ::substrait::proto::extensions::AdvancedExtension::internal_default_instance());
}
class Plan::_Internal {
 public:
  static const ::substrait::proto::Version& version(const Plan* msg);
  static const ::substrait::proto::extensions::AdvancedExtension& advanced_extensions(const Plan* msg);
};

const ::substrait::proto::Version&
Plan::_Internal::version(const Plan* msg) {
  return *msg->version_;
}
const ::substrait::proto::extensions::AdvancedExtension&
Plan::_Internal::advanced_extensions(const Plan* msg) {
  return *msg->advanced_extensions_;
}
void Plan::clear_extension_uris() {
  extension_uris_.Clear();
}
void Plan::clear_extensions() {
  extensions_.Clear();
}
void Plan::clear_advanced_extensions() {
  if (GetArena() == nullptr && advanced_extensions_ != nullptr) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = nullptr;
}
Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extension_uris_(arena),
  extensions_(arena),
  relations_(arena),
  expected_type_urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extension_uris_(from.extension_uris_),
      extensions_(from.extensions_),
      relations_(from.relations_),
      expected_type_urls_(from.expected_type_urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extensions()) {
    advanced_extensions_ = new ::substrait::proto::extensions::AdvancedExtension(*from.advanced_extensions_);
  } else {
    advanced_extensions_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::substrait::proto::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Plan)
}

void Plan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plan_substrait_2fproto_2fplan_2eproto.base);
  ::memset(&advanced_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&advanced_extensions_)) + sizeof(version_));
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:substrait.proto.Plan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete advanced_extensions_;
  if (this != internal_default_instance()) delete version_;
}

void Plan::ArenaDtor(void* object) {
  Plan* _this = reinterpret_cast< Plan* >(object);
  (void)_this;
}
void Plan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plan& Plan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plan_substrait_2fproto_2fplan_2eproto.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_uris_.Clear();
  extensions_.Clear();
  relations_.Clear();
  expected_type_urls_.Clear();
  if (GetArena() == nullptr && advanced_extensions_ != nullptr) {
    delete advanced_extensions_;
  }
  advanced_extensions_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.PlanRel relations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string expected_type_urls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_type_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Plan.expected_type_urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Version version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_uris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_extension_uris(i), target, stream);
  }

  // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extensions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_extensions(i), target, stream);
  }

  // repeated .substrait.proto.PlanRel relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_relations(i), target, stream);
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 4;
  if (this->has_advanced_extensions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::advanced_extensions(this), target, stream);
  }

  // repeated string expected_type_urls = 5;
  for (int i = 0, n = this->_internal_expected_type_urls_size(); i < n; i++) {
    const auto& s = this->_internal_expected_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Plan.expected_type_urls");
    target = stream->WriteString(5, s, target);
  }

  // .substrait.proto.Version version = 6;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Plan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.extensions.SimpleExtensionURI extension_uris = 1;
  total_size += 1UL * this->_internal_extension_uris_size();
  for (const auto& msg : this->extension_uris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.extensions.SimpleExtensionDeclaration extensions = 2;
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.proto.PlanRel relations = 3;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string expected_type_urls = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(expected_type_urls_.size());
  for (int i = 0, n = expected_type_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      expected_type_urls_.Get(i));
  }

  // .substrait.proto.extensions.AdvancedExtension advanced_extensions = 4;
  if (this->has_advanced_extensions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extensions_);
  }

  // .substrait.proto.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Plan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_uris_.MergeFrom(from.extension_uris_);
  extensions_.MergeFrom(from.extensions_);
  relations_.MergeFrom(from.relations_);
  expected_type_urls_.MergeFrom(from.expected_type_urls_);
  if (from.has_advanced_extensions()) {
    _internal_mutable_advanced_extensions()->::substrait::proto::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extensions());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::substrait::proto::Version::MergeFrom(from._internal_version());
  }
}

void Plan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extension_uris_.InternalSwap(&other->extension_uris_);
  extensions_.InternalSwap(&other->extensions_);
  relations_.InternalSwap(&other->relations_);
  expected_type_urls_.InternalSwap(&other->expected_type_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, version_)
      + sizeof(Plan::version_)
      - PROTOBUF_FIELD_OFFSET(Plan, advanced_extensions_)>(
          reinterpret_cast<char*>(&advanced_extensions_),
          reinterpret_cast<char*>(&other->advanced_extensions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanVersion::InitAsDefaultInstance() {
  ::substrait::proto::_PlanVersion_default_instance_._instance.get_mutable()->version_ = const_cast< ::substrait::proto::Version*>(
      ::substrait::proto::Version::internal_default_instance());
}
class PlanVersion::_Internal {
 public:
  static const ::substrait::proto::Version& version(const PlanVersion* msg);
};

const ::substrait::proto::Version&
PlanVersion::_Internal::version(const PlanVersion* msg) {
  return *msg->version_;
}
PlanVersion::PlanVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.PlanVersion)
}
PlanVersion::PlanVersion(const PlanVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::substrait::proto::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.PlanVersion)
}

void PlanVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanVersion_substrait_2fproto_2fplan_2eproto.base);
  version_ = nullptr;
}

PlanVersion::~PlanVersion() {
  // @@protoc_insertion_point(destructor:substrait.proto.PlanVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete version_;
}

void PlanVersion::ArenaDtor(void* object) {
  PlanVersion* _this = reinterpret_cast< PlanVersion* >(object);
  (void)_this;
}
void PlanVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanVersion& PlanVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanVersion_substrait_2fproto_2fplan_2eproto.base);
  return *internal_default_instance();
}


void PlanVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.PlanVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Version version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.PlanVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Version version = 6;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.PlanVersion)
  return target;
}

size_t PlanVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.PlanVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.PlanVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.PlanVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.PlanVersion)
    MergeFrom(*source);
  }
}

void PlanVersion::MergeFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.PlanVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    _internal_mutable_version()->::substrait::proto::Version::MergeFrom(from._internal_version());
  }
}

void PlanVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanVersion::CopyFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanVersion::IsInitialized() const {
  return true;
}

void PlanVersion::InternalSwap(PlanVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_git_hash().empty()) {
    git_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_git_hash(),
      GetArena());
  }
  producer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_producer().empty()) {
    producer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_producer(),
      GetArena());
  }
  ::memcpy(&major_number_, &from.major_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_number_) -
    reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_substrait_2fproto_2fplan_2eproto.base);
  git_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:substrait.proto.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  git_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_substrait_2fproto_2fplan_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  git_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  producer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 major_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 patch_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Version.git_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string producer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_producer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Version.producer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major_number(), target);
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor_number(), target);
  }

  // uint32 patch_number = 3;
  if (this->patch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch_number(), target);
  }

  // string git_hash = 4;
  if (this->git_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_hash().data(), static_cast<int>(this->_internal_git_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Version.git_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_git_hash(), target);
  }

  // string producer = 5;
  if (this->producer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producer().data(), static_cast<int>(this->_internal_producer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Version.producer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_producer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string git_hash = 4;
  if (this->git_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_hash());
  }

  // string producer = 5;
  if (this->producer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producer());
  }

  // uint32 major_number = 1;
  if (this->major_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major_number());
  }

  // uint32 minor_number = 2;
  if (this->minor_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor_number());
  }

  // uint32 patch_number = 3;
  if (this->patch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patch_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.git_hash().size() > 0) {
    _internal_set_git_hash(from._internal_git_hash());
  }
  if (from.producer().size() > 0) {
    _internal_set_producer(from._internal_producer());
  }
  if (from.major_number() != 0) {
    _internal_set_major_number(from._internal_major_number());
  }
  if (from.minor_number() != 0) {
    _internal_set_minor_number(from._internal_minor_number());
  }
  if (from.patch_number() != 0) {
    _internal_set_patch_number(from._internal_patch_number());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  git_hash_.Swap(&other->git_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  producer_.Swap(&other->producer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, patch_number_)
      + sizeof(Version::patch_number_)
      - PROTOBUF_FIELD_OFFSET(Version, major_number_)>(
          reinterpret_cast<char*>(&major_number_),
          reinterpret_cast<char*>(&other->major_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::PlanRel* Arena::CreateMaybeMessage< ::substrait::proto::PlanRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::PlanRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Plan* Arena::CreateMaybeMessage< ::substrait::proto::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::PlanVersion* Arena::CreateMaybeMessage< ::substrait::proto::PlanVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::PlanVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Version* Arena::CreateMaybeMessage< ::substrait::proto::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Version >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
