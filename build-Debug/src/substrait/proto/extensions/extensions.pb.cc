// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/extensions/extensions.proto

#include "substrait/proto/extensions/extensions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fextensions_2fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto;
namespace substrait {
namespace proto {
namespace extensions {
class SimpleExtensionURIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleExtensionURI> _instance;
} _SimpleExtensionURI_default_instance_;
class SimpleExtensionDeclaration_ExtensionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleExtensionDeclaration_ExtensionType> _instance;
} _SimpleExtensionDeclaration_ExtensionType_default_instance_;
class SimpleExtensionDeclaration_ExtensionTypeVariationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleExtensionDeclaration_ExtensionTypeVariation> _instance;
} _SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_;
class SimpleExtensionDeclaration_ExtensionFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleExtensionDeclaration_ExtensionFunction> _instance;
} _SimpleExtensionDeclaration_ExtensionFunction_default_instance_;
class SimpleExtensionDeclarationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleExtensionDeclaration> _instance;
  const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType* extension_type_;
  const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* extension_type_variation_;
  const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction* extension_function_;
} _SimpleExtensionDeclaration_default_instance_;
class AdvancedExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvancedExtension> _instance;
} _AdvancedExtension_default_instance_;
}  // namespace extensions
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_AdvancedExtension_default_instance_;
    new (ptr) ::substrait::proto::extensions::AdvancedExtension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::AdvancedExtension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_SimpleExtensionDeclaration_default_instance_;
    new (ptr) ::substrait::proto::extensions::SimpleExtensionDeclaration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::SimpleExtensionDeclaration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto}, {
      &scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
      &scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto.base,}};

static void InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionFunction_default_instance_;
    new (ptr) ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto}, {}};

static void InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionType_default_instance_;
    new (ptr) ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto}, {}};

static void InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_;
    new (ptr) ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto}, {}};

static void InitDefaultsscc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::extensions::_SimpleExtensionURI_default_instance_;
    new (ptr) ::substrait::proto::extensions::SimpleExtensionURI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::extensions::SimpleExtensionURI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2fextensions_2fextensions_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_substrait_2fproto_2fextensions_2fextensions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2fextensions_2fextensions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2fextensions_2fextensions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionURI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionURI, extension_uri_anchor_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionURI, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType, extension_uri_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType, type_anchor_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation, extension_uri_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation, type_variation_anchor_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction, extension_uri_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction, function_anchor_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::extensions::SimpleExtensionDeclarationDefaultTypeInternal, extension_type_),
  offsetof(::substrait::proto::extensions::SimpleExtensionDeclarationDefaultTypeInternal, extension_type_variation_),
  offsetof(::substrait::proto::extensions::SimpleExtensionDeclarationDefaultTypeInternal, extension_function_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::SimpleExtensionDeclaration, mapping_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::AdvancedExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::AdvancedExtension, optimization_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::extensions::AdvancedExtension, enhancement_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::extensions::SimpleExtensionURI)},
  { 7, -1, sizeof(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType)},
  { 15, -1, sizeof(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation)},
  { 23, -1, sizeof(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction)},
  { 31, -1, sizeof(::substrait::proto::extensions::SimpleExtensionDeclaration)},
  { 40, -1, sizeof(::substrait::proto::extensions::AdvancedExtension)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_SimpleExtensionURI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_SimpleExtensionDeclaration_ExtensionFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_SimpleExtensionDeclaration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::extensions::_AdvancedExtension_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2fextensions_2fextensions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+substrait/proto/extensions/extensions."
  "proto\022\032substrait.proto.extensions\032\031googl"
  "e/protobuf/any.proto\"\?\n\022SimpleExtensionU"
  "RI\022\034\n\024extension_uri_anchor\030\001 \001(\r\022\013\n\003uri\030"
  "\002 \001(\t\"\201\005\n\032SimpleExtensionDeclaration\022^\n\016"
  "extension_type\030\001 \001(\0132D.substrait.proto.e"
  "xtensions.SimpleExtensionDeclaration.Ext"
  "ensionTypeH\000\022q\n\030extension_type_variation"
  "\030\002 \001(\0132M.substrait.proto.extensions.Simp"
  "leExtensionDeclaration.ExtensionTypeVari"
  "ationH\000\022f\n\022extension_function\030\003 \001(\0132H.su"
  "bstrait.proto.extensions.SimpleExtension"
  "Declaration.ExtensionFunctionH\000\032S\n\rExten"
  "sionType\022\037\n\027extension_uri_reference\030\001 \001("
  "\r\022\023\n\013type_anchor\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\032f\n\026"
  "ExtensionTypeVariation\022\037\n\027extension_uri_"
  "reference\030\001 \001(\r\022\035\n\025type_variation_anchor"
  "\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\032[\n\021ExtensionFunctio"
  "n\022\037\n\027extension_uri_reference\030\001 \001(\r\022\027\n\017fu"
  "nction_anchor\030\002 \001(\r\022\014\n\004name\030\003 \001(\tB\016\n\014map"
  "ping_type\"j\n\021AdvancedExtension\022*\n\014optimi"
  "zation\030\001 \001(\0132\024.google.protobuf.Any\022)\n\013en"
  "hancement\030\002 \001(\0132\024.google.protobuf.AnyBb\n"
  "\022io.substrait.protoP\001Z5github.com/substr"
  "ait-io/substrait-go/proto/extensions\252\002\022S"
  "ubstrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_sccs[6] = {
  &scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
  &scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
  &scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
  &scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
  &scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
  &scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2fextensions_2fextensions_2eproto, "substrait/proto/extensions/extensions.proto", 1025,
  &descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_once, descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_sccs, descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2fextensions_2fextensions_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2fextensions_2fextensions_2eproto, 6, file_level_enum_descriptors_substrait_2fproto_2fextensions_2fextensions_2eproto, file_level_service_descriptors_substrait_2fproto_2fextensions_2fextensions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2fextensions_2fextensions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2fextensions_2fextensions_2eproto)), true);
namespace substrait {
namespace proto {
namespace extensions {

// ===================================================================

void SimpleExtensionURI::InitAsDefaultInstance() {
}
class SimpleExtensionURI::_Internal {
 public:
};

SimpleExtensionURI::SimpleExtensionURI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.SimpleExtensionURI)
}
SimpleExtensionURI::SimpleExtensionURI(const SimpleExtensionURI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uri(),
      GetArena());
  }
  extension_uri_anchor_ = from.extension_uri_anchor_;
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.SimpleExtensionURI)
}

void SimpleExtensionURI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_uri_anchor_ = 0u;
}

SimpleExtensionURI::~SimpleExtensionURI() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.SimpleExtensionURI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleExtensionURI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimpleExtensionURI::ArenaDtor(void* object) {
  SimpleExtensionURI* _this = reinterpret_cast< SimpleExtensionURI* >(object);
  (void)_this;
}
void SimpleExtensionURI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleExtensionURI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleExtensionURI& SimpleExtensionURI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleExtensionURI_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void SimpleExtensionURI::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.SimpleExtensionURI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extension_uri_anchor_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleExtensionURI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 extension_uri_anchor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extension_uri_anchor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.extensions.SimpleExtensionURI.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleExtensionURI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.SimpleExtensionURI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extension_uri_anchor = 1;
  if (this->extension_uri_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extension_uri_anchor(), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.extensions.SimpleExtensionURI.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.SimpleExtensionURI)
  return target;
}

size_t SimpleExtensionURI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.SimpleExtensionURI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // uint32 extension_uri_anchor = 1;
  if (this->extension_uri_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extension_uri_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleExtensionURI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.SimpleExtensionURI)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleExtensionURI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleExtensionURI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.SimpleExtensionURI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.SimpleExtensionURI)
    MergeFrom(*source);
  }
}

void SimpleExtensionURI::MergeFrom(const SimpleExtensionURI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.SimpleExtensionURI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.extension_uri_anchor() != 0) {
    _internal_set_extension_uri_anchor(from._internal_extension_uri_anchor());
  }
}

void SimpleExtensionURI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.SimpleExtensionURI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleExtensionURI::CopyFrom(const SimpleExtensionURI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.SimpleExtensionURI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExtensionURI::IsInitialized() const {
  return true;
}

void SimpleExtensionURI::InternalSwap(SimpleExtensionURI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(extension_uri_anchor_, other->extension_uri_anchor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleExtensionURI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleExtensionDeclaration_ExtensionType::InitAsDefaultInstance() {
}
class SimpleExtensionDeclaration_ExtensionType::_Internal {
 public:
};

SimpleExtensionDeclaration_ExtensionType::SimpleExtensionDeclaration_ExtensionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
}
SimpleExtensionDeclaration_ExtensionType::SimpleExtensionDeclaration_ExtensionType(const SimpleExtensionDeclaration_ExtensionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&extension_uri_reference_, &from.extension_uri_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_anchor_) -
    reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_anchor_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
}

void SimpleExtensionDeclaration_ExtensionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_anchor_));
}

SimpleExtensionDeclaration_ExtensionType::~SimpleExtensionDeclaration_ExtensionType() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleExtensionDeclaration_ExtensionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimpleExtensionDeclaration_ExtensionType::ArenaDtor(void* object) {
  SimpleExtensionDeclaration_ExtensionType* _this = reinterpret_cast< SimpleExtensionDeclaration_ExtensionType* >(object);
  (void)_this;
}
void SimpleExtensionDeclaration_ExtensionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleExtensionDeclaration_ExtensionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleExtensionDeclaration_ExtensionType& SimpleExtensionDeclaration_ExtensionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleExtensionDeclaration_ExtensionType_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void SimpleExtensionDeclaration_ExtensionType::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_anchor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleExtensionDeclaration_ExtensionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 extension_uri_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extension_uri_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_anchor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleExtensionDeclaration_ExtensionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extension_uri_reference(), target);
  }

  // uint32 type_anchor = 2;
  if (this->type_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_anchor(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  return target;
}

size_t SimpleExtensionDeclaration_ExtensionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extension_uri_reference());
  }

  // uint32 type_anchor = 2;
  if (this->type_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleExtensionDeclaration_ExtensionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleExtensionDeclaration_ExtensionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleExtensionDeclaration_ExtensionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
    MergeFrom(*source);
  }
}

void SimpleExtensionDeclaration_ExtensionType::MergeFrom(const SimpleExtensionDeclaration_ExtensionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.extension_uri_reference() != 0) {
    _internal_set_extension_uri_reference(from._internal_extension_uri_reference());
  }
  if (from.type_anchor() != 0) {
    _internal_set_type_anchor(from._internal_type_anchor());
  }
}

void SimpleExtensionDeclaration_ExtensionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleExtensionDeclaration_ExtensionType::CopyFrom(const SimpleExtensionDeclaration_ExtensionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExtensionDeclaration_ExtensionType::IsInitialized() const {
  return true;
}

void SimpleExtensionDeclaration_ExtensionType::InternalSwap(SimpleExtensionDeclaration_ExtensionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionType, type_anchor_)
      + sizeof(SimpleExtensionDeclaration_ExtensionType::type_anchor_)
      - PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionType, extension_uri_reference_)>(
          reinterpret_cast<char*>(&extension_uri_reference_),
          reinterpret_cast<char*>(&other->extension_uri_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleExtensionDeclaration_ExtensionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleExtensionDeclaration_ExtensionTypeVariation::InitAsDefaultInstance() {
}
class SimpleExtensionDeclaration_ExtensionTypeVariation::_Internal {
 public:
};

SimpleExtensionDeclaration_ExtensionTypeVariation::SimpleExtensionDeclaration_ExtensionTypeVariation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
}
SimpleExtensionDeclaration_ExtensionTypeVariation::SimpleExtensionDeclaration_ExtensionTypeVariation(const SimpleExtensionDeclaration_ExtensionTypeVariation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&extension_uri_reference_, &from.extension_uri_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_variation_anchor_) -
    reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_variation_anchor_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_variation_anchor_));
}

SimpleExtensionDeclaration_ExtensionTypeVariation::~SimpleExtensionDeclaration_ExtensionTypeVariation() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::ArenaDtor(void* object) {
  SimpleExtensionDeclaration_ExtensionTypeVariation* _this = reinterpret_cast< SimpleExtensionDeclaration_ExtensionTypeVariation* >(object);
  (void)_this;
}
void SimpleExtensionDeclaration_ExtensionTypeVariation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleExtensionDeclaration_ExtensionTypeVariation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleExtensionDeclaration_ExtensionTypeVariation& SimpleExtensionDeclaration_ExtensionTypeVariation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleExtensionDeclaration_ExtensionTypeVariation_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void SimpleExtensionDeclaration_ExtensionTypeVariation::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_variation_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(type_variation_anchor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleExtensionDeclaration_ExtensionTypeVariation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 extension_uri_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extension_uri_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_anchor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleExtensionDeclaration_ExtensionTypeVariation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extension_uri_reference(), target);
  }

  // uint32 type_variation_anchor = 2;
  if (this->type_variation_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_anchor(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  return target;
}

size_t SimpleExtensionDeclaration_ExtensionTypeVariation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extension_uri_reference());
  }

  // uint32 type_variation_anchor = 2;
  if (this->type_variation_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleExtensionDeclaration_ExtensionTypeVariation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleExtensionDeclaration_ExtensionTypeVariation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
    MergeFrom(*source);
  }
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::MergeFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.extension_uri_reference() != 0) {
    _internal_set_extension_uri_reference(from._internal_extension_uri_reference());
  }
  if (from.type_variation_anchor() != 0) {
    _internal_set_type_variation_anchor(from._internal_type_variation_anchor());
  }
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::CopyFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExtensionDeclaration_ExtensionTypeVariation::IsInitialized() const {
  return true;
}

void SimpleExtensionDeclaration_ExtensionTypeVariation::InternalSwap(SimpleExtensionDeclaration_ExtensionTypeVariation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionTypeVariation, type_variation_anchor_)
      + sizeof(SimpleExtensionDeclaration_ExtensionTypeVariation::type_variation_anchor_)
      - PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionTypeVariation, extension_uri_reference_)>(
          reinterpret_cast<char*>(&extension_uri_reference_),
          reinterpret_cast<char*>(&other->extension_uri_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleExtensionDeclaration_ExtensionTypeVariation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleExtensionDeclaration_ExtensionFunction::InitAsDefaultInstance() {
}
class SimpleExtensionDeclaration_ExtensionFunction::_Internal {
 public:
};

SimpleExtensionDeclaration_ExtensionFunction::SimpleExtensionDeclaration_ExtensionFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
}
SimpleExtensionDeclaration_ExtensionFunction::SimpleExtensionDeclaration_ExtensionFunction(const SimpleExtensionDeclaration_ExtensionFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&extension_uri_reference_, &from.extension_uri_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&function_anchor_) -
    reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(function_anchor_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
}

void SimpleExtensionDeclaration_ExtensionFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(function_anchor_));
}

SimpleExtensionDeclaration_ExtensionFunction::~SimpleExtensionDeclaration_ExtensionFunction() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleExtensionDeclaration_ExtensionFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimpleExtensionDeclaration_ExtensionFunction::ArenaDtor(void* object) {
  SimpleExtensionDeclaration_ExtensionFunction* _this = reinterpret_cast< SimpleExtensionDeclaration_ExtensionFunction* >(object);
  (void)_this;
}
void SimpleExtensionDeclaration_ExtensionFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleExtensionDeclaration_ExtensionFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleExtensionDeclaration_ExtensionFunction& SimpleExtensionDeclaration_ExtensionFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleExtensionDeclaration_ExtensionFunction_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void SimpleExtensionDeclaration_ExtensionFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&extension_uri_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_anchor_) -
      reinterpret_cast<char*>(&extension_uri_reference_)) + sizeof(function_anchor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleExtensionDeclaration_ExtensionFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 extension_uri_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extension_uri_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 function_anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          function_anchor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleExtensionDeclaration_ExtensionFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extension_uri_reference(), target);
  }

  // uint32 function_anchor = 2;
  if (this->function_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_function_anchor(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  return target;
}

size_t SimpleExtensionDeclaration_ExtensionFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 extension_uri_reference = 1;
  if (this->extension_uri_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extension_uri_reference());
  }

  // uint32 function_anchor = 2;
  if (this->function_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleExtensionDeclaration_ExtensionFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleExtensionDeclaration_ExtensionFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleExtensionDeclaration_ExtensionFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
    MergeFrom(*source);
  }
}

void SimpleExtensionDeclaration_ExtensionFunction::MergeFrom(const SimpleExtensionDeclaration_ExtensionFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.extension_uri_reference() != 0) {
    _internal_set_extension_uri_reference(from._internal_extension_uri_reference());
  }
  if (from.function_anchor() != 0) {
    _internal_set_function_anchor(from._internal_function_anchor());
  }
}

void SimpleExtensionDeclaration_ExtensionFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleExtensionDeclaration_ExtensionFunction::CopyFrom(const SimpleExtensionDeclaration_ExtensionFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExtensionDeclaration_ExtensionFunction::IsInitialized() const {
  return true;
}

void SimpleExtensionDeclaration_ExtensionFunction::InternalSwap(SimpleExtensionDeclaration_ExtensionFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionFunction, function_anchor_)
      + sizeof(SimpleExtensionDeclaration_ExtensionFunction::function_anchor_)
      - PROTOBUF_FIELD_OFFSET(SimpleExtensionDeclaration_ExtensionFunction, extension_uri_reference_)>(
          reinterpret_cast<char*>(&extension_uri_reference_),
          reinterpret_cast<char*>(&other->extension_uri_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleExtensionDeclaration_ExtensionFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleExtensionDeclaration::InitAsDefaultInstance() {
  ::substrait::proto::extensions::_SimpleExtensionDeclaration_default_instance_.extension_type_ = const_cast< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType*>(
      ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType::internal_default_instance());
  ::substrait::proto::extensions::_SimpleExtensionDeclaration_default_instance_.extension_type_variation_ = const_cast< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation*>(
      ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation::internal_default_instance());
  ::substrait::proto::extensions::_SimpleExtensionDeclaration_default_instance_.extension_function_ = const_cast< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction*>(
      ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction::internal_default_instance());
}
class SimpleExtensionDeclaration::_Internal {
 public:
  static const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType& extension_type(const SimpleExtensionDeclaration* msg);
  static const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& extension_type_variation(const SimpleExtensionDeclaration* msg);
  static const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction& extension_function(const SimpleExtensionDeclaration* msg);
};

const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType&
SimpleExtensionDeclaration::_Internal::extension_type(const SimpleExtensionDeclaration* msg) {
  return *msg->mapping_type_.extension_type_;
}
const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation&
SimpleExtensionDeclaration::_Internal::extension_type_variation(const SimpleExtensionDeclaration* msg) {
  return *msg->mapping_type_.extension_type_variation_;
}
const ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction&
SimpleExtensionDeclaration::_Internal::extension_function(const SimpleExtensionDeclaration* msg) {
  return *msg->mapping_type_.extension_function_;
}
void SimpleExtensionDeclaration::set_allocated_extension_type(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType* extension_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mapping_type();
  if (extension_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_type);
    if (message_arena != submessage_arena) {
      extension_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_type, submessage_arena);
    }
    set_has_extension_type();
    mapping_type_.extension_type_ = extension_type;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.extensions.SimpleExtensionDeclaration.extension_type)
}
void SimpleExtensionDeclaration::set_allocated_extension_type_variation(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* extension_type_variation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mapping_type();
  if (extension_type_variation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_type_variation);
    if (message_arena != submessage_arena) {
      extension_type_variation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_type_variation, submessage_arena);
    }
    set_has_extension_type_variation();
    mapping_type_.extension_type_variation_ = extension_type_variation;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.extensions.SimpleExtensionDeclaration.extension_type_variation)
}
void SimpleExtensionDeclaration::set_allocated_extension_function(::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction* extension_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mapping_type();
  if (extension_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extension_function);
    if (message_arena != submessage_arena) {
      extension_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_function, submessage_arena);
    }
    set_has_extension_function();
    mapping_type_.extension_function_ = extension_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.extensions.SimpleExtensionDeclaration.extension_function)
}
SimpleExtensionDeclaration::SimpleExtensionDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.SimpleExtensionDeclaration)
}
SimpleExtensionDeclaration::SimpleExtensionDeclaration(const SimpleExtensionDeclaration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mapping_type();
  switch (from.mapping_type_case()) {
    case kExtensionType: {
      _internal_mutable_extension_type()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType::MergeFrom(from._internal_extension_type());
      break;
    }
    case kExtensionTypeVariation: {
      _internal_mutable_extension_type_variation()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation::MergeFrom(from._internal_extension_type_variation());
      break;
    }
    case kExtensionFunction: {
      _internal_mutable_extension_function()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction::MergeFrom(from._internal_extension_function());
      break;
    }
    case MAPPING_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.SimpleExtensionDeclaration)
}

void SimpleExtensionDeclaration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  clear_has_mapping_type();
}

SimpleExtensionDeclaration::~SimpleExtensionDeclaration() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.SimpleExtensionDeclaration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleExtensionDeclaration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_mapping_type()) {
    clear_mapping_type();
  }
}

void SimpleExtensionDeclaration::ArenaDtor(void* object) {
  SimpleExtensionDeclaration* _this = reinterpret_cast< SimpleExtensionDeclaration* >(object);
  (void)_this;
}
void SimpleExtensionDeclaration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleExtensionDeclaration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleExtensionDeclaration& SimpleExtensionDeclaration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleExtensionDeclaration_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void SimpleExtensionDeclaration::clear_mapping_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  switch (mapping_type_case()) {
    case kExtensionType: {
      if (GetArena() == nullptr) {
        delete mapping_type_.extension_type_;
      }
      break;
    }
    case kExtensionTypeVariation: {
      if (GetArena() == nullptr) {
        delete mapping_type_.extension_type_variation_;
      }
      break;
    }
    case kExtensionFunction: {
      if (GetArena() == nullptr) {
        delete mapping_type_.extension_function_;
      }
      break;
    }
    case MAPPING_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAPPING_TYPE_NOT_SET;
}


void SimpleExtensionDeclaration::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mapping_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleExtensionDeclaration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_type_variation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleExtensionDeclaration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
  if (_internal_has_extension_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::extension_type(this), target, stream);
  }

  // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
  if (_internal_has_extension_type_variation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extension_type_variation(this), target, stream);
  }

  // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
  if (_internal_has_extension_function()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extension_function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.SimpleExtensionDeclaration)
  return target;
}

size_t SimpleExtensionDeclaration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mapping_type_case()) {
    // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
    case kExtensionType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapping_type_.extension_type_);
      break;
    }
    // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
    case kExtensionTypeVariation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapping_type_.extension_type_variation_);
      break;
    }
    // .substrait.proto.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
    case kExtensionFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapping_type_.extension_function_);
      break;
    }
    case MAPPING_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleExtensionDeclaration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleExtensionDeclaration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleExtensionDeclaration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.SimpleExtensionDeclaration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.SimpleExtensionDeclaration)
    MergeFrom(*source);
  }
}

void SimpleExtensionDeclaration::MergeFrom(const SimpleExtensionDeclaration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mapping_type_case()) {
    case kExtensionType: {
      _internal_mutable_extension_type()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType::MergeFrom(from._internal_extension_type());
      break;
    }
    case kExtensionTypeVariation: {
      _internal_mutable_extension_type_variation()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation::MergeFrom(from._internal_extension_type_variation());
      break;
    }
    case kExtensionFunction: {
      _internal_mutable_extension_function()->::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction::MergeFrom(from._internal_extension_function());
      break;
    }
    case MAPPING_TYPE_NOT_SET: {
      break;
    }
  }
}

void SimpleExtensionDeclaration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleExtensionDeclaration::CopyFrom(const SimpleExtensionDeclaration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.SimpleExtensionDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExtensionDeclaration::IsInitialized() const {
  return true;
}

void SimpleExtensionDeclaration::InternalSwap(SimpleExtensionDeclaration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mapping_type_, other->mapping_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleExtensionDeclaration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvancedExtension::InitAsDefaultInstance() {
  ::substrait::proto::extensions::_AdvancedExtension_default_instance_._instance.get_mutable()->optimization_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::substrait::proto::extensions::_AdvancedExtension_default_instance_._instance.get_mutable()->enhancement_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class AdvancedExtension::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& optimization(const AdvancedExtension* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& enhancement(const AdvancedExtension* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AdvancedExtension::_Internal::optimization(const AdvancedExtension* msg) {
  return *msg->optimization_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AdvancedExtension::_Internal::enhancement(const AdvancedExtension* msg) {
  return *msg->enhancement_;
}
void AdvancedExtension::clear_optimization() {
  if (GetArena() == nullptr && optimization_ != nullptr) {
    delete optimization_;
  }
  optimization_ = nullptr;
}
void AdvancedExtension::clear_enhancement() {
  if (GetArena() == nullptr && enhancement_ != nullptr) {
    delete enhancement_;
  }
  enhancement_ = nullptr;
}
AdvancedExtension::AdvancedExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.extensions.AdvancedExtension)
}
AdvancedExtension::AdvancedExtension(const AdvancedExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optimization()) {
    optimization_ = new PROTOBUF_NAMESPACE_ID::Any(*from.optimization_);
  } else {
    optimization_ = nullptr;
  }
  if (from._internal_has_enhancement()) {
    enhancement_ = new PROTOBUF_NAMESPACE_ID::Any(*from.enhancement_);
  } else {
    enhancement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.extensions.AdvancedExtension)
}

void AdvancedExtension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  ::memset(&optimization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enhancement_) -
      reinterpret_cast<char*>(&optimization_)) + sizeof(enhancement_));
}

AdvancedExtension::~AdvancedExtension() {
  // @@protoc_insertion_point(destructor:substrait.proto.extensions.AdvancedExtension)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdvancedExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete optimization_;
  if (this != internal_default_instance()) delete enhancement_;
}

void AdvancedExtension::ArenaDtor(void* object) {
  AdvancedExtension* _this = reinterpret_cast< AdvancedExtension* >(object);
  (void)_this;
}
void AdvancedExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvancedExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvancedExtension& AdvancedExtension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvancedExtension_substrait_2fproto_2fextensions_2fextensions_2eproto.base);
  return *internal_default_instance();
}


void AdvancedExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.extensions.AdvancedExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && optimization_ != nullptr) {
    delete optimization_;
  }
  optimization_ = nullptr;
  if (GetArena() == nullptr && enhancement_ != nullptr) {
    delete enhancement_;
  }
  enhancement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvancedExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any optimization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any enhancement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvancedExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.extensions.AdvancedExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any optimization = 1;
  if (this->has_optimization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::optimization(this), target, stream);
  }

  // .google.protobuf.Any enhancement = 2;
  if (this->has_enhancement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::enhancement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.extensions.AdvancedExtension)
  return target;
}

size_t AdvancedExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.extensions.AdvancedExtension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any optimization = 1;
  if (this->has_optimization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_);
  }

  // .google.protobuf.Any enhancement = 2;
  if (this->has_enhancement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enhancement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvancedExtension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.extensions.AdvancedExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvancedExtension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvancedExtension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.extensions.AdvancedExtension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.extensions.AdvancedExtension)
    MergeFrom(*source);
  }
}

void AdvancedExtension::MergeFrom(const AdvancedExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.extensions.AdvancedExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_optimization()) {
    _internal_mutable_optimization()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_optimization());
  }
  if (from.has_enhancement()) {
    _internal_mutable_enhancement()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_enhancement());
  }
}

void AdvancedExtension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.extensions.AdvancedExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedExtension::CopyFrom(const AdvancedExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.extensions.AdvancedExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedExtension::IsInitialized() const {
  return true;
}

void AdvancedExtension::InternalSwap(AdvancedExtension* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdvancedExtension, enhancement_)
      + sizeof(AdvancedExtension::enhancement_)
      - PROTOBUF_FIELD_OFFSET(AdvancedExtension, optimization_)>(
          reinterpret_cast<char*>(&optimization_),
          reinterpret_cast<char*>(&other->optimization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvancedExtension::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::SimpleExtensionURI* Arena::CreateMaybeMessage< ::substrait::proto::extensions::SimpleExtensionURI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::SimpleExtensionURI >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType* Arena::CreateMaybeMessage< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionType >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* Arena::CreateMaybeMessage< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction* Arena::CreateMaybeMessage< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::SimpleExtensionDeclaration_ExtensionFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::SimpleExtensionDeclaration* Arena::CreateMaybeMessage< ::substrait::proto::extensions::SimpleExtensionDeclaration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::SimpleExtensionDeclaration >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::extensions::AdvancedExtension* Arena::CreateMaybeMessage< ::substrait::proto::extensions::AdvancedExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::extensions::AdvancedExtension >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
