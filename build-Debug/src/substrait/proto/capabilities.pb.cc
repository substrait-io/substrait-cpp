// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/capabilities.proto

#include "substrait/proto/capabilities.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2fcapabilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto;
namespace substrait {
namespace proto {
class Capabilities_SimpleExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capabilities_SimpleExtension> _instance;
} _Capabilities_SimpleExtension_default_instance_;
class CapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capabilities> _instance;
} _Capabilities_default_instance_;
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Capabilities_default_instance_;
    new (ptr) ::substrait::proto::Capabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Capabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto}, {
      &scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto.base,}};

static void InitDefaultsscc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Capabilities_SimpleExtension_default_instance_;
    new (ptr) ::substrait::proto::Capabilities_SimpleExtension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Capabilities_SimpleExtension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2fcapabilities_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_substrait_2fproto_2fcapabilities_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2fcapabilities_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2fcapabilities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities_SimpleExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities_SimpleExtension, uri_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities_SimpleExtension, function_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities_SimpleExtension, type_keys_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities_SimpleExtension, type_variation_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities, substrait_versions_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities, advanced_extension_type_urls_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Capabilities, simple_extensions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::Capabilities_SimpleExtension)},
  { 9, -1, sizeof(::substrait::proto::Capabilities)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Capabilities_SimpleExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Capabilities_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2fcapabilities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"substrait/proto/capabilities.proto\022\017su"
  "bstrait.proto\"\201\002\n\014Capabilities\022\032\n\022substr"
  "ait_versions\030\001 \003(\t\022$\n\034advanced_extension"
  "_type_urls\030\002 \003(\t\022H\n\021simple_extensions\030\003 "
  "\003(\0132-.substrait.proto.Capabilities.Simpl"
  "eExtension\032e\n\017SimpleExtension\022\013\n\003uri\030\001 \001"
  "(\t\022\025\n\rfunction_keys\030\002 \003(\t\022\021\n\ttype_keys\030\003"
  " \003(\t\022\033\n\023type_variation_keys\030\004 \003(\tBW\n\022io."
  "substrait.protoP\001Z*github.com/substrait-"
  "io/substrait-go/proto\252\002\022Substrait.Protob"
  "ufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2fcapabilities_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2fcapabilities_2eproto_sccs[2] = {
  &scc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto.base,
  &scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2fcapabilities_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2fcapabilities_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2fcapabilities_2eproto, "substrait/proto/capabilities.proto", 410,
  &descriptor_table_substrait_2fproto_2fcapabilities_2eproto_once, descriptor_table_substrait_2fproto_2fcapabilities_2eproto_sccs, descriptor_table_substrait_2fproto_2fcapabilities_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2fcapabilities_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2fcapabilities_2eproto, 2, file_level_enum_descriptors_substrait_2fproto_2fcapabilities_2eproto, file_level_service_descriptors_substrait_2fproto_2fcapabilities_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2fcapabilities_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2fcapabilities_2eproto)), true);
namespace substrait {
namespace proto {

// ===================================================================

void Capabilities_SimpleExtension::InitAsDefaultInstance() {
}
class Capabilities_SimpleExtension::_Internal {
 public:
};

Capabilities_SimpleExtension::Capabilities_SimpleExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  function_keys_(arena),
  type_keys_(arena),
  type_variation_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Capabilities.SimpleExtension)
}
Capabilities_SimpleExtension::Capabilities_SimpleExtension(const Capabilities_SimpleExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      function_keys_(from.function_keys_),
      type_keys_(from.type_keys_),
      type_variation_keys_(from.type_variation_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uri(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Capabilities.SimpleExtension)
}

void Capabilities_SimpleExtension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Capabilities_SimpleExtension::~Capabilities_SimpleExtension() {
  // @@protoc_insertion_point(destructor:substrait.proto.Capabilities.SimpleExtension)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capabilities_SimpleExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Capabilities_SimpleExtension::ArenaDtor(void* object) {
  Capabilities_SimpleExtension* _this = reinterpret_cast< Capabilities_SimpleExtension* >(object);
  (void)_this;
}
void Capabilities_SimpleExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capabilities_SimpleExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capabilities_SimpleExtension& Capabilities_SimpleExtension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capabilities_SimpleExtension_substrait_2fproto_2fcapabilities_2eproto.base);
  return *internal_default_instance();
}


void Capabilities_SimpleExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Capabilities.SimpleExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_keys_.Clear();
  type_keys_.Clear();
  type_variation_keys_.Clear();
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities_SimpleExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.SimpleExtension.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string function_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_function_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.SimpleExtension.function_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string type_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.SimpleExtension.type_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string type_variation_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type_variation_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.SimpleExtension.type_variation_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capabilities_SimpleExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Capabilities.SimpleExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.SimpleExtension.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // repeated string function_keys = 2;
  for (int i = 0, n = this->_internal_function_keys_size(); i < n; i++) {
    const auto& s = this->_internal_function_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.SimpleExtension.function_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string type_keys = 3;
  for (int i = 0, n = this->_internal_type_keys_size(); i < n; i++) {
    const auto& s = this->_internal_type_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.SimpleExtension.type_keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated string type_variation_keys = 4;
  for (int i = 0, n = this->_internal_type_variation_keys_size(); i < n; i++) {
    const auto& s = this->_internal_type_variation_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.SimpleExtension.type_variation_keys");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Capabilities.SimpleExtension)
  return target;
}

size_t Capabilities_SimpleExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Capabilities.SimpleExtension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string function_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(function_keys_.size());
  for (int i = 0, n = function_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      function_keys_.Get(i));
  }

  // repeated string type_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(type_keys_.size());
  for (int i = 0, n = type_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      type_keys_.Get(i));
  }

  // repeated string type_variation_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(type_variation_keys_.size());
  for (int i = 0, n = type_variation_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      type_variation_keys_.Get(i));
  }

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capabilities_SimpleExtension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Capabilities.SimpleExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const Capabilities_SimpleExtension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capabilities_SimpleExtension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Capabilities.SimpleExtension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Capabilities.SimpleExtension)
    MergeFrom(*source);
  }
}

void Capabilities_SimpleExtension::MergeFrom(const Capabilities_SimpleExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Capabilities.SimpleExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_keys_.MergeFrom(from.function_keys_);
  type_keys_.MergeFrom(from.type_keys_);
  type_variation_keys_.MergeFrom(from.type_variation_keys_);
  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
}

void Capabilities_SimpleExtension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Capabilities.SimpleExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capabilities_SimpleExtension::CopyFrom(const Capabilities_SimpleExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Capabilities.SimpleExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities_SimpleExtension::IsInitialized() const {
  return true;
}

void Capabilities_SimpleExtension::InternalSwap(Capabilities_SimpleExtension* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  function_keys_.InternalSwap(&other->function_keys_);
  type_keys_.InternalSwap(&other->type_keys_);
  type_variation_keys_.InternalSwap(&other->type_variation_keys_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities_SimpleExtension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Capabilities::InitAsDefaultInstance() {
}
class Capabilities::_Internal {
 public:
};

Capabilities::Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substrait_versions_(arena),
  advanced_extension_type_urls_(arena),
  simple_extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      substrait_versions_(from.substrait_versions_),
      advanced_extension_type_urls_(from.advanced_extension_type_urls_),
      simple_extensions_(from.simple_extensions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Capabilities)
}

void Capabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto.base);
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:substrait.proto.Capabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Capabilities::ArenaDtor(void* object) {
  Capabilities* _this = reinterpret_cast< Capabilities* >(object);
  (void)_this;
}
void Capabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capabilities& Capabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capabilities_substrait_2fproto_2fcapabilities_2eproto.base);
  return *internal_default_instance();
}


void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substrait_versions_.Clear();
  advanced_extension_type_urls_.Clear();
  simple_extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string substrait_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_substrait_versions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.substrait_versions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string advanced_extension_type_urls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_advanced_extension_type_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Capabilities.advanced_extension_type_urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Capabilities.SimpleExtension simple_extensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string substrait_versions = 1;
  for (int i = 0, n = this->_internal_substrait_versions_size(); i < n; i++) {
    const auto& s = this->_internal_substrait_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.substrait_versions");
    target = stream->WriteString(1, s, target);
  }

  // repeated string advanced_extension_type_urls = 2;
  for (int i = 0, n = this->_internal_advanced_extension_type_urls_size(); i < n; i++) {
    const auto& s = this->_internal_advanced_extension_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Capabilities.advanced_extension_type_urls");
    target = stream->WriteString(2, s, target);
  }

  // repeated .substrait.proto.Capabilities.SimpleExtension simple_extensions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simple_extensions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_simple_extensions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Capabilities)
  return target;
}

size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Capabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string substrait_versions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(substrait_versions_.size());
  for (int i = 0, n = substrait_versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      substrait_versions_.Get(i));
  }

  // repeated string advanced_extension_type_urls = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(advanced_extension_type_urls_.size());
  for (int i = 0, n = advanced_extension_type_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      advanced_extension_type_urls_.Get(i));
  }

  // repeated .substrait.proto.Capabilities.SimpleExtension simple_extensions = 3;
  total_size += 1UL * this->_internal_simple_extensions_size();
  for (const auto& msg : this->simple_extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const Capabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Capabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Capabilities)
    MergeFrom(*source);
  }
}

void Capabilities::MergeFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substrait_versions_.MergeFrom(from.substrait_versions_);
  advanced_extension_type_urls_.MergeFrom(from.advanced_extension_type_urls_);
  simple_extensions_.MergeFrom(from.simple_extensions_);
}

void Capabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  return true;
}

void Capabilities::InternalSwap(Capabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substrait_versions_.InternalSwap(&other->substrait_versions_);
  advanced_extension_type_urls_.InternalSwap(&other->advanced_extension_type_urls_);
  simple_extensions_.InternalSwap(&other->simple_extensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::Capabilities_SimpleExtension* Arena::CreateMaybeMessage< ::substrait::proto::Capabilities_SimpleExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Capabilities_SimpleExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Capabilities* Arena::CreateMaybeMessage< ::substrait::proto::Capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Capabilities >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
