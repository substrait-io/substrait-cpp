// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/type.proto

#include "substrait/proto/type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_Type_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Binary_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Date_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FP32_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FP64_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I16_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I32_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I64_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I8_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_String_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Time_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_UUID_substrait_2fproto_2ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto;
namespace substrait {
namespace proto {
class Type_BooleanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Boolean> _instance;
} _Type_Boolean_default_instance_;
class Type_I8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_I8> _instance;
} _Type_I8_default_instance_;
class Type_I16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_I16> _instance;
} _Type_I16_default_instance_;
class Type_I32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_I32> _instance;
} _Type_I32_default_instance_;
class Type_I64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_I64> _instance;
} _Type_I64_default_instance_;
class Type_FP32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_FP32> _instance;
} _Type_FP32_default_instance_;
class Type_FP64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_FP64> _instance;
} _Type_FP64_default_instance_;
class Type_StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_String> _instance;
} _Type_String_default_instance_;
class Type_BinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Binary> _instance;
} _Type_Binary_default_instance_;
class Type_TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Timestamp> _instance;
} _Type_Timestamp_default_instance_;
class Type_DateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Date> _instance;
} _Type_Date_default_instance_;
class Type_TimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Time> _instance;
} _Type_Time_default_instance_;
class Type_TimestampTZDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_TimestampTZ> _instance;
} _Type_TimestampTZ_default_instance_;
class Type_IntervalYearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_IntervalYear> _instance;
} _Type_IntervalYear_default_instance_;
class Type_IntervalDayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_IntervalDay> _instance;
} _Type_IntervalDay_default_instance_;
class Type_UUIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_UUID> _instance;
} _Type_UUID_default_instance_;
class Type_FixedCharDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_FixedChar> _instance;
} _Type_FixedChar_default_instance_;
class Type_VarCharDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_VarChar> _instance;
} _Type_VarChar_default_instance_;
class Type_FixedBinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_FixedBinary> _instance;
} _Type_FixedBinary_default_instance_;
class Type_DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Decimal> _instance;
} _Type_Decimal_default_instance_;
class Type_StructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Struct> _instance;
} _Type_Struct_default_instance_;
class Type_ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_List> _instance;
} _Type_List_default_instance_;
class Type_MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Map> _instance;
} _Type_Map_default_instance_;
class Type_UserDefinedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_UserDefined> _instance;
} _Type_UserDefined_default_instance_;
class Type_ParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_Parameter> _instance;
  const PROTOBUF_NAMESPACE_ID::Empty* null_;
  const ::substrait::proto::Type* data_type_;
  bool boolean_;
  ::PROTOBUF_NAMESPACE_ID::int64 integer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
} _Type_Parameter_default_instance_;
class TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type> _instance;
  const ::substrait::proto::Type_Boolean* bool__;
  const ::substrait::proto::Type_I8* i8_;
  const ::substrait::proto::Type_I16* i16_;
  const ::substrait::proto::Type_I32* i32_;
  const ::substrait::proto::Type_I64* i64_;
  const ::substrait::proto::Type_FP32* fp32_;
  const ::substrait::proto::Type_FP64* fp64_;
  const ::substrait::proto::Type_String* string_;
  const ::substrait::proto::Type_Binary* binary_;
  const ::substrait::proto::Type_Timestamp* timestamp_;
  const ::substrait::proto::Type_Date* date_;
  const ::substrait::proto::Type_Time* time_;
  const ::substrait::proto::Type_IntervalYear* interval_year_;
  const ::substrait::proto::Type_IntervalDay* interval_day_;
  const ::substrait::proto::Type_TimestampTZ* timestamp_tz_;
  const ::substrait::proto::Type_UUID* uuid_;
  const ::substrait::proto::Type_FixedChar* fixed_char_;
  const ::substrait::proto::Type_VarChar* varchar_;
  const ::substrait::proto::Type_FixedBinary* fixed_binary_;
  const ::substrait::proto::Type_Decimal* decimal_;
  const ::substrait::proto::Type_Struct* struct__;
  const ::substrait::proto::Type_List* list_;
  const ::substrait::proto::Type_Map* map_;
  const ::substrait::proto::Type_UserDefined* user_defined_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_defined_type_reference_;
} _Type_default_instance_;
class NamedStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedStruct> _instance;
} _NamedStruct_default_instance_;
}  // namespace proto
}  // namespace substrait
static void InitDefaultsscc_info_NamedStruct_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_NamedStruct_default_instance_;
    new (ptr) ::substrait::proto::NamedStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::NamedStruct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedStruct_substrait_2fproto_2ftype_2eproto}, {
      &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,}};

static void InitDefaultsscc_info_Type_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Struct_default_instance_;
    new (ptr) ::substrait::proto::Type_Struct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Type_List_default_instance_;
    new (ptr) ::substrait::proto::Type_List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Type_Map_default_instance_;
    new (ptr) ::substrait::proto::Type_Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Type_UserDefined_default_instance_;
    new (ptr) ::substrait::proto::Type_UserDefined();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Type_Parameter_default_instance_;
    new (ptr) ::substrait::proto::Type_Parameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::substrait::proto::_Type_default_instance_;
    new (ptr) ::substrait::proto::Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Struct::InitAsDefaultInstance();
  ::substrait::proto::Type_List::InitAsDefaultInstance();
  ::substrait::proto::Type_Map::InitAsDefaultInstance();
  ::substrait::proto::Type_UserDefined::InitAsDefaultInstance();
  ::substrait::proto::Type_Parameter::InitAsDefaultInstance();
  ::substrait::proto::Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_Type_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, 0, InitDefaultsscc_info_Type_substrait_2fproto_2ftype_2eproto}, {
      &scc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_I8_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_I16_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_I32_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_I64_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_FP32_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_FP64_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_String_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_Binary_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_Date_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_Time_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_UUID_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsscc_info_Type_Binary_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Binary_default_instance_;
    new (ptr) ::substrait::proto::Type_Binary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Binary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Binary_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Binary_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Boolean_default_instance_;
    new (ptr) ::substrait::proto::Type_Boolean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Boolean::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_Date_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Date_default_instance_;
    new (ptr) ::substrait::proto::Type_Date();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Date::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Date_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Date_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Decimal_default_instance_;
    new (ptr) ::substrait::proto::Type_Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Decimal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_FP32_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_FP32_default_instance_;
    new (ptr) ::substrait::proto::Type_FP32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_FP32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FP32_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_FP32_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_FP64_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_FP64_default_instance_;
    new (ptr) ::substrait::proto::Type_FP64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_FP64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FP64_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_FP64_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_FixedBinary_default_instance_;
    new (ptr) ::substrait::proto::Type_FixedBinary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_FixedBinary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_FixedChar_default_instance_;
    new (ptr) ::substrait::proto::Type_FixedChar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_FixedChar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_I16_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_I16_default_instance_;
    new (ptr) ::substrait::proto::Type_I16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_I16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I16_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_I16_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_I32_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_I32_default_instance_;
    new (ptr) ::substrait::proto::Type_I32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_I32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I32_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_I32_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_I64_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_I64_default_instance_;
    new (ptr) ::substrait::proto::Type_I64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_I64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I64_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_I64_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_I8_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_I8_default_instance_;
    new (ptr) ::substrait::proto::Type_I8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_I8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_I8_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_I8_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_IntervalDay_default_instance_;
    new (ptr) ::substrait::proto::Type_IntervalDay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_IntervalDay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_IntervalYear_default_instance_;
    new (ptr) ::substrait::proto::Type_IntervalYear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_IntervalYear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_String_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_String_default_instance_;
    new (ptr) ::substrait::proto::Type_String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_String_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_String_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_Time_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Time_default_instance_;
    new (ptr) ::substrait::proto::Type_Time();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Time::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Time_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Time_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_Timestamp_default_instance_;
    new (ptr) ::substrait::proto::Type_Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_Timestamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_TimestampTZ_default_instance_;
    new (ptr) ::substrait::proto::Type_TimestampTZ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_TimestampTZ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_UUID_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_UUID_default_instance_;
    new (ptr) ::substrait::proto::Type_UUID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_UUID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_UUID_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_UUID_substrait_2fproto_2ftype_2eproto}, {}};

static void InitDefaultsscc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::substrait::proto::_Type_VarChar_default_instance_;
    new (ptr) ::substrait::proto::Type_VarChar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::substrait::proto::Type_VarChar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2fproto_2ftype_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_substrait_2fproto_2ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2fproto_2ftype_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_substrait_2fproto_2ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Boolean, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Boolean, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I8, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I8, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I16, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I16, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I32, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I32, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I64, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_I64, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP32, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP32, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP64, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FP64, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_String, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_String, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Binary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Binary, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Binary, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Timestamp, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Timestamp, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Date, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Date, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Time, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Time, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_TimestampTZ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_TimestampTZ, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_TimestampTZ, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalYear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalYear, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalYear, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalDay, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_IntervalDay, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UUID, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UUID, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedChar, length_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedChar, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedChar, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_VarChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_VarChar, length_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_VarChar, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_VarChar, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedBinary, length_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedBinary, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_FixedBinary, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Decimal, scale_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Decimal, precision_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Decimal, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Decimal, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Struct, types_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Struct, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Struct, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_List, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_List, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_List, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Map, key_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Map, value_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Map, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Map, nullability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UserDefined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UserDefined, type_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UserDefined, type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UserDefined, nullability_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_UserDefined, type_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, null_),
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, data_type_),
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, boolean_),
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, integer_),
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, enum__),
  offsetof(::substrait::proto::Type_ParameterDefaultTypeInternal, string_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type_Parameter, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::substrait::proto::TypeDefaultTypeInternal, bool__),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, i8_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, i16_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, i32_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, i64_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, fp32_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, fp64_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, string_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, binary_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, timestamp_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, date_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, time_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, interval_year_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, interval_day_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, timestamp_tz_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, uuid_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, fixed_char_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, varchar_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, fixed_binary_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, decimal_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, struct__),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, list_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, map_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, user_defined_),
  offsetof(::substrait::proto::TypeDefaultTypeInternal, user_defined_type_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::Type, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedStruct, names_),
  PROTOBUF_FIELD_OFFSET(::substrait::proto::NamedStruct, struct__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::substrait::proto::Type_Boolean)},
  { 7, -1, sizeof(::substrait::proto::Type_I8)},
  { 14, -1, sizeof(::substrait::proto::Type_I16)},
  { 21, -1, sizeof(::substrait::proto::Type_I32)},
  { 28, -1, sizeof(::substrait::proto::Type_I64)},
  { 35, -1, sizeof(::substrait::proto::Type_FP32)},
  { 42, -1, sizeof(::substrait::proto::Type_FP64)},
  { 49, -1, sizeof(::substrait::proto::Type_String)},
  { 56, -1, sizeof(::substrait::proto::Type_Binary)},
  { 63, -1, sizeof(::substrait::proto::Type_Timestamp)},
  { 70, -1, sizeof(::substrait::proto::Type_Date)},
  { 77, -1, sizeof(::substrait::proto::Type_Time)},
  { 84, -1, sizeof(::substrait::proto::Type_TimestampTZ)},
  { 91, -1, sizeof(::substrait::proto::Type_IntervalYear)},
  { 98, -1, sizeof(::substrait::proto::Type_IntervalDay)},
  { 105, -1, sizeof(::substrait::proto::Type_UUID)},
  { 112, -1, sizeof(::substrait::proto::Type_FixedChar)},
  { 120, -1, sizeof(::substrait::proto::Type_VarChar)},
  { 128, -1, sizeof(::substrait::proto::Type_FixedBinary)},
  { 136, -1, sizeof(::substrait::proto::Type_Decimal)},
  { 145, -1, sizeof(::substrait::proto::Type_Struct)},
  { 153, -1, sizeof(::substrait::proto::Type_List)},
  { 161, -1, sizeof(::substrait::proto::Type_Map)},
  { 170, -1, sizeof(::substrait::proto::Type_UserDefined)},
  { 179, -1, sizeof(::substrait::proto::Type_Parameter)},
  { 191, -1, sizeof(::substrait::proto::Type)},
  { 222, -1, sizeof(::substrait::proto::NamedStruct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Boolean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_I8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_I16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_I32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_I64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_FP32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_FP64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Binary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_TimestampTZ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_IntervalYear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_IntervalDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_UUID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_FixedChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_VarChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_FixedBinary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Struct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_UserDefined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::proto::_NamedStruct_default_instance_),
};

const char descriptor_table_protodef_substrait_2fproto_2ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032substrait/proto/type.proto\022\017substrait."
  "proto\032\033google/protobuf/empty.proto\"\206!\n\004T"
  "ype\022-\n\004bool\030\001 \001(\0132\035.substrait.proto.Type"
  ".BooleanH\000\022&\n\002i8\030\002 \001(\0132\030.substrait.proto"
  ".Type.I8H\000\022(\n\003i16\030\003 \001(\0132\031.substrait.prot"
  "o.Type.I16H\000\022(\n\003i32\030\005 \001(\0132\031.substrait.pr"
  "oto.Type.I32H\000\022(\n\003i64\030\007 \001(\0132\031.substrait."
  "proto.Type.I64H\000\022*\n\004fp32\030\n \001(\0132\032.substra"
  "it.proto.Type.FP32H\000\022*\n\004fp64\030\013 \001(\0132\032.sub"
  "strait.proto.Type.FP64H\000\022.\n\006string\030\014 \001(\013"
  "2\034.substrait.proto.Type.StringH\000\022.\n\006bina"
  "ry\030\r \001(\0132\034.substrait.proto.Type.BinaryH\000"
  "\0224\n\ttimestamp\030\016 \001(\0132\037.substrait.proto.Ty"
  "pe.TimestampH\000\022*\n\004date\030\020 \001(\0132\032.substrait"
  ".proto.Type.DateH\000\022*\n\004time\030\021 \001(\0132\032.subst"
  "rait.proto.Type.TimeH\000\022;\n\rinterval_year\030"
  "\023 \001(\0132\".substrait.proto.Type.IntervalYea"
  "rH\000\0229\n\014interval_day\030\024 \001(\0132!.substrait.pr"
  "oto.Type.IntervalDayH\000\0229\n\014timestamp_tz\030\035"
  " \001(\0132!.substrait.proto.Type.TimestampTZH"
  "\000\022*\n\004uuid\030  \001(\0132\032.substrait.proto.Type.U"
  "UIDH\000\0225\n\nfixed_char\030\025 \001(\0132\037.substrait.pr"
  "oto.Type.FixedCharH\000\0220\n\007varchar\030\026 \001(\0132\035."
  "substrait.proto.Type.VarCharH\000\0229\n\014fixed_"
  "binary\030\027 \001(\0132!.substrait.proto.Type.Fixe"
  "dBinaryH\000\0220\n\007decimal\030\030 \001(\0132\035.substrait.p"
  "roto.Type.DecimalH\000\022.\n\006struct\030\031 \001(\0132\034.su"
  "bstrait.proto.Type.StructH\000\022*\n\004list\030\033 \001("
  "\0132\032.substrait.proto.Type.ListH\000\022(\n\003map\030\034"
  " \001(\0132\031.substrait.proto.Type.MapH\000\0229\n\014use"
  "r_defined\030\036 \001(\0132!.substrait.proto.Type.U"
  "serDefinedH\000\022)\n\033user_defined_type_refere"
  "nce\030\037 \001(\rB\002\030\001H\000\032c\n\007Boolean\022 \n\030type_varia"
  "tion_reference\030\001 \001(\r\0226\n\013nullability\030\002 \001("
  "\0162!.substrait.proto.Type.Nullability\032^\n\002"
  "I8\022 \n\030type_variation_reference\030\001 \001(\r\0226\n\013"
  "nullability\030\002 \001(\0162!.substrait.proto.Type"
  ".Nullability\032_\n\003I16\022 \n\030type_variation_re"
  "ference\030\001 \001(\r\0226\n\013nullability\030\002 \001(\0162!.sub"
  "strait.proto.Type.Nullability\032_\n\003I32\022 \n\030"
  "type_variation_reference\030\001 \001(\r\0226\n\013nullab"
  "ility\030\002 \001(\0162!.substrait.proto.Type.Nulla"
  "bility\032_\n\003I64\022 \n\030type_variation_referenc"
  "e\030\001 \001(\r\0226\n\013nullability\030\002 \001(\0162!.substrait"
  ".proto.Type.Nullability\032`\n\004FP32\022 \n\030type_"
  "variation_reference\030\001 \001(\r\0226\n\013nullability"
  "\030\002 \001(\0162!.substrait.proto.Type.Nullabilit"
  "y\032`\n\004FP64\022 \n\030type_variation_reference\030\001 "
  "\001(\r\0226\n\013nullability\030\002 \001(\0162!.substrait.pro"
  "to.Type.Nullability\032b\n\006String\022 \n\030type_va"
  "riation_reference\030\001 \001(\r\0226\n\013nullability\030\002"
  " \001(\0162!.substrait.proto.Type.Nullability\032"
  "b\n\006Binary\022 \n\030type_variation_reference\030\001 "
  "\001(\r\0226\n\013nullability\030\002 \001(\0162!.substrait.pro"
  "to.Type.Nullability\032e\n\tTimestamp\022 \n\030type"
  "_variation_reference\030\001 \001(\r\0226\n\013nullabilit"
  "y\030\002 \001(\0162!.substrait.proto.Type.Nullabili"
  "ty\032`\n\004Date\022 \n\030type_variation_reference\030\001"
  " \001(\r\0226\n\013nullability\030\002 \001(\0162!.substrait.pr"
  "oto.Type.Nullability\032`\n\004Time\022 \n\030type_var"
  "iation_reference\030\001 \001(\r\0226\n\013nullability\030\002 "
  "\001(\0162!.substrait.proto.Type.Nullability\032g"
  "\n\013TimestampTZ\022 \n\030type_variation_referenc"
  "e\030\001 \001(\r\0226\n\013nullability\030\002 \001(\0162!.substrait"
  ".proto.Type.Nullability\032h\n\014IntervalYear\022"
  " \n\030type_variation_reference\030\001 \001(\r\0226\n\013nul"
  "lability\030\002 \001(\0162!.substrait.proto.Type.Nu"
  "llability\032g\n\013IntervalDay\022 \n\030type_variati"
  "on_reference\030\001 \001(\r\0226\n\013nullability\030\002 \001(\0162"
  "!.substrait.proto.Type.Nullability\032`\n\004UU"
  "ID\022 \n\030type_variation_reference\030\001 \001(\r\0226\n\013"
  "nullability\030\002 \001(\0162!.substrait.proto.Type"
  ".Nullability\032u\n\tFixedChar\022\016\n\006length\030\001 \001("
  "\005\022 \n\030type_variation_reference\030\002 \001(\r\0226\n\013n"
  "ullability\030\003 \001(\0162!.substrait.proto.Type."
  "Nullability\032s\n\007VarChar\022\016\n\006length\030\001 \001(\005\022 "
  "\n\030type_variation_reference\030\002 \001(\r\0226\n\013null"
  "ability\030\003 \001(\0162!.substrait.proto.Type.Nul"
  "lability\032w\n\013FixedBinary\022\016\n\006length\030\001 \001(\005\022"
  " \n\030type_variation_reference\030\002 \001(\r\0226\n\013nul"
  "lability\030\003 \001(\0162!.substrait.proto.Type.Nu"
  "llability\032\205\001\n\007Decimal\022\r\n\005scale\030\001 \001(\005\022\021\n\t"
  "precision\030\002 \001(\005\022 \n\030type_variation_refere"
  "nce\030\003 \001(\r\0226\n\013nullability\030\004 \001(\0162!.substra"
  "it.proto.Type.Nullability\032\210\001\n\006Struct\022$\n\005"
  "types\030\001 \003(\0132\025.substrait.proto.Type\022 \n\030ty"
  "pe_variation_reference\030\002 \001(\r\0226\n\013nullabil"
  "ity\030\003 \001(\0162!.substrait.proto.Type.Nullabi"
  "lity\032\205\001\n\004List\022#\n\004type\030\001 \001(\0132\025.substrait."
  "proto.Type\022 \n\030type_variation_reference\030\002"
  " \001(\r\0226\n\013nullability\030\003 \001(\0162!.substrait.pr"
  "oto.Type.Nullability\032\251\001\n\003Map\022\"\n\003key\030\001 \001("
  "\0132\025.substrait.proto.Type\022$\n\005value\030\002 \001(\0132"
  "\025.substrait.proto.Type\022 \n\030type_variation"
  "_reference\030\003 \001(\r\0226\n\013nullability\030\004 \001(\0162!."
  "substrait.proto.Type.Nullability\032\271\001\n\013Use"
  "rDefined\022\026\n\016type_reference\030\001 \001(\r\022 \n\030type"
  "_variation_reference\030\002 \001(\r\0226\n\013nullabilit"
  "y\030\003 \001(\0162!.substrait.proto.Type.Nullabili"
  "ty\0228\n\017type_parameters\030\004 \003(\0132\037.substrait."
  "proto.Type.Parameter\032\264\001\n\tParameter\022&\n\004nu"
  "ll\030\001 \001(\0132\026.google.protobuf.EmptyH\000\022*\n\tda"
  "ta_type\030\002 \001(\0132\025.substrait.proto.TypeH\000\022\021"
  "\n\007boolean\030\003 \001(\010H\000\022\021\n\007integer\030\004 \001(\003H\000\022\016\n\004"
  "enum\030\005 \001(\tH\000\022\020\n\006string\030\006 \001(\tH\000B\013\n\tparame"
  "ter\"^\n\013Nullability\022\033\n\027NULLABILITY_UNSPEC"
  "IFIED\020\000\022\030\n\024NULLABILITY_NULLABLE\020\001\022\030\n\024NUL"
  "LABILITY_REQUIRED\020\002B\006\n\004kind\"J\n\013NamedStru"
  "ct\022\r\n\005names\030\001 \003(\t\022,\n\006struct\030\002 \001(\0132\034.subs"
  "trait.proto.Type.StructBW\n\022io.substrait."
  "protoP\001Z*github.com/substrait-io/substra"
  "it-go/proto\252\002\022Substrait.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2fproto_2ftype_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_substrait_2fproto_2ftype_2eproto_sccs[22] = {
  &scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Binary_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Date_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_FP32_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_FP64_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_I16_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_I32_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_I64_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_I8_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_String_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Time_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_UUID_substrait_2fproto_2ftype_2eproto.base,
  &scc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2fproto_2ftype_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2ftype_2eproto = {
  false, false, descriptor_table_protodef_substrait_2fproto_2ftype_2eproto, "substrait/proto/type.proto", 4480,
  &descriptor_table_substrait_2fproto_2ftype_2eproto_once, descriptor_table_substrait_2fproto_2ftype_2eproto_sccs, descriptor_table_substrait_2fproto_2ftype_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_substrait_2fproto_2ftype_2eproto::offsets,
  file_level_metadata_substrait_2fproto_2ftype_2eproto, 27, file_level_enum_descriptors_substrait_2fproto_2ftype_2eproto, file_level_service_descriptors_substrait_2fproto_2ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_substrait_2fproto_2ftype_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_substrait_2fproto_2ftype_2eproto)), true);
namespace substrait {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_Nullability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2fproto_2ftype_2eproto);
  return file_level_enum_descriptors_substrait_2fproto_2ftype_2eproto[0];
}
bool Type_Nullability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Type_Nullability Type::NULLABILITY_UNSPECIFIED;
constexpr Type_Nullability Type::NULLABILITY_NULLABLE;
constexpr Type_Nullability Type::NULLABILITY_REQUIRED;
constexpr Type_Nullability Type::Nullability_MIN;
constexpr Type_Nullability Type::Nullability_MAX;
constexpr int Type::Nullability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Type_Boolean::InitAsDefaultInstance() {
}
class Type_Boolean::_Internal {
 public:
};

Type_Boolean::Type_Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Boolean)
}
Type_Boolean::Type_Boolean(const Type_Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Boolean)
}

void Type_Boolean::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Boolean::~Type_Boolean() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Boolean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Boolean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Boolean::ArenaDtor(void* object) {
  Type_Boolean* _this = reinterpret_cast< Type_Boolean* >(object);
  (void)_this;
}
void Type_Boolean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Boolean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Boolean& Type_Boolean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Boolean_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Boolean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Boolean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Boolean)
  return target;
}

size_t Type_Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Boolean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Boolean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Boolean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Boolean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Boolean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Boolean)
    MergeFrom(*source);
  }
}

void Type_Boolean::MergeFrom(const Type_Boolean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Boolean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Boolean::CopyFrom(const Type_Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Boolean::IsInitialized() const {
  return true;
}

void Type_Boolean::InternalSwap(Type_Boolean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Boolean, nullability_)
      + sizeof(Type_Boolean::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Boolean, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Boolean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_I8::InitAsDefaultInstance() {
}
class Type_I8::_Internal {
 public:
};

Type_I8::Type_I8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.I8)
}
Type_I8::Type_I8(const Type_I8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.I8)
}

void Type_I8::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_I8::~Type_I8() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.I8)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I8::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_I8::ArenaDtor(void* object) {
  Type_I8* _this = reinterpret_cast< Type_I8* >(object);
  (void)_this;
}
void Type_I8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_I8& Type_I8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_I8_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_I8::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.I8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.I8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.I8)
  return target;
}

size_t Type_I8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.I8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.I8)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.I8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.I8)
    MergeFrom(*source);
  }
}

void Type_I8::MergeFrom(const Type_I8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.I8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.I8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I8::CopyFrom(const Type_I8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.I8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I8::IsInitialized() const {
  return true;
}

void Type_I8::InternalSwap(Type_I8* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I8, nullability_)
      + sizeof(Type_I8::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I8, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_I16::InitAsDefaultInstance() {
}
class Type_I16::_Internal {
 public:
};

Type_I16::Type_I16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.I16)
}
Type_I16::Type_I16(const Type_I16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.I16)
}

void Type_I16::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_I16::~Type_I16() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.I16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_I16::ArenaDtor(void* object) {
  Type_I16* _this = reinterpret_cast< Type_I16* >(object);
  (void)_this;
}
void Type_I16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_I16& Type_I16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_I16_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_I16::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.I16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.I16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.I16)
  return target;
}

size_t Type_I16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.I16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.I16)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.I16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.I16)
    MergeFrom(*source);
  }
}

void Type_I16::MergeFrom(const Type_I16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.I16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.I16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I16::CopyFrom(const Type_I16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.I16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I16::IsInitialized() const {
  return true;
}

void Type_I16::InternalSwap(Type_I16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I16, nullability_)
      + sizeof(Type_I16::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I16, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_I32::InitAsDefaultInstance() {
}
class Type_I32::_Internal {
 public:
};

Type_I32::Type_I32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.I32)
}
Type_I32::Type_I32(const Type_I32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.I32)
}

void Type_I32::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_I32::~Type_I32() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.I32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_I32::ArenaDtor(void* object) {
  Type_I32* _this = reinterpret_cast< Type_I32* >(object);
  (void)_this;
}
void Type_I32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_I32& Type_I32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_I32_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_I32::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.I32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.I32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.I32)
  return target;
}

size_t Type_I32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.I32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.I32)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.I32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.I32)
    MergeFrom(*source);
  }
}

void Type_I32::MergeFrom(const Type_I32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.I32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I32::CopyFrom(const Type_I32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I32::IsInitialized() const {
  return true;
}

void Type_I32::InternalSwap(Type_I32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I32, nullability_)
      + sizeof(Type_I32::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I32, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_I64::InitAsDefaultInstance() {
}
class Type_I64::_Internal {
 public:
};

Type_I64::Type_I64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.I64)
}
Type_I64::Type_I64(const Type_I64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.I64)
}

void Type_I64::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_I64::~Type_I64() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.I64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_I64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_I64::ArenaDtor(void* object) {
  Type_I64* _this = reinterpret_cast< Type_I64* >(object);
  (void)_this;
}
void Type_I64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_I64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_I64& Type_I64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_I64_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_I64::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.I64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_I64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.I64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.I64)
  return target;
}

size_t Type_I64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.I64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_I64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.I64)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_I64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_I64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.I64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.I64)
    MergeFrom(*source);
  }
}

void Type_I64::MergeFrom(const Type_I64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.I64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_I64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_I64::CopyFrom(const Type_I64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I64::IsInitialized() const {
  return true;
}

void Type_I64::InternalSwap(Type_I64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I64, nullability_)
      + sizeof(Type_I64::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I64, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_FP32::InitAsDefaultInstance() {
}
class Type_FP32::_Internal {
 public:
};

Type_FP32::Type_FP32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.FP32)
}
Type_FP32::Type_FP32(const Type_FP32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.FP32)
}

void Type_FP32::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_FP32::~Type_FP32() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.FP32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FP32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_FP32::ArenaDtor(void* object) {
  Type_FP32* _this = reinterpret_cast< Type_FP32* >(object);
  (void)_this;
}
void Type_FP32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FP32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_FP32& Type_FP32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_FP32_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_FP32::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.FP32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FP32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.FP32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.FP32)
  return target;
}

size_t Type_FP32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.FP32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FP32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.FP32)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FP32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FP32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.FP32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.FP32)
    MergeFrom(*source);
  }
}

void Type_FP32::MergeFrom(const Type_FP32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.FP32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FP32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.FP32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FP32::CopyFrom(const Type_FP32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.FP32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP32::IsInitialized() const {
  return true;
}

void Type_FP32::InternalSwap(Type_FP32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP32, nullability_)
      + sizeof(Type_FP32::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP32, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_FP64::InitAsDefaultInstance() {
}
class Type_FP64::_Internal {
 public:
};

Type_FP64::Type_FP64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.FP64)
}
Type_FP64::Type_FP64(const Type_FP64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.FP64)
}

void Type_FP64::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_FP64::~Type_FP64() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.FP64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FP64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_FP64::ArenaDtor(void* object) {
  Type_FP64* _this = reinterpret_cast< Type_FP64* >(object);
  (void)_this;
}
void Type_FP64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FP64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_FP64& Type_FP64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_FP64_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_FP64::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.FP64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FP64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.FP64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.FP64)
  return target;
}

size_t Type_FP64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.FP64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FP64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.FP64)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FP64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FP64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.FP64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.FP64)
    MergeFrom(*source);
  }
}

void Type_FP64::MergeFrom(const Type_FP64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.FP64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FP64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.FP64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FP64::CopyFrom(const Type_FP64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.FP64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP64::IsInitialized() const {
  return true;
}

void Type_FP64::InternalSwap(Type_FP64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP64, nullability_)
      + sizeof(Type_FP64::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP64, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_String::InitAsDefaultInstance() {
}
class Type_String::_Internal {
 public:
};

Type_String::Type_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.String)
}
Type_String::Type_String(const Type_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.String)
}

void Type_String::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_String::~Type_String() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.String)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_String::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_String::ArenaDtor(void* object) {
  Type_String* _this = reinterpret_cast< Type_String* >(object);
  (void)_this;
}
void Type_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_String& Type_String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_String_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_String::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.String)
  return target;
}

size_t Type_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.String)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.String)
    MergeFrom(*source);
  }
}

void Type_String::MergeFrom(const Type_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_String::CopyFrom(const Type_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_String::IsInitialized() const {
  return true;
}

void Type_String::InternalSwap(Type_String* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_String, nullability_)
      + sizeof(Type_String::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_String, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_String::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Binary::InitAsDefaultInstance() {
}
class Type_Binary::_Internal {
 public:
};

Type_Binary::Type_Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Binary)
}
Type_Binary::Type_Binary(const Type_Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Binary)
}

void Type_Binary::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Binary::~Type_Binary() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Binary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Binary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Binary::ArenaDtor(void* object) {
  Type_Binary* _this = reinterpret_cast< Type_Binary* >(object);
  (void)_this;
}
void Type_Binary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Binary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Binary& Type_Binary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Binary_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Binary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Binary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Binary)
  return target;
}

size_t Type_Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Binary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Binary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Binary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Binary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Binary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Binary)
    MergeFrom(*source);
  }
}

void Type_Binary::MergeFrom(const Type_Binary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Binary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Binary::CopyFrom(const Type_Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Binary::IsInitialized() const {
  return true;
}

void Type_Binary::InternalSwap(Type_Binary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Binary, nullability_)
      + sizeof(Type_Binary::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Binary, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Binary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Timestamp::InitAsDefaultInstance() {
}
class Type_Timestamp::_Internal {
 public:
};

Type_Timestamp::Type_Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Timestamp)
}
Type_Timestamp::Type_Timestamp(const Type_Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Timestamp)
}

void Type_Timestamp::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Timestamp::~Type_Timestamp() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Timestamp::ArenaDtor(void* object) {
  Type_Timestamp* _this = reinterpret_cast< Type_Timestamp* >(object);
  (void)_this;
}
void Type_Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Timestamp& Type_Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Timestamp_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Timestamp)
  return target;
}

size_t Type_Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Timestamp)
    MergeFrom(*source);
  }
}

void Type_Timestamp::MergeFrom(const Type_Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Timestamp::CopyFrom(const Type_Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Timestamp::IsInitialized() const {
  return true;
}

void Type_Timestamp::InternalSwap(Type_Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Timestamp, nullability_)
      + sizeof(Type_Timestamp::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Timestamp, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Date::InitAsDefaultInstance() {
}
class Type_Date::_Internal {
 public:
};

Type_Date::Type_Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Date)
}
Type_Date::Type_Date(const Type_Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Date)
}

void Type_Date::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Date::~Type_Date() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Date::ArenaDtor(void* object) {
  Type_Date* _this = reinterpret_cast< Type_Date* >(object);
  (void)_this;
}
void Type_Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Date& Type_Date::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Date_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Date::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Date)
  return target;
}

size_t Type_Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Date)
    MergeFrom(*source);
  }
}

void Type_Date::MergeFrom(const Type_Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Date::CopyFrom(const Type_Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Date::IsInitialized() const {
  return true;
}

void Type_Date::InternalSwap(Type_Date* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Date, nullability_)
      + sizeof(Type_Date::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Date, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Date::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Time::InitAsDefaultInstance() {
}
class Type_Time::_Internal {
 public:
};

Type_Time::Type_Time(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Time)
}
Type_Time::Type_Time(const Type_Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Time)
}

void Type_Time::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Time::~Type_Time() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Time)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Time::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Time::ArenaDtor(void* object) {
  Type_Time* _this = reinterpret_cast< Type_Time* >(object);
  (void)_this;
}
void Type_Time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Time& Type_Time::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Time_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Time)
  return target;
}

size_t Type_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Time::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Time* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Time)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Time)
    MergeFrom(*source);
  }
}

void Type_Time::MergeFrom(const Type_Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Time::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Time::CopyFrom(const Type_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Time::IsInitialized() const {
  return true;
}

void Type_Time::InternalSwap(Type_Time* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Time, nullability_)
      + sizeof(Type_Time::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Time, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Time::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_TimestampTZ::InitAsDefaultInstance() {
}
class Type_TimestampTZ::_Internal {
 public:
};

Type_TimestampTZ::Type_TimestampTZ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.TimestampTZ)
}
Type_TimestampTZ::Type_TimestampTZ(const Type_TimestampTZ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.TimestampTZ)
}

void Type_TimestampTZ::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_TimestampTZ::~Type_TimestampTZ() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.TimestampTZ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_TimestampTZ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_TimestampTZ::ArenaDtor(void* object) {
  Type_TimestampTZ* _this = reinterpret_cast< Type_TimestampTZ* >(object);
  (void)_this;
}
void Type_TimestampTZ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_TimestampTZ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_TimestampTZ& Type_TimestampTZ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_TimestampTZ_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_TimestampTZ::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.TimestampTZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_TimestampTZ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_TimestampTZ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.TimestampTZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.TimestampTZ)
  return target;
}

size_t Type_TimestampTZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.TimestampTZ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_TimestampTZ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.TimestampTZ)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_TimestampTZ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_TimestampTZ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.TimestampTZ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.TimestampTZ)
    MergeFrom(*source);
  }
}

void Type_TimestampTZ::MergeFrom(const Type_TimestampTZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.TimestampTZ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_TimestampTZ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.TimestampTZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_TimestampTZ::CopyFrom(const Type_TimestampTZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.TimestampTZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_TimestampTZ::IsInitialized() const {
  return true;
}

void Type_TimestampTZ::InternalSwap(Type_TimestampTZ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, nullability_)
      + sizeof(Type_TimestampTZ::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_TimestampTZ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_IntervalYear::InitAsDefaultInstance() {
}
class Type_IntervalYear::_Internal {
 public:
};

Type_IntervalYear::Type_IntervalYear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.IntervalYear)
}
Type_IntervalYear::Type_IntervalYear(const Type_IntervalYear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.IntervalYear)
}

void Type_IntervalYear::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_IntervalYear::~Type_IntervalYear() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.IntervalYear)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_IntervalYear::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_IntervalYear::ArenaDtor(void* object) {
  Type_IntervalYear* _this = reinterpret_cast< Type_IntervalYear* >(object);
  (void)_this;
}
void Type_IntervalYear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_IntervalYear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_IntervalYear& Type_IntervalYear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_IntervalYear_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_IntervalYear::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.IntervalYear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalYear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_IntervalYear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.IntervalYear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.IntervalYear)
  return target;
}

size_t Type_IntervalYear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.IntervalYear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_IntervalYear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.IntervalYear)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_IntervalYear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_IntervalYear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.IntervalYear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.IntervalYear)
    MergeFrom(*source);
  }
}

void Type_IntervalYear::MergeFrom(const Type_IntervalYear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.IntervalYear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_IntervalYear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.IntervalYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_IntervalYear::CopyFrom(const Type_IntervalYear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.IntervalYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalYear::IsInitialized() const {
  return true;
}

void Type_IntervalYear::InternalSwap(Type_IntervalYear* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalYear, nullability_)
      + sizeof(Type_IntervalYear::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalYear, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalYear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_IntervalDay::InitAsDefaultInstance() {
}
class Type_IntervalDay::_Internal {
 public:
};

Type_IntervalDay::Type_IntervalDay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.IntervalDay)
}
Type_IntervalDay::Type_IntervalDay(const Type_IntervalDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.IntervalDay)
}

void Type_IntervalDay::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_IntervalDay::~Type_IntervalDay() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.IntervalDay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_IntervalDay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_IntervalDay::ArenaDtor(void* object) {
  Type_IntervalDay* _this = reinterpret_cast< Type_IntervalDay* >(object);
  (void)_this;
}
void Type_IntervalDay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_IntervalDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_IntervalDay& Type_IntervalDay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_IntervalDay_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_IntervalDay::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.IntervalDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_IntervalDay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.IntervalDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.IntervalDay)
  return target;
}

size_t Type_IntervalDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.IntervalDay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_IntervalDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.IntervalDay)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_IntervalDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_IntervalDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.IntervalDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.IntervalDay)
    MergeFrom(*source);
  }
}

void Type_IntervalDay::MergeFrom(const Type_IntervalDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.IntervalDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_IntervalDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.IntervalDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_IntervalDay::CopyFrom(const Type_IntervalDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.IntervalDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalDay::IsInitialized() const {
  return true;
}

void Type_IntervalDay::InternalSwap(Type_IntervalDay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalDay, nullability_)
      + sizeof(Type_IntervalDay::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalDay, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalDay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_UUID::InitAsDefaultInstance() {
}
class Type_UUID::_Internal {
 public:
};

Type_UUID::Type_UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.UUID)
}
Type_UUID::Type_UUID(const Type_UUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.UUID)
}

void Type_UUID::SharedCtor() {
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_UUID::~Type_UUID() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.UUID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_UUID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_UUID::ArenaDtor(void* object) {
  Type_UUID* _this = reinterpret_cast< Type_UUID* >(object);
  (void)_this;
}
void Type_UUID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_UUID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_UUID& Type_UUID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_UUID_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_UUID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_UUID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.UUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.UUID)
  return target;
}

size_t Type_UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.UUID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 2;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_UUID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_UUID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_UUID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.UUID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.UUID)
    MergeFrom(*source);
  }
}

void Type_UUID::MergeFrom(const Type_UUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.UUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_UUID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_UUID::CopyFrom(const Type_UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_UUID::IsInitialized() const {
  return true;
}

void Type_UUID::InternalSwap(Type_UUID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_UUID, nullability_)
      + sizeof(Type_UUID::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_UUID, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_UUID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_FixedChar::InitAsDefaultInstance() {
}
class Type_FixedChar::_Internal {
 public:
};

Type_FixedChar::Type_FixedChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.FixedChar)
}
Type_FixedChar::Type_FixedChar(const Type_FixedChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.FixedChar)
}

void Type_FixedChar::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
}

Type_FixedChar::~Type_FixedChar() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.FixedChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FixedChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_FixedChar::ArenaDtor(void* object) {
  Type_FixedChar* _this = reinterpret_cast< Type_FixedChar* >(object);
  (void)_this;
}
void Type_FixedChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FixedChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_FixedChar& Type_FixedChar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_FixedChar_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_FixedChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.FixedChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FixedChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.FixedChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.FixedChar)
  return target;
}

size_t Type_FixedChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.FixedChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FixedChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.FixedChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FixedChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FixedChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.FixedChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.FixedChar)
    MergeFrom(*source);
  }
}

void Type_FixedChar::MergeFrom(const Type_FixedChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.FixedChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FixedChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.FixedChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FixedChar::CopyFrom(const Type_FixedChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.FixedChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedChar::IsInitialized() const {
  return true;
}

void Type_FixedChar::InternalSwap(Type_FixedChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedChar, nullability_)
      + sizeof(Type_FixedChar::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedChar, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedChar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_VarChar::InitAsDefaultInstance() {
}
class Type_VarChar::_Internal {
 public:
};

Type_VarChar::Type_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.VarChar)
}
Type_VarChar::Type_VarChar(const Type_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.VarChar)
}

void Type_VarChar::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
}

Type_VarChar::~Type_VarChar() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.VarChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_VarChar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_VarChar::ArenaDtor(void* object) {
  Type_VarChar* _this = reinterpret_cast< Type_VarChar* >(object);
  (void)_this;
}
void Type_VarChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_VarChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_VarChar& Type_VarChar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_VarChar_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_VarChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_VarChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.VarChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.VarChar)
  return target;
}

size_t Type_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.VarChar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_VarChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_VarChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_VarChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.VarChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.VarChar)
    MergeFrom(*source);
  }
}

void Type_VarChar::MergeFrom(const Type_VarChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.VarChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_VarChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_VarChar::CopyFrom(const Type_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_VarChar::IsInitialized() const {
  return true;
}

void Type_VarChar::InternalSwap(Type_VarChar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_VarChar, nullability_)
      + sizeof(Type_VarChar::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_VarChar, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_VarChar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_FixedBinary::InitAsDefaultInstance() {
}
class Type_FixedBinary::_Internal {
 public:
};

Type_FixedBinary::Type_FixedBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.FixedBinary)
}
Type_FixedBinary::Type_FixedBinary(const Type_FixedBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.FixedBinary)
}

void Type_FixedBinary::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
}

Type_FixedBinary::~Type_FixedBinary() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.FixedBinary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_FixedBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_FixedBinary::ArenaDtor(void* object) {
  Type_FixedBinary* _this = reinterpret_cast< Type_FixedBinary* >(object);
  (void)_this;
}
void Type_FixedBinary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FixedBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_FixedBinary& Type_FixedBinary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_FixedBinary_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_FixedBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.FixedBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FixedBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.FixedBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.FixedBinary)
  return target;
}

size_t Type_FixedBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.FixedBinary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FixedBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.FixedBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FixedBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FixedBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.FixedBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.FixedBinary)
    MergeFrom(*source);
  }
}

void Type_FixedBinary::MergeFrom(const Type_FixedBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.FixedBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_FixedBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.FixedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FixedBinary::CopyFrom(const Type_FixedBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.FixedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedBinary::IsInitialized() const {
  return true;
}

void Type_FixedBinary::InternalSwap(Type_FixedBinary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedBinary, nullability_)
      + sizeof(Type_FixedBinary::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedBinary, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedBinary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Decimal::InitAsDefaultInstance() {
}
class Type_Decimal::_Internal {
 public:
};

Type_Decimal::Type_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Decimal)
}
Type_Decimal::Type_Decimal(const Type_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Decimal)
}

void Type_Decimal::SharedCtor() {
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(nullability_));
}

Type_Decimal::~Type_Decimal() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Decimal::ArenaDtor(void* object) {
  Type_Decimal* _this = reinterpret_cast< Type_Decimal* >(object);
  (void)_this;
}
void Type_Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Decimal& Type_Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_Decimal_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scale(), target);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // uint32 type_variation_reference = 3;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Decimal)
  return target;
}

size_t Type_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scale());
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  // uint32 type_variation_reference = 3;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Decimal)
    MergeFrom(*source);
  }
}

void Type_Decimal::MergeFrom(const Type_Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Decimal::CopyFrom(const Type_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Decimal::IsInitialized() const {
  return true;
}

void Type_Decimal::InternalSwap(Type_Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Decimal, nullability_)
      + sizeof(Type_Decimal::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Decimal, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Struct::InitAsDefaultInstance() {
}
class Type_Struct::_Internal {
 public:
};

Type_Struct::Type_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Struct)
}
Type_Struct::Type_Struct(const Type_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Struct)
}

void Type_Struct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
}

Type_Struct::~Type_Struct() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Struct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_Struct::ArenaDtor(void* object) {
  Type_Struct* _this = reinterpret_cast< Type_Struct* >(object);
  (void)_this;
}
void Type_Struct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Struct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Struct& Type_Struct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Struct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .substrait.proto.Type types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Struct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Struct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.proto.Type types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_types(i), target, stream);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Struct)
  return target;
}

size_t Type_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Struct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Type types = 1;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Struct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Struct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Struct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Struct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Struct)
    MergeFrom(*source);
  }
}

void Type_Struct::MergeFrom(const Type_Struct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Struct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Struct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Struct::CopyFrom(const Type_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Struct::IsInitialized() const {
  return true;
}

void Type_Struct::InternalSwap(Type_Struct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Struct, nullability_)
      + sizeof(Type_Struct::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Struct, type_variation_reference_)>(
          reinterpret_cast<char*>(&type_variation_reference_),
          reinterpret_cast<char*>(&other->type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Struct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_List::InitAsDefaultInstance() {
  ::substrait::proto::_Type_List_default_instance_._instance.get_mutable()->type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
}
class Type_List::_Internal {
 public:
  static const ::substrait::proto::Type& type(const Type_List* msg);
};

const ::substrait::proto::Type&
Type_List::_Internal::type(const Type_List* msg) {
  return *msg->type_;
}
Type_List::Type_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.List)
}
Type_List::Type_List(const Type_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::substrait::proto::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.List)
}

void Type_List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_)) + sizeof(nullability_));
}

Type_List::~Type_List() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete type_;
}

void Type_List::ArenaDtor(void* object) {
  Type_List* _this = reinterpret_cast< Type_List* >(object);
  (void)_this;
}
void Type_List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_List& Type_List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_List::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Type type = 1;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.List)
  return target;
}

size_t Type_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.List)
    MergeFrom(*source);
  }
}

void Type_List::MergeFrom(const Type_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::substrait::proto::Type::MergeFrom(from._internal_type());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_List::CopyFrom(const Type_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_List::IsInitialized() const {
  return true;
}

void Type_List::InternalSwap(Type_List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_List, nullability_)
      + sizeof(Type_List::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_List, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Map::InitAsDefaultInstance() {
  ::substrait::proto::_Type_Map_default_instance_._instance.get_mutable()->key_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Type_Map_default_instance_._instance.get_mutable()->value_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
}
class Type_Map::_Internal {
 public:
  static const ::substrait::proto::Type& key(const Type_Map* msg);
  static const ::substrait::proto::Type& value(const Type_Map* msg);
};

const ::substrait::proto::Type&
Type_Map::_Internal::key(const Type_Map* msg) {
  return *msg->key_;
}
const ::substrait::proto::Type&
Type_Map::_Internal::value(const Type_Map* msg) {
  return *msg->value_;
}
Type_Map::Type_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Map)
}
Type_Map::Type_Map(const Type_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::substrait::proto::Type(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::substrait::proto::Type(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&type_variation_reference_, &from.type_variation_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Map)
}

void Type_Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&key_)) + sizeof(nullability_));
}

Type_Map::~Type_Map() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void Type_Map::ArenaDtor(void* object) {
  Type_Map* _this = reinterpret_cast< Type_Map* >(object);
  (void)_this;
}
void Type_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Map& Type_Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&type_variation_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_variation_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Type key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Type key = 1;
  if (this->has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .substrait.proto.Type value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // uint32 type_variation_reference = 3;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Map)
  return target;
}

size_t Type_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.proto.Type key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .substrait.proto.Type value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // uint32 type_variation_reference = 3;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 4;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Map)
    MergeFrom(*source);
  }
}

void Type_Map::MergeFrom(const Type_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _internal_mutable_key()->::substrait::proto::Type::MergeFrom(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::substrait::proto::Type::MergeFrom(from._internal_value());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Map::CopyFrom(const Type_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Map::IsInitialized() const {
  return true;
}

void Type_Map::InternalSwap(Type_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Map, nullability_)
      + sizeof(Type_Map::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Map, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_UserDefined::InitAsDefaultInstance() {
}
class Type_UserDefined::_Internal {
 public:
};

Type_UserDefined::Type_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.UserDefined)
}
Type_UserDefined::Type_UserDefined(const Type_UserDefined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_parameters_(from.type_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_reference_, &from.type_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullability_) -
    reinterpret_cast<char*>(&type_reference_)) + sizeof(nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.UserDefined)
}

void Type_UserDefined::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  ::memset(&type_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_reference_)) + sizeof(nullability_));
}

Type_UserDefined::~Type_UserDefined() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.UserDefined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_UserDefined::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Type_UserDefined::ArenaDtor(void* object) {
  Type_UserDefined* _this = reinterpret_cast< Type_UserDefined* >(object);
  (void)_this;
}
void Type_UserDefined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_UserDefined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_UserDefined& Type_UserDefined::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_UserDefined::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.UserDefined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_parameters_.Clear();
  ::memset(&type_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullability_) -
      reinterpret_cast<char*>(&type_reference_)) + sizeof(nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_UserDefined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Nullability nullability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::proto::Type_Nullability>(val));
        } else goto handle_unusual;
        continue;
      // repeated .substrait.proto.Type.Parameter type_parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_UserDefined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.UserDefined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_reference = 1;
  if (this->type_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_reference(), target);
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nullability(), target);
  }

  // repeated .substrait.proto.Type.Parameter type_parameters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_type_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.UserDefined)
  return target;
}

size_t Type_UserDefined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.UserDefined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.proto.Type.Parameter type_parameters = 4;
  total_size += 1UL * this->_internal_type_parameters_size();
  for (const auto& msg : this->type_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type_reference = 1;
  if (this->type_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_reference());
  }

  // uint32 type_variation_reference = 2;
  if (this->type_variation_reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  // .substrait.proto.Type.Nullability nullability = 3;
  if (this->nullability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_UserDefined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.UserDefined)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_UserDefined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_UserDefined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.UserDefined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.UserDefined)
    MergeFrom(*source);
  }
}

void Type_UserDefined::MergeFrom(const Type_UserDefined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.UserDefined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_parameters_.MergeFrom(from.type_parameters_);
  if (from.type_reference() != 0) {
    _internal_set_type_reference(from._internal_type_reference());
  }
  if (from.type_variation_reference() != 0) {
    _internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from.nullability() != 0) {
    _internal_set_nullability(from._internal_nullability());
  }
}

void Type_UserDefined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_UserDefined::CopyFrom(const Type_UserDefined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_UserDefined::IsInitialized() const {
  return true;
}

void Type_UserDefined::InternalSwap(Type_UserDefined* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_parameters_.InternalSwap(&other->type_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_UserDefined, nullability_)
      + sizeof(Type_UserDefined::nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_UserDefined, type_reference_)>(
          reinterpret_cast<char*>(&type_reference_),
          reinterpret_cast<char*>(&other->type_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_UserDefined::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_Parameter::InitAsDefaultInstance() {
  ::substrait::proto::_Type_Parameter_default_instance_.null_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::substrait::proto::_Type_Parameter_default_instance_.data_type_ = const_cast< ::substrait::proto::Type*>(
      ::substrait::proto::Type::internal_default_instance());
  ::substrait::proto::_Type_Parameter_default_instance_.boolean_ = false;
  ::substrait::proto::_Type_Parameter_default_instance_.integer_ = PROTOBUF_LONGLONG(0);
  ::substrait::proto::_Type_Parameter_default_instance_.enum__.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::substrait::proto::_Type_Parameter_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Type_Parameter::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Empty& null(const Type_Parameter* msg);
  static const ::substrait::proto::Type& data_type(const Type_Parameter* msg);
};

const PROTOBUF_NAMESPACE_ID::Empty&
Type_Parameter::_Internal::null(const Type_Parameter* msg) {
  return *msg->parameter_.null_;
}
const ::substrait::proto::Type&
Type_Parameter::_Internal::data_type(const Type_Parameter* msg) {
  return *msg->parameter_.data_type_;
}
void Type_Parameter::set_allocated_null(PROTOBUF_NAMESPACE_ID::Empty* null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_parameter();
  if (null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null)->GetArena();
    if (message_arena != submessage_arena) {
      null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null, submessage_arena);
    }
    set_has_null();
    parameter_.null_ = null;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.Parameter.null)
}
void Type_Parameter::clear_null() {
  if (_internal_has_null()) {
    if (GetArena() == nullptr) {
      delete parameter_.null_;
    }
    clear_has_parameter();
  }
}
void Type_Parameter::set_allocated_data_type(::substrait::proto::Type* data_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_parameter();
  if (data_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_type);
    if (message_arena != submessage_arena) {
      data_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_type, submessage_arena);
    }
    set_has_data_type();
    parameter_.data_type_ = data_type;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.Parameter.data_type)
}
Type_Parameter::Type_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type.Parameter)
}
Type_Parameter::Type_Parameter(const Type_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_parameter();
  switch (from.parameter_case()) {
    case kNull: {
      _internal_mutable_null()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_null());
      break;
    }
    case kDataType: {
      _internal_mutable_data_type()->::substrait::proto::Type::MergeFrom(from._internal_data_type());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type.Parameter)
}

void Type_Parameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  clear_has_parameter();
}

Type_Parameter::~Type_Parameter() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type.Parameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_parameter()) {
    clear_parameter();
  }
}

void Type_Parameter::ArenaDtor(void* object) {
  Type_Parameter* _this = reinterpret_cast< Type_Parameter* >(object);
  (void)_this;
}
void Type_Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_Parameter& Type_Parameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type_Parameter::clear_parameter() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Type.Parameter)
  switch (parameter_case()) {
    case kNull: {
      if (GetArena() == nullptr) {
        delete parameter_.null_;
      }
      break;
    }
    case kDataType: {
      if (GetArena() == nullptr) {
        delete parameter_.data_type_;
      }
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kInteger: {
      // No need to clear
      break;
    }
    case kEnum: {
      parameter_.enum__.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kString: {
      parameter_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETER_NOT_SET;
}


void Type_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameter();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Empty null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_null(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boolean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 integer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_integer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_enum_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Type.Parameter.enum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.Type.Parameter.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty null = 1;
  if (_internal_has_null()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::null(this), target, stream);
  }

  // .substrait.proto.Type data_type = 2;
  if (_internal_has_data_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_type(this), target, stream);
  }

  // bool boolean = 3;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_boolean(), target);
  }

  // int64 integer = 4;
  if (_internal_has_integer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_integer(), target);
  }

  // string enum = 5;
  if (_internal_has_enum_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enum_().data(), static_cast<int>(this->_internal_enum_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Type.Parameter.enum");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_enum_(), target);
  }

  // string string = 6;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.Type.Parameter.string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type.Parameter)
  return target;
}

size_t Type_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parameter_case()) {
    // .google.protobuf.Empty null = 1;
    case kNull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameter_.null_);
      break;
    }
    // .substrait.proto.Type data_type = 2;
    case kDataType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameter_.data_type_);
      break;
    }
    // bool boolean = 3;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // int64 integer = 4;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_integer());
      break;
    }
    // string enum = 5;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_());
      break;
    }
    // string string = 6;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type.Parameter)
    MergeFrom(*source);
  }
}

void Type_Parameter::MergeFrom(const Type_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameter_case()) {
    case kNull: {
      _internal_mutable_null()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_null());
      break;
    }
    case kDataType: {
      _internal_mutable_data_type()->::substrait::proto::Type::MergeFrom(from._internal_data_type());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kEnum: {
      _internal_set_enum_(from._internal_enum_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
}

void Type_Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_Parameter::CopyFrom(const Type_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Parameter::IsInitialized() const {
  return true;
}

void Type_Parameter::InternalSwap(Type_Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(parameter_, other->parameter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Parameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type::InitAsDefaultInstance() {
  ::substrait::proto::_Type_default_instance_.bool__ = const_cast< ::substrait::proto::Type_Boolean*>(
      ::substrait::proto::Type_Boolean::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.i8_ = const_cast< ::substrait::proto::Type_I8*>(
      ::substrait::proto::Type_I8::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.i16_ = const_cast< ::substrait::proto::Type_I16*>(
      ::substrait::proto::Type_I16::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.i32_ = const_cast< ::substrait::proto::Type_I32*>(
      ::substrait::proto::Type_I32::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.i64_ = const_cast< ::substrait::proto::Type_I64*>(
      ::substrait::proto::Type_I64::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.fp32_ = const_cast< ::substrait::proto::Type_FP32*>(
      ::substrait::proto::Type_FP32::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.fp64_ = const_cast< ::substrait::proto::Type_FP64*>(
      ::substrait::proto::Type_FP64::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.string_ = const_cast< ::substrait::proto::Type_String*>(
      ::substrait::proto::Type_String::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.binary_ = const_cast< ::substrait::proto::Type_Binary*>(
      ::substrait::proto::Type_Binary::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.timestamp_ = const_cast< ::substrait::proto::Type_Timestamp*>(
      ::substrait::proto::Type_Timestamp::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.date_ = const_cast< ::substrait::proto::Type_Date*>(
      ::substrait::proto::Type_Date::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.time_ = const_cast< ::substrait::proto::Type_Time*>(
      ::substrait::proto::Type_Time::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.interval_year_ = const_cast< ::substrait::proto::Type_IntervalYear*>(
      ::substrait::proto::Type_IntervalYear::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.interval_day_ = const_cast< ::substrait::proto::Type_IntervalDay*>(
      ::substrait::proto::Type_IntervalDay::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.timestamp_tz_ = const_cast< ::substrait::proto::Type_TimestampTZ*>(
      ::substrait::proto::Type_TimestampTZ::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.uuid_ = const_cast< ::substrait::proto::Type_UUID*>(
      ::substrait::proto::Type_UUID::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.fixed_char_ = const_cast< ::substrait::proto::Type_FixedChar*>(
      ::substrait::proto::Type_FixedChar::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.varchar_ = const_cast< ::substrait::proto::Type_VarChar*>(
      ::substrait::proto::Type_VarChar::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.fixed_binary_ = const_cast< ::substrait::proto::Type_FixedBinary*>(
      ::substrait::proto::Type_FixedBinary::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.decimal_ = const_cast< ::substrait::proto::Type_Decimal*>(
      ::substrait::proto::Type_Decimal::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.struct__ = const_cast< ::substrait::proto::Type_Struct*>(
      ::substrait::proto::Type_Struct::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.list_ = const_cast< ::substrait::proto::Type_List*>(
      ::substrait::proto::Type_List::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.map_ = const_cast< ::substrait::proto::Type_Map*>(
      ::substrait::proto::Type_Map::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.user_defined_ = const_cast< ::substrait::proto::Type_UserDefined*>(
      ::substrait::proto::Type_UserDefined::internal_default_instance());
  ::substrait::proto::_Type_default_instance_.user_defined_type_reference_ = 0u;
}
class Type::_Internal {
 public:
  static const ::substrait::proto::Type_Boolean& bool_(const Type* msg);
  static const ::substrait::proto::Type_I8& i8(const Type* msg);
  static const ::substrait::proto::Type_I16& i16(const Type* msg);
  static const ::substrait::proto::Type_I32& i32(const Type* msg);
  static const ::substrait::proto::Type_I64& i64(const Type* msg);
  static const ::substrait::proto::Type_FP32& fp32(const Type* msg);
  static const ::substrait::proto::Type_FP64& fp64(const Type* msg);
  static const ::substrait::proto::Type_String& string(const Type* msg);
  static const ::substrait::proto::Type_Binary& binary(const Type* msg);
  static const ::substrait::proto::Type_Timestamp& timestamp(const Type* msg);
  static const ::substrait::proto::Type_Date& date(const Type* msg);
  static const ::substrait::proto::Type_Time& time(const Type* msg);
  static const ::substrait::proto::Type_IntervalYear& interval_year(const Type* msg);
  static const ::substrait::proto::Type_IntervalDay& interval_day(const Type* msg);
  static const ::substrait::proto::Type_TimestampTZ& timestamp_tz(const Type* msg);
  static const ::substrait::proto::Type_UUID& uuid(const Type* msg);
  static const ::substrait::proto::Type_FixedChar& fixed_char(const Type* msg);
  static const ::substrait::proto::Type_VarChar& varchar(const Type* msg);
  static const ::substrait::proto::Type_FixedBinary& fixed_binary(const Type* msg);
  static const ::substrait::proto::Type_Decimal& decimal(const Type* msg);
  static const ::substrait::proto::Type_Struct& struct_(const Type* msg);
  static const ::substrait::proto::Type_List& list(const Type* msg);
  static const ::substrait::proto::Type_Map& map(const Type* msg);
  static const ::substrait::proto::Type_UserDefined& user_defined(const Type* msg);
};

const ::substrait::proto::Type_Boolean&
Type::_Internal::bool_(const Type* msg) {
  return *msg->kind_.bool__;
}
const ::substrait::proto::Type_I8&
Type::_Internal::i8(const Type* msg) {
  return *msg->kind_.i8_;
}
const ::substrait::proto::Type_I16&
Type::_Internal::i16(const Type* msg) {
  return *msg->kind_.i16_;
}
const ::substrait::proto::Type_I32&
Type::_Internal::i32(const Type* msg) {
  return *msg->kind_.i32_;
}
const ::substrait::proto::Type_I64&
Type::_Internal::i64(const Type* msg) {
  return *msg->kind_.i64_;
}
const ::substrait::proto::Type_FP32&
Type::_Internal::fp32(const Type* msg) {
  return *msg->kind_.fp32_;
}
const ::substrait::proto::Type_FP64&
Type::_Internal::fp64(const Type* msg) {
  return *msg->kind_.fp64_;
}
const ::substrait::proto::Type_String&
Type::_Internal::string(const Type* msg) {
  return *msg->kind_.string_;
}
const ::substrait::proto::Type_Binary&
Type::_Internal::binary(const Type* msg) {
  return *msg->kind_.binary_;
}
const ::substrait::proto::Type_Timestamp&
Type::_Internal::timestamp(const Type* msg) {
  return *msg->kind_.timestamp_;
}
const ::substrait::proto::Type_Date&
Type::_Internal::date(const Type* msg) {
  return *msg->kind_.date_;
}
const ::substrait::proto::Type_Time&
Type::_Internal::time(const Type* msg) {
  return *msg->kind_.time_;
}
const ::substrait::proto::Type_IntervalYear&
Type::_Internal::interval_year(const Type* msg) {
  return *msg->kind_.interval_year_;
}
const ::substrait::proto::Type_IntervalDay&
Type::_Internal::interval_day(const Type* msg) {
  return *msg->kind_.interval_day_;
}
const ::substrait::proto::Type_TimestampTZ&
Type::_Internal::timestamp_tz(const Type* msg) {
  return *msg->kind_.timestamp_tz_;
}
const ::substrait::proto::Type_UUID&
Type::_Internal::uuid(const Type* msg) {
  return *msg->kind_.uuid_;
}
const ::substrait::proto::Type_FixedChar&
Type::_Internal::fixed_char(const Type* msg) {
  return *msg->kind_.fixed_char_;
}
const ::substrait::proto::Type_VarChar&
Type::_Internal::varchar(const Type* msg) {
  return *msg->kind_.varchar_;
}
const ::substrait::proto::Type_FixedBinary&
Type::_Internal::fixed_binary(const Type* msg) {
  return *msg->kind_.fixed_binary_;
}
const ::substrait::proto::Type_Decimal&
Type::_Internal::decimal(const Type* msg) {
  return *msg->kind_.decimal_;
}
const ::substrait::proto::Type_Struct&
Type::_Internal::struct_(const Type* msg) {
  return *msg->kind_.struct__;
}
const ::substrait::proto::Type_List&
Type::_Internal::list(const Type* msg) {
  return *msg->kind_.list_;
}
const ::substrait::proto::Type_Map&
Type::_Internal::map(const Type* msg) {
  return *msg->kind_.map_;
}
const ::substrait::proto::Type_UserDefined&
Type::_Internal::user_defined(const Type* msg) {
  return *msg->kind_.user_defined_;
}
void Type::set_allocated_bool_(::substrait::proto::Type_Boolean* bool_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (bool_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_);
    if (message_arena != submessage_arena) {
      bool_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_, submessage_arena);
    }
    set_has_bool_();
    kind_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.bool)
}
void Type::set_allocated_i8(::substrait::proto::Type_I8* i8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i8);
    if (message_arena != submessage_arena) {
      i8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i8, submessage_arena);
    }
    set_has_i8();
    kind_.i8_ = i8;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.i8)
}
void Type::set_allocated_i16(::substrait::proto::Type_I16* i16) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i16) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i16);
    if (message_arena != submessage_arena) {
      i16 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i16, submessage_arena);
    }
    set_has_i16();
    kind_.i16_ = i16;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.i16)
}
void Type::set_allocated_i32(::substrait::proto::Type_I32* i32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i32);
    if (message_arena != submessage_arena) {
      i32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i32, submessage_arena);
    }
    set_has_i32();
    kind_.i32_ = i32;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.i32)
}
void Type::set_allocated_i64(::substrait::proto::Type_I64* i64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (i64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(i64);
    if (message_arena != submessage_arena) {
      i64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i64, submessage_arena);
    }
    set_has_i64();
    kind_.i64_ = i64;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.i64)
}
void Type::set_allocated_fp32(::substrait::proto::Type_FP32* fp32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fp32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fp32);
    if (message_arena != submessage_arena) {
      fp32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp32, submessage_arena);
    }
    set_has_fp32();
    kind_.fp32_ = fp32;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.fp32)
}
void Type::set_allocated_fp64(::substrait::proto::Type_FP64* fp64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fp64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fp64);
    if (message_arena != submessage_arena) {
      fp64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp64, submessage_arena);
    }
    set_has_fp64();
    kind_.fp64_ = fp64;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.fp64)
}
void Type::set_allocated_string(::substrait::proto::Type_String* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string);
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    kind_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.string)
}
void Type::set_allocated_binary(::substrait::proto::Type_Binary* binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(binary);
    if (message_arena != submessage_arena) {
      binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary, submessage_arena);
    }
    set_has_binary();
    kind_.binary_ = binary;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.binary)
}
void Type::set_allocated_timestamp(::substrait::proto::Type_Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
    kind_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.timestamp)
}
void Type::set_allocated_date(::substrait::proto::Type_Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    set_has_date();
    kind_.date_ = date;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.date)
}
void Type::set_allocated_time(::substrait::proto::Type_Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    kind_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.time)
}
void Type::set_allocated_interval_year(::substrait::proto::Type_IntervalYear* interval_year) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (interval_year) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_year);
    if (message_arena != submessage_arena) {
      interval_year = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year, submessage_arena);
    }
    set_has_interval_year();
    kind_.interval_year_ = interval_year;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.interval_year)
}
void Type::set_allocated_interval_day(::substrait::proto::Type_IntervalDay* interval_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (interval_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval_day);
    if (message_arena != submessage_arena) {
      interval_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day, submessage_arena);
    }
    set_has_interval_day();
    kind_.interval_day_ = interval_day;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.interval_day)
}
void Type::set_allocated_timestamp_tz(::substrait::proto::Type_TimestampTZ* timestamp_tz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (timestamp_tz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp_tz);
    if (message_arena != submessage_arena) {
      timestamp_tz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_tz, submessage_arena);
    }
    set_has_timestamp_tz();
    kind_.timestamp_tz_ = timestamp_tz;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.timestamp_tz)
}
void Type::set_allocated_uuid(::substrait::proto::Type_UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    set_has_uuid();
    kind_.uuid_ = uuid;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.uuid)
}
void Type::set_allocated_fixed_char(::substrait::proto::Type_FixedChar* fixed_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fixed_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_char);
    if (message_arena != submessage_arena) {
      fixed_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_char, submessage_arena);
    }
    set_has_fixed_char();
    kind_.fixed_char_ = fixed_char;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.fixed_char)
}
void Type::set_allocated_varchar(::substrait::proto::Type_VarChar* varchar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (varchar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(varchar);
    if (message_arena != submessage_arena) {
      varchar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varchar, submessage_arena);
    }
    set_has_varchar();
    kind_.varchar_ = varchar;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.varchar)
}
void Type::set_allocated_fixed_binary(::substrait::proto::Type_FixedBinary* fixed_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (fixed_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_binary);
    if (message_arena != submessage_arena) {
      fixed_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_binary, submessage_arena);
    }
    set_has_fixed_binary();
    kind_.fixed_binary_ = fixed_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.fixed_binary)
}
void Type::set_allocated_decimal(::substrait::proto::Type_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    kind_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.decimal)
}
void Type::set_allocated_struct_(::substrait::proto::Type_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    kind_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.struct)
}
void Type::set_allocated_list(::substrait::proto::Type_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    kind_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.list)
}
void Type::set_allocated_map(::substrait::proto::Type_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    kind_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.map)
}
void Type::set_allocated_user_defined(::substrait::proto::Type_UserDefined* user_defined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (user_defined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_defined);
    if (message_arena != submessage_arena) {
      user_defined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined, submessage_arena);
    }
    set_has_user_defined();
    kind_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Type.user_defined)
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBool: {
      _internal_mutable_bool_()->::substrait::proto::Type_Boolean::MergeFrom(from._internal_bool_());
      break;
    }
    case kI8: {
      _internal_mutable_i8()->::substrait::proto::Type_I8::MergeFrom(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_mutable_i16()->::substrait::proto::Type_I16::MergeFrom(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::substrait::proto::Type_I32::MergeFrom(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::substrait::proto::Type_I64::MergeFrom(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_mutable_fp32()->::substrait::proto::Type_FP32::MergeFrom(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_mutable_fp64()->::substrait::proto::Type_FP64::MergeFrom(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_mutable_string()->::substrait::proto::Type_String::MergeFrom(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_mutable_binary()->::substrait::proto::Type_Binary::MergeFrom(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_mutable_timestamp()->::substrait::proto::Type_Timestamp::MergeFrom(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_mutable_date()->::substrait::proto::Type_Date::MergeFrom(from._internal_date());
      break;
    }
    case kTime: {
      _internal_mutable_time()->::substrait::proto::Type_Time::MergeFrom(from._internal_time());
      break;
    }
    case kIntervalYear: {
      _internal_mutable_interval_year()->::substrait::proto::Type_IntervalYear::MergeFrom(from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _internal_mutable_interval_day()->::substrait::proto::Type_IntervalDay::MergeFrom(from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _internal_mutable_timestamp_tz()->::substrait::proto::Type_TimestampTZ::MergeFrom(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_mutable_uuid()->::substrait::proto::Type_UUID::MergeFrom(from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _internal_mutable_fixed_char()->::substrait::proto::Type_FixedChar::MergeFrom(from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _internal_mutable_varchar()->::substrait::proto::Type_VarChar::MergeFrom(from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _internal_mutable_fixed_binary()->::substrait::proto::Type_FixedBinary::MergeFrom(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::substrait::proto::Type_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Type_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Type_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Type_Map::MergeFrom(from._internal_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::substrait::proto::Type_UserDefined::MergeFrom(from._internal_user_defined());
      break;
    }
    case kUserDefinedTypeReference: {
      _internal_set_user_defined_type_reference(from._internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.Type)
}

void Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  clear_has_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:substrait.proto.Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Type::ArenaDtor(void* object) {
  Type* _this = reinterpret_cast< Type* >(object);
  (void)_this;
}
void Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type& Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void Type::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.proto.Type)
  switch (kind_case()) {
    case kBool: {
      if (GetArena() == nullptr) {
        delete kind_.bool__;
      }
      break;
    }
    case kI8: {
      if (GetArena() == nullptr) {
        delete kind_.i8_;
      }
      break;
    }
    case kI16: {
      if (GetArena() == nullptr) {
        delete kind_.i16_;
      }
      break;
    }
    case kI32: {
      if (GetArena() == nullptr) {
        delete kind_.i32_;
      }
      break;
    }
    case kI64: {
      if (GetArena() == nullptr) {
        delete kind_.i64_;
      }
      break;
    }
    case kFp32: {
      if (GetArena() == nullptr) {
        delete kind_.fp32_;
      }
      break;
    }
    case kFp64: {
      if (GetArena() == nullptr) {
        delete kind_.fp64_;
      }
      break;
    }
    case kString: {
      if (GetArena() == nullptr) {
        delete kind_.string_;
      }
      break;
    }
    case kBinary: {
      if (GetArena() == nullptr) {
        delete kind_.binary_;
      }
      break;
    }
    case kTimestamp: {
      if (GetArena() == nullptr) {
        delete kind_.timestamp_;
      }
      break;
    }
    case kDate: {
      if (GetArena() == nullptr) {
        delete kind_.date_;
      }
      break;
    }
    case kTime: {
      if (GetArena() == nullptr) {
        delete kind_.time_;
      }
      break;
    }
    case kIntervalYear: {
      if (GetArena() == nullptr) {
        delete kind_.interval_year_;
      }
      break;
    }
    case kIntervalDay: {
      if (GetArena() == nullptr) {
        delete kind_.interval_day_;
      }
      break;
    }
    case kTimestampTz: {
      if (GetArena() == nullptr) {
        delete kind_.timestamp_tz_;
      }
      break;
    }
    case kUuid: {
      if (GetArena() == nullptr) {
        delete kind_.uuid_;
      }
      break;
    }
    case kFixedChar: {
      if (GetArena() == nullptr) {
        delete kind_.fixed_char_;
      }
      break;
    }
    case kVarchar: {
      if (GetArena() == nullptr) {
        delete kind_.varchar_;
      }
      break;
    }
    case kFixedBinary: {
      if (GetArena() == nullptr) {
        delete kind_.fixed_binary_;
      }
      break;
    }
    case kDecimal: {
      if (GetArena() == nullptr) {
        delete kind_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArena() == nullptr) {
        delete kind_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArena() == nullptr) {
        delete kind_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete kind_.map_;
      }
      break;
    }
    case kUserDefined: {
      if (GetArena() == nullptr) {
        delete kind_.user_defined_;
      }
      break;
    }
    case kUserDefinedTypeReference: {
      // No need to clear
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .substrait.proto.Type.Boolean bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.I8 i8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_i8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.I16 i16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_i16(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.I32 i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_i32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.I64 i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_i64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.FP32 fp32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.FP64 fp64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.String string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Binary binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Timestamp timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Date date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Time time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.IntervalYear interval_year = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.IntervalDay interval_day = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.FixedChar fixed_char = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_char(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.VarChar varchar = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_varchar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.FixedBinary fixed_binary = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Decimal decimal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Struct struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.List list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Map map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.TimestampTZ timestamp_tz = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp_tz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.UserDefined user_defined = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_defined_type_reference = 31 [deprecated = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _internal_set_user_defined_type_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.UUID uuid = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.proto.Type.Boolean bool = 1;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bool_(this), target, stream);
  }

  // .substrait.proto.Type.I8 i8 = 2;
  if (_internal_has_i8()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::i8(this), target, stream);
  }

  // .substrait.proto.Type.I16 i16 = 3;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::i16(this), target, stream);
  }

  // .substrait.proto.Type.I32 i32 = 5;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::i32(this), target, stream);
  }

  // .substrait.proto.Type.I64 i64 = 7;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::i64(this), target, stream);
  }

  // .substrait.proto.Type.FP32 fp32 = 10;
  if (_internal_has_fp32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fp32(this), target, stream);
  }

  // .substrait.proto.Type.FP64 fp64 = 11;
  if (_internal_has_fp64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fp64(this), target, stream);
  }

  // .substrait.proto.Type.String string = 12;
  if (_internal_has_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::string(this), target, stream);
  }

  // .substrait.proto.Type.Binary binary = 13;
  if (_internal_has_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::binary(this), target, stream);
  }

  // .substrait.proto.Type.Timestamp timestamp = 14;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::timestamp(this), target, stream);
  }

  // .substrait.proto.Type.Date date = 16;
  if (_internal_has_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::date(this), target, stream);
  }

  // .substrait.proto.Type.Time time = 17;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::time(this), target, stream);
  }

  // .substrait.proto.Type.IntervalYear interval_year = 19;
  if (_internal_has_interval_year()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::interval_year(this), target, stream);
  }

  // .substrait.proto.Type.IntervalDay interval_day = 20;
  if (_internal_has_interval_day()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::interval_day(this), target, stream);
  }

  // .substrait.proto.Type.FixedChar fixed_char = 21;
  if (_internal_has_fixed_char()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::fixed_char(this), target, stream);
  }

  // .substrait.proto.Type.VarChar varchar = 22;
  if (_internal_has_varchar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::varchar(this), target, stream);
  }

  // .substrait.proto.Type.FixedBinary fixed_binary = 23;
  if (_internal_has_fixed_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::fixed_binary(this), target, stream);
  }

  // .substrait.proto.Type.Decimal decimal = 24;
  if (_internal_has_decimal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::decimal(this), target, stream);
  }

  // .substrait.proto.Type.Struct struct = 25;
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::struct_(this), target, stream);
  }

  // .substrait.proto.Type.List list = 27;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::list(this), target, stream);
  }

  // .substrait.proto.Type.Map map = 28;
  if (_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::map(this), target, stream);
  }

  // .substrait.proto.Type.TimestampTZ timestamp_tz = 29;
  if (_internal_has_timestamp_tz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::timestamp_tz(this), target, stream);
  }

  // .substrait.proto.Type.UserDefined user_defined = 30;
  if (_internal_has_user_defined()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::user_defined(this), target, stream);
  }

  // uint32 user_defined_type_reference = 31 [deprecated = true];
  if (_internal_has_user_defined_type_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_user_defined_type_reference(), target);
  }

  // .substrait.proto.Type.UUID uuid = 32;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .substrait.proto.Type.Boolean bool = 1;
    case kBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.bool__);
      break;
    }
    // .substrait.proto.Type.I8 i8 = 2;
    case kI8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i8_);
      break;
    }
    // .substrait.proto.Type.I16 i16 = 3;
    case kI16: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i16_);
      break;
    }
    // .substrait.proto.Type.I32 i32 = 5;
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i32_);
      break;
    }
    // .substrait.proto.Type.I64 i64 = 7;
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.i64_);
      break;
    }
    // .substrait.proto.Type.FP32 fp32 = 10;
    case kFp32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fp32_);
      break;
    }
    // .substrait.proto.Type.FP64 fp64 = 11;
    case kFp64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fp64_);
      break;
    }
    // .substrait.proto.Type.String string = 12;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.string_);
      break;
    }
    // .substrait.proto.Type.Binary binary = 13;
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.binary_);
      break;
    }
    // .substrait.proto.Type.Timestamp timestamp = 14;
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.timestamp_);
      break;
    }
    // .substrait.proto.Type.Date date = 16;
    case kDate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.date_);
      break;
    }
    // .substrait.proto.Type.Time time = 17;
    case kTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.time_);
      break;
    }
    // .substrait.proto.Type.IntervalYear interval_year = 19;
    case kIntervalYear: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.interval_year_);
      break;
    }
    // .substrait.proto.Type.IntervalDay interval_day = 20;
    case kIntervalDay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.interval_day_);
      break;
    }
    // .substrait.proto.Type.TimestampTZ timestamp_tz = 29;
    case kTimestampTz: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.timestamp_tz_);
      break;
    }
    // .substrait.proto.Type.UUID uuid = 32;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.uuid_);
      break;
    }
    // .substrait.proto.Type.FixedChar fixed_char = 21;
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fixed_char_);
      break;
    }
    // .substrait.proto.Type.VarChar varchar = 22;
    case kVarchar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.varchar_);
      break;
    }
    // .substrait.proto.Type.FixedBinary fixed_binary = 23;
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.fixed_binary_);
      break;
    }
    // .substrait.proto.Type.Decimal decimal = 24;
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.decimal_);
      break;
    }
    // .substrait.proto.Type.Struct struct = 25;
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.struct__);
      break;
    }
    // .substrait.proto.Type.List list = 27;
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_);
      break;
    }
    // .substrait.proto.Type.Map map = 28;
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.map_);
      break;
    }
    // .substrait.proto.Type.UserDefined user_defined = 30;
    case kUserDefined: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.user_defined_);
      break;
    }
    // uint32 user_defined_type_reference = 31 [deprecated = true];
    case kUserDefinedTypeReference: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBool: {
      _internal_mutable_bool_()->::substrait::proto::Type_Boolean::MergeFrom(from._internal_bool_());
      break;
    }
    case kI8: {
      _internal_mutable_i8()->::substrait::proto::Type_I8::MergeFrom(from._internal_i8());
      break;
    }
    case kI16: {
      _internal_mutable_i16()->::substrait::proto::Type_I16::MergeFrom(from._internal_i16());
      break;
    }
    case kI32: {
      _internal_mutable_i32()->::substrait::proto::Type_I32::MergeFrom(from._internal_i32());
      break;
    }
    case kI64: {
      _internal_mutable_i64()->::substrait::proto::Type_I64::MergeFrom(from._internal_i64());
      break;
    }
    case kFp32: {
      _internal_mutable_fp32()->::substrait::proto::Type_FP32::MergeFrom(from._internal_fp32());
      break;
    }
    case kFp64: {
      _internal_mutable_fp64()->::substrait::proto::Type_FP64::MergeFrom(from._internal_fp64());
      break;
    }
    case kString: {
      _internal_mutable_string()->::substrait::proto::Type_String::MergeFrom(from._internal_string());
      break;
    }
    case kBinary: {
      _internal_mutable_binary()->::substrait::proto::Type_Binary::MergeFrom(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _internal_mutable_timestamp()->::substrait::proto::Type_Timestamp::MergeFrom(from._internal_timestamp());
      break;
    }
    case kDate: {
      _internal_mutable_date()->::substrait::proto::Type_Date::MergeFrom(from._internal_date());
      break;
    }
    case kTime: {
      _internal_mutable_time()->::substrait::proto::Type_Time::MergeFrom(from._internal_time());
      break;
    }
    case kIntervalYear: {
      _internal_mutable_interval_year()->::substrait::proto::Type_IntervalYear::MergeFrom(from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _internal_mutable_interval_day()->::substrait::proto::Type_IntervalDay::MergeFrom(from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _internal_mutable_timestamp_tz()->::substrait::proto::Type_TimestampTZ::MergeFrom(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _internal_mutable_uuid()->::substrait::proto::Type_UUID::MergeFrom(from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _internal_mutable_fixed_char()->::substrait::proto::Type_FixedChar::MergeFrom(from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _internal_mutable_varchar()->::substrait::proto::Type_VarChar::MergeFrom(from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _internal_mutable_fixed_binary()->::substrait::proto::Type_FixedBinary::MergeFrom(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _internal_mutable_decimal()->::substrait::proto::Type_Decimal::MergeFrom(from._internal_decimal());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->::substrait::proto::Type_Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case kList: {
      _internal_mutable_list()->::substrait::proto::Type_List::MergeFrom(from._internal_list());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::substrait::proto::Type_Map::MergeFrom(from._internal_map());
      break;
    }
    case kUserDefined: {
      _internal_mutable_user_defined()->::substrait::proto::Type_UserDefined::MergeFrom(from._internal_user_defined());
      break;
    }
    case kUserDefinedTypeReference: {
      _internal_set_user_defined_type_reference(from._internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedStruct::InitAsDefaultInstance() {
  ::substrait::proto::_NamedStruct_default_instance_._instance.get_mutable()->struct__ = const_cast< ::substrait::proto::Type_Struct*>(
      ::substrait::proto::Type_Struct::internal_default_instance());
}
class NamedStruct::_Internal {
 public:
  static const ::substrait::proto::Type_Struct& struct_(const NamedStruct* msg);
};

const ::substrait::proto::Type_Struct&
NamedStruct::_Internal::struct_(const NamedStruct* msg) {
  return *msg->struct__;
}
NamedStruct::NamedStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.proto.NamedStruct)
}
NamedStruct::NamedStruct(const NamedStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_struct_()) {
    struct__ = new ::substrait::proto::Type_Struct(*from.struct__);
  } else {
    struct__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.proto.NamedStruct)
}

void NamedStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto.base);
  struct__ = nullptr;
}

NamedStruct::~NamedStruct() {
  // @@protoc_insertion_point(destructor:substrait.proto.NamedStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete struct__;
}

void NamedStruct::ArenaDtor(void* object) {
  NamedStruct* _this = reinterpret_cast< NamedStruct* >(object);
  (void)_this;
}
void NamedStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedStruct& NamedStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedStruct_substrait_2fproto_2ftype_2eproto.base);
  return *internal_default_instance();
}


void NamedStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.proto.NamedStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.proto.NamedStruct.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .substrait.proto.Type.Struct struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.proto.NamedStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.proto.NamedStruct.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.proto.Type.Struct struct = 2;
  if (this->has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::struct_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.proto.NamedStruct)
  return target;
}

size_t NamedStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.proto.NamedStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.proto.Type.Struct struct = 2;
  if (this->has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:substrait.proto.NamedStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:substrait.proto.NamedStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:substrait.proto.NamedStruct)
    MergeFrom(*source);
  }
}

void NamedStruct::MergeFrom(const NamedStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.proto.NamedStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_struct_()) {
    _internal_mutable_struct_()->::substrait::proto::Type_Struct::MergeFrom(from._internal_struct_());
  }
}

void NamedStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:substrait.proto.NamedStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedStruct::CopyFrom(const NamedStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.proto.NamedStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedStruct::IsInitialized() const {
  return true;
}

void NamedStruct::InternalSwap(NamedStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(struct__, other->struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Boolean* Arena::CreateMaybeMessage< ::substrait::proto::Type_Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_I8* Arena::CreateMaybeMessage< ::substrait::proto::Type_I8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_I8 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_I16* Arena::CreateMaybeMessage< ::substrait::proto::Type_I16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_I16 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_I32* Arena::CreateMaybeMessage< ::substrait::proto::Type_I32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_I32 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_I64* Arena::CreateMaybeMessage< ::substrait::proto::Type_I64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_I64 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_FP32* Arena::CreateMaybeMessage< ::substrait::proto::Type_FP32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_FP32 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_FP64* Arena::CreateMaybeMessage< ::substrait::proto::Type_FP64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_FP64 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_String* Arena::CreateMaybeMessage< ::substrait::proto::Type_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_String >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Binary* Arena::CreateMaybeMessage< ::substrait::proto::Type_Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Timestamp* Arena::CreateMaybeMessage< ::substrait::proto::Type_Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Date* Arena::CreateMaybeMessage< ::substrait::proto::Type_Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Date >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Time* Arena::CreateMaybeMessage< ::substrait::proto::Type_Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Time >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_TimestampTZ* Arena::CreateMaybeMessage< ::substrait::proto::Type_TimestampTZ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_TimestampTZ >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_IntervalYear* Arena::CreateMaybeMessage< ::substrait::proto::Type_IntervalYear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_IntervalYear >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_IntervalDay* Arena::CreateMaybeMessage< ::substrait::proto::Type_IntervalDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_IntervalDay >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_UUID* Arena::CreateMaybeMessage< ::substrait::proto::Type_UUID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_UUID >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_FixedChar* Arena::CreateMaybeMessage< ::substrait::proto::Type_FixedChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_FixedChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_VarChar* Arena::CreateMaybeMessage< ::substrait::proto::Type_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_FixedBinary* Arena::CreateMaybeMessage< ::substrait::proto::Type_FixedBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_FixedBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Decimal* Arena::CreateMaybeMessage< ::substrait::proto::Type_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Struct* Arena::CreateMaybeMessage< ::substrait::proto::Type_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_List* Arena::CreateMaybeMessage< ::substrait::proto::Type_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_List >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Map* Arena::CreateMaybeMessage< ::substrait::proto::Type_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_UserDefined* Arena::CreateMaybeMessage< ::substrait::proto::Type_UserDefined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_UserDefined >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type_Parameter* Arena::CreateMaybeMessage< ::substrait::proto::Type_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::Type* Arena::CreateMaybeMessage< ::substrait::proto::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::proto::NamedStruct* Arena::CreateMaybeMessage< ::substrait::proto::NamedStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::proto::NamedStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
