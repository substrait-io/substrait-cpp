// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/proto/algebra.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2fproto_2falgebra_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2fproto_2falgebra_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "substrait/proto/extensions/extensions.pb.h"
#include "substrait/proto/type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_2fproto_2falgebra_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fproto_2falgebra_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[116]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fproto_2falgebra_2eproto;
namespace substrait {
namespace proto {
class AggregateFunction;
class AggregateFunctionDefaultTypeInternal;
extern AggregateFunctionDefaultTypeInternal _AggregateFunction_default_instance_;
class AggregateRel;
class AggregateRelDefaultTypeInternal;
extern AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
class AggregateRel_Grouping;
class AggregateRel_GroupingDefaultTypeInternal;
extern AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
class AggregateRel_Measure;
class AggregateRel_MeasureDefaultTypeInternal;
extern AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
class ComparisonJoinKey;
class ComparisonJoinKeyDefaultTypeInternal;
extern ComparisonJoinKeyDefaultTypeInternal _ComparisonJoinKey_default_instance_;
class ComparisonJoinKey_ComparisonType;
class ComparisonJoinKey_ComparisonTypeDefaultTypeInternal;
extern ComparisonJoinKey_ComparisonTypeDefaultTypeInternal _ComparisonJoinKey_ComparisonType_default_instance_;
class ConsistentPartitionWindowRel;
class ConsistentPartitionWindowRelDefaultTypeInternal;
extern ConsistentPartitionWindowRelDefaultTypeInternal _ConsistentPartitionWindowRel_default_instance_;
class ConsistentPartitionWindowRel_WindowRelFunction;
class ConsistentPartitionWindowRel_WindowRelFunctionDefaultTypeInternal;
extern ConsistentPartitionWindowRel_WindowRelFunctionDefaultTypeInternal _ConsistentPartitionWindowRel_WindowRelFunction_default_instance_;
class CrossRel;
class CrossRelDefaultTypeInternal;
extern CrossRelDefaultTypeInternal _CrossRel_default_instance_;
class DdlRel;
class DdlRelDefaultTypeInternal;
extern DdlRelDefaultTypeInternal _DdlRel_default_instance_;
class ExchangeRel;
class ExchangeRelDefaultTypeInternal;
extern ExchangeRelDefaultTypeInternal _ExchangeRel_default_instance_;
class ExchangeRel_Broadcast;
class ExchangeRel_BroadcastDefaultTypeInternal;
extern ExchangeRel_BroadcastDefaultTypeInternal _ExchangeRel_Broadcast_default_instance_;
class ExchangeRel_ExchangeTarget;
class ExchangeRel_ExchangeTargetDefaultTypeInternal;
extern ExchangeRel_ExchangeTargetDefaultTypeInternal _ExchangeRel_ExchangeTarget_default_instance_;
class ExchangeRel_MultiBucketExpression;
class ExchangeRel_MultiBucketExpressionDefaultTypeInternal;
extern ExchangeRel_MultiBucketExpressionDefaultTypeInternal _ExchangeRel_MultiBucketExpression_default_instance_;
class ExchangeRel_RoundRobin;
class ExchangeRel_RoundRobinDefaultTypeInternal;
extern ExchangeRel_RoundRobinDefaultTypeInternal _ExchangeRel_RoundRobin_default_instance_;
class ExchangeRel_ScatterFields;
class ExchangeRel_ScatterFieldsDefaultTypeInternal;
extern ExchangeRel_ScatterFieldsDefaultTypeInternal _ExchangeRel_ScatterFields_default_instance_;
class ExchangeRel_SingleBucketExpression;
class ExchangeRel_SingleBucketExpressionDefaultTypeInternal;
extern ExchangeRel_SingleBucketExpressionDefaultTypeInternal _ExchangeRel_SingleBucketExpression_default_instance_;
class ExpandRel;
class ExpandRelDefaultTypeInternal;
extern ExpandRelDefaultTypeInternal _ExpandRel_default_instance_;
class ExpandRel_ExpandField;
class ExpandRel_ExpandFieldDefaultTypeInternal;
extern ExpandRel_ExpandFieldDefaultTypeInternal _ExpandRel_ExpandField_default_instance_;
class ExpandRel_SwitchingField;
class ExpandRel_SwitchingFieldDefaultTypeInternal;
extern ExpandRel_SwitchingFieldDefaultTypeInternal _ExpandRel_SwitchingField_default_instance_;
class Expression;
class ExpressionDefaultTypeInternal;
extern ExpressionDefaultTypeInternal _Expression_default_instance_;
class Expression_Cast;
class Expression_CastDefaultTypeInternal;
extern Expression_CastDefaultTypeInternal _Expression_Cast_default_instance_;
class Expression_EmbeddedFunction;
class Expression_EmbeddedFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunctionDefaultTypeInternal _Expression_EmbeddedFunction_default_instance_;
class Expression_EmbeddedFunction_PythonPickleFunction;
class Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal _Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
class Expression_EmbeddedFunction_WebAssemblyFunction;
class Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal _Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
class Expression_Enum;
class Expression_EnumDefaultTypeInternal;
extern Expression_EnumDefaultTypeInternal _Expression_Enum_default_instance_;
class Expression_Enum_Empty;
class Expression_Enum_EmptyDefaultTypeInternal;
extern Expression_Enum_EmptyDefaultTypeInternal _Expression_Enum_Empty_default_instance_;
class Expression_FieldReference;
class Expression_FieldReferenceDefaultTypeInternal;
extern Expression_FieldReferenceDefaultTypeInternal _Expression_FieldReference_default_instance_;
class Expression_FieldReference_OuterReference;
class Expression_FieldReference_OuterReferenceDefaultTypeInternal;
extern Expression_FieldReference_OuterReferenceDefaultTypeInternal _Expression_FieldReference_OuterReference_default_instance_;
class Expression_FieldReference_RootReference;
class Expression_FieldReference_RootReferenceDefaultTypeInternal;
extern Expression_FieldReference_RootReferenceDefaultTypeInternal _Expression_FieldReference_RootReference_default_instance_;
class Expression_IfThen;
class Expression_IfThenDefaultTypeInternal;
extern Expression_IfThenDefaultTypeInternal _Expression_IfThen_default_instance_;
class Expression_IfThen_IfClause;
class Expression_IfThen_IfClauseDefaultTypeInternal;
extern Expression_IfThen_IfClauseDefaultTypeInternal _Expression_IfThen_IfClause_default_instance_;
class Expression_Literal;
class Expression_LiteralDefaultTypeInternal;
extern Expression_LiteralDefaultTypeInternal _Expression_Literal_default_instance_;
class Expression_Literal_Decimal;
class Expression_Literal_DecimalDefaultTypeInternal;
extern Expression_Literal_DecimalDefaultTypeInternal _Expression_Literal_Decimal_default_instance_;
class Expression_Literal_IntervalDayToSecond;
class Expression_Literal_IntervalDayToSecondDefaultTypeInternal;
extern Expression_Literal_IntervalDayToSecondDefaultTypeInternal _Expression_Literal_IntervalDayToSecond_default_instance_;
class Expression_Literal_IntervalYearToMonth;
class Expression_Literal_IntervalYearToMonthDefaultTypeInternal;
extern Expression_Literal_IntervalYearToMonthDefaultTypeInternal _Expression_Literal_IntervalYearToMonth_default_instance_;
class Expression_Literal_List;
class Expression_Literal_ListDefaultTypeInternal;
extern Expression_Literal_ListDefaultTypeInternal _Expression_Literal_List_default_instance_;
class Expression_Literal_Map;
class Expression_Literal_MapDefaultTypeInternal;
extern Expression_Literal_MapDefaultTypeInternal _Expression_Literal_Map_default_instance_;
class Expression_Literal_Map_KeyValue;
class Expression_Literal_Map_KeyValueDefaultTypeInternal;
extern Expression_Literal_Map_KeyValueDefaultTypeInternal _Expression_Literal_Map_KeyValue_default_instance_;
class Expression_Literal_Struct;
class Expression_Literal_StructDefaultTypeInternal;
extern Expression_Literal_StructDefaultTypeInternal _Expression_Literal_Struct_default_instance_;
class Expression_Literal_UserDefined;
class Expression_Literal_UserDefinedDefaultTypeInternal;
extern Expression_Literal_UserDefinedDefaultTypeInternal _Expression_Literal_UserDefined_default_instance_;
class Expression_Literal_VarChar;
class Expression_Literal_VarCharDefaultTypeInternal;
extern Expression_Literal_VarCharDefaultTypeInternal _Expression_Literal_VarChar_default_instance_;
class Expression_MaskExpression;
class Expression_MaskExpressionDefaultTypeInternal;
extern Expression_MaskExpressionDefaultTypeInternal _Expression_MaskExpression_default_instance_;
class Expression_MaskExpression_ListSelect;
class Expression_MaskExpression_ListSelectDefaultTypeInternal;
extern Expression_MaskExpression_ListSelectDefaultTypeInternal _Expression_MaskExpression_ListSelect_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem;
class Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
class Expression_MaskExpression_MapSelect;
class Expression_MaskExpression_MapSelectDefaultTypeInternal;
extern Expression_MaskExpression_MapSelectDefaultTypeInternal _Expression_MaskExpression_MapSelect_default_instance_;
class Expression_MaskExpression_MapSelect_MapKey;
class Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal;
extern Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKey_default_instance_;
class Expression_MaskExpression_MapSelect_MapKeyExpression;
class Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal;
extern Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
class Expression_MaskExpression_Select;
class Expression_MaskExpression_SelectDefaultTypeInternal;
extern Expression_MaskExpression_SelectDefaultTypeInternal _Expression_MaskExpression_Select_default_instance_;
class Expression_MaskExpression_StructItem;
class Expression_MaskExpression_StructItemDefaultTypeInternal;
extern Expression_MaskExpression_StructItemDefaultTypeInternal _Expression_MaskExpression_StructItem_default_instance_;
class Expression_MaskExpression_StructSelect;
class Expression_MaskExpression_StructSelectDefaultTypeInternal;
extern Expression_MaskExpression_StructSelectDefaultTypeInternal _Expression_MaskExpression_StructSelect_default_instance_;
class Expression_MultiOrList;
class Expression_MultiOrListDefaultTypeInternal;
extern Expression_MultiOrListDefaultTypeInternal _Expression_MultiOrList_default_instance_;
class Expression_MultiOrList_Record;
class Expression_MultiOrList_RecordDefaultTypeInternal;
extern Expression_MultiOrList_RecordDefaultTypeInternal _Expression_MultiOrList_Record_default_instance_;
class Expression_Nested;
class Expression_NestedDefaultTypeInternal;
extern Expression_NestedDefaultTypeInternal _Expression_Nested_default_instance_;
class Expression_Nested_List;
class Expression_Nested_ListDefaultTypeInternal;
extern Expression_Nested_ListDefaultTypeInternal _Expression_Nested_List_default_instance_;
class Expression_Nested_Map;
class Expression_Nested_MapDefaultTypeInternal;
extern Expression_Nested_MapDefaultTypeInternal _Expression_Nested_Map_default_instance_;
class Expression_Nested_Map_KeyValue;
class Expression_Nested_Map_KeyValueDefaultTypeInternal;
extern Expression_Nested_Map_KeyValueDefaultTypeInternal _Expression_Nested_Map_KeyValue_default_instance_;
class Expression_Nested_Struct;
class Expression_Nested_StructDefaultTypeInternal;
extern Expression_Nested_StructDefaultTypeInternal _Expression_Nested_Struct_default_instance_;
class Expression_ReferenceSegment;
class Expression_ReferenceSegmentDefaultTypeInternal;
extern Expression_ReferenceSegmentDefaultTypeInternal _Expression_ReferenceSegment_default_instance_;
class Expression_ReferenceSegment_ListElement;
class Expression_ReferenceSegment_ListElementDefaultTypeInternal;
extern Expression_ReferenceSegment_ListElementDefaultTypeInternal _Expression_ReferenceSegment_ListElement_default_instance_;
class Expression_ReferenceSegment_MapKey;
class Expression_ReferenceSegment_MapKeyDefaultTypeInternal;
extern Expression_ReferenceSegment_MapKeyDefaultTypeInternal _Expression_ReferenceSegment_MapKey_default_instance_;
class Expression_ReferenceSegment_StructField;
class Expression_ReferenceSegment_StructFieldDefaultTypeInternal;
extern Expression_ReferenceSegment_StructFieldDefaultTypeInternal _Expression_ReferenceSegment_StructField_default_instance_;
class Expression_ScalarFunction;
class Expression_ScalarFunctionDefaultTypeInternal;
extern Expression_ScalarFunctionDefaultTypeInternal _Expression_ScalarFunction_default_instance_;
class Expression_SingularOrList;
class Expression_SingularOrListDefaultTypeInternal;
extern Expression_SingularOrListDefaultTypeInternal _Expression_SingularOrList_default_instance_;
class Expression_Subquery;
class Expression_SubqueryDefaultTypeInternal;
extern Expression_SubqueryDefaultTypeInternal _Expression_Subquery_default_instance_;
class Expression_Subquery_InPredicate;
class Expression_Subquery_InPredicateDefaultTypeInternal;
extern Expression_Subquery_InPredicateDefaultTypeInternal _Expression_Subquery_InPredicate_default_instance_;
class Expression_Subquery_Scalar;
class Expression_Subquery_ScalarDefaultTypeInternal;
extern Expression_Subquery_ScalarDefaultTypeInternal _Expression_Subquery_Scalar_default_instance_;
class Expression_Subquery_SetComparison;
class Expression_Subquery_SetComparisonDefaultTypeInternal;
extern Expression_Subquery_SetComparisonDefaultTypeInternal _Expression_Subquery_SetComparison_default_instance_;
class Expression_Subquery_SetPredicate;
class Expression_Subquery_SetPredicateDefaultTypeInternal;
extern Expression_Subquery_SetPredicateDefaultTypeInternal _Expression_Subquery_SetPredicate_default_instance_;
class Expression_SwitchExpression;
class Expression_SwitchExpressionDefaultTypeInternal;
extern Expression_SwitchExpressionDefaultTypeInternal _Expression_SwitchExpression_default_instance_;
class Expression_SwitchExpression_IfValue;
class Expression_SwitchExpression_IfValueDefaultTypeInternal;
extern Expression_SwitchExpression_IfValueDefaultTypeInternal _Expression_SwitchExpression_IfValue_default_instance_;
class Expression_WindowFunction;
class Expression_WindowFunctionDefaultTypeInternal;
extern Expression_WindowFunctionDefaultTypeInternal _Expression_WindowFunction_default_instance_;
class Expression_WindowFunction_Bound;
class Expression_WindowFunction_BoundDefaultTypeInternal;
extern Expression_WindowFunction_BoundDefaultTypeInternal _Expression_WindowFunction_Bound_default_instance_;
class Expression_WindowFunction_Bound_CurrentRow;
class Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal;
extern Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal _Expression_WindowFunction_Bound_CurrentRow_default_instance_;
class Expression_WindowFunction_Bound_Following;
class Expression_WindowFunction_Bound_FollowingDefaultTypeInternal;
extern Expression_WindowFunction_Bound_FollowingDefaultTypeInternal _Expression_WindowFunction_Bound_Following_default_instance_;
class Expression_WindowFunction_Bound_Preceding;
class Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal;
extern Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal _Expression_WindowFunction_Bound_Preceding_default_instance_;
class Expression_WindowFunction_Bound_Unbounded;
class Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal;
extern Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal _Expression_WindowFunction_Bound_Unbounded_default_instance_;
class ExtensionLeafRel;
class ExtensionLeafRelDefaultTypeInternal;
extern ExtensionLeafRelDefaultTypeInternal _ExtensionLeafRel_default_instance_;
class ExtensionMultiRel;
class ExtensionMultiRelDefaultTypeInternal;
extern ExtensionMultiRelDefaultTypeInternal _ExtensionMultiRel_default_instance_;
class ExtensionObject;
class ExtensionObjectDefaultTypeInternal;
extern ExtensionObjectDefaultTypeInternal _ExtensionObject_default_instance_;
class ExtensionSingleRel;
class ExtensionSingleRelDefaultTypeInternal;
extern ExtensionSingleRelDefaultTypeInternal _ExtensionSingleRel_default_instance_;
class FetchRel;
class FetchRelDefaultTypeInternal;
extern FetchRelDefaultTypeInternal _FetchRel_default_instance_;
class FilterRel;
class FilterRelDefaultTypeInternal;
extern FilterRelDefaultTypeInternal _FilterRel_default_instance_;
class FunctionArgument;
class FunctionArgumentDefaultTypeInternal;
extern FunctionArgumentDefaultTypeInternal _FunctionArgument_default_instance_;
class FunctionOption;
class FunctionOptionDefaultTypeInternal;
extern FunctionOptionDefaultTypeInternal _FunctionOption_default_instance_;
class HashJoinRel;
class HashJoinRelDefaultTypeInternal;
extern HashJoinRelDefaultTypeInternal _HashJoinRel_default_instance_;
class JoinRel;
class JoinRelDefaultTypeInternal;
extern JoinRelDefaultTypeInternal _JoinRel_default_instance_;
class MergeJoinRel;
class MergeJoinRelDefaultTypeInternal;
extern MergeJoinRelDefaultTypeInternal _MergeJoinRel_default_instance_;
class NamedObjectWrite;
class NamedObjectWriteDefaultTypeInternal;
extern NamedObjectWriteDefaultTypeInternal _NamedObjectWrite_default_instance_;
class NestedLoopJoinRel;
class NestedLoopJoinRelDefaultTypeInternal;
extern NestedLoopJoinRelDefaultTypeInternal _NestedLoopJoinRel_default_instance_;
class ProjectRel;
class ProjectRelDefaultTypeInternal;
extern ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
class ReadRel;
class ReadRelDefaultTypeInternal;
extern ReadRelDefaultTypeInternal _ReadRel_default_instance_;
class ReadRel_ExtensionTable;
class ReadRel_ExtensionTableDefaultTypeInternal;
extern ReadRel_ExtensionTableDefaultTypeInternal _ReadRel_ExtensionTable_default_instance_;
class ReadRel_LocalFiles;
class ReadRel_LocalFilesDefaultTypeInternal;
extern ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles;
class ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions;
class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions;
class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions;
class ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions;
class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_;
class ReadRel_NamedTable;
class ReadRel_NamedTableDefaultTypeInternal;
extern ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
class ReadRel_VirtualTable;
class ReadRel_VirtualTableDefaultTypeInternal;
extern ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
class ReferenceRel;
class ReferenceRelDefaultTypeInternal;
extern ReferenceRelDefaultTypeInternal _ReferenceRel_default_instance_;
class Rel;
class RelDefaultTypeInternal;
extern RelDefaultTypeInternal _Rel_default_instance_;
class RelCommon;
class RelCommonDefaultTypeInternal;
extern RelCommonDefaultTypeInternal _RelCommon_default_instance_;
class RelCommon_Direct;
class RelCommon_DirectDefaultTypeInternal;
extern RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
class RelCommon_Emit;
class RelCommon_EmitDefaultTypeInternal;
extern RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
class RelCommon_Hint;
class RelCommon_HintDefaultTypeInternal;
extern RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
class RelCommon_Hint_RuntimeConstraint;
class RelCommon_Hint_RuntimeConstraintDefaultTypeInternal;
extern RelCommon_Hint_RuntimeConstraintDefaultTypeInternal _RelCommon_Hint_RuntimeConstraint_default_instance_;
class RelCommon_Hint_Stats;
class RelCommon_Hint_StatsDefaultTypeInternal;
extern RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
class RelRoot;
class RelRootDefaultTypeInternal;
extern RelRootDefaultTypeInternal _RelRoot_default_instance_;
class SetRel;
class SetRelDefaultTypeInternal;
extern SetRelDefaultTypeInternal _SetRel_default_instance_;
class SortField;
class SortFieldDefaultTypeInternal;
extern SortFieldDefaultTypeInternal _SortField_default_instance_;
class SortRel;
class SortRelDefaultTypeInternal;
extern SortRelDefaultTypeInternal _SortRel_default_instance_;
class WriteRel;
class WriteRelDefaultTypeInternal;
extern WriteRelDefaultTypeInternal _WriteRel_default_instance_;
}  // namespace proto
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait::proto::AggregateFunction* Arena::CreateMaybeMessage<::substrait::proto::AggregateFunction>(Arena*);
template<> ::substrait::proto::AggregateRel* Arena::CreateMaybeMessage<::substrait::proto::AggregateRel>(Arena*);
template<> ::substrait::proto::AggregateRel_Grouping* Arena::CreateMaybeMessage<::substrait::proto::AggregateRel_Grouping>(Arena*);
template<> ::substrait::proto::AggregateRel_Measure* Arena::CreateMaybeMessage<::substrait::proto::AggregateRel_Measure>(Arena*);
template<> ::substrait::proto::ComparisonJoinKey* Arena::CreateMaybeMessage<::substrait::proto::ComparisonJoinKey>(Arena*);
template<> ::substrait::proto::ComparisonJoinKey_ComparisonType* Arena::CreateMaybeMessage<::substrait::proto::ComparisonJoinKey_ComparisonType>(Arena*);
template<> ::substrait::proto::ConsistentPartitionWindowRel* Arena::CreateMaybeMessage<::substrait::proto::ConsistentPartitionWindowRel>(Arena*);
template<> ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* Arena::CreateMaybeMessage<::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction>(Arena*);
template<> ::substrait::proto::CrossRel* Arena::CreateMaybeMessage<::substrait::proto::CrossRel>(Arena*);
template<> ::substrait::proto::DdlRel* Arena::CreateMaybeMessage<::substrait::proto::DdlRel>(Arena*);
template<> ::substrait::proto::ExchangeRel* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel>(Arena*);
template<> ::substrait::proto::ExchangeRel_Broadcast* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_Broadcast>(Arena*);
template<> ::substrait::proto::ExchangeRel_ExchangeTarget* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_ExchangeTarget>(Arena*);
template<> ::substrait::proto::ExchangeRel_MultiBucketExpression* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_MultiBucketExpression>(Arena*);
template<> ::substrait::proto::ExchangeRel_RoundRobin* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_RoundRobin>(Arena*);
template<> ::substrait::proto::ExchangeRel_ScatterFields* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_ScatterFields>(Arena*);
template<> ::substrait::proto::ExchangeRel_SingleBucketExpression* Arena::CreateMaybeMessage<::substrait::proto::ExchangeRel_SingleBucketExpression>(Arena*);
template<> ::substrait::proto::ExpandRel* Arena::CreateMaybeMessage<::substrait::proto::ExpandRel>(Arena*);
template<> ::substrait::proto::ExpandRel_ExpandField* Arena::CreateMaybeMessage<::substrait::proto::ExpandRel_ExpandField>(Arena*);
template<> ::substrait::proto::ExpandRel_SwitchingField* Arena::CreateMaybeMessage<::substrait::proto::ExpandRel_SwitchingField>(Arena*);
template<> ::substrait::proto::Expression* Arena::CreateMaybeMessage<::substrait::proto::Expression>(Arena*);
template<> ::substrait::proto::Expression_Cast* Arena::CreateMaybeMessage<::substrait::proto::Expression_Cast>(Arena*);
template<> ::substrait::proto::Expression_EmbeddedFunction* Arena::CreateMaybeMessage<::substrait::proto::Expression_EmbeddedFunction>(Arena*);
template<> ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Arena::CreateMaybeMessage<::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction>(Arena*);
template<> ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Arena::CreateMaybeMessage<::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction>(Arena*);
template<> ::substrait::proto::Expression_Enum* Arena::CreateMaybeMessage<::substrait::proto::Expression_Enum>(Arena*);
template<> ::substrait::proto::Expression_Enum_Empty* Arena::CreateMaybeMessage<::substrait::proto::Expression_Enum_Empty>(Arena*);
template<> ::substrait::proto::Expression_FieldReference* Arena::CreateMaybeMessage<::substrait::proto::Expression_FieldReference>(Arena*);
template<> ::substrait::proto::Expression_FieldReference_OuterReference* Arena::CreateMaybeMessage<::substrait::proto::Expression_FieldReference_OuterReference>(Arena*);
template<> ::substrait::proto::Expression_FieldReference_RootReference* Arena::CreateMaybeMessage<::substrait::proto::Expression_FieldReference_RootReference>(Arena*);
template<> ::substrait::proto::Expression_IfThen* Arena::CreateMaybeMessage<::substrait::proto::Expression_IfThen>(Arena*);
template<> ::substrait::proto::Expression_IfThen_IfClause* Arena::CreateMaybeMessage<::substrait::proto::Expression_IfThen_IfClause>(Arena*);
template<> ::substrait::proto::Expression_Literal* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal>(Arena*);
template<> ::substrait::proto::Expression_Literal_Decimal* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_Decimal>(Arena*);
template<> ::substrait::proto::Expression_Literal_IntervalDayToSecond* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_IntervalDayToSecond>(Arena*);
template<> ::substrait::proto::Expression_Literal_IntervalYearToMonth* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_IntervalYearToMonth>(Arena*);
template<> ::substrait::proto::Expression_Literal_List* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_List>(Arena*);
template<> ::substrait::proto::Expression_Literal_Map* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_Map>(Arena*);
template<> ::substrait::proto::Expression_Literal_Map_KeyValue* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_Map_KeyValue>(Arena*);
template<> ::substrait::proto::Expression_Literal_Struct* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_Struct>(Arena*);
template<> ::substrait::proto::Expression_Literal_UserDefined* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_UserDefined>(Arena*);
template<> ::substrait::proto::Expression_Literal_VarChar* Arena::CreateMaybeMessage<::substrait::proto::Expression_Literal_VarChar>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_ListSelect* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_ListSelect>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_MapSelect* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_MapSelect>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_MapSelect_MapKey>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_Select* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_Select>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_StructItem* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_StructItem>(Arena*);
template<> ::substrait::proto::Expression_MaskExpression_StructSelect* Arena::CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_StructSelect>(Arena*);
template<> ::substrait::proto::Expression_MultiOrList* Arena::CreateMaybeMessage<::substrait::proto::Expression_MultiOrList>(Arena*);
template<> ::substrait::proto::Expression_MultiOrList_Record* Arena::CreateMaybeMessage<::substrait::proto::Expression_MultiOrList_Record>(Arena*);
template<> ::substrait::proto::Expression_Nested* Arena::CreateMaybeMessage<::substrait::proto::Expression_Nested>(Arena*);
template<> ::substrait::proto::Expression_Nested_List* Arena::CreateMaybeMessage<::substrait::proto::Expression_Nested_List>(Arena*);
template<> ::substrait::proto::Expression_Nested_Map* Arena::CreateMaybeMessage<::substrait::proto::Expression_Nested_Map>(Arena*);
template<> ::substrait::proto::Expression_Nested_Map_KeyValue* Arena::CreateMaybeMessage<::substrait::proto::Expression_Nested_Map_KeyValue>(Arena*);
template<> ::substrait::proto::Expression_Nested_Struct* Arena::CreateMaybeMessage<::substrait::proto::Expression_Nested_Struct>(Arena*);
template<> ::substrait::proto::Expression_ReferenceSegment* Arena::CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment>(Arena*);
template<> ::substrait::proto::Expression_ReferenceSegment_ListElement* Arena::CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment_ListElement>(Arena*);
template<> ::substrait::proto::Expression_ReferenceSegment_MapKey* Arena::CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment_MapKey>(Arena*);
template<> ::substrait::proto::Expression_ReferenceSegment_StructField* Arena::CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment_StructField>(Arena*);
template<> ::substrait::proto::Expression_ScalarFunction* Arena::CreateMaybeMessage<::substrait::proto::Expression_ScalarFunction>(Arena*);
template<> ::substrait::proto::Expression_SingularOrList* Arena::CreateMaybeMessage<::substrait::proto::Expression_SingularOrList>(Arena*);
template<> ::substrait::proto::Expression_Subquery* Arena::CreateMaybeMessage<::substrait::proto::Expression_Subquery>(Arena*);
template<> ::substrait::proto::Expression_Subquery_InPredicate* Arena::CreateMaybeMessage<::substrait::proto::Expression_Subquery_InPredicate>(Arena*);
template<> ::substrait::proto::Expression_Subquery_Scalar* Arena::CreateMaybeMessage<::substrait::proto::Expression_Subquery_Scalar>(Arena*);
template<> ::substrait::proto::Expression_Subquery_SetComparison* Arena::CreateMaybeMessage<::substrait::proto::Expression_Subquery_SetComparison>(Arena*);
template<> ::substrait::proto::Expression_Subquery_SetPredicate* Arena::CreateMaybeMessage<::substrait::proto::Expression_Subquery_SetPredicate>(Arena*);
template<> ::substrait::proto::Expression_SwitchExpression* Arena::CreateMaybeMessage<::substrait::proto::Expression_SwitchExpression>(Arena*);
template<> ::substrait::proto::Expression_SwitchExpression_IfValue* Arena::CreateMaybeMessage<::substrait::proto::Expression_SwitchExpression_IfValue>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction_Bound* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound_CurrentRow>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction_Bound_Following* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound_Following>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound_Preceding>(Arena*);
template<> ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Arena::CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound_Unbounded>(Arena*);
template<> ::substrait::proto::ExtensionLeafRel* Arena::CreateMaybeMessage<::substrait::proto::ExtensionLeafRel>(Arena*);
template<> ::substrait::proto::ExtensionMultiRel* Arena::CreateMaybeMessage<::substrait::proto::ExtensionMultiRel>(Arena*);
template<> ::substrait::proto::ExtensionObject* Arena::CreateMaybeMessage<::substrait::proto::ExtensionObject>(Arena*);
template<> ::substrait::proto::ExtensionSingleRel* Arena::CreateMaybeMessage<::substrait::proto::ExtensionSingleRel>(Arena*);
template<> ::substrait::proto::FetchRel* Arena::CreateMaybeMessage<::substrait::proto::FetchRel>(Arena*);
template<> ::substrait::proto::FilterRel* Arena::CreateMaybeMessage<::substrait::proto::FilterRel>(Arena*);
template<> ::substrait::proto::FunctionArgument* Arena::CreateMaybeMessage<::substrait::proto::FunctionArgument>(Arena*);
template<> ::substrait::proto::FunctionOption* Arena::CreateMaybeMessage<::substrait::proto::FunctionOption>(Arena*);
template<> ::substrait::proto::HashJoinRel* Arena::CreateMaybeMessage<::substrait::proto::HashJoinRel>(Arena*);
template<> ::substrait::proto::JoinRel* Arena::CreateMaybeMessage<::substrait::proto::JoinRel>(Arena*);
template<> ::substrait::proto::MergeJoinRel* Arena::CreateMaybeMessage<::substrait::proto::MergeJoinRel>(Arena*);
template<> ::substrait::proto::NamedObjectWrite* Arena::CreateMaybeMessage<::substrait::proto::NamedObjectWrite>(Arena*);
template<> ::substrait::proto::NestedLoopJoinRel* Arena::CreateMaybeMessage<::substrait::proto::NestedLoopJoinRel>(Arena*);
template<> ::substrait::proto::ProjectRel* Arena::CreateMaybeMessage<::substrait::proto::ProjectRel>(Arena*);
template<> ::substrait::proto::ReadRel* Arena::CreateMaybeMessage<::substrait::proto::ReadRel>(Arena*);
template<> ::substrait::proto::ReadRel_ExtensionTable* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_ExtensionTable>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles_FileOrFiles>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(Arena*);
template<> ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(Arena*);
template<> ::substrait::proto::ReadRel_NamedTable* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_NamedTable>(Arena*);
template<> ::substrait::proto::ReadRel_VirtualTable* Arena::CreateMaybeMessage<::substrait::proto::ReadRel_VirtualTable>(Arena*);
template<> ::substrait::proto::ReferenceRel* Arena::CreateMaybeMessage<::substrait::proto::ReferenceRel>(Arena*);
template<> ::substrait::proto::Rel* Arena::CreateMaybeMessage<::substrait::proto::Rel>(Arena*);
template<> ::substrait::proto::RelCommon* Arena::CreateMaybeMessage<::substrait::proto::RelCommon>(Arena*);
template<> ::substrait::proto::RelCommon_Direct* Arena::CreateMaybeMessage<::substrait::proto::RelCommon_Direct>(Arena*);
template<> ::substrait::proto::RelCommon_Emit* Arena::CreateMaybeMessage<::substrait::proto::RelCommon_Emit>(Arena*);
template<> ::substrait::proto::RelCommon_Hint* Arena::CreateMaybeMessage<::substrait::proto::RelCommon_Hint>(Arena*);
template<> ::substrait::proto::RelCommon_Hint_RuntimeConstraint* Arena::CreateMaybeMessage<::substrait::proto::RelCommon_Hint_RuntimeConstraint>(Arena*);
template<> ::substrait::proto::RelCommon_Hint_Stats* Arena::CreateMaybeMessage<::substrait::proto::RelCommon_Hint_Stats>(Arena*);
template<> ::substrait::proto::RelRoot* Arena::CreateMaybeMessage<::substrait::proto::RelRoot>(Arena*);
template<> ::substrait::proto::SetRel* Arena::CreateMaybeMessage<::substrait::proto::SetRel>(Arena*);
template<> ::substrait::proto::SortField* Arena::CreateMaybeMessage<::substrait::proto::SortField>(Arena*);
template<> ::substrait::proto::SortRel* Arena::CreateMaybeMessage<::substrait::proto::SortRel>(Arena*);
template<> ::substrait::proto::WriteRel* Arena::CreateMaybeMessage<::substrait::proto::WriteRel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait {
namespace proto {

enum JoinRel_JoinType : int {
  JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  JoinRel_JoinType_JOIN_TYPE_INNER = 1,
  JoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  JoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  JoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  JoinRel_JoinType_JOIN_TYPE_SEMI = 5,
  JoinRel_JoinType_JOIN_TYPE_ANTI = 6,
  JoinRel_JoinType_JOIN_TYPE_SINGLE = 7,
  JoinRel_JoinType_JoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JoinRel_JoinType_JoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JoinRel_JoinType_IsValid(int value);
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MIN = JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MAX = JoinRel_JoinType_JOIN_TYPE_SINGLE;
constexpr int JoinRel_JoinType_JoinType_ARRAYSIZE = JoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& JoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool JoinRel_JoinType_Parse(
    const std::string& name, JoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinRel_JoinType>(
    JoinRel_JoinType_descriptor(), name, value);
}
enum SetRel_SetOp : int {
  SetRel_SetOp_SET_OP_UNSPECIFIED = 0,
  SetRel_SetOp_SET_OP_MINUS_PRIMARY = 1,
  SetRel_SetOp_SET_OP_MINUS_MULTISET = 2,
  SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY = 3,
  SetRel_SetOp_SET_OP_INTERSECTION_MULTISET = 4,
  SetRel_SetOp_SET_OP_UNION_DISTINCT = 5,
  SetRel_SetOp_SET_OP_UNION_ALL = 6,
  SetRel_SetOp_SetRel_SetOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetRel_SetOp_SetRel_SetOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetRel_SetOp_IsValid(int value);
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MIN = SetRel_SetOp_SET_OP_UNSPECIFIED;
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MAX = SetRel_SetOp_SET_OP_UNION_ALL;
constexpr int SetRel_SetOp_SetOp_ARRAYSIZE = SetRel_SetOp_SetOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor();
template<typename T>
inline const std::string& SetRel_SetOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetRel_SetOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetRel_SetOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetRel_SetOp_descriptor(), enum_t_value);
}
inline bool SetRel_SetOp_Parse(
    const std::string& name, SetRel_SetOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetRel_SetOp>(
    SetRel_SetOp_descriptor(), name, value);
}
enum DdlRel_DdlObject : int {
  DdlRel_DdlObject_DDL_OBJECT_UNSPECIFIED = 0,
  DdlRel_DdlObject_DDL_OBJECT_TABLE = 1,
  DdlRel_DdlObject_DDL_OBJECT_VIEW = 2,
  DdlRel_DdlObject_DdlRel_DdlObject_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DdlRel_DdlObject_DdlRel_DdlObject_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DdlRel_DdlObject_IsValid(int value);
constexpr DdlRel_DdlObject DdlRel_DdlObject_DdlObject_MIN = DdlRel_DdlObject_DDL_OBJECT_UNSPECIFIED;
constexpr DdlRel_DdlObject DdlRel_DdlObject_DdlObject_MAX = DdlRel_DdlObject_DDL_OBJECT_VIEW;
constexpr int DdlRel_DdlObject_DdlObject_ARRAYSIZE = DdlRel_DdlObject_DdlObject_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlObject_descriptor();
template<typename T>
inline const std::string& DdlRel_DdlObject_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DdlRel_DdlObject>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DdlRel_DdlObject_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DdlRel_DdlObject_descriptor(), enum_t_value);
}
inline bool DdlRel_DdlObject_Parse(
    const std::string& name, DdlRel_DdlObject* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DdlRel_DdlObject>(
    DdlRel_DdlObject_descriptor(), name, value);
}
enum DdlRel_DdlOp : int {
  DdlRel_DdlOp_DDL_OP_UNSPECIFIED = 0,
  DdlRel_DdlOp_DDL_OP_CREATE = 1,
  DdlRel_DdlOp_DDL_OP_CREATE_OR_REPLACE = 2,
  DdlRel_DdlOp_DDL_OP_ALTER = 3,
  DdlRel_DdlOp_DDL_OP_DROP = 4,
  DdlRel_DdlOp_DDL_OP_DROP_IF_EXIST = 5,
  DdlRel_DdlOp_DdlRel_DdlOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DdlRel_DdlOp_DdlRel_DdlOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DdlRel_DdlOp_IsValid(int value);
constexpr DdlRel_DdlOp DdlRel_DdlOp_DdlOp_MIN = DdlRel_DdlOp_DDL_OP_UNSPECIFIED;
constexpr DdlRel_DdlOp DdlRel_DdlOp_DdlOp_MAX = DdlRel_DdlOp_DDL_OP_DROP_IF_EXIST;
constexpr int DdlRel_DdlOp_DdlOp_ARRAYSIZE = DdlRel_DdlOp_DdlOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlOp_descriptor();
template<typename T>
inline const std::string& DdlRel_DdlOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DdlRel_DdlOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DdlRel_DdlOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DdlRel_DdlOp_descriptor(), enum_t_value);
}
inline bool DdlRel_DdlOp_Parse(
    const std::string& name, DdlRel_DdlOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DdlRel_DdlOp>(
    DdlRel_DdlOp_descriptor(), name, value);
}
enum WriteRel_WriteOp : int {
  WriteRel_WriteOp_WRITE_OP_UNSPECIFIED = 0,
  WriteRel_WriteOp_WRITE_OP_INSERT = 1,
  WriteRel_WriteOp_WRITE_OP_DELETE = 2,
  WriteRel_WriteOp_WRITE_OP_UPDATE = 3,
  WriteRel_WriteOp_WRITE_OP_CTAS = 4,
  WriteRel_WriteOp_WriteRel_WriteOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriteRel_WriteOp_WriteRel_WriteOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriteRel_WriteOp_IsValid(int value);
constexpr WriteRel_WriteOp WriteRel_WriteOp_WriteOp_MIN = WriteRel_WriteOp_WRITE_OP_UNSPECIFIED;
constexpr WriteRel_WriteOp WriteRel_WriteOp_WriteOp_MAX = WriteRel_WriteOp_WRITE_OP_CTAS;
constexpr int WriteRel_WriteOp_WriteOp_ARRAYSIZE = WriteRel_WriteOp_WriteOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_WriteOp_descriptor();
template<typename T>
inline const std::string& WriteRel_WriteOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteRel_WriteOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteRel_WriteOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteRel_WriteOp_descriptor(), enum_t_value);
}
inline bool WriteRel_WriteOp_Parse(
    const std::string& name, WriteRel_WriteOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRel_WriteOp>(
    WriteRel_WriteOp_descriptor(), name, value);
}
enum WriteRel_OutputMode : int {
  WriteRel_OutputMode_OUTPUT_MODE_UNSPECIFIED = 0,
  WriteRel_OutputMode_OUTPUT_MODE_NO_OUTPUT = 1,
  WriteRel_OutputMode_OUTPUT_MODE_MODIFIED_RECORDS = 2,
  WriteRel_OutputMode_WriteRel_OutputMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriteRel_OutputMode_WriteRel_OutputMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriteRel_OutputMode_IsValid(int value);
constexpr WriteRel_OutputMode WriteRel_OutputMode_OutputMode_MIN = WriteRel_OutputMode_OUTPUT_MODE_UNSPECIFIED;
constexpr WriteRel_OutputMode WriteRel_OutputMode_OutputMode_MAX = WriteRel_OutputMode_OUTPUT_MODE_MODIFIED_RECORDS;
constexpr int WriteRel_OutputMode_OutputMode_ARRAYSIZE = WriteRel_OutputMode_OutputMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_OutputMode_descriptor();
template<typename T>
inline const std::string& WriteRel_OutputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteRel_OutputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteRel_OutputMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteRel_OutputMode_descriptor(), enum_t_value);
}
inline bool WriteRel_OutputMode_Parse(
    const std::string& name, WriteRel_OutputMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRel_OutputMode>(
    WriteRel_OutputMode_descriptor(), name, value);
}
enum ComparisonJoinKey_SimpleComparisonType : int {
  ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_UNSPECIFIED = 0,
  ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_EQ = 1,
  ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_IS_NOT_DISTINCT_FROM = 2,
  ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_MIGHT_EQUAL = 3,
  ComparisonJoinKey_SimpleComparisonType_ComparisonJoinKey_SimpleComparisonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComparisonJoinKey_SimpleComparisonType_ComparisonJoinKey_SimpleComparisonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComparisonJoinKey_SimpleComparisonType_IsValid(int value);
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_MIN = ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_UNSPECIFIED;
constexpr ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_MAX = ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_MIGHT_EQUAL;
constexpr int ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_ARRAYSIZE = ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonJoinKey_SimpleComparisonType_descriptor();
template<typename T>
inline const std::string& ComparisonJoinKey_SimpleComparisonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComparisonJoinKey_SimpleComparisonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComparisonJoinKey_SimpleComparisonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComparisonJoinKey_SimpleComparisonType_descriptor(), enum_t_value);
}
inline bool ComparisonJoinKey_SimpleComparisonType_Parse(
    const std::string& name, ComparisonJoinKey_SimpleComparisonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComparisonJoinKey_SimpleComparisonType>(
    ComparisonJoinKey_SimpleComparisonType_descriptor(), name, value);
}
enum HashJoinRel_JoinType : int {
  HashJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  HashJoinRel_JoinType_JOIN_TYPE_INNER = 1,
  HashJoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI = 5,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI = 6,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI = 7,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI = 8,
  HashJoinRel_JoinType_HashJoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HashJoinRel_JoinType_HashJoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HashJoinRel_JoinType_IsValid(int value);
constexpr HashJoinRel_JoinType HashJoinRel_JoinType_JoinType_MIN = HashJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
constexpr HashJoinRel_JoinType HashJoinRel_JoinType_JoinType_MAX = HashJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
constexpr int HashJoinRel_JoinType_JoinType_ARRAYSIZE = HashJoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashJoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& HashJoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HashJoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HashJoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HashJoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool HashJoinRel_JoinType_Parse(
    const std::string& name, HashJoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HashJoinRel_JoinType>(
    HashJoinRel_JoinType_descriptor(), name, value);
}
enum MergeJoinRel_JoinType : int {
  MergeJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  MergeJoinRel_JoinType_JOIN_TYPE_INNER = 1,
  MergeJoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI = 5,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI = 6,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI = 7,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI = 8,
  MergeJoinRel_JoinType_MergeJoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MergeJoinRel_JoinType_MergeJoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MergeJoinRel_JoinType_IsValid(int value);
constexpr MergeJoinRel_JoinType MergeJoinRel_JoinType_JoinType_MIN = MergeJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
constexpr MergeJoinRel_JoinType MergeJoinRel_JoinType_JoinType_MAX = MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
constexpr int MergeJoinRel_JoinType_JoinType_ARRAYSIZE = MergeJoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeJoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& MergeJoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergeJoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergeJoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MergeJoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool MergeJoinRel_JoinType_Parse(
    const std::string& name, MergeJoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MergeJoinRel_JoinType>(
    MergeJoinRel_JoinType_descriptor(), name, value);
}
enum NestedLoopJoinRel_JoinType : int {
  NestedLoopJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_INNER = 1,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI = 5,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI = 6,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI = 7,
  NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI = 8,
  NestedLoopJoinRel_JoinType_NestedLoopJoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NestedLoopJoinRel_JoinType_NestedLoopJoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NestedLoopJoinRel_JoinType_IsValid(int value);
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel_JoinType_JoinType_MIN = NestedLoopJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
constexpr NestedLoopJoinRel_JoinType NestedLoopJoinRel_JoinType_JoinType_MAX = NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
constexpr int NestedLoopJoinRel_JoinType_JoinType_ARRAYSIZE = NestedLoopJoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NestedLoopJoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& NestedLoopJoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NestedLoopJoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NestedLoopJoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NestedLoopJoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool NestedLoopJoinRel_JoinType_Parse(
    const std::string& name, NestedLoopJoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NestedLoopJoinRel_JoinType>(
    NestedLoopJoinRel_JoinType_descriptor(), name, value);
}
enum Expression_WindowFunction_BoundsType : int {
  Expression_WindowFunction_BoundsType_BOUNDS_TYPE_UNSPECIFIED = 0,
  Expression_WindowFunction_BoundsType_BOUNDS_TYPE_ROWS = 1,
  Expression_WindowFunction_BoundsType_BOUNDS_TYPE_RANGE = 2,
  Expression_WindowFunction_BoundsType_Expression_WindowFunction_BoundsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expression_WindowFunction_BoundsType_Expression_WindowFunction_BoundsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expression_WindowFunction_BoundsType_IsValid(int value);
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction_BoundsType_BoundsType_MIN = Expression_WindowFunction_BoundsType_BOUNDS_TYPE_UNSPECIFIED;
constexpr Expression_WindowFunction_BoundsType Expression_WindowFunction_BoundsType_BoundsType_MAX = Expression_WindowFunction_BoundsType_BOUNDS_TYPE_RANGE;
constexpr int Expression_WindowFunction_BoundsType_BoundsType_ARRAYSIZE = Expression_WindowFunction_BoundsType_BoundsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_WindowFunction_BoundsType_descriptor();
template<typename T>
inline const std::string& Expression_WindowFunction_BoundsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expression_WindowFunction_BoundsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expression_WindowFunction_BoundsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Expression_WindowFunction_BoundsType_descriptor(), enum_t_value);
}
inline bool Expression_WindowFunction_BoundsType_Parse(
    const std::string& name, Expression_WindowFunction_BoundsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_WindowFunction_BoundsType>(
    Expression_WindowFunction_BoundsType_descriptor(), name, value);
}
enum Expression_Cast_FailureBehavior : int {
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_UNSPECIFIED = 0,
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_RETURN_NULL = 1,
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_THROW_EXCEPTION = 2,
  Expression_Cast_FailureBehavior_Expression_Cast_FailureBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expression_Cast_FailureBehavior_Expression_Cast_FailureBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expression_Cast_FailureBehavior_IsValid(int value);
constexpr Expression_Cast_FailureBehavior Expression_Cast_FailureBehavior_FailureBehavior_MIN = Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_UNSPECIFIED;
constexpr Expression_Cast_FailureBehavior Expression_Cast_FailureBehavior_FailureBehavior_MAX = Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_THROW_EXCEPTION;
constexpr int Expression_Cast_FailureBehavior_FailureBehavior_ARRAYSIZE = Expression_Cast_FailureBehavior_FailureBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Cast_FailureBehavior_descriptor();
template<typename T>
inline const std::string& Expression_Cast_FailureBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expression_Cast_FailureBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expression_Cast_FailureBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Expression_Cast_FailureBehavior_descriptor(), enum_t_value);
}
inline bool Expression_Cast_FailureBehavior_Parse(
    const std::string& name, Expression_Cast_FailureBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Cast_FailureBehavior>(
    Expression_Cast_FailureBehavior_descriptor(), name, value);
}
enum Expression_Subquery_SetPredicate_PredicateOp : int {
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_EXISTS = 1,
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNIQUE = 2,
  Expression_Subquery_SetPredicate_PredicateOp_Expression_Subquery_SetPredicate_PredicateOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expression_Subquery_SetPredicate_PredicateOp_Expression_Subquery_SetPredicate_PredicateOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expression_Subquery_SetPredicate_PredicateOp_IsValid(int value);
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MIN = Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MAX = Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNIQUE;
constexpr int Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_ARRAYSIZE = Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetPredicate_PredicateOp_descriptor();
template<typename T>
inline const std::string& Expression_Subquery_SetPredicate_PredicateOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expression_Subquery_SetPredicate_PredicateOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expression_Subquery_SetPredicate_PredicateOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Expression_Subquery_SetPredicate_PredicateOp_descriptor(), enum_t_value);
}
inline bool Expression_Subquery_SetPredicate_PredicateOp_Parse(
    const std::string& name, Expression_Subquery_SetPredicate_PredicateOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetPredicate_PredicateOp>(
    Expression_Subquery_SetPredicate_PredicateOp_descriptor(), name, value);
}
enum Expression_Subquery_SetComparison_ComparisonOp : int {
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_EQ = 1,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_NE = 2,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LT = 3,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GT = 4,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LE = 5,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GE = 6,
  Expression_Subquery_SetComparison_ComparisonOp_Expression_Subquery_SetComparison_ComparisonOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expression_Subquery_SetComparison_ComparisonOp_Expression_Subquery_SetComparison_ComparisonOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expression_Subquery_SetComparison_ComparisonOp_IsValid(int value);
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MIN = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MAX = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GE;
constexpr int Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_ARRAYSIZE = Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ComparisonOp_descriptor();
template<typename T>
inline const std::string& Expression_Subquery_SetComparison_ComparisonOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expression_Subquery_SetComparison_ComparisonOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expression_Subquery_SetComparison_ComparisonOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Expression_Subquery_SetComparison_ComparisonOp_descriptor(), enum_t_value);
}
inline bool Expression_Subquery_SetComparison_ComparisonOp_Parse(
    const std::string& name, Expression_Subquery_SetComparison_ComparisonOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetComparison_ComparisonOp>(
    Expression_Subquery_SetComparison_ComparisonOp_descriptor(), name, value);
}
enum Expression_Subquery_SetComparison_ReductionOp : int {
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ANY = 1,
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ALL = 2,
  Expression_Subquery_SetComparison_ReductionOp_Expression_Subquery_SetComparison_ReductionOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expression_Subquery_SetComparison_ReductionOp_Expression_Subquery_SetComparison_ReductionOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expression_Subquery_SetComparison_ReductionOp_IsValid(int value);
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MIN = Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MAX = Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ALL;
constexpr int Expression_Subquery_SetComparison_ReductionOp_ReductionOp_ARRAYSIZE = Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ReductionOp_descriptor();
template<typename T>
inline const std::string& Expression_Subquery_SetComparison_ReductionOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expression_Subquery_SetComparison_ReductionOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expression_Subquery_SetComparison_ReductionOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Expression_Subquery_SetComparison_ReductionOp_descriptor(), enum_t_value);
}
inline bool Expression_Subquery_SetComparison_ReductionOp_Parse(
    const std::string& name, Expression_Subquery_SetComparison_ReductionOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetComparison_ReductionOp>(
    Expression_Subquery_SetComparison_ReductionOp_descriptor(), name, value);
}
enum SortField_SortDirection : int {
  SortField_SortDirection_SORT_DIRECTION_UNSPECIFIED = 0,
  SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_FIRST = 1,
  SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_LAST = 2,
  SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_FIRST = 3,
  SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_LAST = 4,
  SortField_SortDirection_SORT_DIRECTION_CLUSTERED = 5,
  SortField_SortDirection_SortField_SortDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SortField_SortDirection_SortField_SortDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SortField_SortDirection_IsValid(int value);
constexpr SortField_SortDirection SortField_SortDirection_SortDirection_MIN = SortField_SortDirection_SORT_DIRECTION_UNSPECIFIED;
constexpr SortField_SortDirection SortField_SortDirection_SortDirection_MAX = SortField_SortDirection_SORT_DIRECTION_CLUSTERED;
constexpr int SortField_SortDirection_SortDirection_ARRAYSIZE = SortField_SortDirection_SortDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortField_SortDirection_descriptor();
template<typename T>
inline const std::string& SortField_SortDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SortField_SortDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SortField_SortDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SortField_SortDirection_descriptor(), enum_t_value);
}
inline bool SortField_SortDirection_Parse(
    const std::string& name, SortField_SortDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortField_SortDirection>(
    SortField_SortDirection_descriptor(), name, value);
}
enum AggregateFunction_AggregationInvocation : int {
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_UNSPECIFIED = 0,
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_ALL = 1,
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_DISTINCT = 2,
  AggregateFunction_AggregationInvocation_AggregateFunction_AggregationInvocation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggregateFunction_AggregationInvocation_AggregateFunction_AggregationInvocation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggregateFunction_AggregationInvocation_IsValid(int value);
constexpr AggregateFunction_AggregationInvocation AggregateFunction_AggregationInvocation_AggregationInvocation_MIN = AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_UNSPECIFIED;
constexpr AggregateFunction_AggregationInvocation AggregateFunction_AggregationInvocation_AggregationInvocation_MAX = AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_DISTINCT;
constexpr int AggregateFunction_AggregationInvocation_AggregationInvocation_ARRAYSIZE = AggregateFunction_AggregationInvocation_AggregationInvocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregateFunction_AggregationInvocation_descriptor();
template<typename T>
inline const std::string& AggregateFunction_AggregationInvocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregateFunction_AggregationInvocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregateFunction_AggregationInvocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregateFunction_AggregationInvocation_descriptor(), enum_t_value);
}
inline bool AggregateFunction_AggregationInvocation_Parse(
    const std::string& name, AggregateFunction_AggregationInvocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregateFunction_AggregationInvocation>(
    AggregateFunction_AggregationInvocation_descriptor(), name, value);
}
enum AggregationPhase : int {
  AGGREGATION_PHASE_UNSPECIFIED = 0,
  AGGREGATION_PHASE_INITIAL_TO_INTERMEDIATE = 1,
  AGGREGATION_PHASE_INTERMEDIATE_TO_INTERMEDIATE = 2,
  AGGREGATION_PHASE_INITIAL_TO_RESULT = 3,
  AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT = 4,
  AggregationPhase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggregationPhase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggregationPhase_IsValid(int value);
constexpr AggregationPhase AggregationPhase_MIN = AGGREGATION_PHASE_UNSPECIFIED;
constexpr AggregationPhase AggregationPhase_MAX = AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT;
constexpr int AggregationPhase_ARRAYSIZE = AggregationPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationPhase_descriptor();
template<typename T>
inline const std::string& AggregationPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregationPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregationPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregationPhase_descriptor(), enum_t_value);
}
inline bool AggregationPhase_Parse(
    const std::string& name, AggregationPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregationPhase>(
    AggregationPhase_descriptor(), name, value);
}
// ===================================================================

class RelCommon_Direct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon.Direct) */ {
 public:
  inline RelCommon_Direct() : RelCommon_Direct(nullptr) {};
  virtual ~RelCommon_Direct();

  RelCommon_Direct(const RelCommon_Direct& from);
  RelCommon_Direct(RelCommon_Direct&& from) noexcept
    : RelCommon_Direct() {
    *this = ::std::move(from);
  }

  inline RelCommon_Direct& operator=(const RelCommon_Direct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Direct& operator=(RelCommon_Direct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon_Direct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon_Direct* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Direct*>(
               &_RelCommon_Direct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelCommon_Direct& a, RelCommon_Direct& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Direct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Direct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Direct* New() const final {
    return CreateMaybeMessage<RelCommon_Direct>(nullptr);
  }

  RelCommon_Direct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Direct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Direct& from);
  void MergeFrom(const RelCommon_Direct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Direct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon.Direct";
  }
  protected:
  explicit RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon.Direct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Emit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon.Emit) */ {
 public:
  inline RelCommon_Emit() : RelCommon_Emit(nullptr) {};
  virtual ~RelCommon_Emit();

  RelCommon_Emit(const RelCommon_Emit& from);
  RelCommon_Emit(RelCommon_Emit&& from) noexcept
    : RelCommon_Emit() {
    *this = ::std::move(from);
  }

  inline RelCommon_Emit& operator=(const RelCommon_Emit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Emit& operator=(RelCommon_Emit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon_Emit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon_Emit* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Emit*>(
               &_RelCommon_Emit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelCommon_Emit& a, RelCommon_Emit& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Emit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Emit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Emit* New() const final {
    return CreateMaybeMessage<RelCommon_Emit>(nullptr);
  }

  RelCommon_Emit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Emit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Emit& from);
  void MergeFrom(const RelCommon_Emit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Emit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon.Emit";
  }
  protected:
  explicit RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMappingFieldNumber = 1,
  };
  // repeated int32 output_mapping = 1;
  int output_mapping_size() const;
  private:
  int _internal_output_mapping_size() const;
  public:
  void clear_output_mapping();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_mapping(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_output_mapping() const;
  void _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_output_mapping();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 output_mapping(int index) const;
  void set_output_mapping(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      output_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_output_mapping();

  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon.Emit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > output_mapping_;
  mutable std::atomic<int> _output_mapping_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon.Hint.Stats) */ {
 public:
  inline RelCommon_Hint_Stats() : RelCommon_Hint_Stats(nullptr) {};
  virtual ~RelCommon_Hint_Stats();

  RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from);
  RelCommon_Hint_Stats(RelCommon_Hint_Stats&& from) noexcept
    : RelCommon_Hint_Stats() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_Stats& operator=(const RelCommon_Hint_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_Stats& operator=(RelCommon_Hint_Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon_Hint_Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon_Hint_Stats* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_Stats*>(
               &_RelCommon_Hint_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelCommon_Hint_Stats& a, RelCommon_Hint_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint_Stats* New() const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(nullptr);
  }

  RelCommon_Hint_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint_Stats& from);
  void MergeFrom(const RelCommon_Hint_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon.Hint.Stats";
  }
  protected:
  explicit RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
    kRowCountFieldNumber = 1,
    kRecordSizeFieldNumber = 2,
  };
  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // double row_count = 1;
  void clear_row_count();
  double row_count() const;
  void set_row_count(double value);
  private:
  double _internal_row_count() const;
  void _internal_set_row_count(double value);
  public:

  // double record_size = 2;
  void clear_record_size();
  double record_size() const;
  void set_record_size(double value);
  private:
  double _internal_record_size() const;
  void _internal_set_record_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon.Hint.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  double row_count_;
  double record_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_RuntimeConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon.Hint.RuntimeConstraint) */ {
 public:
  inline RelCommon_Hint_RuntimeConstraint() : RelCommon_Hint_RuntimeConstraint(nullptr) {};
  virtual ~RelCommon_Hint_RuntimeConstraint();

  RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from);
  RelCommon_Hint_RuntimeConstraint(RelCommon_Hint_RuntimeConstraint&& from) noexcept
    : RelCommon_Hint_RuntimeConstraint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_RuntimeConstraint& operator=(const RelCommon_Hint_RuntimeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_RuntimeConstraint& operator=(RelCommon_Hint_RuntimeConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon_Hint_RuntimeConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon_Hint_RuntimeConstraint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_RuntimeConstraint*>(
               &_RelCommon_Hint_RuntimeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelCommon_Hint_RuntimeConstraint& a, RelCommon_Hint_RuntimeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint_RuntimeConstraint* New() const final {
    return CreateMaybeMessage<RelCommon_Hint_RuntimeConstraint>(nullptr);
  }

  RelCommon_Hint_RuntimeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint_RuntimeConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint_RuntimeConstraint& from);
  void MergeFrom(const RelCommon_Hint_RuntimeConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_RuntimeConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon.Hint.RuntimeConstraint";
  }
  protected:
  explicit RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon.Hint.RuntimeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon.Hint) */ {
 public:
  inline RelCommon_Hint() : RelCommon_Hint(nullptr) {};
  virtual ~RelCommon_Hint();

  RelCommon_Hint(const RelCommon_Hint& from);
  RelCommon_Hint(RelCommon_Hint&& from) noexcept
    : RelCommon_Hint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint& operator=(const RelCommon_Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint& operator=(RelCommon_Hint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon_Hint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon_Hint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint*>(
               &_RelCommon_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RelCommon_Hint& a, RelCommon_Hint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon_Hint* New() const final {
    return CreateMaybeMessage<RelCommon_Hint>(nullptr);
  }

  RelCommon_Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon_Hint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon_Hint& from);
  void MergeFrom(const RelCommon_Hint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon.Hint";
  }
  protected:
  explicit RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RelCommon_Hint_Stats Stats;
  typedef RelCommon_Hint_RuntimeConstraint RuntimeConstraint;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kConstraintFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.proto.RelCommon.Hint.Stats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::substrait::proto::RelCommon_Hint_Stats& stats() const;
  ::substrait::proto::RelCommon_Hint_Stats* release_stats();
  ::substrait::proto::RelCommon_Hint_Stats* mutable_stats();
  void set_allocated_stats(::substrait::proto::RelCommon_Hint_Stats* stats);
  private:
  const ::substrait::proto::RelCommon_Hint_Stats& _internal_stats() const;
  ::substrait::proto::RelCommon_Hint_Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::substrait::proto::RelCommon_Hint_Stats* stats);
  ::substrait::proto::RelCommon_Hint_Stats* unsafe_arena_release_stats();

  // .substrait.proto.RelCommon.Hint.RuntimeConstraint constraint = 2;
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::substrait::proto::RelCommon_Hint_RuntimeConstraint& constraint() const;
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* release_constraint();
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* mutable_constraint();
  void set_allocated_constraint(::substrait::proto::RelCommon_Hint_RuntimeConstraint* constraint);
  private:
  const ::substrait::proto::RelCommon_Hint_RuntimeConstraint& _internal_constraint() const;
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::substrait::proto::RelCommon_Hint_RuntimeConstraint* constraint);
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* unsafe_arena_release_constraint();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon.Hint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon_Hint_Stats* stats_;
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* constraint_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelCommon) */ {
 public:
  inline RelCommon() : RelCommon(nullptr) {};
  virtual ~RelCommon();

  RelCommon(const RelCommon& from);
  RelCommon(RelCommon&& from) noexcept
    : RelCommon() {
    *this = ::std::move(from);
  }

  inline RelCommon& operator=(const RelCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon& operator=(RelCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelCommon& default_instance();

  enum EmitKindCase {
    kDirect = 1,
    kEmit = 2,
    EMIT_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelCommon* internal_default_instance() {
    return reinterpret_cast<const RelCommon*>(
               &_RelCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RelCommon& a, RelCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelCommon* New() const final {
    return CreateMaybeMessage<RelCommon>(nullptr);
  }

  RelCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelCommon& from);
  void MergeFrom(const RelCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelCommon";
  }
  protected:
  explicit RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RelCommon_Direct Direct;
  typedef RelCommon_Emit Emit;
  typedef RelCommon_Hint Hint;

  // accessors -------------------------------------------------------

  enum : int {
    kHintFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 4,
    kDirectFieldNumber = 1,
    kEmitFieldNumber = 2,
  };
  // .substrait.proto.RelCommon.Hint hint = 3;
  bool has_hint() const;
  private:
  bool _internal_has_hint() const;
  public:
  void clear_hint();
  const ::substrait::proto::RelCommon_Hint& hint() const;
  ::substrait::proto::RelCommon_Hint* release_hint();
  ::substrait::proto::RelCommon_Hint* mutable_hint();
  void set_allocated_hint(::substrait::proto::RelCommon_Hint* hint);
  private:
  const ::substrait::proto::RelCommon_Hint& _internal_hint() const;
  ::substrait::proto::RelCommon_Hint* _internal_mutable_hint();
  public:
  void unsafe_arena_set_allocated_hint(
      ::substrait::proto::RelCommon_Hint* hint);
  ::substrait::proto::RelCommon_Hint* unsafe_arena_release_hint();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 4;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.RelCommon.Direct direct = 1;
  bool has_direct() const;
  private:
  bool _internal_has_direct() const;
  public:
  void clear_direct();
  const ::substrait::proto::RelCommon_Direct& direct() const;
  ::substrait::proto::RelCommon_Direct* release_direct();
  ::substrait::proto::RelCommon_Direct* mutable_direct();
  void set_allocated_direct(::substrait::proto::RelCommon_Direct* direct);
  private:
  const ::substrait::proto::RelCommon_Direct& _internal_direct() const;
  ::substrait::proto::RelCommon_Direct* _internal_mutable_direct();
  public:
  void unsafe_arena_set_allocated_direct(
      ::substrait::proto::RelCommon_Direct* direct);
  ::substrait::proto::RelCommon_Direct* unsafe_arena_release_direct();

  // .substrait.proto.RelCommon.Emit emit = 2;
  bool has_emit() const;
  private:
  bool _internal_has_emit() const;
  public:
  void clear_emit();
  const ::substrait::proto::RelCommon_Emit& emit() const;
  ::substrait::proto::RelCommon_Emit* release_emit();
  ::substrait::proto::RelCommon_Emit* mutable_emit();
  void set_allocated_emit(::substrait::proto::RelCommon_Emit* emit);
  private:
  const ::substrait::proto::RelCommon_Emit& _internal_emit() const;
  ::substrait::proto::RelCommon_Emit* _internal_mutable_emit();
  public:
  void unsafe_arena_set_allocated_emit(
      ::substrait::proto::RelCommon_Emit* emit);
  ::substrait::proto::RelCommon_Emit* unsafe_arena_release_emit();

  void clear_emit_kind();
  EmitKindCase emit_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.RelCommon)
 private:
  class _Internal;
  void set_has_direct();
  void set_has_emit();

  inline bool has_emit_kind() const;
  inline void clear_has_emit_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon_Hint* hint_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  union EmitKindUnion {
    EmitKindUnion() {}
    ::substrait::proto::RelCommon_Direct* direct_;
    ::substrait::proto::RelCommon_Emit* emit_;
  } emit_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_NamedTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.NamedTable) */ {
 public:
  inline ReadRel_NamedTable() : ReadRel_NamedTable(nullptr) {};
  virtual ~ReadRel_NamedTable();

  ReadRel_NamedTable(const ReadRel_NamedTable& from);
  ReadRel_NamedTable(ReadRel_NamedTable&& from) noexcept
    : ReadRel_NamedTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_NamedTable& operator=(const ReadRel_NamedTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_NamedTable& operator=(ReadRel_NamedTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_NamedTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_NamedTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_NamedTable*>(
               &_ReadRel_NamedTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRel_NamedTable& a, ReadRel_NamedTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_NamedTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_NamedTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_NamedTable* New() const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(nullptr);
  }

  ReadRel_NamedTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_NamedTable& from);
  void MergeFrom(const ReadRel_NamedTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_NamedTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.NamedTable";
  }
  protected:
  explicit ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.NamedTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_VirtualTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.VirtualTable) */ {
 public:
  inline ReadRel_VirtualTable() : ReadRel_VirtualTable(nullptr) {};
  virtual ~ReadRel_VirtualTable();

  ReadRel_VirtualTable(const ReadRel_VirtualTable& from);
  ReadRel_VirtualTable(ReadRel_VirtualTable&& from) noexcept
    : ReadRel_VirtualTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_VirtualTable& operator=(const ReadRel_VirtualTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_VirtualTable& operator=(ReadRel_VirtualTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_VirtualTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_VirtualTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_VirtualTable*>(
               &_ReadRel_VirtualTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRel_VirtualTable& a, ReadRel_VirtualTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_VirtualTable* New() const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(nullptr);
  }

  ReadRel_VirtualTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_VirtualTable& from);
  void MergeFrom(const ReadRel_VirtualTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_VirtualTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.VirtualTable";
  }
  protected:
  explicit ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.Literal.Struct values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::substrait::proto::Expression_Literal_Struct* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Struct >*
      mutable_values();
  private:
  const ::substrait::proto::Expression_Literal_Struct& _internal_values(int index) const;
  ::substrait::proto::Expression_Literal_Struct* _internal_add_values();
  public:
  const ::substrait::proto::Expression_Literal_Struct& values(int index) const;
  ::substrait::proto::Expression_Literal_Struct* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Struct >&
      values() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.VirtualTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Struct > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_ExtensionTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.ExtensionTable) */ {
 public:
  inline ReadRel_ExtensionTable() : ReadRel_ExtensionTable(nullptr) {};
  virtual ~ReadRel_ExtensionTable();

  ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from);
  ReadRel_ExtensionTable(ReadRel_ExtensionTable&& from) noexcept
    : ReadRel_ExtensionTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_ExtensionTable& operator=(const ReadRel_ExtensionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_ExtensionTable& operator=(ReadRel_ExtensionTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_ExtensionTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_ExtensionTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_ExtensionTable*>(
               &_ReadRel_ExtensionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRel_ExtensionTable& a, ReadRel_ExtensionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_ExtensionTable* New() const final {
    return CreateMaybeMessage<ReadRel_ExtensionTable>(nullptr);
  }

  ReadRel_ExtensionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_ExtensionTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_ExtensionTable& from);
  void MergeFrom(const ReadRel_ExtensionTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_ExtensionTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.ExtensionTable";
  }
  protected:
  explicit ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // .google.protobuf.Any detail = 1;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NAMESPACE_ID::Any* release_detail();
  PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      PROTOBUF_NAMESPACE_ID::Any* detail);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.ExtensionTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions() : ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(nullptr) {};
  virtual ~ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions();

  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& a, ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions() : ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(nullptr) {};
  virtual ~ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions();

  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& a, ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions() : ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(nullptr) {};
  virtual ~ReadRel_LocalFiles_FileOrFiles_OrcReadOptions();

  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_OrcReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& a, ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions() : ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(nullptr) {};
  virtual ~ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions();

  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& a, ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles.FileOrFiles) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles() : ReadRel_LocalFiles_FileOrFiles(nullptr) {};
  virtual ~ReadRel_LocalFiles_FileOrFiles();

  ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from);
  ReadRel_LocalFiles_FileOrFiles(ReadRel_LocalFiles_FileOrFiles&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles& operator=(const ReadRel_LocalFiles_FileOrFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles& operator=(ReadRel_LocalFiles_FileOrFiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles& default_instance();

  enum PathTypeCase {
    kUriPath = 1,
    kUriPathGlob = 2,
    kUriFile = 3,
    kUriFolder = 4,
    PATH_TYPE_NOT_SET = 0,
  };

  enum FileFormatCase {
    kParquet = 9,
    kArrow = 10,
    kOrc = 11,
    kExtension = 12,
    kDwrf = 13,
    FILE_FORMAT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles_FileOrFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles*>(
               &_ReadRel_LocalFiles_FileOrFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReadRel_LocalFiles_FileOrFiles& a, ReadRel_LocalFiles_FileOrFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles_FileOrFiles* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(nullptr);
  }

  ReadRel_LocalFiles_FileOrFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles.FileOrFiles";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions ParquetReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions ArrowReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_OrcReadOptions OrcReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions DwrfReadOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIndexFieldNumber = 6,
    kStartFieldNumber = 7,
    kLengthFieldNumber = 8,
    kUriPathFieldNumber = 1,
    kUriPathGlobFieldNumber = 2,
    kUriFileFieldNumber = 3,
    kUriFolderFieldNumber = 4,
    kParquetFieldNumber = 9,
    kArrowFieldNumber = 10,
    kOrcFieldNumber = 11,
    kExtensionFieldNumber = 12,
    kDwrfFieldNumber = 13,
  };
  // uint64 partition_index = 6;
  void clear_partition_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 partition_index() const;
  void set_partition_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_partition_index() const;
  void _internal_set_partition_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start = 7;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 length = 8;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string uri_path = 1;
  private:
  bool _internal_has_uri_path() const;
  public:
  void clear_uri_path();
  const std::string& uri_path() const;
  void set_uri_path(const std::string& value);
  void set_uri_path(std::string&& value);
  void set_uri_path(const char* value);
  void set_uri_path(const char* value, size_t size);
  std::string* mutable_uri_path();
  std::string* release_uri_path();
  void set_allocated_uri_path(std::string* uri_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri_path(
      std::string* uri_path);
  private:
  const std::string& _internal_uri_path() const;
  void _internal_set_uri_path(const std::string& value);
  std::string* _internal_mutable_uri_path();
  public:

  // string uri_path_glob = 2;
  private:
  bool _internal_has_uri_path_glob() const;
  public:
  void clear_uri_path_glob();
  const std::string& uri_path_glob() const;
  void set_uri_path_glob(const std::string& value);
  void set_uri_path_glob(std::string&& value);
  void set_uri_path_glob(const char* value);
  void set_uri_path_glob(const char* value, size_t size);
  std::string* mutable_uri_path_glob();
  std::string* release_uri_path_glob();
  void set_allocated_uri_path_glob(std::string* uri_path_glob);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri_path_glob();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri_path_glob(
      std::string* uri_path_glob);
  private:
  const std::string& _internal_uri_path_glob() const;
  void _internal_set_uri_path_glob(const std::string& value);
  std::string* _internal_mutable_uri_path_glob();
  public:

  // string uri_file = 3;
  private:
  bool _internal_has_uri_file() const;
  public:
  void clear_uri_file();
  const std::string& uri_file() const;
  void set_uri_file(const std::string& value);
  void set_uri_file(std::string&& value);
  void set_uri_file(const char* value);
  void set_uri_file(const char* value, size_t size);
  std::string* mutable_uri_file();
  std::string* release_uri_file();
  void set_allocated_uri_file(std::string* uri_file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri_file(
      std::string* uri_file);
  private:
  const std::string& _internal_uri_file() const;
  void _internal_set_uri_file(const std::string& value);
  std::string* _internal_mutable_uri_file();
  public:

  // string uri_folder = 4;
  private:
  bool _internal_has_uri_folder() const;
  public:
  void clear_uri_folder();
  const std::string& uri_folder() const;
  void set_uri_folder(const std::string& value);
  void set_uri_folder(std::string&& value);
  void set_uri_folder(const char* value);
  void set_uri_folder(const char* value, size_t size);
  std::string* mutable_uri_folder();
  std::string* release_uri_folder();
  void set_allocated_uri_folder(std::string* uri_folder);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri_folder();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri_folder(
      std::string* uri_folder);
  private:
  const std::string& _internal_uri_folder() const;
  void _internal_set_uri_folder(const std::string& value);
  std::string* _internal_mutable_uri_folder();
  public:

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
  bool has_parquet() const;
  private:
  bool _internal_has_parquet() const;
  public:
  void clear_parquet();
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& parquet() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* release_parquet();
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* mutable_parquet();
  void set_allocated_parquet(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet);
  private:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& _internal_parquet() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* _internal_mutable_parquet();
  public:
  void unsafe_arena_set_allocated_parquet(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet);
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* unsafe_arena_release_parquet();

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
  bool has_arrow() const;
  private:
  bool _internal_has_arrow() const;
  public:
  void clear_arrow();
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& arrow() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* release_arrow();
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* mutable_arrow();
  void set_allocated_arrow(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow);
  private:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& _internal_arrow() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* _internal_mutable_arrow();
  public:
  void unsafe_arena_set_allocated_arrow(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow);
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* unsafe_arena_release_arrow();

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
  bool has_orc() const;
  private:
  bool _internal_has_orc() const;
  public:
  void clear_orc();
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& orc() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* release_orc();
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* mutable_orc();
  void set_allocated_orc(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc);
  private:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& _internal_orc() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* _internal_mutable_orc();
  public:
  void unsafe_arena_set_allocated_orc(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc);
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* unsafe_arena_release_orc();

  // .google.protobuf.Any extension = 12;
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;
  public:
  void clear_extension();
  const PROTOBUF_NAMESPACE_ID::Any& extension() const;
  PROTOBUF_NAMESPACE_ID::Any* release_extension();
  PROTOBUF_NAMESPACE_ID::Any* mutable_extension();
  void set_allocated_extension(PROTOBUF_NAMESPACE_ID::Any* extension);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_extension() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      PROTOBUF_NAMESPACE_ID::Any* extension);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extension();

  // .substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
  bool has_dwrf() const;
  private:
  bool _internal_has_dwrf() const;
  public:
  void clear_dwrf();
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& dwrf() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* release_dwrf();
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* mutable_dwrf();
  void set_allocated_dwrf(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf);
  private:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& _internal_dwrf() const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* _internal_mutable_dwrf();
  public:
  void unsafe_arena_set_allocated_dwrf(
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf);
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* unsafe_arena_release_dwrf();

  void clear_path_type();
  PathTypeCase path_type_case() const;
  void clear_file_format();
  FileFormatCase file_format_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles.FileOrFiles)
 private:
  class _Internal;
  void set_has_uri_path();
  void set_has_uri_path_glob();
  void set_has_uri_file();
  void set_has_uri_folder();
  void set_has_parquet();
  void set_has_arrow();
  void set_has_orc();
  void set_has_extension();
  void set_has_dwrf();

  inline bool has_path_type() const;
  inline void clear_has_path_type();

  inline bool has_file_format() const;
  inline void clear_has_file_format();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 partition_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  union PathTypeUnion {
    PathTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_glob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_folder_;
  } path_type_;
  union FileFormatUnion {
    FileFormatUnion() {}
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet_;
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow_;
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc_;
    PROTOBUF_NAMESPACE_ID::Any* extension_;
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf_;
  } file_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel.LocalFiles) */ {
 public:
  inline ReadRel_LocalFiles() : ReadRel_LocalFiles(nullptr) {};
  virtual ~ReadRel_LocalFiles();

  ReadRel_LocalFiles(const ReadRel_LocalFiles& from);
  ReadRel_LocalFiles(ReadRel_LocalFiles&& from) noexcept
    : ReadRel_LocalFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles& operator=(const ReadRel_LocalFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles& operator=(ReadRel_LocalFiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel_LocalFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel_LocalFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles*>(
               &_ReadRel_LocalFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadRel_LocalFiles& a, ReadRel_LocalFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel_LocalFiles* New() const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(nullptr);
  }

  ReadRel_LocalFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel_LocalFiles& from);
  void MergeFrom(const ReadRel_LocalFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel.LocalFiles";
  }
  protected:
  explicit ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles FileOrFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.proto.ReadRel.LocalFiles.FileOrFiles items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >*
      mutable_items();
  private:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles& _internal_items(int index) const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* _internal_add_items();
  public:
  const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles& items(int index) const;
  ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >&
      items() const;

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel.LocalFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles > items_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReadRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReadRel) */ {
 public:
  inline ReadRel() : ReadRel(nullptr) {};
  virtual ~ReadRel();

  ReadRel(const ReadRel& from);
  ReadRel(ReadRel&& from) noexcept
    : ReadRel() {
    *this = ::std::move(from);
  }

  inline ReadRel& operator=(const ReadRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel& operator=(ReadRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRel& default_instance();

  enum ReadTypeCase {
    kVirtualTable = 5,
    kLocalFiles = 6,
    kNamedTable = 7,
    kExtensionTable = 8,
    READ_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRel* internal_default_instance() {
    return reinterpret_cast<const ReadRel*>(
               &_ReadRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadRel& a, ReadRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRel* New() const final {
    return CreateMaybeMessage<ReadRel>(nullptr);
  }

  ReadRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRel& from);
  void MergeFrom(const ReadRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReadRel";
  }
  protected:
  explicit ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadRel_NamedTable NamedTable;
  typedef ReadRel_VirtualTable VirtualTable;
  typedef ReadRel_ExtensionTable ExtensionTable;
  typedef ReadRel_LocalFiles LocalFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBaseSchemaFieldNumber = 2,
    kFilterFieldNumber = 3,
    kProjectionFieldNumber = 4,
    kAdvancedExtensionFieldNumber = 10,
    kBestEffortFilterFieldNumber = 11,
    kVirtualTableFieldNumber = 5,
    kLocalFilesFieldNumber = 6,
    kNamedTableFieldNumber = 7,
    kExtensionTableFieldNumber = 8,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.NamedStruct base_schema = 2;
  bool has_base_schema() const;
  private:
  bool _internal_has_base_schema() const;
  public:
  void clear_base_schema();
  const ::substrait::proto::NamedStruct& base_schema() const;
  ::substrait::proto::NamedStruct* release_base_schema();
  ::substrait::proto::NamedStruct* mutable_base_schema();
  void set_allocated_base_schema(::substrait::proto::NamedStruct* base_schema);
  private:
  const ::substrait::proto::NamedStruct& _internal_base_schema() const;
  ::substrait::proto::NamedStruct* _internal_mutable_base_schema();
  public:
  void unsafe_arena_set_allocated_base_schema(
      ::substrait::proto::NamedStruct* base_schema);
  ::substrait::proto::NamedStruct* unsafe_arena_release_base_schema();

  // .substrait.proto.Expression filter = 3;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::proto::Expression& filter() const;
  ::substrait::proto::Expression* release_filter();
  ::substrait::proto::Expression* mutable_filter();
  void set_allocated_filter(::substrait::proto::Expression* filter);
  private:
  const ::substrait::proto::Expression& _internal_filter() const;
  ::substrait::proto::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::proto::Expression* filter);
  ::substrait::proto::Expression* unsafe_arena_release_filter();

  // .substrait.proto.Expression.MaskExpression projection = 4;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::substrait::proto::Expression_MaskExpression& projection() const;
  ::substrait::proto::Expression_MaskExpression* release_projection();
  ::substrait::proto::Expression_MaskExpression* mutable_projection();
  void set_allocated_projection(::substrait::proto::Expression_MaskExpression* projection);
  private:
  const ::substrait::proto::Expression_MaskExpression& _internal_projection() const;
  ::substrait::proto::Expression_MaskExpression* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::substrait::proto::Expression_MaskExpression* projection);
  ::substrait::proto::Expression_MaskExpression* unsafe_arena_release_projection();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.Expression best_effort_filter = 11;
  bool has_best_effort_filter() const;
  private:
  bool _internal_has_best_effort_filter() const;
  public:
  void clear_best_effort_filter();
  const ::substrait::proto::Expression& best_effort_filter() const;
  ::substrait::proto::Expression* release_best_effort_filter();
  ::substrait::proto::Expression* mutable_best_effort_filter();
  void set_allocated_best_effort_filter(::substrait::proto::Expression* best_effort_filter);
  private:
  const ::substrait::proto::Expression& _internal_best_effort_filter() const;
  ::substrait::proto::Expression* _internal_mutable_best_effort_filter();
  public:
  void unsafe_arena_set_allocated_best_effort_filter(
      ::substrait::proto::Expression* best_effort_filter);
  ::substrait::proto::Expression* unsafe_arena_release_best_effort_filter();

  // .substrait.proto.ReadRel.VirtualTable virtual_table = 5;
  bool has_virtual_table() const;
  private:
  bool _internal_has_virtual_table() const;
  public:
  void clear_virtual_table();
  const ::substrait::proto::ReadRel_VirtualTable& virtual_table() const;
  ::substrait::proto::ReadRel_VirtualTable* release_virtual_table();
  ::substrait::proto::ReadRel_VirtualTable* mutable_virtual_table();
  void set_allocated_virtual_table(::substrait::proto::ReadRel_VirtualTable* virtual_table);
  private:
  const ::substrait::proto::ReadRel_VirtualTable& _internal_virtual_table() const;
  ::substrait::proto::ReadRel_VirtualTable* _internal_mutable_virtual_table();
  public:
  void unsafe_arena_set_allocated_virtual_table(
      ::substrait::proto::ReadRel_VirtualTable* virtual_table);
  ::substrait::proto::ReadRel_VirtualTable* unsafe_arena_release_virtual_table();

  // .substrait.proto.ReadRel.LocalFiles local_files = 6;
  bool has_local_files() const;
  private:
  bool _internal_has_local_files() const;
  public:
  void clear_local_files();
  const ::substrait::proto::ReadRel_LocalFiles& local_files() const;
  ::substrait::proto::ReadRel_LocalFiles* release_local_files();
  ::substrait::proto::ReadRel_LocalFiles* mutable_local_files();
  void set_allocated_local_files(::substrait::proto::ReadRel_LocalFiles* local_files);
  private:
  const ::substrait::proto::ReadRel_LocalFiles& _internal_local_files() const;
  ::substrait::proto::ReadRel_LocalFiles* _internal_mutable_local_files();
  public:
  void unsafe_arena_set_allocated_local_files(
      ::substrait::proto::ReadRel_LocalFiles* local_files);
  ::substrait::proto::ReadRel_LocalFiles* unsafe_arena_release_local_files();

  // .substrait.proto.ReadRel.NamedTable named_table = 7;
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;
  public:
  void clear_named_table();
  const ::substrait::proto::ReadRel_NamedTable& named_table() const;
  ::substrait::proto::ReadRel_NamedTable* release_named_table();
  ::substrait::proto::ReadRel_NamedTable* mutable_named_table();
  void set_allocated_named_table(::substrait::proto::ReadRel_NamedTable* named_table);
  private:
  const ::substrait::proto::ReadRel_NamedTable& _internal_named_table() const;
  ::substrait::proto::ReadRel_NamedTable* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::substrait::proto::ReadRel_NamedTable* named_table);
  ::substrait::proto::ReadRel_NamedTable* unsafe_arena_release_named_table();

  // .substrait.proto.ReadRel.ExtensionTable extension_table = 8;
  bool has_extension_table() const;
  private:
  bool _internal_has_extension_table() const;
  public:
  void clear_extension_table();
  const ::substrait::proto::ReadRel_ExtensionTable& extension_table() const;
  ::substrait::proto::ReadRel_ExtensionTable* release_extension_table();
  ::substrait::proto::ReadRel_ExtensionTable* mutable_extension_table();
  void set_allocated_extension_table(::substrait::proto::ReadRel_ExtensionTable* extension_table);
  private:
  const ::substrait::proto::ReadRel_ExtensionTable& _internal_extension_table() const;
  ::substrait::proto::ReadRel_ExtensionTable* _internal_mutable_extension_table();
  public:
  void unsafe_arena_set_allocated_extension_table(
      ::substrait::proto::ReadRel_ExtensionTable* extension_table);
  ::substrait::proto::ReadRel_ExtensionTable* unsafe_arena_release_extension_table();

  void clear_read_type();
  ReadTypeCase read_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ReadRel)
 private:
  class _Internal;
  void set_has_virtual_table();
  void set_has_local_files();
  void set_has_named_table();
  void set_has_extension_table();

  inline bool has_read_type() const;
  inline void clear_has_read_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::NamedStruct* base_schema_;
  ::substrait::proto::Expression* filter_;
  ::substrait::proto::Expression_MaskExpression* projection_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  ::substrait::proto::Expression* best_effort_filter_;
  union ReadTypeUnion {
    ReadTypeUnion() {}
    ::substrait::proto::ReadRel_VirtualTable* virtual_table_;
    ::substrait::proto::ReadRel_LocalFiles* local_files_;
    ::substrait::proto::ReadRel_NamedTable* named_table_;
    ::substrait::proto::ReadRel_ExtensionTable* extension_table_;
  } read_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ProjectRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ProjectRel) */ {
 public:
  inline ProjectRel() : ProjectRel(nullptr) {};
  virtual ~ProjectRel();

  ProjectRel(const ProjectRel& from);
  ProjectRel(ProjectRel&& from) noexcept
    : ProjectRel() {
    *this = ::std::move(from);
  }

  inline ProjectRel& operator=(const ProjectRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRel& operator=(ProjectRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRel* internal_default_instance() {
    return reinterpret_cast<const ProjectRel*>(
               &_ProjectRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProjectRel& a, ProjectRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectRel* New() const final {
    return CreateMaybeMessage<ProjectRel>(nullptr);
  }

  ProjectRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectRel& from);
  void MergeFrom(const ProjectRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ProjectRel";
  }
  protected:
  explicit ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.proto.Expression expressions = 3;
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;
  public:
  void clear_expressions();
  ::substrait::proto::Expression* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_expressions();
  private:
  const ::substrait::proto::Expression& _internal_expressions(int index) const;
  ::substrait::proto::Expression* _internal_add_expressions();
  public:
  const ::substrait::proto::Expression& expressions(int index) const;
  ::substrait::proto::Expression* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      expressions() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.ProjectRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > expressions_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class JoinRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.JoinRel) */ {
 public:
  inline JoinRel() : JoinRel(nullptr) {};
  virtual ~JoinRel();

  JoinRel(const JoinRel& from);
  JoinRel(JoinRel&& from) noexcept
    : JoinRel() {
    *this = ::std::move(from);
  }

  inline JoinRel& operator=(const JoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRel& operator=(JoinRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRel* internal_default_instance() {
    return reinterpret_cast<const JoinRel*>(
               &_JoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JoinRel& a, JoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinRel* New() const final {
    return CreateMaybeMessage<JoinRel>(nullptr);
  }

  JoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRel& from);
  void MergeFrom(const JoinRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.JoinRel";
  }
  protected:
  explicit JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JoinRel_JoinType JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED =
    JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER =
    JoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER =
    JoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT =
    JoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT =
    JoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_SEMI =
    JoinRel_JoinType_JOIN_TYPE_SEMI;
  static constexpr JoinType JOIN_TYPE_ANTI =
    JoinRel_JoinType_JOIN_TYPE_ANTI;
  static constexpr JoinType JOIN_TYPE_SINGLE =
    JoinRel_JoinType_JOIN_TYPE_SINGLE;
  static inline bool JoinType_IsValid(int value) {
    return JoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    JoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    JoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    JoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return JoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return JoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(const std::string& name,
      JoinType* value) {
    return JoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kExpressionFieldNumber = 4,
    kPostJoinFilterFieldNumber = 5,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 6,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Rel& left() const;
  ::substrait::proto::Rel* release_left();
  ::substrait::proto::Rel* mutable_left();
  void set_allocated_left(::substrait::proto::Rel* left);
  private:
  const ::substrait::proto::Rel& _internal_left() const;
  ::substrait::proto::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Rel* left);
  ::substrait::proto::Rel* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.Expression expression = 4;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression& expression() const;
  ::substrait::proto::Expression* release_expression();
  ::substrait::proto::Expression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression* expression);
  private:
  const ::substrait::proto::Expression& _internal_expression() const;
  ::substrait::proto::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression* expression);
  ::substrait::proto::Expression* unsafe_arena_release_expression();

  // .substrait.proto.Expression post_join_filter = 5;
  bool has_post_join_filter() const;
  private:
  bool _internal_has_post_join_filter() const;
  public:
  void clear_post_join_filter();
  const ::substrait::proto::Expression& post_join_filter() const;
  ::substrait::proto::Expression* release_post_join_filter();
  ::substrait::proto::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter);
  private:
  const ::substrait::proto::Expression& _internal_post_join_filter() const;
  ::substrait::proto::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::proto::Expression* post_join_filter);
  ::substrait::proto::Expression* unsafe_arena_release_post_join_filter();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.JoinRel.JoinType type = 6;
  void clear_type();
  ::substrait::proto::JoinRel_JoinType type() const;
  void set_type(::substrait::proto::JoinRel_JoinType value);
  private:
  ::substrait::proto::JoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::proto::JoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.JoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* left_;
  ::substrait::proto::Rel* right_;
  ::substrait::proto::Expression* expression_;
  ::substrait::proto::Expression* post_join_filter_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class CrossRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.CrossRel) */ {
 public:
  inline CrossRel() : CrossRel(nullptr) {};
  virtual ~CrossRel();

  CrossRel(const CrossRel& from);
  CrossRel(CrossRel&& from) noexcept
    : CrossRel() {
    *this = ::std::move(from);
  }

  inline CrossRel& operator=(const CrossRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossRel& operator=(CrossRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrossRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrossRel* internal_default_instance() {
    return reinterpret_cast<const CrossRel*>(
               &_CrossRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CrossRel& a, CrossRel& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrossRel* New() const final {
    return CreateMaybeMessage<CrossRel>(nullptr);
  }

  CrossRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrossRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrossRel& from);
  void MergeFrom(const CrossRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.CrossRel";
  }
  protected:
  explicit CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Rel& left() const;
  ::substrait::proto::Rel* release_left();
  ::substrait::proto::Rel* mutable_left();
  void set_allocated_left(::substrait::proto::Rel* left);
  private:
  const ::substrait::proto::Rel& _internal_left() const;
  ::substrait::proto::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Rel* left);
  ::substrait::proto::Rel* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.CrossRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* left_;
  ::substrait::proto::Rel* right_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class FetchRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.FetchRel) */ {
 public:
  inline FetchRel() : FetchRel(nullptr) {};
  virtual ~FetchRel();

  FetchRel(const FetchRel& from);
  FetchRel(FetchRel&& from) noexcept
    : FetchRel() {
    *this = ::std::move(from);
  }

  inline FetchRel& operator=(const FetchRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRel& operator=(FetchRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchRel* internal_default_instance() {
    return reinterpret_cast<const FetchRel*>(
               &_FetchRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FetchRel& a, FetchRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchRel* New() const final {
    return CreateMaybeMessage<FetchRel>(nullptr);
  }

  FetchRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchRel& from);
  void MergeFrom(const FetchRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.FetchRel";
  }
  protected:
  explicit FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.FetchRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Grouping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.AggregateRel.Grouping) */ {
 public:
  inline AggregateRel_Grouping() : AggregateRel_Grouping(nullptr) {};
  virtual ~AggregateRel_Grouping();

  AggregateRel_Grouping(const AggregateRel_Grouping& from);
  AggregateRel_Grouping(AggregateRel_Grouping&& from) noexcept
    : AggregateRel_Grouping() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Grouping& operator=(const AggregateRel_Grouping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Grouping& operator=(AggregateRel_Grouping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateRel_Grouping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateRel_Grouping* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Grouping*>(
               &_AggregateRel_Grouping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AggregateRel_Grouping& a, AggregateRel_Grouping& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Grouping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Grouping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel_Grouping* New() const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(nullptr);
  }

  AggregateRel_Grouping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel_Grouping& from);
  void MergeFrom(const AggregateRel_Grouping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Grouping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.AggregateRel.Grouping";
  }
  protected:
  explicit AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingExpressionsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression grouping_expressions = 1;
  int grouping_expressions_size() const;
  private:
  int _internal_grouping_expressions_size() const;
  public:
  void clear_grouping_expressions();
  ::substrait::proto::Expression* mutable_grouping_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_grouping_expressions();
  private:
  const ::substrait::proto::Expression& _internal_grouping_expressions(int index) const;
  ::substrait::proto::Expression* _internal_add_grouping_expressions();
  public:
  const ::substrait::proto::Expression& grouping_expressions(int index) const;
  ::substrait::proto::Expression* add_grouping_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      grouping_expressions() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.AggregateRel.Grouping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > grouping_expressions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Measure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.AggregateRel.Measure) */ {
 public:
  inline AggregateRel_Measure() : AggregateRel_Measure(nullptr) {};
  virtual ~AggregateRel_Measure();

  AggregateRel_Measure(const AggregateRel_Measure& from);
  AggregateRel_Measure(AggregateRel_Measure&& from) noexcept
    : AggregateRel_Measure() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Measure& operator=(const AggregateRel_Measure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Measure& operator=(AggregateRel_Measure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateRel_Measure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateRel_Measure* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Measure*>(
               &_AggregateRel_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AggregateRel_Measure& a, AggregateRel_Measure& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Measure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Measure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel_Measure* New() const final {
    return CreateMaybeMessage<AggregateRel_Measure>(nullptr);
  }

  AggregateRel_Measure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel_Measure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel_Measure& from);
  void MergeFrom(const AggregateRel_Measure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Measure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.AggregateRel.Measure";
  }
  protected:
  explicit AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // .substrait.proto.AggregateFunction measure = 1;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::substrait::proto::AggregateFunction& measure() const;
  ::substrait::proto::AggregateFunction* release_measure();
  ::substrait::proto::AggregateFunction* mutable_measure();
  void set_allocated_measure(::substrait::proto::AggregateFunction* measure);
  private:
  const ::substrait::proto::AggregateFunction& _internal_measure() const;
  ::substrait::proto::AggregateFunction* _internal_mutable_measure();
  public:
  void unsafe_arena_set_allocated_measure(
      ::substrait::proto::AggregateFunction* measure);
  ::substrait::proto::AggregateFunction* unsafe_arena_release_measure();

  // .substrait.proto.Expression filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::proto::Expression& filter() const;
  ::substrait::proto::Expression* release_filter();
  ::substrait::proto::Expression* mutable_filter();
  void set_allocated_filter(::substrait::proto::Expression* filter);
  private:
  const ::substrait::proto::Expression& _internal_filter() const;
  ::substrait::proto::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::proto::Expression* filter);
  ::substrait::proto::Expression* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:substrait.proto.AggregateRel.Measure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::AggregateFunction* measure_;
  ::substrait::proto::Expression* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.AggregateRel) */ {
 public:
  inline AggregateRel() : AggregateRel(nullptr) {};
  virtual ~AggregateRel();

  AggregateRel(const AggregateRel& from);
  AggregateRel(AggregateRel&& from) noexcept
    : AggregateRel() {
    *this = ::std::move(from);
  }

  inline AggregateRel& operator=(const AggregateRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel& operator=(AggregateRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateRel* internal_default_instance() {
    return reinterpret_cast<const AggregateRel*>(
               &_AggregateRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AggregateRel& a, AggregateRel& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateRel* New() const final {
    return CreateMaybeMessage<AggregateRel>(nullptr);
  }

  AggregateRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateRel& from);
  void MergeFrom(const AggregateRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.AggregateRel";
  }
  protected:
  explicit AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AggregateRel_Grouping Grouping;
  typedef AggregateRel_Measure Measure;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingsFieldNumber = 3,
    kMeasuresFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.proto.AggregateRel.Grouping groupings = 3;
  int groupings_size() const;
  private:
  int _internal_groupings_size() const;
  public:
  void clear_groupings();
  ::substrait::proto::AggregateRel_Grouping* mutable_groupings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Grouping >*
      mutable_groupings();
  private:
  const ::substrait::proto::AggregateRel_Grouping& _internal_groupings(int index) const;
  ::substrait::proto::AggregateRel_Grouping* _internal_add_groupings();
  public:
  const ::substrait::proto::AggregateRel_Grouping& groupings(int index) const;
  ::substrait::proto::AggregateRel_Grouping* add_groupings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Grouping >&
      groupings() const;

  // repeated .substrait.proto.AggregateRel.Measure measures = 4;
  int measures_size() const;
  private:
  int _internal_measures_size() const;
  public:
  void clear_measures();
  ::substrait::proto::AggregateRel_Measure* mutable_measures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Measure >*
      mutable_measures();
  private:
  const ::substrait::proto::AggregateRel_Measure& _internal_measures(int index) const;
  ::substrait::proto::AggregateRel_Measure* _internal_add_measures();
  public:
  const ::substrait::proto::AggregateRel_Measure& measures(int index) const;
  ::substrait::proto::AggregateRel_Measure* add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Measure >&
      measures() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.AggregateRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Grouping > groupings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Measure > measures_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ConsistentPartitionWindowRel_WindowRelFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction) */ {
 public:
  inline ConsistentPartitionWindowRel_WindowRelFunction() : ConsistentPartitionWindowRel_WindowRelFunction(nullptr) {};
  virtual ~ConsistentPartitionWindowRel_WindowRelFunction();

  ConsistentPartitionWindowRel_WindowRelFunction(const ConsistentPartitionWindowRel_WindowRelFunction& from);
  ConsistentPartitionWindowRel_WindowRelFunction(ConsistentPartitionWindowRel_WindowRelFunction&& from) noexcept
    : ConsistentPartitionWindowRel_WindowRelFunction() {
    *this = ::std::move(from);
  }

  inline ConsistentPartitionWindowRel_WindowRelFunction& operator=(const ConsistentPartitionWindowRel_WindowRelFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsistentPartitionWindowRel_WindowRelFunction& operator=(ConsistentPartitionWindowRel_WindowRelFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsistentPartitionWindowRel_WindowRelFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsistentPartitionWindowRel_WindowRelFunction* internal_default_instance() {
    return reinterpret_cast<const ConsistentPartitionWindowRel_WindowRelFunction*>(
               &_ConsistentPartitionWindowRel_WindowRelFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ConsistentPartitionWindowRel_WindowRelFunction& a, ConsistentPartitionWindowRel_WindowRelFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsistentPartitionWindowRel_WindowRelFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsistentPartitionWindowRel_WindowRelFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsistentPartitionWindowRel_WindowRelFunction* New() const final {
    return CreateMaybeMessage<ConsistentPartitionWindowRel_WindowRelFunction>(nullptr);
  }

  ConsistentPartitionWindowRel_WindowRelFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsistentPartitionWindowRel_WindowRelFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsistentPartitionWindowRel_WindowRelFunction& from);
  void MergeFrom(const ConsistentPartitionWindowRel_WindowRelFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsistentPartitionWindowRel_WindowRelFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction";
  }
  protected:
  explicit ConsistentPartitionWindowRel_WindowRelFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 9,
    kOptionsFieldNumber = 11,
    kUpperBoundFieldNumber = 4,
    kLowerBoundFieldNumber = 5,
    kOutputTypeFieldNumber = 7,
    kFunctionReferenceFieldNumber = 1,
    kPhaseFieldNumber = 6,
    kInvocationFieldNumber = 10,
    kBoundsTypeFieldNumber = 12,
  };
  // repeated .substrait.proto.FunctionArgument arguments = 9;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::substrait::proto::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::proto::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::proto::FunctionArgument* _internal_add_arguments();
  public:
  const ::substrait::proto::FunctionArgument& arguments(int index) const;
  ::substrait::proto::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
      arguments() const;

  // repeated .substrait.proto.FunctionOption options = 11;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::proto::FunctionOption& _internal_options(int index) const;
  ::substrait::proto::FunctionOption* _internal_add_options();
  public:
  const ::substrait::proto::FunctionOption& options(int index) const;
  ::substrait::proto::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
      options() const;

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  const ::substrait::proto::Expression_WindowFunction_Bound& upper_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* release_upper_bound();
  ::substrait::proto::Expression_WindowFunction_Bound* mutable_upper_bound();
  void set_allocated_upper_bound(::substrait::proto::Expression_WindowFunction_Bound* upper_bound);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound& _internal_upper_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* _internal_mutable_upper_bound();
  public:
  void unsafe_arena_set_allocated_upper_bound(
      ::substrait::proto::Expression_WindowFunction_Bound* upper_bound);
  ::substrait::proto::Expression_WindowFunction_Bound* unsafe_arena_release_upper_bound();

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  bool has_lower_bound() const;
  private:
  bool _internal_has_lower_bound() const;
  public:
  void clear_lower_bound();
  const ::substrait::proto::Expression_WindowFunction_Bound& lower_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* release_lower_bound();
  ::substrait::proto::Expression_WindowFunction_Bound* mutable_lower_bound();
  void set_allocated_lower_bound(::substrait::proto::Expression_WindowFunction_Bound* lower_bound);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound& _internal_lower_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* _internal_mutable_lower_bound();
  public:
  void unsafe_arena_set_allocated_lower_bound(
      ::substrait::proto::Expression_WindowFunction_Bound* lower_bound);
  ::substrait::proto::Expression_WindowFunction_Bound* unsafe_arena_release_lower_bound();

  // .substrait.proto.Type output_type = 7;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::substrait::proto::Type& output_type() const;
  ::substrait::proto::Type* release_output_type();
  ::substrait::proto::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::proto::Type* output_type);
  private:
  const ::substrait::proto::Type& _internal_output_type() const;
  ::substrait::proto::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::proto::Type* output_type);
  ::substrait::proto::Type* unsafe_arena_release_output_type();

  // uint32 function_reference = 1;
  void clear_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference() const;
  void set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_reference() const;
  void _internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .substrait.proto.AggregationPhase phase = 6;
  void clear_phase();
  ::substrait::proto::AggregationPhase phase() const;
  void set_phase(::substrait::proto::AggregationPhase value);
  private:
  ::substrait::proto::AggregationPhase _internal_phase() const;
  void _internal_set_phase(::substrait::proto::AggregationPhase value);
  public:

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  void clear_invocation();
  ::substrait::proto::AggregateFunction_AggregationInvocation invocation() const;
  void set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  private:
  ::substrait::proto::AggregateFunction_AggregationInvocation _internal_invocation() const;
  void _internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  public:

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  void clear_bounds_type();
  ::substrait::proto::Expression_WindowFunction_BoundsType bounds_type() const;
  void set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value);
  private:
  ::substrait::proto::Expression_WindowFunction_BoundsType _internal_bounds_type() const;
  void _internal_set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument > arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption > options_;
  ::substrait::proto::Expression_WindowFunction_Bound* upper_bound_;
  ::substrait::proto::Expression_WindowFunction_Bound* lower_bound_;
  ::substrait::proto::Type* output_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference_;
  int phase_;
  int invocation_;
  int bounds_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ConsistentPartitionWindowRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ConsistentPartitionWindowRel) */ {
 public:
  inline ConsistentPartitionWindowRel() : ConsistentPartitionWindowRel(nullptr) {};
  virtual ~ConsistentPartitionWindowRel();

  ConsistentPartitionWindowRel(const ConsistentPartitionWindowRel& from);
  ConsistentPartitionWindowRel(ConsistentPartitionWindowRel&& from) noexcept
    : ConsistentPartitionWindowRel() {
    *this = ::std::move(from);
  }

  inline ConsistentPartitionWindowRel& operator=(const ConsistentPartitionWindowRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsistentPartitionWindowRel& operator=(ConsistentPartitionWindowRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsistentPartitionWindowRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsistentPartitionWindowRel* internal_default_instance() {
    return reinterpret_cast<const ConsistentPartitionWindowRel*>(
               &_ConsistentPartitionWindowRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ConsistentPartitionWindowRel& a, ConsistentPartitionWindowRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsistentPartitionWindowRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsistentPartitionWindowRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsistentPartitionWindowRel* New() const final {
    return CreateMaybeMessage<ConsistentPartitionWindowRel>(nullptr);
  }

  ConsistentPartitionWindowRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsistentPartitionWindowRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsistentPartitionWindowRel& from);
  void MergeFrom(const ConsistentPartitionWindowRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsistentPartitionWindowRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ConsistentPartitionWindowRel";
  }
  protected:
  explicit ConsistentPartitionWindowRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConsistentPartitionWindowRel_WindowRelFunction WindowRelFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFunctionsFieldNumber = 3,
    kPartitionExpressionsFieldNumber = 4,
    kSortsFieldNumber = 5,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction window_functions = 3;
  int window_functions_size() const;
  private:
  int _internal_window_functions_size() const;
  public:
  void clear_window_functions();
  ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* mutable_window_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >*
      mutable_window_functions();
  private:
  const ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction& _internal_window_functions(int index) const;
  ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* _internal_add_window_functions();
  public:
  const ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction& window_functions(int index) const;
  ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* add_window_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >&
      window_functions() const;

  // repeated .substrait.proto.Expression partition_expressions = 4;
  int partition_expressions_size() const;
  private:
  int _internal_partition_expressions_size() const;
  public:
  void clear_partition_expressions();
  ::substrait::proto::Expression* mutable_partition_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_partition_expressions();
  private:
  const ::substrait::proto::Expression& _internal_partition_expressions(int index) const;
  ::substrait::proto::Expression* _internal_add_partition_expressions();
  public:
  const ::substrait::proto::Expression& partition_expressions(int index) const;
  ::substrait::proto::Expression* add_partition_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      partition_expressions() const;

  // repeated .substrait.proto.SortField sorts = 5;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::substrait::proto::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
      mutable_sorts();
  private:
  const ::substrait::proto::SortField& _internal_sorts(int index) const;
  ::substrait::proto::SortField* _internal_add_sorts();
  public:
  const ::substrait::proto::SortField& sorts(int index) const;
  ::substrait::proto::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
      sorts() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.ConsistentPartitionWindowRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction > window_functions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > partition_expressions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField > sorts_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class SortRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.SortRel) */ {
 public:
  inline SortRel() : SortRel(nullptr) {};
  virtual ~SortRel();

  SortRel(const SortRel& from);
  SortRel(SortRel&& from) noexcept
    : SortRel() {
    *this = ::std::move(from);
  }

  inline SortRel& operator=(const SortRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortRel& operator=(SortRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SortRel* internal_default_instance() {
    return reinterpret_cast<const SortRel*>(
               &_SortRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SortRel& a, SortRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SortRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortRel* New() const final {
    return CreateMaybeMessage<SortRel>(nullptr);
  }

  SortRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortRel& from);
  void MergeFrom(const SortRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.SortRel";
  }
  protected:
  explicit SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.proto.SortField sorts = 3;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::substrait::proto::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
      mutable_sorts();
  private:
  const ::substrait::proto::SortField& _internal_sorts(int index) const;
  ::substrait::proto::SortField* _internal_add_sorts();
  public:
  const ::substrait::proto::SortField& sorts(int index) const;
  ::substrait::proto::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
      sorts() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.SortRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField > sorts_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class FilterRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.FilterRel) */ {
 public:
  inline FilterRel() : FilterRel(nullptr) {};
  virtual ~FilterRel();

  FilterRel(const FilterRel& from);
  FilterRel(FilterRel&& from) noexcept
    : FilterRel() {
    *this = ::std::move(from);
  }

  inline FilterRel& operator=(const FilterRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterRel& operator=(FilterRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterRel* internal_default_instance() {
    return reinterpret_cast<const FilterRel*>(
               &_FilterRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FilterRel& a, FilterRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterRel* New() const final {
    return CreateMaybeMessage<FilterRel>(nullptr);
  }

  FilterRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterRel& from);
  void MergeFrom(const FilterRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.FilterRel";
  }
  protected:
  explicit FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kConditionFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.Expression condition = 3;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::substrait::proto::Expression& condition() const;
  ::substrait::proto::Expression* release_condition();
  ::substrait::proto::Expression* mutable_condition();
  void set_allocated_condition(::substrait::proto::Expression* condition);
  private:
  const ::substrait::proto::Expression& _internal_condition() const;
  ::substrait::proto::Expression* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::substrait::proto::Expression* condition);
  ::substrait::proto::Expression* unsafe_arena_release_condition();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.FilterRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::Expression* condition_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class SetRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.SetRel) */ {
 public:
  inline SetRel() : SetRel(nullptr) {};
  virtual ~SetRel();

  SetRel(const SetRel& from);
  SetRel(SetRel&& from) noexcept
    : SetRel() {
    *this = ::std::move(from);
  }

  inline SetRel& operator=(const SetRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRel& operator=(SetRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRel* internal_default_instance() {
    return reinterpret_cast<const SetRel*>(
               &_SetRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetRel& a, SetRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRel* New() const final {
    return CreateMaybeMessage<SetRel>(nullptr);
  }

  SetRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRel& from);
  void MergeFrom(const SetRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.SetRel";
  }
  protected:
  explicit SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetRel_SetOp SetOp;
  static constexpr SetOp SET_OP_UNSPECIFIED =
    SetRel_SetOp_SET_OP_UNSPECIFIED;
  static constexpr SetOp SET_OP_MINUS_PRIMARY =
    SetRel_SetOp_SET_OP_MINUS_PRIMARY;
  static constexpr SetOp SET_OP_MINUS_MULTISET =
    SetRel_SetOp_SET_OP_MINUS_MULTISET;
  static constexpr SetOp SET_OP_INTERSECTION_PRIMARY =
    SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY;
  static constexpr SetOp SET_OP_INTERSECTION_MULTISET =
    SetRel_SetOp_SET_OP_INTERSECTION_MULTISET;
  static constexpr SetOp SET_OP_UNION_DISTINCT =
    SetRel_SetOp_SET_OP_UNION_DISTINCT;
  static constexpr SetOp SET_OP_UNION_ALL =
    SetRel_SetOp_SET_OP_UNION_ALL;
  static inline bool SetOp_IsValid(int value) {
    return SetRel_SetOp_IsValid(value);
  }
  static constexpr SetOp SetOp_MIN =
    SetRel_SetOp_SetOp_MIN;
  static constexpr SetOp SetOp_MAX =
    SetRel_SetOp_SetOp_MAX;
  static constexpr int SetOp_ARRAYSIZE =
    SetRel_SetOp_SetOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SetOp_descriptor() {
    return SetRel_SetOp_descriptor();
  }
  template<typename T>
  static inline const std::string& SetOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SetOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SetOp_Name.");
    return SetRel_SetOp_Name(enum_t_value);
  }
  static inline bool SetOp_Parse(const std::string& name,
      SetOp* value) {
    return SetRel_SetOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
    kOpFieldNumber = 3,
  };
  // repeated .substrait.proto.Rel inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::substrait::proto::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >*
      mutable_inputs();
  private:
  const ::substrait::proto::Rel& _internal_inputs(int index) const;
  ::substrait::proto::Rel* _internal_add_inputs();
  public:
  const ::substrait::proto::Rel& inputs(int index) const;
  ::substrait::proto::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >&
      inputs() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.SetRel.SetOp op = 3;
  void clear_op();
  ::substrait::proto::SetRel_SetOp op() const;
  void set_op(::substrait::proto::SetRel_SetOp value);
  private:
  ::substrait::proto::SetRel_SetOp _internal_op() const;
  void _internal_set_op(::substrait::proto::SetRel_SetOp value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.SetRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel > inputs_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExtensionSingleRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExtensionSingleRel) */ {
 public:
  inline ExtensionSingleRel() : ExtensionSingleRel(nullptr) {};
  virtual ~ExtensionSingleRel();

  ExtensionSingleRel(const ExtensionSingleRel& from);
  ExtensionSingleRel(ExtensionSingleRel&& from) noexcept
    : ExtensionSingleRel() {
    *this = ::std::move(from);
  }

  inline ExtensionSingleRel& operator=(const ExtensionSingleRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionSingleRel& operator=(ExtensionSingleRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtensionSingleRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionSingleRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionSingleRel*>(
               &_ExtensionSingleRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ExtensionSingleRel& a, ExtensionSingleRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionSingleRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionSingleRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionSingleRel* New() const final {
    return CreateMaybeMessage<ExtensionSingleRel>(nullptr);
  }

  ExtensionSingleRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionSingleRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtensionSingleRel& from);
  void MergeFrom(const ExtensionSingleRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionSingleRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExtensionSingleRel";
  }
  protected:
  explicit ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kDetailFieldNumber = 3,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .google.protobuf.Any detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NAMESPACE_ID::Any* release_detail();
  PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      PROTOBUF_NAMESPACE_ID::Any* detail);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExtensionSingleRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExtensionLeafRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExtensionLeafRel) */ {
 public:
  inline ExtensionLeafRel() : ExtensionLeafRel(nullptr) {};
  virtual ~ExtensionLeafRel();

  ExtensionLeafRel(const ExtensionLeafRel& from);
  ExtensionLeafRel(ExtensionLeafRel&& from) noexcept
    : ExtensionLeafRel() {
    *this = ::std::move(from);
  }

  inline ExtensionLeafRel& operator=(const ExtensionLeafRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionLeafRel& operator=(ExtensionLeafRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtensionLeafRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionLeafRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionLeafRel*>(
               &_ExtensionLeafRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ExtensionLeafRel& a, ExtensionLeafRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionLeafRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionLeafRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionLeafRel* New() const final {
    return CreateMaybeMessage<ExtensionLeafRel>(nullptr);
  }

  ExtensionLeafRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionLeafRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtensionLeafRel& from);
  void MergeFrom(const ExtensionLeafRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionLeafRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExtensionLeafRel";
  }
  protected:
  explicit ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 2,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .google.protobuf.Any detail = 2;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NAMESPACE_ID::Any* release_detail();
  PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      PROTOBUF_NAMESPACE_ID::Any* detail);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExtensionLeafRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExtensionMultiRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExtensionMultiRel) */ {
 public:
  inline ExtensionMultiRel() : ExtensionMultiRel(nullptr) {};
  virtual ~ExtensionMultiRel();

  ExtensionMultiRel(const ExtensionMultiRel& from);
  ExtensionMultiRel(ExtensionMultiRel&& from) noexcept
    : ExtensionMultiRel() {
    *this = ::std::move(from);
  }

  inline ExtensionMultiRel& operator=(const ExtensionMultiRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionMultiRel& operator=(ExtensionMultiRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtensionMultiRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionMultiRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionMultiRel*>(
               &_ExtensionMultiRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ExtensionMultiRel& a, ExtensionMultiRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionMultiRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionMultiRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionMultiRel* New() const final {
    return CreateMaybeMessage<ExtensionMultiRel>(nullptr);
  }

  ExtensionMultiRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionMultiRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtensionMultiRel& from);
  void MergeFrom(const ExtensionMultiRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionMultiRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExtensionMultiRel";
  }
  protected:
  explicit ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 3,
  };
  // repeated .substrait.proto.Rel inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::substrait::proto::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >*
      mutable_inputs();
  private:
  const ::substrait::proto::Rel& _internal_inputs(int index) const;
  ::substrait::proto::Rel* _internal_add_inputs();
  public:
  const ::substrait::proto::Rel& inputs(int index) const;
  ::substrait::proto::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >&
      inputs() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .google.protobuf.Any detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NAMESPACE_ID::Any* release_detail();
  PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      PROTOBUF_NAMESPACE_ID::Any* detail);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExtensionMultiRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel > inputs_;
  ::substrait::proto::RelCommon* common_;
  PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_ScatterFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.ScatterFields) */ {
 public:
  inline ExchangeRel_ScatterFields() : ExchangeRel_ScatterFields(nullptr) {};
  virtual ~ExchangeRel_ScatterFields();

  ExchangeRel_ScatterFields(const ExchangeRel_ScatterFields& from);
  ExchangeRel_ScatterFields(ExchangeRel_ScatterFields&& from) noexcept
    : ExchangeRel_ScatterFields() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_ScatterFields& operator=(const ExchangeRel_ScatterFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_ScatterFields& operator=(ExchangeRel_ScatterFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_ScatterFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_ScatterFields* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_ScatterFields*>(
               &_ExchangeRel_ScatterFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ExchangeRel_ScatterFields& a, ExchangeRel_ScatterFields& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_ScatterFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_ScatterFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_ScatterFields* New() const final {
    return CreateMaybeMessage<ExchangeRel_ScatterFields>(nullptr);
  }

  ExchangeRel_ScatterFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_ScatterFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_ScatterFields& from);
  void MergeFrom(const ExchangeRel_ScatterFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_ScatterFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.ScatterFields";
  }
  protected:
  explicit ExchangeRel_ScatterFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.FieldReference fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::substrait::proto::Expression_FieldReference* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
      mutable_fields();
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_fields(int index) const;
  ::substrait::proto::Expression_FieldReference* _internal_add_fields();
  public:
  const ::substrait::proto::Expression_FieldReference& fields(int index) const;
  ::substrait::proto::Expression_FieldReference* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
      fields() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.ScatterFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_SingleBucketExpression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.SingleBucketExpression) */ {
 public:
  inline ExchangeRel_SingleBucketExpression() : ExchangeRel_SingleBucketExpression(nullptr) {};
  virtual ~ExchangeRel_SingleBucketExpression();

  ExchangeRel_SingleBucketExpression(const ExchangeRel_SingleBucketExpression& from);
  ExchangeRel_SingleBucketExpression(ExchangeRel_SingleBucketExpression&& from) noexcept
    : ExchangeRel_SingleBucketExpression() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_SingleBucketExpression& operator=(const ExchangeRel_SingleBucketExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_SingleBucketExpression& operator=(ExchangeRel_SingleBucketExpression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_SingleBucketExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_SingleBucketExpression* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_SingleBucketExpression*>(
               &_ExchangeRel_SingleBucketExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ExchangeRel_SingleBucketExpression& a, ExchangeRel_SingleBucketExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_SingleBucketExpression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_SingleBucketExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_SingleBucketExpression* New() const final {
    return CreateMaybeMessage<ExchangeRel_SingleBucketExpression>(nullptr);
  }

  ExchangeRel_SingleBucketExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_SingleBucketExpression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_SingleBucketExpression& from);
  void MergeFrom(const ExchangeRel_SingleBucketExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_SingleBucketExpression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.SingleBucketExpression";
  }
  protected:
  explicit ExchangeRel_SingleBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
  };
  // .substrait.proto.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression& expression() const;
  ::substrait::proto::Expression* release_expression();
  ::substrait::proto::Expression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression* expression);
  private:
  const ::substrait::proto::Expression& _internal_expression() const;
  ::substrait::proto::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression* expression);
  ::substrait::proto::Expression* unsafe_arena_release_expression();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.SingleBucketExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_MultiBucketExpression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.MultiBucketExpression) */ {
 public:
  inline ExchangeRel_MultiBucketExpression() : ExchangeRel_MultiBucketExpression(nullptr) {};
  virtual ~ExchangeRel_MultiBucketExpression();

  ExchangeRel_MultiBucketExpression(const ExchangeRel_MultiBucketExpression& from);
  ExchangeRel_MultiBucketExpression(ExchangeRel_MultiBucketExpression&& from) noexcept
    : ExchangeRel_MultiBucketExpression() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_MultiBucketExpression& operator=(const ExchangeRel_MultiBucketExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_MultiBucketExpression& operator=(ExchangeRel_MultiBucketExpression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_MultiBucketExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_MultiBucketExpression* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_MultiBucketExpression*>(
               &_ExchangeRel_MultiBucketExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ExchangeRel_MultiBucketExpression& a, ExchangeRel_MultiBucketExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_MultiBucketExpression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_MultiBucketExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_MultiBucketExpression* New() const final {
    return CreateMaybeMessage<ExchangeRel_MultiBucketExpression>(nullptr);
  }

  ExchangeRel_MultiBucketExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_MultiBucketExpression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_MultiBucketExpression& from);
  void MergeFrom(const ExchangeRel_MultiBucketExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_MultiBucketExpression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.MultiBucketExpression";
  }
  protected:
  explicit ExchangeRel_MultiBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
    kConstrainedToCountFieldNumber = 2,
  };
  // .substrait.proto.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression& expression() const;
  ::substrait::proto::Expression* release_expression();
  ::substrait::proto::Expression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression* expression);
  private:
  const ::substrait::proto::Expression& _internal_expression() const;
  ::substrait::proto::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression* expression);
  ::substrait::proto::Expression* unsafe_arena_release_expression();

  // bool constrained_to_count = 2;
  void clear_constrained_to_count();
  bool constrained_to_count() const;
  void set_constrained_to_count(bool value);
  private:
  bool _internal_constrained_to_count() const;
  void _internal_set_constrained_to_count(bool value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.MultiBucketExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* expression_;
  bool constrained_to_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_Broadcast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.Broadcast) */ {
 public:
  inline ExchangeRel_Broadcast() : ExchangeRel_Broadcast(nullptr) {};
  virtual ~ExchangeRel_Broadcast();

  ExchangeRel_Broadcast(const ExchangeRel_Broadcast& from);
  ExchangeRel_Broadcast(ExchangeRel_Broadcast&& from) noexcept
    : ExchangeRel_Broadcast() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_Broadcast& operator=(const ExchangeRel_Broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_Broadcast& operator=(ExchangeRel_Broadcast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_Broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_Broadcast* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_Broadcast*>(
               &_ExchangeRel_Broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ExchangeRel_Broadcast& a, ExchangeRel_Broadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_Broadcast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_Broadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_Broadcast* New() const final {
    return CreateMaybeMessage<ExchangeRel_Broadcast>(nullptr);
  }

  ExchangeRel_Broadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_Broadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_Broadcast& from);
  void MergeFrom(const ExchangeRel_Broadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_Broadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.Broadcast";
  }
  protected:
  explicit ExchangeRel_Broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.Broadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_RoundRobin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.RoundRobin) */ {
 public:
  inline ExchangeRel_RoundRobin() : ExchangeRel_RoundRobin(nullptr) {};
  virtual ~ExchangeRel_RoundRobin();

  ExchangeRel_RoundRobin(const ExchangeRel_RoundRobin& from);
  ExchangeRel_RoundRobin(ExchangeRel_RoundRobin&& from) noexcept
    : ExchangeRel_RoundRobin() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_RoundRobin& operator=(const ExchangeRel_RoundRobin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_RoundRobin& operator=(ExchangeRel_RoundRobin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_RoundRobin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_RoundRobin* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_RoundRobin*>(
               &_ExchangeRel_RoundRobin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ExchangeRel_RoundRobin& a, ExchangeRel_RoundRobin& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_RoundRobin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_RoundRobin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_RoundRobin* New() const final {
    return CreateMaybeMessage<ExchangeRel_RoundRobin>(nullptr);
  }

  ExchangeRel_RoundRobin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_RoundRobin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_RoundRobin& from);
  void MergeFrom(const ExchangeRel_RoundRobin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_RoundRobin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.RoundRobin";
  }
  protected:
  explicit ExchangeRel_RoundRobin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExactFieldNumber = 1,
  };
  // bool exact = 1;
  void clear_exact();
  bool exact() const;
  void set_exact(bool value);
  private:
  bool _internal_exact() const;
  void _internal_set_exact(bool value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.RoundRobin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool exact_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel_ExchangeTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel.ExchangeTarget) */ {
 public:
  inline ExchangeRel_ExchangeTarget() : ExchangeRel_ExchangeTarget(nullptr) {};
  virtual ~ExchangeRel_ExchangeTarget();

  ExchangeRel_ExchangeTarget(const ExchangeRel_ExchangeTarget& from);
  ExchangeRel_ExchangeTarget(ExchangeRel_ExchangeTarget&& from) noexcept
    : ExchangeRel_ExchangeTarget() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_ExchangeTarget& operator=(const ExchangeRel_ExchangeTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_ExchangeTarget& operator=(ExchangeRel_ExchangeTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel_ExchangeTarget& default_instance();

  enum TargetTypeCase {
    kUri = 2,
    kExtended = 3,
    TARGET_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel_ExchangeTarget* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_ExchangeTarget*>(
               &_ExchangeRel_ExchangeTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ExchangeRel_ExchangeTarget& a, ExchangeRel_ExchangeTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_ExchangeTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_ExchangeTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel_ExchangeTarget* New() const final {
    return CreateMaybeMessage<ExchangeRel_ExchangeTarget>(nullptr);
  }

  ExchangeRel_ExchangeTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel_ExchangeTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel_ExchangeTarget& from);
  void MergeFrom(const ExchangeRel_ExchangeTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_ExchangeTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel.ExchangeTarget";
  }
  protected:
  explicit ExchangeRel_ExchangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIdFieldNumber = 1,
    kUriFieldNumber = 2,
    kExtendedFieldNumber = 3,
  };
  // repeated int32 partition_id = 1;
  int partition_id_size() const;
  private:
  int _internal_partition_id_size() const;
  public:
  void clear_partition_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partition_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_partition_id() const;
  void _internal_add_partition_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_partition_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 partition_id(int index) const;
  void set_partition_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_partition_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      partition_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_partition_id();

  // string uri = 2;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri(
      std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .google.protobuf.Any extended = 3;
  bool has_extended() const;
  private:
  bool _internal_has_extended() const;
  public:
  void clear_extended();
  const PROTOBUF_NAMESPACE_ID::Any& extended() const;
  PROTOBUF_NAMESPACE_ID::Any* release_extended();
  PROTOBUF_NAMESPACE_ID::Any* mutable_extended();
  void set_allocated_extended(PROTOBUF_NAMESPACE_ID::Any* extended);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_extended() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extended();
  public:
  void unsafe_arena_set_allocated_extended(
      PROTOBUF_NAMESPACE_ID::Any* extended);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extended();

  void clear_target_type();
  TargetTypeCase target_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel.ExchangeTarget)
 private:
  class _Internal;
  void set_has_uri();
  void set_has_extended();

  inline bool has_target_type() const;
  inline void clear_has_target_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > partition_id_;
  mutable std::atomic<int> _partition_id_cached_byte_size_;
  union TargetTypeUnion {
    TargetTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    PROTOBUF_NAMESPACE_ID::Any* extended_;
  } target_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExchangeRel) */ {
 public:
  inline ExchangeRel() : ExchangeRel(nullptr) {};
  virtual ~ExchangeRel();

  ExchangeRel(const ExchangeRel& from);
  ExchangeRel(ExchangeRel&& from) noexcept
    : ExchangeRel() {
    *this = ::std::move(from);
  }

  inline ExchangeRel& operator=(const ExchangeRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel& operator=(ExchangeRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangeRel& default_instance();

  enum ExchangeKindCase {
    kScatterByFields = 5,
    kSingleTarget = 6,
    kMultiTarget = 7,
    kRoundRobin = 8,
    kBroadcast = 9,
    EXCHANGE_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeRel* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel*>(
               &_ExchangeRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ExchangeRel& a, ExchangeRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeRel* New() const final {
    return CreateMaybeMessage<ExchangeRel>(nullptr);
  }

  ExchangeRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeRel& from);
  void MergeFrom(const ExchangeRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExchangeRel";
  }
  protected:
  explicit ExchangeRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ExchangeRel_ScatterFields ScatterFields;
  typedef ExchangeRel_SingleBucketExpression SingleBucketExpression;
  typedef ExchangeRel_MultiBucketExpression MultiBucketExpression;
  typedef ExchangeRel_Broadcast Broadcast;
  typedef ExchangeRel_RoundRobin RoundRobin;
  typedef ExchangeRel_ExchangeTarget ExchangeTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
    kPartitionCountFieldNumber = 3,
    kScatterByFieldsFieldNumber = 5,
    kSingleTargetFieldNumber = 6,
    kMultiTargetFieldNumber = 7,
    kRoundRobinFieldNumber = 8,
    kBroadcastFieldNumber = 9,
  };
  // repeated .substrait.proto.ExchangeRel.ExchangeTarget targets = 4;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::substrait::proto::ExchangeRel_ExchangeTarget* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExchangeRel_ExchangeTarget >*
      mutable_targets();
  private:
  const ::substrait::proto::ExchangeRel_ExchangeTarget& _internal_targets(int index) const;
  ::substrait::proto::ExchangeRel_ExchangeTarget* _internal_add_targets();
  public:
  const ::substrait::proto::ExchangeRel_ExchangeTarget& targets(int index) const;
  ::substrait::proto::ExchangeRel_ExchangeTarget* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExchangeRel_ExchangeTarget >&
      targets() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // int32 partition_count = 3;
  void clear_partition_count();
  ::PROTOBUF_NAMESPACE_ID::int32 partition_count() const;
  void set_partition_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partition_count() const;
  void _internal_set_partition_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .substrait.proto.ExchangeRel.ScatterFields scatter_by_fields = 5;
  bool has_scatter_by_fields() const;
  private:
  bool _internal_has_scatter_by_fields() const;
  public:
  void clear_scatter_by_fields();
  const ::substrait::proto::ExchangeRel_ScatterFields& scatter_by_fields() const;
  ::substrait::proto::ExchangeRel_ScatterFields* release_scatter_by_fields();
  ::substrait::proto::ExchangeRel_ScatterFields* mutable_scatter_by_fields();
  void set_allocated_scatter_by_fields(::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields);
  private:
  const ::substrait::proto::ExchangeRel_ScatterFields& _internal_scatter_by_fields() const;
  ::substrait::proto::ExchangeRel_ScatterFields* _internal_mutable_scatter_by_fields();
  public:
  void unsafe_arena_set_allocated_scatter_by_fields(
      ::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields);
  ::substrait::proto::ExchangeRel_ScatterFields* unsafe_arena_release_scatter_by_fields();

  // .substrait.proto.ExchangeRel.SingleBucketExpression single_target = 6;
  bool has_single_target() const;
  private:
  bool _internal_has_single_target() const;
  public:
  void clear_single_target();
  const ::substrait::proto::ExchangeRel_SingleBucketExpression& single_target() const;
  ::substrait::proto::ExchangeRel_SingleBucketExpression* release_single_target();
  ::substrait::proto::ExchangeRel_SingleBucketExpression* mutable_single_target();
  void set_allocated_single_target(::substrait::proto::ExchangeRel_SingleBucketExpression* single_target);
  private:
  const ::substrait::proto::ExchangeRel_SingleBucketExpression& _internal_single_target() const;
  ::substrait::proto::ExchangeRel_SingleBucketExpression* _internal_mutable_single_target();
  public:
  void unsafe_arena_set_allocated_single_target(
      ::substrait::proto::ExchangeRel_SingleBucketExpression* single_target);
  ::substrait::proto::ExchangeRel_SingleBucketExpression* unsafe_arena_release_single_target();

  // .substrait.proto.ExchangeRel.MultiBucketExpression multi_target = 7;
  bool has_multi_target() const;
  private:
  bool _internal_has_multi_target() const;
  public:
  void clear_multi_target();
  const ::substrait::proto::ExchangeRel_MultiBucketExpression& multi_target() const;
  ::substrait::proto::ExchangeRel_MultiBucketExpression* release_multi_target();
  ::substrait::proto::ExchangeRel_MultiBucketExpression* mutable_multi_target();
  void set_allocated_multi_target(::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target);
  private:
  const ::substrait::proto::ExchangeRel_MultiBucketExpression& _internal_multi_target() const;
  ::substrait::proto::ExchangeRel_MultiBucketExpression* _internal_mutable_multi_target();
  public:
  void unsafe_arena_set_allocated_multi_target(
      ::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target);
  ::substrait::proto::ExchangeRel_MultiBucketExpression* unsafe_arena_release_multi_target();

  // .substrait.proto.ExchangeRel.RoundRobin round_robin = 8;
  bool has_round_robin() const;
  private:
  bool _internal_has_round_robin() const;
  public:
  void clear_round_robin();
  const ::substrait::proto::ExchangeRel_RoundRobin& round_robin() const;
  ::substrait::proto::ExchangeRel_RoundRobin* release_round_robin();
  ::substrait::proto::ExchangeRel_RoundRobin* mutable_round_robin();
  void set_allocated_round_robin(::substrait::proto::ExchangeRel_RoundRobin* round_robin);
  private:
  const ::substrait::proto::ExchangeRel_RoundRobin& _internal_round_robin() const;
  ::substrait::proto::ExchangeRel_RoundRobin* _internal_mutable_round_robin();
  public:
  void unsafe_arena_set_allocated_round_robin(
      ::substrait::proto::ExchangeRel_RoundRobin* round_robin);
  ::substrait::proto::ExchangeRel_RoundRobin* unsafe_arena_release_round_robin();

  // .substrait.proto.ExchangeRel.Broadcast broadcast = 9;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::substrait::proto::ExchangeRel_Broadcast& broadcast() const;
  ::substrait::proto::ExchangeRel_Broadcast* release_broadcast();
  ::substrait::proto::ExchangeRel_Broadcast* mutable_broadcast();
  void set_allocated_broadcast(::substrait::proto::ExchangeRel_Broadcast* broadcast);
  private:
  const ::substrait::proto::ExchangeRel_Broadcast& _internal_broadcast() const;
  ::substrait::proto::ExchangeRel_Broadcast* _internal_mutable_broadcast();
  public:
  void unsafe_arena_set_allocated_broadcast(
      ::substrait::proto::ExchangeRel_Broadcast* broadcast);
  ::substrait::proto::ExchangeRel_Broadcast* unsafe_arena_release_broadcast();

  void clear_exchange_kind();
  ExchangeKindCase exchange_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ExchangeRel)
 private:
  class _Internal;
  void set_has_scatter_by_fields();
  void set_has_single_target();
  void set_has_multi_target();
  void set_has_round_robin();
  void set_has_broadcast();

  inline bool has_exchange_kind() const;
  inline void clear_has_exchange_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExchangeRel_ExchangeTarget > targets_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  ::PROTOBUF_NAMESPACE_ID::int32 partition_count_;
  union ExchangeKindUnion {
    ExchangeKindUnion() {}
    ::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields_;
    ::substrait::proto::ExchangeRel_SingleBucketExpression* single_target_;
    ::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target_;
    ::substrait::proto::ExchangeRel_RoundRobin* round_robin_;
    ::substrait::proto::ExchangeRel_Broadcast* broadcast_;
  } exchange_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExpandRel_ExpandField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExpandRel.ExpandField) */ {
 public:
  inline ExpandRel_ExpandField() : ExpandRel_ExpandField(nullptr) {};
  virtual ~ExpandRel_ExpandField();

  ExpandRel_ExpandField(const ExpandRel_ExpandField& from);
  ExpandRel_ExpandField(ExpandRel_ExpandField&& from) noexcept
    : ExpandRel_ExpandField() {
    *this = ::std::move(from);
  }

  inline ExpandRel_ExpandField& operator=(const ExpandRel_ExpandField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandRel_ExpandField& operator=(ExpandRel_ExpandField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpandRel_ExpandField& default_instance();

  enum FieldTypeCase {
    kSwitchingField = 2,
    kConsistentField = 3,
    FIELD_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpandRel_ExpandField* internal_default_instance() {
    return reinterpret_cast<const ExpandRel_ExpandField*>(
               &_ExpandRel_ExpandField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ExpandRel_ExpandField& a, ExpandRel_ExpandField& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandRel_ExpandField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandRel_ExpandField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandRel_ExpandField* New() const final {
    return CreateMaybeMessage<ExpandRel_ExpandField>(nullptr);
  }

  ExpandRel_ExpandField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandRel_ExpandField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandRel_ExpandField& from);
  void MergeFrom(const ExpandRel_ExpandField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandRel_ExpandField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExpandRel.ExpandField";
  }
  protected:
  explicit ExpandRel_ExpandField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchingFieldFieldNumber = 2,
    kConsistentFieldFieldNumber = 3,
  };
  // .substrait.proto.ExpandRel.SwitchingField switching_field = 2;
  bool has_switching_field() const;
  private:
  bool _internal_has_switching_field() const;
  public:
  void clear_switching_field();
  const ::substrait::proto::ExpandRel_SwitchingField& switching_field() const;
  ::substrait::proto::ExpandRel_SwitchingField* release_switching_field();
  ::substrait::proto::ExpandRel_SwitchingField* mutable_switching_field();
  void set_allocated_switching_field(::substrait::proto::ExpandRel_SwitchingField* switching_field);
  private:
  const ::substrait::proto::ExpandRel_SwitchingField& _internal_switching_field() const;
  ::substrait::proto::ExpandRel_SwitchingField* _internal_mutable_switching_field();
  public:
  void unsafe_arena_set_allocated_switching_field(
      ::substrait::proto::ExpandRel_SwitchingField* switching_field);
  ::substrait::proto::ExpandRel_SwitchingField* unsafe_arena_release_switching_field();

  // .substrait.proto.Expression consistent_field = 3;
  bool has_consistent_field() const;
  private:
  bool _internal_has_consistent_field() const;
  public:
  void clear_consistent_field();
  const ::substrait::proto::Expression& consistent_field() const;
  ::substrait::proto::Expression* release_consistent_field();
  ::substrait::proto::Expression* mutable_consistent_field();
  void set_allocated_consistent_field(::substrait::proto::Expression* consistent_field);
  private:
  const ::substrait::proto::Expression& _internal_consistent_field() const;
  ::substrait::proto::Expression* _internal_mutable_consistent_field();
  public:
  void unsafe_arena_set_allocated_consistent_field(
      ::substrait::proto::Expression* consistent_field);
  ::substrait::proto::Expression* unsafe_arena_release_consistent_field();

  void clear_field_type();
  FieldTypeCase field_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ExpandRel.ExpandField)
 private:
  class _Internal;
  void set_has_switching_field();
  void set_has_consistent_field();

  inline bool has_field_type() const;
  inline void clear_has_field_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FieldTypeUnion {
    FieldTypeUnion() {}
    ::substrait::proto::ExpandRel_SwitchingField* switching_field_;
    ::substrait::proto::Expression* consistent_field_;
  } field_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExpandRel_SwitchingField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExpandRel.SwitchingField) */ {
 public:
  inline ExpandRel_SwitchingField() : ExpandRel_SwitchingField(nullptr) {};
  virtual ~ExpandRel_SwitchingField();

  ExpandRel_SwitchingField(const ExpandRel_SwitchingField& from);
  ExpandRel_SwitchingField(ExpandRel_SwitchingField&& from) noexcept
    : ExpandRel_SwitchingField() {
    *this = ::std::move(from);
  }

  inline ExpandRel_SwitchingField& operator=(const ExpandRel_SwitchingField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandRel_SwitchingField& operator=(ExpandRel_SwitchingField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpandRel_SwitchingField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpandRel_SwitchingField* internal_default_instance() {
    return reinterpret_cast<const ExpandRel_SwitchingField*>(
               &_ExpandRel_SwitchingField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ExpandRel_SwitchingField& a, ExpandRel_SwitchingField& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandRel_SwitchingField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandRel_SwitchingField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandRel_SwitchingField* New() const final {
    return CreateMaybeMessage<ExpandRel_SwitchingField>(nullptr);
  }

  ExpandRel_SwitchingField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandRel_SwitchingField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandRel_SwitchingField& from);
  void MergeFrom(const ExpandRel_SwitchingField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandRel_SwitchingField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExpandRel.SwitchingField";
  }
  protected:
  explicit ExpandRel_SwitchingField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDuplicatesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression duplicates = 1;
  int duplicates_size() const;
  private:
  int _internal_duplicates_size() const;
  public:
  void clear_duplicates();
  ::substrait::proto::Expression* mutable_duplicates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_duplicates();
  private:
  const ::substrait::proto::Expression& _internal_duplicates(int index) const;
  ::substrait::proto::Expression* _internal_add_duplicates();
  public:
  const ::substrait::proto::Expression& duplicates(int index) const;
  ::substrait::proto::Expression* add_duplicates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      duplicates() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.ExpandRel.SwitchingField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > duplicates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExpandRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExpandRel) */ {
 public:
  inline ExpandRel() : ExpandRel(nullptr) {};
  virtual ~ExpandRel();

  ExpandRel(const ExpandRel& from);
  ExpandRel(ExpandRel&& from) noexcept
    : ExpandRel() {
    *this = ::std::move(from);
  }

  inline ExpandRel& operator=(const ExpandRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandRel& operator=(ExpandRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpandRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpandRel* internal_default_instance() {
    return reinterpret_cast<const ExpandRel*>(
               &_ExpandRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ExpandRel& a, ExpandRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandRel* New() const final {
    return CreateMaybeMessage<ExpandRel>(nullptr);
  }

  ExpandRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandRel& from);
  void MergeFrom(const ExpandRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExpandRel";
  }
  protected:
  explicit ExpandRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ExpandRel_ExpandField ExpandField;
  typedef ExpandRel_SwitchingField SwitchingField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // repeated .substrait.proto.ExpandRel.ExpandField fields = 4;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::substrait::proto::ExpandRel_ExpandField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExpandRel_ExpandField >*
      mutable_fields();
  private:
  const ::substrait::proto::ExpandRel_ExpandField& _internal_fields(int index) const;
  ::substrait::proto::ExpandRel_ExpandField* _internal_add_fields();
  public:
  const ::substrait::proto::ExpandRel_ExpandField& fields(int index) const;
  ::substrait::proto::ExpandRel_ExpandField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExpandRel_ExpandField >&
      fields() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExpandRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExpandRel_ExpandField > fields_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class RelRoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.RelRoot) */ {
 public:
  inline RelRoot() : RelRoot(nullptr) {};
  virtual ~RelRoot();

  RelRoot(const RelRoot& from);
  RelRoot(RelRoot&& from) noexcept
    : RelRoot() {
    *this = ::std::move(from);
  }

  inline RelRoot& operator=(const RelRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelRoot& operator=(RelRoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelRoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelRoot* internal_default_instance() {
    return reinterpret_cast<const RelRoot*>(
               &_RelRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RelRoot& a, RelRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(RelRoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelRoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelRoot* New() const final {
    return CreateMaybeMessage<RelRoot>(nullptr);
  }

  RelRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelRoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelRoot& from);
  void MergeFrom(const RelRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelRoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.RelRoot";
  }
  protected:
  explicit RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kInputFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .substrait.proto.Rel input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:substrait.proto.RelRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::substrait::proto::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Rel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Rel) */ {
 public:
  inline Rel() : Rel(nullptr) {};
  virtual ~Rel();

  Rel(const Rel& from);
  Rel(Rel&& from) noexcept
    : Rel() {
    *this = ::std::move(from);
  }

  inline Rel& operator=(const Rel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rel& operator=(Rel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rel& default_instance();

  enum RelTypeCase {
    kRead = 1,
    kFilter = 2,
    kFetch = 3,
    kAggregate = 4,
    kSort = 5,
    kJoin = 6,
    kProject = 7,
    kSet = 8,
    kExtensionSingle = 9,
    kExtensionMulti = 10,
    kExtensionLeaf = 11,
    kCross = 12,
    kReference = 21,
    kWrite = 19,
    kDdl = 20,
    kHashJoin = 13,
    kMergeJoin = 14,
    kNestedLoopJoin = 18,
    kWindow = 17,
    kExchange = 15,
    kExpand = 16,
    REL_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rel* internal_default_instance() {
    return reinterpret_cast<const Rel*>(
               &_Rel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Rel& a, Rel& b) {
    a.Swap(&b);
  }
  inline void Swap(Rel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rel* New() const final {
    return CreateMaybeMessage<Rel>(nullptr);
  }

  Rel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rel& from);
  void MergeFrom(const Rel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Rel";
  }
  protected:
  explicit Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kFilterFieldNumber = 2,
    kFetchFieldNumber = 3,
    kAggregateFieldNumber = 4,
    kSortFieldNumber = 5,
    kJoinFieldNumber = 6,
    kProjectFieldNumber = 7,
    kSetFieldNumber = 8,
    kExtensionSingleFieldNumber = 9,
    kExtensionMultiFieldNumber = 10,
    kExtensionLeafFieldNumber = 11,
    kCrossFieldNumber = 12,
    kReferenceFieldNumber = 21,
    kWriteFieldNumber = 19,
    kDdlFieldNumber = 20,
    kHashJoinFieldNumber = 13,
    kMergeJoinFieldNumber = 14,
    kNestedLoopJoinFieldNumber = 18,
    kWindowFieldNumber = 17,
    kExchangeFieldNumber = 15,
    kExpandFieldNumber = 16,
  };
  // .substrait.proto.ReadRel read = 1;
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  const ::substrait::proto::ReadRel& read() const;
  ::substrait::proto::ReadRel* release_read();
  ::substrait::proto::ReadRel* mutable_read();
  void set_allocated_read(::substrait::proto::ReadRel* read);
  private:
  const ::substrait::proto::ReadRel& _internal_read() const;
  ::substrait::proto::ReadRel* _internal_mutable_read();
  public:
  void unsafe_arena_set_allocated_read(
      ::substrait::proto::ReadRel* read);
  ::substrait::proto::ReadRel* unsafe_arena_release_read();

  // .substrait.proto.FilterRel filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::proto::FilterRel& filter() const;
  ::substrait::proto::FilterRel* release_filter();
  ::substrait::proto::FilterRel* mutable_filter();
  void set_allocated_filter(::substrait::proto::FilterRel* filter);
  private:
  const ::substrait::proto::FilterRel& _internal_filter() const;
  ::substrait::proto::FilterRel* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::proto::FilterRel* filter);
  ::substrait::proto::FilterRel* unsafe_arena_release_filter();

  // .substrait.proto.FetchRel fetch = 3;
  bool has_fetch() const;
  private:
  bool _internal_has_fetch() const;
  public:
  void clear_fetch();
  const ::substrait::proto::FetchRel& fetch() const;
  ::substrait::proto::FetchRel* release_fetch();
  ::substrait::proto::FetchRel* mutable_fetch();
  void set_allocated_fetch(::substrait::proto::FetchRel* fetch);
  private:
  const ::substrait::proto::FetchRel& _internal_fetch() const;
  ::substrait::proto::FetchRel* _internal_mutable_fetch();
  public:
  void unsafe_arena_set_allocated_fetch(
      ::substrait::proto::FetchRel* fetch);
  ::substrait::proto::FetchRel* unsafe_arena_release_fetch();

  // .substrait.proto.AggregateRel aggregate = 4;
  bool has_aggregate() const;
  private:
  bool _internal_has_aggregate() const;
  public:
  void clear_aggregate();
  const ::substrait::proto::AggregateRel& aggregate() const;
  ::substrait::proto::AggregateRel* release_aggregate();
  ::substrait::proto::AggregateRel* mutable_aggregate();
  void set_allocated_aggregate(::substrait::proto::AggregateRel* aggregate);
  private:
  const ::substrait::proto::AggregateRel& _internal_aggregate() const;
  ::substrait::proto::AggregateRel* _internal_mutable_aggregate();
  public:
  void unsafe_arena_set_allocated_aggregate(
      ::substrait::proto::AggregateRel* aggregate);
  ::substrait::proto::AggregateRel* unsafe_arena_release_aggregate();

  // .substrait.proto.SortRel sort = 5;
  bool has_sort() const;
  private:
  bool _internal_has_sort() const;
  public:
  void clear_sort();
  const ::substrait::proto::SortRel& sort() const;
  ::substrait::proto::SortRel* release_sort();
  ::substrait::proto::SortRel* mutable_sort();
  void set_allocated_sort(::substrait::proto::SortRel* sort);
  private:
  const ::substrait::proto::SortRel& _internal_sort() const;
  ::substrait::proto::SortRel* _internal_mutable_sort();
  public:
  void unsafe_arena_set_allocated_sort(
      ::substrait::proto::SortRel* sort);
  ::substrait::proto::SortRel* unsafe_arena_release_sort();

  // .substrait.proto.JoinRel join = 6;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::substrait::proto::JoinRel& join() const;
  ::substrait::proto::JoinRel* release_join();
  ::substrait::proto::JoinRel* mutable_join();
  void set_allocated_join(::substrait::proto::JoinRel* join);
  private:
  const ::substrait::proto::JoinRel& _internal_join() const;
  ::substrait::proto::JoinRel* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::substrait::proto::JoinRel* join);
  ::substrait::proto::JoinRel* unsafe_arena_release_join();

  // .substrait.proto.ProjectRel project = 7;
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::substrait::proto::ProjectRel& project() const;
  ::substrait::proto::ProjectRel* release_project();
  ::substrait::proto::ProjectRel* mutable_project();
  void set_allocated_project(::substrait::proto::ProjectRel* project);
  private:
  const ::substrait::proto::ProjectRel& _internal_project() const;
  ::substrait::proto::ProjectRel* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::substrait::proto::ProjectRel* project);
  ::substrait::proto::ProjectRel* unsafe_arena_release_project();

  // .substrait.proto.SetRel set = 8;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::substrait::proto::SetRel& set() const;
  ::substrait::proto::SetRel* release_set();
  ::substrait::proto::SetRel* mutable_set();
  void set_allocated_set(::substrait::proto::SetRel* set);
  private:
  const ::substrait::proto::SetRel& _internal_set() const;
  ::substrait::proto::SetRel* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::substrait::proto::SetRel* set);
  ::substrait::proto::SetRel* unsafe_arena_release_set();

  // .substrait.proto.ExtensionSingleRel extension_single = 9;
  bool has_extension_single() const;
  private:
  bool _internal_has_extension_single() const;
  public:
  void clear_extension_single();
  const ::substrait::proto::ExtensionSingleRel& extension_single() const;
  ::substrait::proto::ExtensionSingleRel* release_extension_single();
  ::substrait::proto::ExtensionSingleRel* mutable_extension_single();
  void set_allocated_extension_single(::substrait::proto::ExtensionSingleRel* extension_single);
  private:
  const ::substrait::proto::ExtensionSingleRel& _internal_extension_single() const;
  ::substrait::proto::ExtensionSingleRel* _internal_mutable_extension_single();
  public:
  void unsafe_arena_set_allocated_extension_single(
      ::substrait::proto::ExtensionSingleRel* extension_single);
  ::substrait::proto::ExtensionSingleRel* unsafe_arena_release_extension_single();

  // .substrait.proto.ExtensionMultiRel extension_multi = 10;
  bool has_extension_multi() const;
  private:
  bool _internal_has_extension_multi() const;
  public:
  void clear_extension_multi();
  const ::substrait::proto::ExtensionMultiRel& extension_multi() const;
  ::substrait::proto::ExtensionMultiRel* release_extension_multi();
  ::substrait::proto::ExtensionMultiRel* mutable_extension_multi();
  void set_allocated_extension_multi(::substrait::proto::ExtensionMultiRel* extension_multi);
  private:
  const ::substrait::proto::ExtensionMultiRel& _internal_extension_multi() const;
  ::substrait::proto::ExtensionMultiRel* _internal_mutable_extension_multi();
  public:
  void unsafe_arena_set_allocated_extension_multi(
      ::substrait::proto::ExtensionMultiRel* extension_multi);
  ::substrait::proto::ExtensionMultiRel* unsafe_arena_release_extension_multi();

  // .substrait.proto.ExtensionLeafRel extension_leaf = 11;
  bool has_extension_leaf() const;
  private:
  bool _internal_has_extension_leaf() const;
  public:
  void clear_extension_leaf();
  const ::substrait::proto::ExtensionLeafRel& extension_leaf() const;
  ::substrait::proto::ExtensionLeafRel* release_extension_leaf();
  ::substrait::proto::ExtensionLeafRel* mutable_extension_leaf();
  void set_allocated_extension_leaf(::substrait::proto::ExtensionLeafRel* extension_leaf);
  private:
  const ::substrait::proto::ExtensionLeafRel& _internal_extension_leaf() const;
  ::substrait::proto::ExtensionLeafRel* _internal_mutable_extension_leaf();
  public:
  void unsafe_arena_set_allocated_extension_leaf(
      ::substrait::proto::ExtensionLeafRel* extension_leaf);
  ::substrait::proto::ExtensionLeafRel* unsafe_arena_release_extension_leaf();

  // .substrait.proto.CrossRel cross = 12;
  bool has_cross() const;
  private:
  bool _internal_has_cross() const;
  public:
  void clear_cross();
  const ::substrait::proto::CrossRel& cross() const;
  ::substrait::proto::CrossRel* release_cross();
  ::substrait::proto::CrossRel* mutable_cross();
  void set_allocated_cross(::substrait::proto::CrossRel* cross);
  private:
  const ::substrait::proto::CrossRel& _internal_cross() const;
  ::substrait::proto::CrossRel* _internal_mutable_cross();
  public:
  void unsafe_arena_set_allocated_cross(
      ::substrait::proto::CrossRel* cross);
  ::substrait::proto::CrossRel* unsafe_arena_release_cross();

  // .substrait.proto.ReferenceRel reference = 21;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::substrait::proto::ReferenceRel& reference() const;
  ::substrait::proto::ReferenceRel* release_reference();
  ::substrait::proto::ReferenceRel* mutable_reference();
  void set_allocated_reference(::substrait::proto::ReferenceRel* reference);
  private:
  const ::substrait::proto::ReferenceRel& _internal_reference() const;
  ::substrait::proto::ReferenceRel* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::substrait::proto::ReferenceRel* reference);
  ::substrait::proto::ReferenceRel* unsafe_arena_release_reference();

  // .substrait.proto.WriteRel write = 19;
  bool has_write() const;
  private:
  bool _internal_has_write() const;
  public:
  void clear_write();
  const ::substrait::proto::WriteRel& write() const;
  ::substrait::proto::WriteRel* release_write();
  ::substrait::proto::WriteRel* mutable_write();
  void set_allocated_write(::substrait::proto::WriteRel* write);
  private:
  const ::substrait::proto::WriteRel& _internal_write() const;
  ::substrait::proto::WriteRel* _internal_mutable_write();
  public:
  void unsafe_arena_set_allocated_write(
      ::substrait::proto::WriteRel* write);
  ::substrait::proto::WriteRel* unsafe_arena_release_write();

  // .substrait.proto.DdlRel ddl = 20;
  bool has_ddl() const;
  private:
  bool _internal_has_ddl() const;
  public:
  void clear_ddl();
  const ::substrait::proto::DdlRel& ddl() const;
  ::substrait::proto::DdlRel* release_ddl();
  ::substrait::proto::DdlRel* mutable_ddl();
  void set_allocated_ddl(::substrait::proto::DdlRel* ddl);
  private:
  const ::substrait::proto::DdlRel& _internal_ddl() const;
  ::substrait::proto::DdlRel* _internal_mutable_ddl();
  public:
  void unsafe_arena_set_allocated_ddl(
      ::substrait::proto::DdlRel* ddl);
  ::substrait::proto::DdlRel* unsafe_arena_release_ddl();

  // .substrait.proto.HashJoinRel hash_join = 13;
  bool has_hash_join() const;
  private:
  bool _internal_has_hash_join() const;
  public:
  void clear_hash_join();
  const ::substrait::proto::HashJoinRel& hash_join() const;
  ::substrait::proto::HashJoinRel* release_hash_join();
  ::substrait::proto::HashJoinRel* mutable_hash_join();
  void set_allocated_hash_join(::substrait::proto::HashJoinRel* hash_join);
  private:
  const ::substrait::proto::HashJoinRel& _internal_hash_join() const;
  ::substrait::proto::HashJoinRel* _internal_mutable_hash_join();
  public:
  void unsafe_arena_set_allocated_hash_join(
      ::substrait::proto::HashJoinRel* hash_join);
  ::substrait::proto::HashJoinRel* unsafe_arena_release_hash_join();

  // .substrait.proto.MergeJoinRel merge_join = 14;
  bool has_merge_join() const;
  private:
  bool _internal_has_merge_join() const;
  public:
  void clear_merge_join();
  const ::substrait::proto::MergeJoinRel& merge_join() const;
  ::substrait::proto::MergeJoinRel* release_merge_join();
  ::substrait::proto::MergeJoinRel* mutable_merge_join();
  void set_allocated_merge_join(::substrait::proto::MergeJoinRel* merge_join);
  private:
  const ::substrait::proto::MergeJoinRel& _internal_merge_join() const;
  ::substrait::proto::MergeJoinRel* _internal_mutable_merge_join();
  public:
  void unsafe_arena_set_allocated_merge_join(
      ::substrait::proto::MergeJoinRel* merge_join);
  ::substrait::proto::MergeJoinRel* unsafe_arena_release_merge_join();

  // .substrait.proto.NestedLoopJoinRel nested_loop_join = 18;
  bool has_nested_loop_join() const;
  private:
  bool _internal_has_nested_loop_join() const;
  public:
  void clear_nested_loop_join();
  const ::substrait::proto::NestedLoopJoinRel& nested_loop_join() const;
  ::substrait::proto::NestedLoopJoinRel* release_nested_loop_join();
  ::substrait::proto::NestedLoopJoinRel* mutable_nested_loop_join();
  void set_allocated_nested_loop_join(::substrait::proto::NestedLoopJoinRel* nested_loop_join);
  private:
  const ::substrait::proto::NestedLoopJoinRel& _internal_nested_loop_join() const;
  ::substrait::proto::NestedLoopJoinRel* _internal_mutable_nested_loop_join();
  public:
  void unsafe_arena_set_allocated_nested_loop_join(
      ::substrait::proto::NestedLoopJoinRel* nested_loop_join);
  ::substrait::proto::NestedLoopJoinRel* unsafe_arena_release_nested_loop_join();

  // .substrait.proto.ConsistentPartitionWindowRel window = 17;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::substrait::proto::ConsistentPartitionWindowRel& window() const;
  ::substrait::proto::ConsistentPartitionWindowRel* release_window();
  ::substrait::proto::ConsistentPartitionWindowRel* mutable_window();
  void set_allocated_window(::substrait::proto::ConsistentPartitionWindowRel* window);
  private:
  const ::substrait::proto::ConsistentPartitionWindowRel& _internal_window() const;
  ::substrait::proto::ConsistentPartitionWindowRel* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::substrait::proto::ConsistentPartitionWindowRel* window);
  ::substrait::proto::ConsistentPartitionWindowRel* unsafe_arena_release_window();

  // .substrait.proto.ExchangeRel exchange = 15;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  const ::substrait::proto::ExchangeRel& exchange() const;
  ::substrait::proto::ExchangeRel* release_exchange();
  ::substrait::proto::ExchangeRel* mutable_exchange();
  void set_allocated_exchange(::substrait::proto::ExchangeRel* exchange);
  private:
  const ::substrait::proto::ExchangeRel& _internal_exchange() const;
  ::substrait::proto::ExchangeRel* _internal_mutable_exchange();
  public:
  void unsafe_arena_set_allocated_exchange(
      ::substrait::proto::ExchangeRel* exchange);
  ::substrait::proto::ExchangeRel* unsafe_arena_release_exchange();

  // .substrait.proto.ExpandRel expand = 16;
  bool has_expand() const;
  private:
  bool _internal_has_expand() const;
  public:
  void clear_expand();
  const ::substrait::proto::ExpandRel& expand() const;
  ::substrait::proto::ExpandRel* release_expand();
  ::substrait::proto::ExpandRel* mutable_expand();
  void set_allocated_expand(::substrait::proto::ExpandRel* expand);
  private:
  const ::substrait::proto::ExpandRel& _internal_expand() const;
  ::substrait::proto::ExpandRel* _internal_mutable_expand();
  public:
  void unsafe_arena_set_allocated_expand(
      ::substrait::proto::ExpandRel* expand);
  ::substrait::proto::ExpandRel* unsafe_arena_release_expand();

  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Rel)
 private:
  class _Internal;
  void set_has_read();
  void set_has_filter();
  void set_has_fetch();
  void set_has_aggregate();
  void set_has_sort();
  void set_has_join();
  void set_has_project();
  void set_has_set();
  void set_has_extension_single();
  void set_has_extension_multi();
  void set_has_extension_leaf();
  void set_has_cross();
  void set_has_reference();
  void set_has_write();
  void set_has_ddl();
  void set_has_hash_join();
  void set_has_merge_join();
  void set_has_nested_loop_join();
  void set_has_window();
  void set_has_exchange();
  void set_has_expand();

  inline bool has_rel_type() const;
  inline void clear_has_rel_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RelTypeUnion {
    RelTypeUnion() {}
    ::substrait::proto::ReadRel* read_;
    ::substrait::proto::FilterRel* filter_;
    ::substrait::proto::FetchRel* fetch_;
    ::substrait::proto::AggregateRel* aggregate_;
    ::substrait::proto::SortRel* sort_;
    ::substrait::proto::JoinRel* join_;
    ::substrait::proto::ProjectRel* project_;
    ::substrait::proto::SetRel* set_;
    ::substrait::proto::ExtensionSingleRel* extension_single_;
    ::substrait::proto::ExtensionMultiRel* extension_multi_;
    ::substrait::proto::ExtensionLeafRel* extension_leaf_;
    ::substrait::proto::CrossRel* cross_;
    ::substrait::proto::ReferenceRel* reference_;
    ::substrait::proto::WriteRel* write_;
    ::substrait::proto::DdlRel* ddl_;
    ::substrait::proto::HashJoinRel* hash_join_;
    ::substrait::proto::MergeJoinRel* merge_join_;
    ::substrait::proto::NestedLoopJoinRel* nested_loop_join_;
    ::substrait::proto::ConsistentPartitionWindowRel* window_;
    ::substrait::proto::ExchangeRel* exchange_;
    ::substrait::proto::ExpandRel* expand_;
  } rel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class NamedObjectWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.NamedObjectWrite) */ {
 public:
  inline NamedObjectWrite() : NamedObjectWrite(nullptr) {};
  virtual ~NamedObjectWrite();

  NamedObjectWrite(const NamedObjectWrite& from);
  NamedObjectWrite(NamedObjectWrite&& from) noexcept
    : NamedObjectWrite() {
    *this = ::std::move(from);
  }

  inline NamedObjectWrite& operator=(const NamedObjectWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectWrite& operator=(NamedObjectWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedObjectWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectWrite* internal_default_instance() {
    return reinterpret_cast<const NamedObjectWrite*>(
               &_NamedObjectWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(NamedObjectWrite& a, NamedObjectWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectWrite* New() const final {
    return CreateMaybeMessage<NamedObjectWrite>(nullptr);
  }

  NamedObjectWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedObjectWrite& from);
  void MergeFrom(const NamedObjectWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedObjectWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.NamedObjectWrite";
  }
  protected:
  explicit NamedObjectWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.proto.NamedObjectWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ExtensionObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ExtensionObject) */ {
 public:
  inline ExtensionObject() : ExtensionObject(nullptr) {};
  virtual ~ExtensionObject();

  ExtensionObject(const ExtensionObject& from);
  ExtensionObject(ExtensionObject&& from) noexcept
    : ExtensionObject() {
    *this = ::std::move(from);
  }

  inline ExtensionObject& operator=(const ExtensionObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionObject& operator=(ExtensionObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtensionObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionObject* internal_default_instance() {
    return reinterpret_cast<const ExtensionObject*>(
               &_ExtensionObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ExtensionObject& a, ExtensionObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionObject* New() const final {
    return CreateMaybeMessage<ExtensionObject>(nullptr);
  }

  ExtensionObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtensionObject& from);
  void MergeFrom(const ExtensionObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ExtensionObject";
  }
  protected:
  explicit ExtensionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // .google.protobuf.Any detail = 1;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NAMESPACE_ID::Any* release_detail();
  PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      PROTOBUF_NAMESPACE_ID::Any* detail);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.proto.ExtensionObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class DdlRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.DdlRel) */ {
 public:
  inline DdlRel() : DdlRel(nullptr) {};
  virtual ~DdlRel();

  DdlRel(const DdlRel& from);
  DdlRel(DdlRel&& from) noexcept
    : DdlRel() {
    *this = ::std::move(from);
  }

  inline DdlRel& operator=(const DdlRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdlRel& operator=(DdlRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DdlRel& default_instance();

  enum WriteTypeCase {
    kNamedObject = 1,
    kExtensionObject = 2,
    WRITE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DdlRel* internal_default_instance() {
    return reinterpret_cast<const DdlRel*>(
               &_DdlRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DdlRel& a, DdlRel& b) {
    a.Swap(&b);
  }
  inline void Swap(DdlRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DdlRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DdlRel* New() const final {
    return CreateMaybeMessage<DdlRel>(nullptr);
  }

  DdlRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DdlRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DdlRel& from);
  void MergeFrom(const DdlRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdlRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.DdlRel";
  }
  protected:
  explicit DdlRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DdlRel_DdlObject DdlObject;
  static constexpr DdlObject DDL_OBJECT_UNSPECIFIED =
    DdlRel_DdlObject_DDL_OBJECT_UNSPECIFIED;
  static constexpr DdlObject DDL_OBJECT_TABLE =
    DdlRel_DdlObject_DDL_OBJECT_TABLE;
  static constexpr DdlObject DDL_OBJECT_VIEW =
    DdlRel_DdlObject_DDL_OBJECT_VIEW;
  static inline bool DdlObject_IsValid(int value) {
    return DdlRel_DdlObject_IsValid(value);
  }
  static constexpr DdlObject DdlObject_MIN =
    DdlRel_DdlObject_DdlObject_MIN;
  static constexpr DdlObject DdlObject_MAX =
    DdlRel_DdlObject_DdlObject_MAX;
  static constexpr int DdlObject_ARRAYSIZE =
    DdlRel_DdlObject_DdlObject_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DdlObject_descriptor() {
    return DdlRel_DdlObject_descriptor();
  }
  template<typename T>
  static inline const std::string& DdlObject_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DdlObject>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DdlObject_Name.");
    return DdlRel_DdlObject_Name(enum_t_value);
  }
  static inline bool DdlObject_Parse(const std::string& name,
      DdlObject* value) {
    return DdlRel_DdlObject_Parse(name, value);
  }

  typedef DdlRel_DdlOp DdlOp;
  static constexpr DdlOp DDL_OP_UNSPECIFIED =
    DdlRel_DdlOp_DDL_OP_UNSPECIFIED;
  static constexpr DdlOp DDL_OP_CREATE =
    DdlRel_DdlOp_DDL_OP_CREATE;
  static constexpr DdlOp DDL_OP_CREATE_OR_REPLACE =
    DdlRel_DdlOp_DDL_OP_CREATE_OR_REPLACE;
  static constexpr DdlOp DDL_OP_ALTER =
    DdlRel_DdlOp_DDL_OP_ALTER;
  static constexpr DdlOp DDL_OP_DROP =
    DdlRel_DdlOp_DDL_OP_DROP;
  static constexpr DdlOp DDL_OP_DROP_IF_EXIST =
    DdlRel_DdlOp_DDL_OP_DROP_IF_EXIST;
  static inline bool DdlOp_IsValid(int value) {
    return DdlRel_DdlOp_IsValid(value);
  }
  static constexpr DdlOp DdlOp_MIN =
    DdlRel_DdlOp_DdlOp_MIN;
  static constexpr DdlOp DdlOp_MAX =
    DdlRel_DdlOp_DdlOp_MAX;
  static constexpr int DdlOp_ARRAYSIZE =
    DdlRel_DdlOp_DdlOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DdlOp_descriptor() {
    return DdlRel_DdlOp_descriptor();
  }
  template<typename T>
  static inline const std::string& DdlOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DdlOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DdlOp_Name.");
    return DdlRel_DdlOp_Name(enum_t_value);
  }
  static inline bool DdlOp_Parse(const std::string& name,
      DdlOp* value) {
    return DdlRel_DdlOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableSchemaFieldNumber = 3,
    kTableDefaultsFieldNumber = 4,
    kViewDefinitionFieldNumber = 7,
    kCommonFieldNumber = 8,
    kObjectFieldNumber = 5,
    kOpFieldNumber = 6,
    kNamedObjectFieldNumber = 1,
    kExtensionObjectFieldNumber = 2,
  };
  // .substrait.proto.NamedStruct table_schema = 3;
  bool has_table_schema() const;
  private:
  bool _internal_has_table_schema() const;
  public:
  void clear_table_schema();
  const ::substrait::proto::NamedStruct& table_schema() const;
  ::substrait::proto::NamedStruct* release_table_schema();
  ::substrait::proto::NamedStruct* mutable_table_schema();
  void set_allocated_table_schema(::substrait::proto::NamedStruct* table_schema);
  private:
  const ::substrait::proto::NamedStruct& _internal_table_schema() const;
  ::substrait::proto::NamedStruct* _internal_mutable_table_schema();
  public:
  void unsafe_arena_set_allocated_table_schema(
      ::substrait::proto::NamedStruct* table_schema);
  ::substrait::proto::NamedStruct* unsafe_arena_release_table_schema();

  // .substrait.proto.Expression.Literal.Struct table_defaults = 4;
  bool has_table_defaults() const;
  private:
  bool _internal_has_table_defaults() const;
  public:
  void clear_table_defaults();
  const ::substrait::proto::Expression_Literal_Struct& table_defaults() const;
  ::substrait::proto::Expression_Literal_Struct* release_table_defaults();
  ::substrait::proto::Expression_Literal_Struct* mutable_table_defaults();
  void set_allocated_table_defaults(::substrait::proto::Expression_Literal_Struct* table_defaults);
  private:
  const ::substrait::proto::Expression_Literal_Struct& _internal_table_defaults() const;
  ::substrait::proto::Expression_Literal_Struct* _internal_mutable_table_defaults();
  public:
  void unsafe_arena_set_allocated_table_defaults(
      ::substrait::proto::Expression_Literal_Struct* table_defaults);
  ::substrait::proto::Expression_Literal_Struct* unsafe_arena_release_table_defaults();

  // .substrait.proto.Rel view_definition = 7;
  bool has_view_definition() const;
  private:
  bool _internal_has_view_definition() const;
  public:
  void clear_view_definition();
  const ::substrait::proto::Rel& view_definition() const;
  ::substrait::proto::Rel* release_view_definition();
  ::substrait::proto::Rel* mutable_view_definition();
  void set_allocated_view_definition(::substrait::proto::Rel* view_definition);
  private:
  const ::substrait::proto::Rel& _internal_view_definition() const;
  ::substrait::proto::Rel* _internal_mutable_view_definition();
  public:
  void unsafe_arena_set_allocated_view_definition(
      ::substrait::proto::Rel* view_definition);
  ::substrait::proto::Rel* unsafe_arena_release_view_definition();

  // .substrait.proto.RelCommon common = 8;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.DdlRel.DdlObject object = 5;
  void clear_object();
  ::substrait::proto::DdlRel_DdlObject object() const;
  void set_object(::substrait::proto::DdlRel_DdlObject value);
  private:
  ::substrait::proto::DdlRel_DdlObject _internal_object() const;
  void _internal_set_object(::substrait::proto::DdlRel_DdlObject value);
  public:

  // .substrait.proto.DdlRel.DdlOp op = 6;
  void clear_op();
  ::substrait::proto::DdlRel_DdlOp op() const;
  void set_op(::substrait::proto::DdlRel_DdlOp value);
  private:
  ::substrait::proto::DdlRel_DdlOp _internal_op() const;
  void _internal_set_op(::substrait::proto::DdlRel_DdlOp value);
  public:

  // .substrait.proto.NamedObjectWrite named_object = 1;
  bool has_named_object() const;
  private:
  bool _internal_has_named_object() const;
  public:
  void clear_named_object();
  const ::substrait::proto::NamedObjectWrite& named_object() const;
  ::substrait::proto::NamedObjectWrite* release_named_object();
  ::substrait::proto::NamedObjectWrite* mutable_named_object();
  void set_allocated_named_object(::substrait::proto::NamedObjectWrite* named_object);
  private:
  const ::substrait::proto::NamedObjectWrite& _internal_named_object() const;
  ::substrait::proto::NamedObjectWrite* _internal_mutable_named_object();
  public:
  void unsafe_arena_set_allocated_named_object(
      ::substrait::proto::NamedObjectWrite* named_object);
  ::substrait::proto::NamedObjectWrite* unsafe_arena_release_named_object();

  // .substrait.proto.ExtensionObject extension_object = 2;
  bool has_extension_object() const;
  private:
  bool _internal_has_extension_object() const;
  public:
  void clear_extension_object();
  const ::substrait::proto::ExtensionObject& extension_object() const;
  ::substrait::proto::ExtensionObject* release_extension_object();
  ::substrait::proto::ExtensionObject* mutable_extension_object();
  void set_allocated_extension_object(::substrait::proto::ExtensionObject* extension_object);
  private:
  const ::substrait::proto::ExtensionObject& _internal_extension_object() const;
  ::substrait::proto::ExtensionObject* _internal_mutable_extension_object();
  public:
  void unsafe_arena_set_allocated_extension_object(
      ::substrait::proto::ExtensionObject* extension_object);
  ::substrait::proto::ExtensionObject* unsafe_arena_release_extension_object();

  void clear_write_type();
  WriteTypeCase write_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.DdlRel)
 private:
  class _Internal;
  void set_has_named_object();
  void set_has_extension_object();

  inline bool has_write_type() const;
  inline void clear_has_write_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::NamedStruct* table_schema_;
  ::substrait::proto::Expression_Literal_Struct* table_defaults_;
  ::substrait::proto::Rel* view_definition_;
  ::substrait::proto::RelCommon* common_;
  int object_;
  int op_;
  union WriteTypeUnion {
    WriteTypeUnion() {}
    ::substrait::proto::NamedObjectWrite* named_object_;
    ::substrait::proto::ExtensionObject* extension_object_;
  } write_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class WriteRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.WriteRel) */ {
 public:
  inline WriteRel() : WriteRel(nullptr) {};
  virtual ~WriteRel();

  WriteRel(const WriteRel& from);
  WriteRel(WriteRel&& from) noexcept
    : WriteRel() {
    *this = ::std::move(from);
  }

  inline WriteRel& operator=(const WriteRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRel& operator=(WriteRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteRel& default_instance();

  enum WriteTypeCase {
    kNamedTable = 1,
    kExtensionTable = 2,
    WRITE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRel* internal_default_instance() {
    return reinterpret_cast<const WriteRel*>(
               &_WriteRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(WriteRel& a, WriteRel& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRel* New() const final {
    return CreateMaybeMessage<WriteRel>(nullptr);
  }

  WriteRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteRel& from);
  void MergeFrom(const WriteRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.WriteRel";
  }
  protected:
  explicit WriteRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WriteRel_WriteOp WriteOp;
  static constexpr WriteOp WRITE_OP_UNSPECIFIED =
    WriteRel_WriteOp_WRITE_OP_UNSPECIFIED;
  static constexpr WriteOp WRITE_OP_INSERT =
    WriteRel_WriteOp_WRITE_OP_INSERT;
  static constexpr WriteOp WRITE_OP_DELETE =
    WriteRel_WriteOp_WRITE_OP_DELETE;
  static constexpr WriteOp WRITE_OP_UPDATE =
    WriteRel_WriteOp_WRITE_OP_UPDATE;
  static constexpr WriteOp WRITE_OP_CTAS =
    WriteRel_WriteOp_WRITE_OP_CTAS;
  static inline bool WriteOp_IsValid(int value) {
    return WriteRel_WriteOp_IsValid(value);
  }
  static constexpr WriteOp WriteOp_MIN =
    WriteRel_WriteOp_WriteOp_MIN;
  static constexpr WriteOp WriteOp_MAX =
    WriteRel_WriteOp_WriteOp_MAX;
  static constexpr int WriteOp_ARRAYSIZE =
    WriteRel_WriteOp_WriteOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WriteOp_descriptor() {
    return WriteRel_WriteOp_descriptor();
  }
  template<typename T>
  static inline const std::string& WriteOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WriteOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WriteOp_Name.");
    return WriteRel_WriteOp_Name(enum_t_value);
  }
  static inline bool WriteOp_Parse(const std::string& name,
      WriteOp* value) {
    return WriteRel_WriteOp_Parse(name, value);
  }

  typedef WriteRel_OutputMode OutputMode;
  static constexpr OutputMode OUTPUT_MODE_UNSPECIFIED =
    WriteRel_OutputMode_OUTPUT_MODE_UNSPECIFIED;
  static constexpr OutputMode OUTPUT_MODE_NO_OUTPUT =
    WriteRel_OutputMode_OUTPUT_MODE_NO_OUTPUT;
  static constexpr OutputMode OUTPUT_MODE_MODIFIED_RECORDS =
    WriteRel_OutputMode_OUTPUT_MODE_MODIFIED_RECORDS;
  static inline bool OutputMode_IsValid(int value) {
    return WriteRel_OutputMode_IsValid(value);
  }
  static constexpr OutputMode OutputMode_MIN =
    WriteRel_OutputMode_OutputMode_MIN;
  static constexpr OutputMode OutputMode_MAX =
    WriteRel_OutputMode_OutputMode_MAX;
  static constexpr int OutputMode_ARRAYSIZE =
    WriteRel_OutputMode_OutputMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutputMode_descriptor() {
    return WriteRel_OutputMode_descriptor();
  }
  template<typename T>
  static inline const std::string& OutputMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputMode_Name.");
    return WriteRel_OutputMode_Name(enum_t_value);
  }
  static inline bool OutputMode_Parse(const std::string& name,
      OutputMode* value) {
    return WriteRel_OutputMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableSchemaFieldNumber = 3,
    kInputFieldNumber = 5,
    kCommonFieldNumber = 7,
    kOpFieldNumber = 4,
    kOutputFieldNumber = 6,
    kNamedTableFieldNumber = 1,
    kExtensionTableFieldNumber = 2,
  };
  // .substrait.proto.NamedStruct table_schema = 3;
  bool has_table_schema() const;
  private:
  bool _internal_has_table_schema() const;
  public:
  void clear_table_schema();
  const ::substrait::proto::NamedStruct& table_schema() const;
  ::substrait::proto::NamedStruct* release_table_schema();
  ::substrait::proto::NamedStruct* mutable_table_schema();
  void set_allocated_table_schema(::substrait::proto::NamedStruct* table_schema);
  private:
  const ::substrait::proto::NamedStruct& _internal_table_schema() const;
  ::substrait::proto::NamedStruct* _internal_mutable_table_schema();
  public:
  void unsafe_arena_set_allocated_table_schema(
      ::substrait::proto::NamedStruct* table_schema);
  ::substrait::proto::NamedStruct* unsafe_arena_release_table_schema();

  // .substrait.proto.Rel input = 5;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // .substrait.proto.RelCommon common = 7;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.WriteRel.WriteOp op = 4;
  void clear_op();
  ::substrait::proto::WriteRel_WriteOp op() const;
  void set_op(::substrait::proto::WriteRel_WriteOp value);
  private:
  ::substrait::proto::WriteRel_WriteOp _internal_op() const;
  void _internal_set_op(::substrait::proto::WriteRel_WriteOp value);
  public:

  // .substrait.proto.WriteRel.OutputMode output = 6;
  void clear_output();
  ::substrait::proto::WriteRel_OutputMode output() const;
  void set_output(::substrait::proto::WriteRel_OutputMode value);
  private:
  ::substrait::proto::WriteRel_OutputMode _internal_output() const;
  void _internal_set_output(::substrait::proto::WriteRel_OutputMode value);
  public:

  // .substrait.proto.NamedObjectWrite named_table = 1;
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;
  public:
  void clear_named_table();
  const ::substrait::proto::NamedObjectWrite& named_table() const;
  ::substrait::proto::NamedObjectWrite* release_named_table();
  ::substrait::proto::NamedObjectWrite* mutable_named_table();
  void set_allocated_named_table(::substrait::proto::NamedObjectWrite* named_table);
  private:
  const ::substrait::proto::NamedObjectWrite& _internal_named_table() const;
  ::substrait::proto::NamedObjectWrite* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::substrait::proto::NamedObjectWrite* named_table);
  ::substrait::proto::NamedObjectWrite* unsafe_arena_release_named_table();

  // .substrait.proto.ExtensionObject extension_table = 2;
  bool has_extension_table() const;
  private:
  bool _internal_has_extension_table() const;
  public:
  void clear_extension_table();
  const ::substrait::proto::ExtensionObject& extension_table() const;
  ::substrait::proto::ExtensionObject* release_extension_table();
  ::substrait::proto::ExtensionObject* mutable_extension_table();
  void set_allocated_extension_table(::substrait::proto::ExtensionObject* extension_table);
  private:
  const ::substrait::proto::ExtensionObject& _internal_extension_table() const;
  ::substrait::proto::ExtensionObject* _internal_mutable_extension_table();
  public:
  void unsafe_arena_set_allocated_extension_table(
      ::substrait::proto::ExtensionObject* extension_table);
  ::substrait::proto::ExtensionObject* unsafe_arena_release_extension_table();

  void clear_write_type();
  WriteTypeCase write_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.WriteRel)
 private:
  class _Internal;
  void set_has_named_table();
  void set_has_extension_table();

  inline bool has_write_type() const;
  inline void clear_has_write_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::NamedStruct* table_schema_;
  ::substrait::proto::Rel* input_;
  ::substrait::proto::RelCommon* common_;
  int op_;
  int output_;
  union WriteTypeUnion {
    WriteTypeUnion() {}
    ::substrait::proto::NamedObjectWrite* named_table_;
    ::substrait::proto::ExtensionObject* extension_table_;
  } write_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ComparisonJoinKey_ComparisonType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ComparisonJoinKey.ComparisonType) */ {
 public:
  inline ComparisonJoinKey_ComparisonType() : ComparisonJoinKey_ComparisonType(nullptr) {};
  virtual ~ComparisonJoinKey_ComparisonType();

  ComparisonJoinKey_ComparisonType(const ComparisonJoinKey_ComparisonType& from);
  ComparisonJoinKey_ComparisonType(ComparisonJoinKey_ComparisonType&& from) noexcept
    : ComparisonJoinKey_ComparisonType() {
    *this = ::std::move(from);
  }

  inline ComparisonJoinKey_ComparisonType& operator=(const ComparisonJoinKey_ComparisonType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComparisonJoinKey_ComparisonType& operator=(ComparisonJoinKey_ComparisonType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComparisonJoinKey_ComparisonType& default_instance();

  enum InnerTypeCase {
    kSimple = 1,
    kCustomFunctionReference = 2,
    INNER_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComparisonJoinKey_ComparisonType* internal_default_instance() {
    return reinterpret_cast<const ComparisonJoinKey_ComparisonType*>(
               &_ComparisonJoinKey_ComparisonType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ComparisonJoinKey_ComparisonType& a, ComparisonJoinKey_ComparisonType& b) {
    a.Swap(&b);
  }
  inline void Swap(ComparisonJoinKey_ComparisonType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComparisonJoinKey_ComparisonType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComparisonJoinKey_ComparisonType* New() const final {
    return CreateMaybeMessage<ComparisonJoinKey_ComparisonType>(nullptr);
  }

  ComparisonJoinKey_ComparisonType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComparisonJoinKey_ComparisonType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComparisonJoinKey_ComparisonType& from);
  void MergeFrom(const ComparisonJoinKey_ComparisonType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparisonJoinKey_ComparisonType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ComparisonJoinKey.ComparisonType";
  }
  protected:
  explicit ComparisonJoinKey_ComparisonType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleFieldNumber = 1,
    kCustomFunctionReferenceFieldNumber = 2,
  };
  // .substrait.proto.ComparisonJoinKey.SimpleComparisonType simple = 1;
  private:
  bool _internal_has_simple() const;
  public:
  void clear_simple();
  ::substrait::proto::ComparisonJoinKey_SimpleComparisonType simple() const;
  void set_simple(::substrait::proto::ComparisonJoinKey_SimpleComparisonType value);
  private:
  ::substrait::proto::ComparisonJoinKey_SimpleComparisonType _internal_simple() const;
  void _internal_set_simple(::substrait::proto::ComparisonJoinKey_SimpleComparisonType value);
  public:

  // uint32 custom_function_reference = 2;
  private:
  bool _internal_has_custom_function_reference() const;
  public:
  void clear_custom_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_function_reference() const;
  void set_custom_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_function_reference() const;
  void _internal_set_custom_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_inner_type();
  InnerTypeCase inner_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.ComparisonJoinKey.ComparisonType)
 private:
  class _Internal;
  void set_has_simple();
  void set_has_custom_function_reference();

  inline bool has_inner_type() const;
  inline void clear_has_inner_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerTypeUnion {
    InnerTypeUnion() {}
    int simple_;
    ::PROTOBUF_NAMESPACE_ID::uint32 custom_function_reference_;
  } inner_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ComparisonJoinKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ComparisonJoinKey) */ {
 public:
  inline ComparisonJoinKey() : ComparisonJoinKey(nullptr) {};
  virtual ~ComparisonJoinKey();

  ComparisonJoinKey(const ComparisonJoinKey& from);
  ComparisonJoinKey(ComparisonJoinKey&& from) noexcept
    : ComparisonJoinKey() {
    *this = ::std::move(from);
  }

  inline ComparisonJoinKey& operator=(const ComparisonJoinKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComparisonJoinKey& operator=(ComparisonJoinKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComparisonJoinKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComparisonJoinKey* internal_default_instance() {
    return reinterpret_cast<const ComparisonJoinKey*>(
               &_ComparisonJoinKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ComparisonJoinKey& a, ComparisonJoinKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ComparisonJoinKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComparisonJoinKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComparisonJoinKey* New() const final {
    return CreateMaybeMessage<ComparisonJoinKey>(nullptr);
  }

  ComparisonJoinKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComparisonJoinKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComparisonJoinKey& from);
  void MergeFrom(const ComparisonJoinKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparisonJoinKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ComparisonJoinKey";
  }
  protected:
  explicit ComparisonJoinKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComparisonJoinKey_ComparisonType ComparisonType;

  typedef ComparisonJoinKey_SimpleComparisonType SimpleComparisonType;
  static constexpr SimpleComparisonType SIMPLE_COMPARISON_TYPE_UNSPECIFIED =
    ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_UNSPECIFIED;
  static constexpr SimpleComparisonType SIMPLE_COMPARISON_TYPE_EQ =
    ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_EQ;
  static constexpr SimpleComparisonType SIMPLE_COMPARISON_TYPE_IS_NOT_DISTINCT_FROM =
    ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_IS_NOT_DISTINCT_FROM;
  static constexpr SimpleComparisonType SIMPLE_COMPARISON_TYPE_MIGHT_EQUAL =
    ComparisonJoinKey_SimpleComparisonType_SIMPLE_COMPARISON_TYPE_MIGHT_EQUAL;
  static inline bool SimpleComparisonType_IsValid(int value) {
    return ComparisonJoinKey_SimpleComparisonType_IsValid(value);
  }
  static constexpr SimpleComparisonType SimpleComparisonType_MIN =
    ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_MIN;
  static constexpr SimpleComparisonType SimpleComparisonType_MAX =
    ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_MAX;
  static constexpr int SimpleComparisonType_ARRAYSIZE =
    ComparisonJoinKey_SimpleComparisonType_SimpleComparisonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SimpleComparisonType_descriptor() {
    return ComparisonJoinKey_SimpleComparisonType_descriptor();
  }
  template<typename T>
  static inline const std::string& SimpleComparisonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SimpleComparisonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SimpleComparisonType_Name.");
    return ComparisonJoinKey_SimpleComparisonType_Name(enum_t_value);
  }
  static inline bool SimpleComparisonType_Parse(const std::string& name,
      SimpleComparisonType* value) {
    return ComparisonJoinKey_SimpleComparisonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
    kComparisonFieldNumber = 3,
  };
  // .substrait.proto.Expression.FieldReference left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Expression_FieldReference& left() const;
  ::substrait::proto::Expression_FieldReference* release_left();
  ::substrait::proto::Expression_FieldReference* mutable_left();
  void set_allocated_left(::substrait::proto::Expression_FieldReference* left);
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_left() const;
  ::substrait::proto::Expression_FieldReference* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Expression_FieldReference* left);
  ::substrait::proto::Expression_FieldReference* unsafe_arena_release_left();

  // .substrait.proto.Expression.FieldReference right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Expression_FieldReference& right() const;
  ::substrait::proto::Expression_FieldReference* release_right();
  ::substrait::proto::Expression_FieldReference* mutable_right();
  void set_allocated_right(::substrait::proto::Expression_FieldReference* right);
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_right() const;
  ::substrait::proto::Expression_FieldReference* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Expression_FieldReference* right);
  ::substrait::proto::Expression_FieldReference* unsafe_arena_release_right();

  // .substrait.proto.ComparisonJoinKey.ComparisonType comparison = 3;
  bool has_comparison() const;
  private:
  bool _internal_has_comparison() const;
  public:
  void clear_comparison();
  const ::substrait::proto::ComparisonJoinKey_ComparisonType& comparison() const;
  ::substrait::proto::ComparisonJoinKey_ComparisonType* release_comparison();
  ::substrait::proto::ComparisonJoinKey_ComparisonType* mutable_comparison();
  void set_allocated_comparison(::substrait::proto::ComparisonJoinKey_ComparisonType* comparison);
  private:
  const ::substrait::proto::ComparisonJoinKey_ComparisonType& _internal_comparison() const;
  ::substrait::proto::ComparisonJoinKey_ComparisonType* _internal_mutable_comparison();
  public:
  void unsafe_arena_set_allocated_comparison(
      ::substrait::proto::ComparisonJoinKey_ComparisonType* comparison);
  ::substrait::proto::ComparisonJoinKey_ComparisonType* unsafe_arena_release_comparison();

  // @@protoc_insertion_point(class_scope:substrait.proto.ComparisonJoinKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_FieldReference* left_;
  ::substrait::proto::Expression_FieldReference* right_;
  ::substrait::proto::ComparisonJoinKey_ComparisonType* comparison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class HashJoinRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.HashJoinRel) */ {
 public:
  inline HashJoinRel() : HashJoinRel(nullptr) {};
  virtual ~HashJoinRel();

  HashJoinRel(const HashJoinRel& from);
  HashJoinRel(HashJoinRel&& from) noexcept
    : HashJoinRel() {
    *this = ::std::move(from);
  }

  inline HashJoinRel& operator=(const HashJoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashJoinRel& operator=(HashJoinRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashJoinRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashJoinRel* internal_default_instance() {
    return reinterpret_cast<const HashJoinRel*>(
               &_HashJoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(HashJoinRel& a, HashJoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(HashJoinRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashJoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashJoinRel* New() const final {
    return CreateMaybeMessage<HashJoinRel>(nullptr);
  }

  HashJoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashJoinRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashJoinRel& from);
  void MergeFrom(const HashJoinRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashJoinRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.HashJoinRel";
  }
  protected:
  explicit HashJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HashJoinRel_JoinType JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED =
    HashJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER =
    HashJoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER =
    HashJoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT =
    HashJoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT =
    HashJoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_LEFT_SEMI =
    HashJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI;
  static constexpr JoinType JOIN_TYPE_RIGHT_SEMI =
    HashJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI;
  static constexpr JoinType JOIN_TYPE_LEFT_ANTI =
    HashJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI;
  static constexpr JoinType JOIN_TYPE_RIGHT_ANTI =
    HashJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
  static inline bool JoinType_IsValid(int value) {
    return HashJoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    HashJoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    HashJoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    HashJoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return HashJoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return HashJoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(const std::string& name,
      JoinType* value) {
    return HashJoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftKeysFieldNumber = 4,
    kRightKeysFieldNumber = 5,
    kKeysFieldNumber = 8,
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kPostJoinFilterFieldNumber = 6,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 7,
  };
  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int left_keys_size() const;
  private:
  int _internal_left_keys_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_left_keys();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* mutable_left_keys(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
      mutable_left_keys();
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_left_keys(int index) const;
  ::substrait::proto::Expression_FieldReference* _internal_add_left_keys();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression_FieldReference& left_keys(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* add_left_keys();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
      left_keys() const;

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int right_keys_size() const;
  private:
  int _internal_right_keys_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_right_keys();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* mutable_right_keys(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
      mutable_right_keys();
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_right_keys(int index) const;
  ::substrait::proto::Expression_FieldReference* _internal_add_right_keys();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression_FieldReference& right_keys(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* add_right_keys();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
      right_keys() const;

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::substrait::proto::ComparisonJoinKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >*
      mutable_keys();
  private:
  const ::substrait::proto::ComparisonJoinKey& _internal_keys(int index) const;
  ::substrait::proto::ComparisonJoinKey* _internal_add_keys();
  public:
  const ::substrait::proto::ComparisonJoinKey& keys(int index) const;
  ::substrait::proto::ComparisonJoinKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >&
      keys() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Rel& left() const;
  ::substrait::proto::Rel* release_left();
  ::substrait::proto::Rel* mutable_left();
  void set_allocated_left(::substrait::proto::Rel* left);
  private:
  const ::substrait::proto::Rel& _internal_left() const;
  ::substrait::proto::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Rel* left);
  ::substrait::proto::Rel* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.Expression post_join_filter = 6;
  bool has_post_join_filter() const;
  private:
  bool _internal_has_post_join_filter() const;
  public:
  void clear_post_join_filter();
  const ::substrait::proto::Expression& post_join_filter() const;
  ::substrait::proto::Expression* release_post_join_filter();
  ::substrait::proto::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter);
  private:
  const ::substrait::proto::Expression& _internal_post_join_filter() const;
  ::substrait::proto::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::proto::Expression* post_join_filter);
  ::substrait::proto::Expression* unsafe_arena_release_post_join_filter();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.HashJoinRel.JoinType type = 7;
  void clear_type();
  ::substrait::proto::HashJoinRel_JoinType type() const;
  void set_type(::substrait::proto::HashJoinRel_JoinType value);
  private:
  ::substrait::proto::HashJoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::proto::HashJoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.HashJoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference > left_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference > right_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey > keys_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* left_;
  ::substrait::proto::Rel* right_;
  ::substrait::proto::Expression* post_join_filter_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class MergeJoinRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.MergeJoinRel) */ {
 public:
  inline MergeJoinRel() : MergeJoinRel(nullptr) {};
  virtual ~MergeJoinRel();

  MergeJoinRel(const MergeJoinRel& from);
  MergeJoinRel(MergeJoinRel&& from) noexcept
    : MergeJoinRel() {
    *this = ::std::move(from);
  }

  inline MergeJoinRel& operator=(const MergeJoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeJoinRel& operator=(MergeJoinRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeJoinRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeJoinRel* internal_default_instance() {
    return reinterpret_cast<const MergeJoinRel*>(
               &_MergeJoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(MergeJoinRel& a, MergeJoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeJoinRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeJoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeJoinRel* New() const final {
    return CreateMaybeMessage<MergeJoinRel>(nullptr);
  }

  MergeJoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeJoinRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeJoinRel& from);
  void MergeFrom(const MergeJoinRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeJoinRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.MergeJoinRel";
  }
  protected:
  explicit MergeJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MergeJoinRel_JoinType JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED =
    MergeJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER =
    MergeJoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER =
    MergeJoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT =
    MergeJoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT =
    MergeJoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_LEFT_SEMI =
    MergeJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI;
  static constexpr JoinType JOIN_TYPE_RIGHT_SEMI =
    MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI;
  static constexpr JoinType JOIN_TYPE_LEFT_ANTI =
    MergeJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI;
  static constexpr JoinType JOIN_TYPE_RIGHT_ANTI =
    MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
  static inline bool JoinType_IsValid(int value) {
    return MergeJoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    MergeJoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    MergeJoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    MergeJoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return MergeJoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return MergeJoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(const std::string& name,
      JoinType* value) {
    return MergeJoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftKeysFieldNumber = 4,
    kRightKeysFieldNumber = 5,
    kKeysFieldNumber = 8,
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kPostJoinFilterFieldNumber = 6,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 7,
  };
  // repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int left_keys_size() const;
  private:
  int _internal_left_keys_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_left_keys();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* mutable_left_keys(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
      mutable_left_keys();
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_left_keys(int index) const;
  ::substrait::proto::Expression_FieldReference* _internal_add_left_keys();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression_FieldReference& left_keys(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* add_left_keys();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
      left_keys() const;

  // repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int right_keys_size() const;
  private:
  int _internal_right_keys_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_right_keys();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* mutable_right_keys(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
      mutable_right_keys();
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_right_keys(int index) const;
  ::substrait::proto::Expression_FieldReference* _internal_add_right_keys();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression_FieldReference& right_keys(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_FieldReference* add_right_keys();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
      right_keys() const;

  // repeated .substrait.proto.ComparisonJoinKey keys = 8;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::substrait::proto::ComparisonJoinKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >*
      mutable_keys();
  private:
  const ::substrait::proto::ComparisonJoinKey& _internal_keys(int index) const;
  ::substrait::proto::ComparisonJoinKey* _internal_add_keys();
  public:
  const ::substrait::proto::ComparisonJoinKey& keys(int index) const;
  ::substrait::proto::ComparisonJoinKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >&
      keys() const;

  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Rel& left() const;
  ::substrait::proto::Rel* release_left();
  ::substrait::proto::Rel* mutable_left();
  void set_allocated_left(::substrait::proto::Rel* left);
  private:
  const ::substrait::proto::Rel& _internal_left() const;
  ::substrait::proto::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Rel* left);
  ::substrait::proto::Rel* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.Expression post_join_filter = 6;
  bool has_post_join_filter() const;
  private:
  bool _internal_has_post_join_filter() const;
  public:
  void clear_post_join_filter();
  const ::substrait::proto::Expression& post_join_filter() const;
  ::substrait::proto::Expression* release_post_join_filter();
  ::substrait::proto::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter);
  private:
  const ::substrait::proto::Expression& _internal_post_join_filter() const;
  ::substrait::proto::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::proto::Expression* post_join_filter);
  ::substrait::proto::Expression* unsafe_arena_release_post_join_filter();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.MergeJoinRel.JoinType type = 7;
  void clear_type();
  ::substrait::proto::MergeJoinRel_JoinType type() const;
  void set_type(::substrait::proto::MergeJoinRel_JoinType value);
  private:
  ::substrait::proto::MergeJoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::proto::MergeJoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.MergeJoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference > left_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference > right_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey > keys_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* left_;
  ::substrait::proto::Rel* right_;
  ::substrait::proto::Expression* post_join_filter_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class NestedLoopJoinRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.NestedLoopJoinRel) */ {
 public:
  inline NestedLoopJoinRel() : NestedLoopJoinRel(nullptr) {};
  virtual ~NestedLoopJoinRel();

  NestedLoopJoinRel(const NestedLoopJoinRel& from);
  NestedLoopJoinRel(NestedLoopJoinRel&& from) noexcept
    : NestedLoopJoinRel() {
    *this = ::std::move(from);
  }

  inline NestedLoopJoinRel& operator=(const NestedLoopJoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedLoopJoinRel& operator=(NestedLoopJoinRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NestedLoopJoinRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NestedLoopJoinRel* internal_default_instance() {
    return reinterpret_cast<const NestedLoopJoinRel*>(
               &_NestedLoopJoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(NestedLoopJoinRel& a, NestedLoopJoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedLoopJoinRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedLoopJoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NestedLoopJoinRel* New() const final {
    return CreateMaybeMessage<NestedLoopJoinRel>(nullptr);
  }

  NestedLoopJoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NestedLoopJoinRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NestedLoopJoinRel& from);
  void MergeFrom(const NestedLoopJoinRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedLoopJoinRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.NestedLoopJoinRel";
  }
  protected:
  explicit NestedLoopJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NestedLoopJoinRel_JoinType JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_LEFT_SEMI =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI;
  static constexpr JoinType JOIN_TYPE_RIGHT_SEMI =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI;
  static constexpr JoinType JOIN_TYPE_LEFT_ANTI =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI;
  static constexpr JoinType JOIN_TYPE_RIGHT_ANTI =
    NestedLoopJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
  static inline bool JoinType_IsValid(int value) {
    return NestedLoopJoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    NestedLoopJoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    NestedLoopJoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    NestedLoopJoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return NestedLoopJoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return NestedLoopJoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(const std::string& name,
      JoinType* value) {
    return NestedLoopJoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kExpressionFieldNumber = 4,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 5,
  };
  // .substrait.proto.RelCommon common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::proto::RelCommon& common() const;
  ::substrait::proto::RelCommon* release_common();
  ::substrait::proto::RelCommon* mutable_common();
  void set_allocated_common(::substrait::proto::RelCommon* common);
  private:
  const ::substrait::proto::RelCommon& _internal_common() const;
  ::substrait::proto::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::proto::RelCommon* common);
  ::substrait::proto::RelCommon* unsafe_arena_release_common();

  // .substrait.proto.Rel left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Rel& left() const;
  ::substrait::proto::Rel* release_left();
  ::substrait::proto::Rel* mutable_left();
  void set_allocated_left(::substrait::proto::Rel* left);
  private:
  const ::substrait::proto::Rel& _internal_left() const;
  ::substrait::proto::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Rel* left);
  ::substrait::proto::Rel* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.Expression expression = 4;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression& expression() const;
  ::substrait::proto::Expression* release_expression();
  ::substrait::proto::Expression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression* expression);
  private:
  const ::substrait::proto::Expression& _internal_expression() const;
  ::substrait::proto::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression* expression);
  ::substrait::proto::Expression* unsafe_arena_release_expression();

  // .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::proto::extensions::AdvancedExtension& advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::proto::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::proto::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::proto::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::proto::extensions::AdvancedExtension* advanced_extension);
  ::substrait::proto::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.proto.NestedLoopJoinRel.JoinType type = 5;
  void clear_type();
  ::substrait::proto::NestedLoopJoinRel_JoinType type() const;
  void set_type(::substrait::proto::NestedLoopJoinRel_JoinType value);
  private:
  ::substrait::proto::NestedLoopJoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::proto::NestedLoopJoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.NestedLoopJoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::RelCommon* common_;
  ::substrait::proto::Rel* left_;
  ::substrait::proto::Rel* right_;
  ::substrait::proto::Expression* expression_;
  ::substrait::proto::extensions::AdvancedExtension* advanced_extension_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class FunctionArgument PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.FunctionArgument) */ {
 public:
  inline FunctionArgument() : FunctionArgument(nullptr) {};
  virtual ~FunctionArgument();

  FunctionArgument(const FunctionArgument& from);
  FunctionArgument(FunctionArgument&& from) noexcept
    : FunctionArgument() {
    *this = ::std::move(from);
  }

  inline FunctionArgument& operator=(const FunctionArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionArgument& operator=(FunctionArgument&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionArgument& default_instance();

  enum ArgTypeCase {
    kEnum = 1,
    kType = 2,
    kValue = 3,
    ARG_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionArgument* internal_default_instance() {
    return reinterpret_cast<const FunctionArgument*>(
               &_FunctionArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FunctionArgument& a, FunctionArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionArgument* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionArgument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionArgument* New() const final {
    return CreateMaybeMessage<FunctionArgument>(nullptr);
  }

  FunctionArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionArgument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionArgument& from);
  void MergeFrom(const FunctionArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionArgument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.FunctionArgument";
  }
  protected:
  explicit FunctionArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnumFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string enum = 1;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  const std::string& enum_() const;
  void set_enum_(const std::string& value);
  void set_enum_(std::string&& value);
  void set_enum_(const char* value);
  void set_enum_(const char* value, size_t size);
  std::string* mutable_enum_();
  std::string* release_enum_();
  void set_allocated_enum_(std::string* enum_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enum_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enum_(
      std::string* enum_);
  private:
  const std::string& _internal_enum_() const;
  void _internal_set_enum_(const std::string& value);
  std::string* _internal_mutable_enum_();
  public:

  // .substrait.proto.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::substrait::proto::Type& type() const;
  ::substrait::proto::Type* release_type();
  ::substrait::proto::Type* mutable_type();
  void set_allocated_type(::substrait::proto::Type* type);
  private:
  const ::substrait::proto::Type& _internal_type() const;
  ::substrait::proto::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::substrait::proto::Type* type);
  ::substrait::proto::Type* unsafe_arena_release_type();

  // .substrait.proto.Expression value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::substrait::proto::Expression& value() const;
  ::substrait::proto::Expression* release_value();
  ::substrait::proto::Expression* mutable_value();
  void set_allocated_value(::substrait::proto::Expression* value);
  private:
  const ::substrait::proto::Expression& _internal_value() const;
  ::substrait::proto::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::proto::Expression* value);
  ::substrait::proto::Expression* unsafe_arena_release_value();

  void clear_arg_type();
  ArgTypeCase arg_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.FunctionArgument)
 private:
  class _Internal;
  void set_has_enum_();
  void set_has_type();
  void set_has_value();

  inline bool has_arg_type() const;
  inline void clear_has_arg_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ArgTypeUnion {
    ArgTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
    ::substrait::proto::Type* type_;
    ::substrait::proto::Expression* value_;
  } arg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class FunctionOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.FunctionOption) */ {
 public:
  inline FunctionOption() : FunctionOption(nullptr) {};
  virtual ~FunctionOption();

  FunctionOption(const FunctionOption& from);
  FunctionOption(FunctionOption&& from) noexcept
    : FunctionOption() {
    *this = ::std::move(from);
  }

  inline FunctionOption& operator=(const FunctionOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionOption& operator=(FunctionOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionOption* internal_default_instance() {
    return reinterpret_cast<const FunctionOption*>(
               &_FunctionOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(FunctionOption& a, FunctionOption& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionOption* New() const final {
    return CreateMaybeMessage<FunctionOption>(nullptr);
  }

  FunctionOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionOption& from);
  void MergeFrom(const FunctionOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.FunctionOption";
  }
  protected:
  explicit FunctionOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferenceFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string preference = 2;
  int preference_size() const;
  private:
  int _internal_preference_size() const;
  public:
  void clear_preference();
  const std::string& preference(int index) const;
  std::string* mutable_preference(int index);
  void set_preference(int index, const std::string& value);
  void set_preference(int index, std::string&& value);
  void set_preference(int index, const char* value);
  void set_preference(int index, const char* value, size_t size);
  std::string* add_preference();
  void add_preference(const std::string& value);
  void add_preference(std::string&& value);
  void add_preference(const char* value);
  void add_preference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& preference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_preference();
  private:
  const std::string& _internal_preference(int index) const;
  std::string* _internal_add_preference();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.FunctionOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> preference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Enum_Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Enum.Empty) */ {
 public:
  inline Expression_Enum_Empty() : Expression_Enum_Empty(nullptr) {};
  virtual ~Expression_Enum_Empty();

  Expression_Enum_Empty(const Expression_Enum_Empty& from);
  Expression_Enum_Empty(Expression_Enum_Empty&& from) noexcept
    : Expression_Enum_Empty() {
    *this = ::std::move(from);
  }

  inline Expression_Enum_Empty& operator=(const Expression_Enum_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Enum_Empty& operator=(Expression_Enum_Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Enum_Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Enum_Empty* internal_default_instance() {
    return reinterpret_cast<const Expression_Enum_Empty*>(
               &_Expression_Enum_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Expression_Enum_Empty& a, Expression_Enum_Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Enum_Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Enum_Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Enum_Empty* New() const final {
    return CreateMaybeMessage<Expression_Enum_Empty>(nullptr);
  }

  Expression_Enum_Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Enum_Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Enum_Empty& from);
  void MergeFrom(const Expression_Enum_Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Enum_Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Enum.Empty";
  }
  protected:
  explicit Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Enum.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Enum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Enum) */ {
 public:
  inline Expression_Enum() : Expression_Enum(nullptr) {};
  virtual ~Expression_Enum();

  Expression_Enum(const Expression_Enum& from);
  Expression_Enum(Expression_Enum&& from) noexcept
    : Expression_Enum() {
    *this = ::std::move(from);
  }

  inline Expression_Enum& operator=(const Expression_Enum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Enum& operator=(Expression_Enum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Enum& default_instance();

  enum EnumKindCase {
    kSpecified = 1,
    kUnspecified = 2,
    ENUM_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Enum* internal_default_instance() {
    return reinterpret_cast<const Expression_Enum*>(
               &_Expression_Enum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Expression_Enum& a, Expression_Enum& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Enum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Enum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Enum* New() const final {
    return CreateMaybeMessage<Expression_Enum>(nullptr);
  }

  Expression_Enum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Enum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Enum& from);
  void MergeFrom(const Expression_Enum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Enum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Enum";
  }
  protected:
  explicit Expression_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Enum_Empty Empty;

  // accessors -------------------------------------------------------

  enum : int {
    kSpecifiedFieldNumber = 1,
    kUnspecifiedFieldNumber = 2,
  };
  // string specified = 1;
  private:
  bool _internal_has_specified() const;
  public:
  void clear_specified();
  const std::string& specified() const;
  void set_specified(const std::string& value);
  void set_specified(std::string&& value);
  void set_specified(const char* value);
  void set_specified(const char* value, size_t size);
  std::string* mutable_specified();
  std::string* release_specified();
  void set_allocated_specified(std::string* specified);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_specified();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_specified(
      std::string* specified);
  private:
  const std::string& _internal_specified() const;
  void _internal_set_specified(const std::string& value);
  std::string* _internal_mutable_specified();
  public:

  // .substrait.proto.Expression.Enum.Empty unspecified = 2;
  bool has_unspecified() const;
  private:
  bool _internal_has_unspecified() const;
  public:
  void clear_unspecified();
  const ::substrait::proto::Expression_Enum_Empty& unspecified() const;
  ::substrait::proto::Expression_Enum_Empty* release_unspecified();
  ::substrait::proto::Expression_Enum_Empty* mutable_unspecified();
  void set_allocated_unspecified(::substrait::proto::Expression_Enum_Empty* unspecified);
  private:
  const ::substrait::proto::Expression_Enum_Empty& _internal_unspecified() const;
  ::substrait::proto::Expression_Enum_Empty* _internal_mutable_unspecified();
  public:
  void unsafe_arena_set_allocated_unspecified(
      ::substrait::proto::Expression_Enum_Empty* unspecified);
  ::substrait::proto::Expression_Enum_Empty* unsafe_arena_release_unspecified();

  void clear_enum_kind();
  EnumKindCase enum_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Enum)
 private:
  class _Internal;
  void set_has_specified();
  void set_has_unspecified();

  inline bool has_enum_kind() const;
  inline void clear_has_enum_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EnumKindUnion {
    EnumKindUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specified_;
    ::substrait::proto::Expression_Enum_Empty* unspecified_;
  } enum_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_VarChar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.VarChar) */ {
 public:
  inline Expression_Literal_VarChar() : Expression_Literal_VarChar(nullptr) {};
  virtual ~Expression_Literal_VarChar();

  Expression_Literal_VarChar(const Expression_Literal_VarChar& from);
  Expression_Literal_VarChar(Expression_Literal_VarChar&& from) noexcept
    : Expression_Literal_VarChar() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_VarChar& operator=(const Expression_Literal_VarChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_VarChar& operator=(Expression_Literal_VarChar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_VarChar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_VarChar* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_VarChar*>(
               &_Expression_Literal_VarChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Expression_Literal_VarChar& a, Expression_Literal_VarChar& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_VarChar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_VarChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_VarChar* New() const final {
    return CreateMaybeMessage<Expression_Literal_VarChar>(nullptr);
  }

  Expression_Literal_VarChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_VarChar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_VarChar& from);
  void MergeFrom(const Expression_Literal_VarChar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_VarChar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.VarChar";
  }
  protected:
  explicit Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.VarChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.Decimal) */ {
 public:
  inline Expression_Literal_Decimal() : Expression_Literal_Decimal(nullptr) {};
  virtual ~Expression_Literal_Decimal();

  Expression_Literal_Decimal(const Expression_Literal_Decimal& from);
  Expression_Literal_Decimal(Expression_Literal_Decimal&& from) noexcept
    : Expression_Literal_Decimal() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Decimal& operator=(const Expression_Literal_Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Decimal& operator=(Expression_Literal_Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_Decimal* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Decimal*>(
               &_Expression_Literal_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Expression_Literal_Decimal& a, Expression_Literal_Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_Decimal* New() const final {
    return CreateMaybeMessage<Expression_Literal_Decimal>(nullptr);
  }

  Expression_Literal_Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_Decimal& from);
  void MergeFrom(const Expression_Literal_Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.Decimal";
  }
  protected:
  explicit Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 precision = 2;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scale = 3;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_Map_KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.Map.KeyValue) */ {
 public:
  inline Expression_Literal_Map_KeyValue() : Expression_Literal_Map_KeyValue(nullptr) {};
  virtual ~Expression_Literal_Map_KeyValue();

  Expression_Literal_Map_KeyValue(const Expression_Literal_Map_KeyValue& from);
  Expression_Literal_Map_KeyValue(Expression_Literal_Map_KeyValue&& from) noexcept
    : Expression_Literal_Map_KeyValue() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Map_KeyValue& operator=(const Expression_Literal_Map_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Map_KeyValue& operator=(Expression_Literal_Map_KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_Map_KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_Map_KeyValue* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Map_KeyValue*>(
               &_Expression_Literal_Map_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Expression_Literal_Map_KeyValue& a, Expression_Literal_Map_KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Map_KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Map_KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_Map_KeyValue* New() const final {
    return CreateMaybeMessage<Expression_Literal_Map_KeyValue>(nullptr);
  }

  Expression_Literal_Map_KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_Map_KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_Map_KeyValue& from);
  void MergeFrom(const Expression_Literal_Map_KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Map_KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.Map.KeyValue";
  }
  protected:
  explicit Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .substrait.proto.Expression.Literal key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::substrait::proto::Expression_Literal& key() const;
  ::substrait::proto::Expression_Literal* release_key();
  ::substrait::proto::Expression_Literal* mutable_key();
  void set_allocated_key(::substrait::proto::Expression_Literal* key);
  private:
  const ::substrait::proto::Expression_Literal& _internal_key() const;
  ::substrait::proto::Expression_Literal* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::proto::Expression_Literal* key);
  ::substrait::proto::Expression_Literal* unsafe_arena_release_key();

  // .substrait.proto.Expression.Literal value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::substrait::proto::Expression_Literal& value() const;
  ::substrait::proto::Expression_Literal* release_value();
  ::substrait::proto::Expression_Literal* mutable_value();
  void set_allocated_value(::substrait::proto::Expression_Literal* value);
  private:
  const ::substrait::proto::Expression_Literal& _internal_value() const;
  ::substrait::proto::Expression_Literal* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::proto::Expression_Literal* value);
  ::substrait::proto::Expression_Literal* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.Map.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_Literal* key_;
  ::substrait::proto::Expression_Literal* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.Map) */ {
 public:
  inline Expression_Literal_Map() : Expression_Literal_Map(nullptr) {};
  virtual ~Expression_Literal_Map();

  Expression_Literal_Map(const Expression_Literal_Map& from);
  Expression_Literal_Map(Expression_Literal_Map&& from) noexcept
    : Expression_Literal_Map() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Map& operator=(const Expression_Literal_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Map& operator=(Expression_Literal_Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_Map* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Map*>(
               &_Expression_Literal_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Expression_Literal_Map& a, Expression_Literal_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_Map* New() const final {
    return CreateMaybeMessage<Expression_Literal_Map>(nullptr);
  }

  Expression_Literal_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_Map& from);
  void MergeFrom(const Expression_Literal_Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.Map";
  }
  protected:
  explicit Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Literal_Map_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValuesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.Literal.Map.KeyValue key_values = 1;
  int key_values_size() const;
  private:
  int _internal_key_values_size() const;
  public:
  void clear_key_values();
  ::substrait::proto::Expression_Literal_Map_KeyValue* mutable_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Map_KeyValue >*
      mutable_key_values();
  private:
  const ::substrait::proto::Expression_Literal_Map_KeyValue& _internal_key_values(int index) const;
  ::substrait::proto::Expression_Literal_Map_KeyValue* _internal_add_key_values();
  public:
  const ::substrait::proto::Expression_Literal_Map_KeyValue& key_values(int index) const;
  ::substrait::proto::Expression_Literal_Map_KeyValue* add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Map_KeyValue >&
      key_values() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Map_KeyValue > key_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_IntervalYearToMonth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.IntervalYearToMonth) */ {
 public:
  inline Expression_Literal_IntervalYearToMonth() : Expression_Literal_IntervalYearToMonth(nullptr) {};
  virtual ~Expression_Literal_IntervalYearToMonth();

  Expression_Literal_IntervalYearToMonth(const Expression_Literal_IntervalYearToMonth& from);
  Expression_Literal_IntervalYearToMonth(Expression_Literal_IntervalYearToMonth&& from) noexcept
    : Expression_Literal_IntervalYearToMonth() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_IntervalYearToMonth& operator=(const Expression_Literal_IntervalYearToMonth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_IntervalYearToMonth& operator=(Expression_Literal_IntervalYearToMonth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_IntervalYearToMonth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_IntervalYearToMonth* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_IntervalYearToMonth*>(
               &_Expression_Literal_IntervalYearToMonth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Expression_Literal_IntervalYearToMonth& a, Expression_Literal_IntervalYearToMonth& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_IntervalYearToMonth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_IntervalYearToMonth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_IntervalYearToMonth* New() const final {
    return CreateMaybeMessage<Expression_Literal_IntervalYearToMonth>(nullptr);
  }

  Expression_Literal_IntervalYearToMonth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_IntervalYearToMonth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_IntervalYearToMonth& from);
  void MergeFrom(const Expression_Literal_IntervalYearToMonth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_IntervalYearToMonth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.IntervalYearToMonth";
  }
  protected:
  explicit Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearsFieldNumber = 1,
    kMonthsFieldNumber = 2,
  };
  // int32 years = 1;
  void clear_years();
  ::PROTOBUF_NAMESPACE_ID::int32 years() const;
  void set_years(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_years() const;
  void _internal_set_years(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 months = 2;
  void clear_months();
  ::PROTOBUF_NAMESPACE_ID::int32 months() const;
  void set_months(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_months() const;
  void _internal_set_months(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.IntervalYearToMonth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 years_;
  ::PROTOBUF_NAMESPACE_ID::int32 months_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_IntervalDayToSecond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.IntervalDayToSecond) */ {
 public:
  inline Expression_Literal_IntervalDayToSecond() : Expression_Literal_IntervalDayToSecond(nullptr) {};
  virtual ~Expression_Literal_IntervalDayToSecond();

  Expression_Literal_IntervalDayToSecond(const Expression_Literal_IntervalDayToSecond& from);
  Expression_Literal_IntervalDayToSecond(Expression_Literal_IntervalDayToSecond&& from) noexcept
    : Expression_Literal_IntervalDayToSecond() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_IntervalDayToSecond& operator=(const Expression_Literal_IntervalDayToSecond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_IntervalDayToSecond& operator=(Expression_Literal_IntervalDayToSecond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_IntervalDayToSecond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_IntervalDayToSecond* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_IntervalDayToSecond*>(
               &_Expression_Literal_IntervalDayToSecond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Expression_Literal_IntervalDayToSecond& a, Expression_Literal_IntervalDayToSecond& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_IntervalDayToSecond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_IntervalDayToSecond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_IntervalDayToSecond* New() const final {
    return CreateMaybeMessage<Expression_Literal_IntervalDayToSecond>(nullptr);
  }

  Expression_Literal_IntervalDayToSecond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_IntervalDayToSecond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_IntervalDayToSecond& from);
  void MergeFrom(const Expression_Literal_IntervalDayToSecond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_IntervalDayToSecond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.IntervalDayToSecond";
  }
  protected:
  explicit Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFieldNumber = 1,
    kSecondsFieldNumber = 2,
    kMicrosecondsFieldNumber = 3,
  };
  // int32 days = 1;
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seconds = 2;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 microseconds = 3;
  void clear_microseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 microseconds() const;
  void set_microseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_microseconds() const;
  void _internal_set_microseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.IntervalDayToSecond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_;
  ::PROTOBUF_NAMESPACE_ID::int32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 microseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_Struct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.Struct) */ {
 public:
  inline Expression_Literal_Struct() : Expression_Literal_Struct(nullptr) {};
  virtual ~Expression_Literal_Struct();

  Expression_Literal_Struct(const Expression_Literal_Struct& from);
  Expression_Literal_Struct(Expression_Literal_Struct&& from) noexcept
    : Expression_Literal_Struct() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Struct& operator=(const Expression_Literal_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Struct& operator=(Expression_Literal_Struct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_Struct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_Struct* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Struct*>(
               &_Expression_Literal_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Expression_Literal_Struct& a, Expression_Literal_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Struct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Struct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_Struct* New() const final {
    return CreateMaybeMessage<Expression_Literal_Struct>(nullptr);
  }

  Expression_Literal_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_Struct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_Struct& from);
  void MergeFrom(const Expression_Literal_Struct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Struct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.Struct";
  }
  protected:
  explicit Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.Literal fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::substrait::proto::Expression_Literal* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >*
      mutable_fields();
  private:
  const ::substrait::proto::Expression_Literal& _internal_fields(int index) const;
  ::substrait::proto::Expression_Literal* _internal_add_fields();
  public:
  const ::substrait::proto::Expression_Literal& fields(int index) const;
  ::substrait::proto::Expression_Literal* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >&
      fields() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_List PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.List) */ {
 public:
  inline Expression_Literal_List() : Expression_Literal_List(nullptr) {};
  virtual ~Expression_Literal_List();

  Expression_Literal_List(const Expression_Literal_List& from);
  Expression_Literal_List(Expression_Literal_List&& from) noexcept
    : Expression_Literal_List() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_List& operator=(const Expression_Literal_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_List& operator=(Expression_Literal_List&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_List* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_List*>(
               &_Expression_Literal_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Expression_Literal_List& a, Expression_Literal_List& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_List* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_List* New() const final {
    return CreateMaybeMessage<Expression_Literal_List>(nullptr);
  }

  Expression_Literal_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_List& from);
  void MergeFrom(const Expression_Literal_List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.List";
  }
  protected:
  explicit Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.Literal values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::substrait::proto::Expression_Literal* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >*
      mutable_values();
  private:
  const ::substrait::proto::Expression_Literal& _internal_values(int index) const;
  ::substrait::proto::Expression_Literal* _internal_add_values();
  public:
  const ::substrait::proto::Expression_Literal& values(int index) const;
  ::substrait::proto::Expression_Literal* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >&
      values() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal_UserDefined PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal.UserDefined) */ {
 public:
  inline Expression_Literal_UserDefined() : Expression_Literal_UserDefined(nullptr) {};
  virtual ~Expression_Literal_UserDefined();

  Expression_Literal_UserDefined(const Expression_Literal_UserDefined& from);
  Expression_Literal_UserDefined(Expression_Literal_UserDefined&& from) noexcept
    : Expression_Literal_UserDefined() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_UserDefined& operator=(const Expression_Literal_UserDefined& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_UserDefined& operator=(Expression_Literal_UserDefined&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal_UserDefined& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal_UserDefined* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_UserDefined*>(
               &_Expression_Literal_UserDefined_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Expression_Literal_UserDefined& a, Expression_Literal_UserDefined& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_UserDefined* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_UserDefined* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal_UserDefined* New() const final {
    return CreateMaybeMessage<Expression_Literal_UserDefined>(nullptr);
  }

  Expression_Literal_UserDefined* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal_UserDefined>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal_UserDefined& from);
  void MergeFrom(const Expression_Literal_UserDefined& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_UserDefined* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal.UserDefined";
  }
  protected:
  explicit Expression_Literal_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParametersFieldNumber = 3,
    kValueFieldNumber = 2,
    kTypeReferenceFieldNumber = 1,
  };
  // repeated .substrait.proto.Type.Parameter type_parameters = 3;
  int type_parameters_size() const;
  private:
  int _internal_type_parameters_size() const;
  public:
  void clear_type_parameters();
  ::substrait::proto::Type_Parameter* mutable_type_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Type_Parameter >*
      mutable_type_parameters();
  private:
  const ::substrait::proto::Type_Parameter& _internal_type_parameters(int index) const;
  ::substrait::proto::Type_Parameter* _internal_add_type_parameters();
  public:
  const ::substrait::proto::Type_Parameter& type_parameters(int index) const;
  ::substrait::proto::Type_Parameter* add_type_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Type_Parameter >&
      type_parameters() const;

  // .google.protobuf.Any value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_NAMESPACE_ID::Any* release_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Any* value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_value();

  // uint32 type_reference = 1;
  void clear_type_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_reference() const;
  void set_type_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_reference() const;
  void _internal_set_type_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal.UserDefined)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Type_Parameter > type_parameters_;
  PROTOBUF_NAMESPACE_ID::Any* value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Literal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Literal) */ {
 public:
  inline Expression_Literal() : Expression_Literal(nullptr) {};
  virtual ~Expression_Literal();

  Expression_Literal(const Expression_Literal& from);
  Expression_Literal(Expression_Literal&& from) noexcept
    : Expression_Literal() {
    *this = ::std::move(from);
  }

  inline Expression_Literal& operator=(const Expression_Literal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal& operator=(Expression_Literal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Literal& default_instance();

  enum LiteralTypeCase {
    kBoolean = 1,
    kI8 = 2,
    kI16 = 3,
    kI32 = 5,
    kI64 = 7,
    kFp32 = 10,
    kFp64 = 11,
    kString = 12,
    kBinary = 13,
    kTimestamp = 14,
    kDate = 16,
    kTime = 17,
    kIntervalYearToMonth = 19,
    kIntervalDayToSecond = 20,
    kFixedChar = 21,
    kVarChar = 22,
    kFixedBinary = 23,
    kDecimal = 24,
    kStruct = 25,
    kMap = 26,
    kTimestampTz = 27,
    kUuid = 28,
    kNull = 29,
    kList = 30,
    kEmptyList = 31,
    kEmptyMap = 32,
    kUserDefined = 33,
    LITERAL_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Literal* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal*>(
               &_Expression_Literal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Expression_Literal& a, Expression_Literal& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Literal* New() const final {
    return CreateMaybeMessage<Expression_Literal>(nullptr);
  }

  Expression_Literal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Literal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Literal& from);
  void MergeFrom(const Expression_Literal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Literal";
  }
  protected:
  explicit Expression_Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Literal_VarChar VarChar;
  typedef Expression_Literal_Decimal Decimal;
  typedef Expression_Literal_Map Map;
  typedef Expression_Literal_IntervalYearToMonth IntervalYearToMonth;
  typedef Expression_Literal_IntervalDayToSecond IntervalDayToSecond;
  typedef Expression_Literal_Struct Struct;
  typedef Expression_Literal_List List;
  typedef Expression_Literal_UserDefined UserDefined;

  // accessors -------------------------------------------------------

  enum : int {
    kNullableFieldNumber = 50,
    kTypeVariationReferenceFieldNumber = 51,
    kBooleanFieldNumber = 1,
    kI8FieldNumber = 2,
    kI16FieldNumber = 3,
    kI32FieldNumber = 5,
    kI64FieldNumber = 7,
    kFp32FieldNumber = 10,
    kFp64FieldNumber = 11,
    kStringFieldNumber = 12,
    kBinaryFieldNumber = 13,
    kTimestampFieldNumber = 14,
    kDateFieldNumber = 16,
    kTimeFieldNumber = 17,
    kIntervalYearToMonthFieldNumber = 19,
    kIntervalDayToSecondFieldNumber = 20,
    kFixedCharFieldNumber = 21,
    kVarCharFieldNumber = 22,
    kFixedBinaryFieldNumber = 23,
    kDecimalFieldNumber = 24,
    kStructFieldNumber = 25,
    kMapFieldNumber = 26,
    kTimestampTzFieldNumber = 27,
    kUuidFieldNumber = 28,
    kNullFieldNumber = 29,
    kListFieldNumber = 30,
    kEmptyListFieldNumber = 31,
    kEmptyMapFieldNumber = 32,
    kUserDefinedFieldNumber = 33,
  };
  // bool nullable = 50;
  void clear_nullable();
  bool nullable() const;
  void set_nullable(bool value);
  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);
  public:

  // uint32 type_variation_reference = 51;
  void clear_type_variation_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_variation_reference() const;
  void set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_variation_reference() const;
  void _internal_set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool boolean = 1;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // int32 i8 = 2;
  private:
  bool _internal_has_i8() const;
  public:
  void clear_i8();
  ::PROTOBUF_NAMESPACE_ID::int32 i8() const;
  void set_i8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i8() const;
  void _internal_set_i8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 i16 = 3;
  private:
  bool _internal_has_i16() const;
  public:
  void clear_i16();
  ::PROTOBUF_NAMESPACE_ID::int32 i16() const;
  void set_i16(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i16() const;
  void _internal_set_i16(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 i32 = 5;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  ::PROTOBUF_NAMESPACE_ID::int32 i32() const;
  void set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32() const;
  void _internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 i64 = 7;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  ::PROTOBUF_NAMESPACE_ID::int64 i64() const;
  void set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64() const;
  void _internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float fp32 = 10;
  private:
  bool _internal_has_fp32() const;
  public:
  void clear_fp32();
  float fp32() const;
  void set_fp32(float value);
  private:
  float _internal_fp32() const;
  void _internal_set_fp32(float value);
  public:

  // double fp64 = 11;
  private:
  bool _internal_has_fp64() const;
  public:
  void clear_fp64();
  double fp64() const;
  void set_fp64(double value);
  private:
  double _internal_fp64() const;
  void _internal_set_fp64(double value);
  public:

  // string string = 12;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // bytes binary = 13;
  private:
  bool _internal_has_binary() const;
  public:
  void clear_binary();
  const std::string& binary() const;
  void set_binary(const std::string& value);
  void set_binary(std::string&& value);
  void set_binary(const char* value);
  void set_binary(const void* value, size_t size);
  std::string* mutable_binary();
  std::string* release_binary();
  void set_allocated_binary(std::string* binary);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_binary();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_binary(
      std::string* binary);
  private:
  const std::string& _internal_binary() const;
  void _internal_set_binary(const std::string& value);
  std::string* _internal_mutable_binary();
  public:

  // int64 timestamp = 14;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 date = 16;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int32 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time = 17;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .substrait.proto.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
  bool has_interval_year_to_month() const;
  private:
  bool _internal_has_interval_year_to_month() const;
  public:
  void clear_interval_year_to_month();
  const ::substrait::proto::Expression_Literal_IntervalYearToMonth& interval_year_to_month() const;
  ::substrait::proto::Expression_Literal_IntervalYearToMonth* release_interval_year_to_month();
  ::substrait::proto::Expression_Literal_IntervalYearToMonth* mutable_interval_year_to_month();
  void set_allocated_interval_year_to_month(::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month);
  private:
  const ::substrait::proto::Expression_Literal_IntervalYearToMonth& _internal_interval_year_to_month() const;
  ::substrait::proto::Expression_Literal_IntervalYearToMonth* _internal_mutable_interval_year_to_month();
  public:
  void unsafe_arena_set_allocated_interval_year_to_month(
      ::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month);
  ::substrait::proto::Expression_Literal_IntervalYearToMonth* unsafe_arena_release_interval_year_to_month();

  // .substrait.proto.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
  bool has_interval_day_to_second() const;
  private:
  bool _internal_has_interval_day_to_second() const;
  public:
  void clear_interval_day_to_second();
  const ::substrait::proto::Expression_Literal_IntervalDayToSecond& interval_day_to_second() const;
  ::substrait::proto::Expression_Literal_IntervalDayToSecond* release_interval_day_to_second();
  ::substrait::proto::Expression_Literal_IntervalDayToSecond* mutable_interval_day_to_second();
  void set_allocated_interval_day_to_second(::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second);
  private:
  const ::substrait::proto::Expression_Literal_IntervalDayToSecond& _internal_interval_day_to_second() const;
  ::substrait::proto::Expression_Literal_IntervalDayToSecond* _internal_mutable_interval_day_to_second();
  public:
  void unsafe_arena_set_allocated_interval_day_to_second(
      ::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second);
  ::substrait::proto::Expression_Literal_IntervalDayToSecond* unsafe_arena_release_interval_day_to_second();

  // string fixed_char = 21;
  private:
  bool _internal_has_fixed_char() const;
  public:
  void clear_fixed_char();
  const std::string& fixed_char() const;
  void set_fixed_char(const std::string& value);
  void set_fixed_char(std::string&& value);
  void set_fixed_char(const char* value);
  void set_fixed_char(const char* value, size_t size);
  std::string* mutable_fixed_char();
  std::string* release_fixed_char();
  void set_allocated_fixed_char(std::string* fixed_char);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixed_char();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixed_char(
      std::string* fixed_char);
  private:
  const std::string& _internal_fixed_char() const;
  void _internal_set_fixed_char(const std::string& value);
  std::string* _internal_mutable_fixed_char();
  public:

  // .substrait.proto.Expression.Literal.VarChar var_char = 22;
  bool has_var_char() const;
  private:
  bool _internal_has_var_char() const;
  public:
  void clear_var_char();
  const ::substrait::proto::Expression_Literal_VarChar& var_char() const;
  ::substrait::proto::Expression_Literal_VarChar* release_var_char();
  ::substrait::proto::Expression_Literal_VarChar* mutable_var_char();
  void set_allocated_var_char(::substrait::proto::Expression_Literal_VarChar* var_char);
  private:
  const ::substrait::proto::Expression_Literal_VarChar& _internal_var_char() const;
  ::substrait::proto::Expression_Literal_VarChar* _internal_mutable_var_char();
  public:
  void unsafe_arena_set_allocated_var_char(
      ::substrait::proto::Expression_Literal_VarChar* var_char);
  ::substrait::proto::Expression_Literal_VarChar* unsafe_arena_release_var_char();

  // bytes fixed_binary = 23;
  private:
  bool _internal_has_fixed_binary() const;
  public:
  void clear_fixed_binary();
  const std::string& fixed_binary() const;
  void set_fixed_binary(const std::string& value);
  void set_fixed_binary(std::string&& value);
  void set_fixed_binary(const char* value);
  void set_fixed_binary(const void* value, size_t size);
  std::string* mutable_fixed_binary();
  std::string* release_fixed_binary();
  void set_allocated_fixed_binary(std::string* fixed_binary);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixed_binary();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixed_binary(
      std::string* fixed_binary);
  private:
  const std::string& _internal_fixed_binary() const;
  void _internal_set_fixed_binary(const std::string& value);
  std::string* _internal_mutable_fixed_binary();
  public:

  // .substrait.proto.Expression.Literal.Decimal decimal = 24;
  bool has_decimal() const;
  private:
  bool _internal_has_decimal() const;
  public:
  void clear_decimal();
  const ::substrait::proto::Expression_Literal_Decimal& decimal() const;
  ::substrait::proto::Expression_Literal_Decimal* release_decimal();
  ::substrait::proto::Expression_Literal_Decimal* mutable_decimal();
  void set_allocated_decimal(::substrait::proto::Expression_Literal_Decimal* decimal);
  private:
  const ::substrait::proto::Expression_Literal_Decimal& _internal_decimal() const;
  ::substrait::proto::Expression_Literal_Decimal* _internal_mutable_decimal();
  public:
  void unsafe_arena_set_allocated_decimal(
      ::substrait::proto::Expression_Literal_Decimal* decimal);
  ::substrait::proto::Expression_Literal_Decimal* unsafe_arena_release_decimal();

  // .substrait.proto.Expression.Literal.Struct struct = 25;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::substrait::proto::Expression_Literal_Struct& struct_() const;
  ::substrait::proto::Expression_Literal_Struct* release_struct_();
  ::substrait::proto::Expression_Literal_Struct* mutable_struct_();
  void set_allocated_struct_(::substrait::proto::Expression_Literal_Struct* struct_);
  private:
  const ::substrait::proto::Expression_Literal_Struct& _internal_struct_() const;
  ::substrait::proto::Expression_Literal_Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::proto::Expression_Literal_Struct* struct_);
  ::substrait::proto::Expression_Literal_Struct* unsafe_arena_release_struct_();

  // .substrait.proto.Expression.Literal.Map map = 26;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::substrait::proto::Expression_Literal_Map& map() const;
  ::substrait::proto::Expression_Literal_Map* release_map();
  ::substrait::proto::Expression_Literal_Map* mutable_map();
  void set_allocated_map(::substrait::proto::Expression_Literal_Map* map);
  private:
  const ::substrait::proto::Expression_Literal_Map& _internal_map() const;
  ::substrait::proto::Expression_Literal_Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::proto::Expression_Literal_Map* map);
  ::substrait::proto::Expression_Literal_Map* unsafe_arena_release_map();

  // int64 timestamp_tz = 27;
  private:
  bool _internal_has_timestamp_tz() const;
  public:
  void clear_timestamp_tz();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_tz() const;
  void set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_tz() const;
  void _internal_set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bytes uuid = 28;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .substrait.proto.Type null = 29;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  const ::substrait::proto::Type& null() const;
  ::substrait::proto::Type* release_null();
  ::substrait::proto::Type* mutable_null();
  void set_allocated_null(::substrait::proto::Type* null);
  private:
  const ::substrait::proto::Type& _internal_null() const;
  ::substrait::proto::Type* _internal_mutable_null();
  public:
  void unsafe_arena_set_allocated_null(
      ::substrait::proto::Type* null);
  ::substrait::proto::Type* unsafe_arena_release_null();

  // .substrait.proto.Expression.Literal.List list = 30;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::substrait::proto::Expression_Literal_List& list() const;
  ::substrait::proto::Expression_Literal_List* release_list();
  ::substrait::proto::Expression_Literal_List* mutable_list();
  void set_allocated_list(::substrait::proto::Expression_Literal_List* list);
  private:
  const ::substrait::proto::Expression_Literal_List& _internal_list() const;
  ::substrait::proto::Expression_Literal_List* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::proto::Expression_Literal_List* list);
  ::substrait::proto::Expression_Literal_List* unsafe_arena_release_list();

  // .substrait.proto.Type.List empty_list = 31;
  bool has_empty_list() const;
  private:
  bool _internal_has_empty_list() const;
  public:
  void clear_empty_list();
  const ::substrait::proto::Type_List& empty_list() const;
  ::substrait::proto::Type_List* release_empty_list();
  ::substrait::proto::Type_List* mutable_empty_list();
  void set_allocated_empty_list(::substrait::proto::Type_List* empty_list);
  private:
  const ::substrait::proto::Type_List& _internal_empty_list() const;
  ::substrait::proto::Type_List* _internal_mutable_empty_list();
  public:
  void unsafe_arena_set_allocated_empty_list(
      ::substrait::proto::Type_List* empty_list);
  ::substrait::proto::Type_List* unsafe_arena_release_empty_list();

  // .substrait.proto.Type.Map empty_map = 32;
  bool has_empty_map() const;
  private:
  bool _internal_has_empty_map() const;
  public:
  void clear_empty_map();
  const ::substrait::proto::Type_Map& empty_map() const;
  ::substrait::proto::Type_Map* release_empty_map();
  ::substrait::proto::Type_Map* mutable_empty_map();
  void set_allocated_empty_map(::substrait::proto::Type_Map* empty_map);
  private:
  const ::substrait::proto::Type_Map& _internal_empty_map() const;
  ::substrait::proto::Type_Map* _internal_mutable_empty_map();
  public:
  void unsafe_arena_set_allocated_empty_map(
      ::substrait::proto::Type_Map* empty_map);
  ::substrait::proto::Type_Map* unsafe_arena_release_empty_map();

  // .substrait.proto.Expression.Literal.UserDefined user_defined = 33;
  bool has_user_defined() const;
  private:
  bool _internal_has_user_defined() const;
  public:
  void clear_user_defined();
  const ::substrait::proto::Expression_Literal_UserDefined& user_defined() const;
  ::substrait::proto::Expression_Literal_UserDefined* release_user_defined();
  ::substrait::proto::Expression_Literal_UserDefined* mutable_user_defined();
  void set_allocated_user_defined(::substrait::proto::Expression_Literal_UserDefined* user_defined);
  private:
  const ::substrait::proto::Expression_Literal_UserDefined& _internal_user_defined() const;
  ::substrait::proto::Expression_Literal_UserDefined* _internal_mutable_user_defined();
  public:
  void unsafe_arena_set_allocated_user_defined(
      ::substrait::proto::Expression_Literal_UserDefined* user_defined);
  ::substrait::proto::Expression_Literal_UserDefined* unsafe_arena_release_user_defined();

  void clear_literal_type();
  LiteralTypeCase literal_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Literal)
 private:
  class _Internal;
  void set_has_boolean();
  void set_has_i8();
  void set_has_i16();
  void set_has_i32();
  void set_has_i64();
  void set_has_fp32();
  void set_has_fp64();
  void set_has_string();
  void set_has_binary();
  void set_has_timestamp();
  void set_has_date();
  void set_has_time();
  void set_has_interval_year_to_month();
  void set_has_interval_day_to_second();
  void set_has_fixed_char();
  void set_has_var_char();
  void set_has_fixed_binary();
  void set_has_decimal();
  void set_has_struct_();
  void set_has_map();
  void set_has_timestamp_tz();
  void set_has_uuid();
  void set_has_null();
  void set_has_list();
  void set_has_empty_list();
  void set_has_empty_map();
  void set_has_user_defined();

  inline bool has_literal_type() const;
  inline void clear_has_literal_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool nullable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_variation_reference_;
  union LiteralTypeUnion {
    LiteralTypeUnion() {}
    bool boolean_;
    ::PROTOBUF_NAMESPACE_ID::int32 i8_;
    ::PROTOBUF_NAMESPACE_ID::int32 i16_;
    ::PROTOBUF_NAMESPACE_ID::int32 i32_;
    ::PROTOBUF_NAMESPACE_ID::int64 i64_;
    float fp32_;
    double fp64_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
    ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
    ::PROTOBUF_NAMESPACE_ID::int32 date_;
    ::PROTOBUF_NAMESPACE_ID::int64 time_;
    ::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month_;
    ::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_char_;
    ::substrait::proto::Expression_Literal_VarChar* var_char_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_binary_;
    ::substrait::proto::Expression_Literal_Decimal* decimal_;
    ::substrait::proto::Expression_Literal_Struct* struct__;
    ::substrait::proto::Expression_Literal_Map* map_;
    ::PROTOBUF_NAMESPACE_ID::int64 timestamp_tz_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::substrait::proto::Type* null_;
    ::substrait::proto::Expression_Literal_List* list_;
    ::substrait::proto::Type_List* empty_list_;
    ::substrait::proto::Type_Map* empty_map_;
    ::substrait::proto::Expression_Literal_UserDefined* user_defined_;
  } literal_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Nested_Map_KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Nested.Map.KeyValue) */ {
 public:
  inline Expression_Nested_Map_KeyValue() : Expression_Nested_Map_KeyValue(nullptr) {};
  virtual ~Expression_Nested_Map_KeyValue();

  Expression_Nested_Map_KeyValue(const Expression_Nested_Map_KeyValue& from);
  Expression_Nested_Map_KeyValue(Expression_Nested_Map_KeyValue&& from) noexcept
    : Expression_Nested_Map_KeyValue() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Map_KeyValue& operator=(const Expression_Nested_Map_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Map_KeyValue& operator=(Expression_Nested_Map_KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Nested_Map_KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Nested_Map_KeyValue* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Map_KeyValue*>(
               &_Expression_Nested_Map_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Expression_Nested_Map_KeyValue& a, Expression_Nested_Map_KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Map_KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Map_KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Nested_Map_KeyValue* New() const final {
    return CreateMaybeMessage<Expression_Nested_Map_KeyValue>(nullptr);
  }

  Expression_Nested_Map_KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Nested_Map_KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Nested_Map_KeyValue& from);
  void MergeFrom(const Expression_Nested_Map_KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Map_KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Nested.Map.KeyValue";
  }
  protected:
  explicit Expression_Nested_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .substrait.proto.Expression key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::substrait::proto::Expression& key() const;
  ::substrait::proto::Expression* release_key();
  ::substrait::proto::Expression* mutable_key();
  void set_allocated_key(::substrait::proto::Expression* key);
  private:
  const ::substrait::proto::Expression& _internal_key() const;
  ::substrait::proto::Expression* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::proto::Expression* key);
  ::substrait::proto::Expression* unsafe_arena_release_key();

  // .substrait.proto.Expression value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::substrait::proto::Expression& value() const;
  ::substrait::proto::Expression* release_value();
  ::substrait::proto::Expression* mutable_value();
  void set_allocated_value(::substrait::proto::Expression* value);
  private:
  const ::substrait::proto::Expression& _internal_value() const;
  ::substrait::proto::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::proto::Expression* value);
  ::substrait::proto::Expression* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Nested.Map.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* key_;
  ::substrait::proto::Expression* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Nested_Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Nested.Map) */ {
 public:
  inline Expression_Nested_Map() : Expression_Nested_Map(nullptr) {};
  virtual ~Expression_Nested_Map();

  Expression_Nested_Map(const Expression_Nested_Map& from);
  Expression_Nested_Map(Expression_Nested_Map&& from) noexcept
    : Expression_Nested_Map() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Map& operator=(const Expression_Nested_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Map& operator=(Expression_Nested_Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Nested_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Nested_Map* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Map*>(
               &_Expression_Nested_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Expression_Nested_Map& a, Expression_Nested_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Nested_Map* New() const final {
    return CreateMaybeMessage<Expression_Nested_Map>(nullptr);
  }

  Expression_Nested_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Nested_Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Nested_Map& from);
  void MergeFrom(const Expression_Nested_Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Nested.Map";
  }
  protected:
  explicit Expression_Nested_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Nested_Map_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValuesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.Nested.Map.KeyValue key_values = 1;
  int key_values_size() const;
  private:
  int _internal_key_values_size() const;
  public:
  void clear_key_values();
  ::substrait::proto::Expression_Nested_Map_KeyValue* mutable_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Nested_Map_KeyValue >*
      mutable_key_values();
  private:
  const ::substrait::proto::Expression_Nested_Map_KeyValue& _internal_key_values(int index) const;
  ::substrait::proto::Expression_Nested_Map_KeyValue* _internal_add_key_values();
  public:
  const ::substrait::proto::Expression_Nested_Map_KeyValue& key_values(int index) const;
  ::substrait::proto::Expression_Nested_Map_KeyValue* add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Nested_Map_KeyValue >&
      key_values() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Nested.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Nested_Map_KeyValue > key_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Nested_Struct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Nested.Struct) */ {
 public:
  inline Expression_Nested_Struct() : Expression_Nested_Struct(nullptr) {};
  virtual ~Expression_Nested_Struct();

  Expression_Nested_Struct(const Expression_Nested_Struct& from);
  Expression_Nested_Struct(Expression_Nested_Struct&& from) noexcept
    : Expression_Nested_Struct() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Struct& operator=(const Expression_Nested_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Struct& operator=(Expression_Nested_Struct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Nested_Struct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Nested_Struct* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Struct*>(
               &_Expression_Nested_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Expression_Nested_Struct& a, Expression_Nested_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Struct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Struct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Nested_Struct* New() const final {
    return CreateMaybeMessage<Expression_Nested_Struct>(nullptr);
  }

  Expression_Nested_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Nested_Struct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Nested_Struct& from);
  void MergeFrom(const Expression_Nested_Struct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Struct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Nested.Struct";
  }
  protected:
  explicit Expression_Nested_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::substrait::proto::Expression* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_fields();
  private:
  const ::substrait::proto::Expression& _internal_fields(int index) const;
  ::substrait::proto::Expression* _internal_add_fields();
  public:
  const ::substrait::proto::Expression& fields(int index) const;
  ::substrait::proto::Expression* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      fields() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Nested.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Nested_List PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Nested.List) */ {
 public:
  inline Expression_Nested_List() : Expression_Nested_List(nullptr) {};
  virtual ~Expression_Nested_List();

  Expression_Nested_List(const Expression_Nested_List& from);
  Expression_Nested_List(Expression_Nested_List&& from) noexcept
    : Expression_Nested_List() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_List& operator=(const Expression_Nested_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_List& operator=(Expression_Nested_List&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Nested_List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Nested_List* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_List*>(
               &_Expression_Nested_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Expression_Nested_List& a, Expression_Nested_List& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_List* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Nested_List* New() const final {
    return CreateMaybeMessage<Expression_Nested_List>(nullptr);
  }

  Expression_Nested_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Nested_List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Nested_List& from);
  void MergeFrom(const Expression_Nested_List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Nested.List";
  }
  protected:
  explicit Expression_Nested_List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::substrait::proto::Expression* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_values();
  private:
  const ::substrait::proto::Expression& _internal_values(int index) const;
  ::substrait::proto::Expression* _internal_add_values();
  public:
  const ::substrait::proto::Expression& values(int index) const;
  ::substrait::proto::Expression* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      values() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Nested.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Nested PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Nested) */ {
 public:
  inline Expression_Nested() : Expression_Nested(nullptr) {};
  virtual ~Expression_Nested();

  Expression_Nested(const Expression_Nested& from);
  Expression_Nested(Expression_Nested&& from) noexcept
    : Expression_Nested() {
    *this = ::std::move(from);
  }

  inline Expression_Nested& operator=(const Expression_Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested& operator=(Expression_Nested&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Nested& default_instance();

  enum NestedTypeCase {
    kStruct = 3,
    kList = 4,
    kMap = 5,
    NESTED_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Nested* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested*>(
               &_Expression_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Expression_Nested& a, Expression_Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Nested* New() const final {
    return CreateMaybeMessage<Expression_Nested>(nullptr);
  }

  Expression_Nested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Nested>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Nested& from);
  void MergeFrom(const Expression_Nested& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Nested";
  }
  protected:
  explicit Expression_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Nested_Map Map;
  typedef Expression_Nested_Struct Struct;
  typedef Expression_Nested_List List;

  // accessors -------------------------------------------------------

  enum : int {
    kNullableFieldNumber = 1,
    kTypeVariationReferenceFieldNumber = 2,
    kStructFieldNumber = 3,
    kListFieldNumber = 4,
    kMapFieldNumber = 5,
  };
  // bool nullable = 1;
  void clear_nullable();
  bool nullable() const;
  void set_nullable(bool value);
  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);
  public:

  // uint32 type_variation_reference = 2;
  void clear_type_variation_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_variation_reference() const;
  void set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type_variation_reference() const;
  void _internal_set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .substrait.proto.Expression.Nested.Struct struct = 3;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::substrait::proto::Expression_Nested_Struct& struct_() const;
  ::substrait::proto::Expression_Nested_Struct* release_struct_();
  ::substrait::proto::Expression_Nested_Struct* mutable_struct_();
  void set_allocated_struct_(::substrait::proto::Expression_Nested_Struct* struct_);
  private:
  const ::substrait::proto::Expression_Nested_Struct& _internal_struct_() const;
  ::substrait::proto::Expression_Nested_Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::proto::Expression_Nested_Struct* struct_);
  ::substrait::proto::Expression_Nested_Struct* unsafe_arena_release_struct_();

  // .substrait.proto.Expression.Nested.List list = 4;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::substrait::proto::Expression_Nested_List& list() const;
  ::substrait::proto::Expression_Nested_List* release_list();
  ::substrait::proto::Expression_Nested_List* mutable_list();
  void set_allocated_list(::substrait::proto::Expression_Nested_List* list);
  private:
  const ::substrait::proto::Expression_Nested_List& _internal_list() const;
  ::substrait::proto::Expression_Nested_List* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::proto::Expression_Nested_List* list);
  ::substrait::proto::Expression_Nested_List* unsafe_arena_release_list();

  // .substrait.proto.Expression.Nested.Map map = 5;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::substrait::proto::Expression_Nested_Map& map() const;
  ::substrait::proto::Expression_Nested_Map* release_map();
  ::substrait::proto::Expression_Nested_Map* mutable_map();
  void set_allocated_map(::substrait::proto::Expression_Nested_Map* map);
  private:
  const ::substrait::proto::Expression_Nested_Map& _internal_map() const;
  ::substrait::proto::Expression_Nested_Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::proto::Expression_Nested_Map* map);
  ::substrait::proto::Expression_Nested_Map* unsafe_arena_release_map();

  void clear_nested_type();
  NestedTypeCase nested_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Nested)
 private:
  class _Internal;
  void set_has_struct_();
  void set_has_list();
  void set_has_map();

  inline bool has_nested_type() const;
  inline void clear_has_nested_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool nullable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_variation_reference_;
  union NestedTypeUnion {
    NestedTypeUnion() {}
    ::substrait::proto::Expression_Nested_Struct* struct__;
    ::substrait::proto::Expression_Nested_List* list_;
    ::substrait::proto::Expression_Nested_Map* map_;
  } nested_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_ScalarFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.ScalarFunction) */ {
 public:
  inline Expression_ScalarFunction() : Expression_ScalarFunction(nullptr) {};
  virtual ~Expression_ScalarFunction();

  Expression_ScalarFunction(const Expression_ScalarFunction& from);
  Expression_ScalarFunction(Expression_ScalarFunction&& from) noexcept
    : Expression_ScalarFunction() {
    *this = ::std::move(from);
  }

  inline Expression_ScalarFunction& operator=(const Expression_ScalarFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ScalarFunction& operator=(Expression_ScalarFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_ScalarFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_ScalarFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_ScalarFunction*>(
               &_Expression_ScalarFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(Expression_ScalarFunction& a, Expression_ScalarFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ScalarFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ScalarFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_ScalarFunction* New() const final {
    return CreateMaybeMessage<Expression_ScalarFunction>(nullptr);
  }

  Expression_ScalarFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_ScalarFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_ScalarFunction& from);
  void MergeFrom(const Expression_ScalarFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ScalarFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.ScalarFunction";
  }
  protected:
  explicit Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kArgumentsFieldNumber = 4,
    kOptionsFieldNumber = 5,
    kOutputTypeFieldNumber = 3,
    kFunctionReferenceFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_args();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* mutable_args(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_args();
  private:
  const ::substrait::proto::Expression& _internal_args(int index) const;
  ::substrait::proto::Expression* _internal_add_args();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression& args(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* add_args();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      args() const;

  // repeated .substrait.proto.FunctionArgument arguments = 4;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::substrait::proto::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::proto::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::proto::FunctionArgument* _internal_add_arguments();
  public:
  const ::substrait::proto::FunctionArgument& arguments(int index) const;
  ::substrait::proto::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
      arguments() const;

  // repeated .substrait.proto.FunctionOption options = 5;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::proto::FunctionOption& _internal_options(int index) const;
  ::substrait::proto::FunctionOption* _internal_add_options();
  public:
  const ::substrait::proto::FunctionOption& options(int index) const;
  ::substrait::proto::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
      options() const;

  // .substrait.proto.Type output_type = 3;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::substrait::proto::Type& output_type() const;
  ::substrait::proto::Type* release_output_type();
  ::substrait::proto::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::proto::Type* output_type);
  private:
  const ::substrait::proto::Type& _internal_output_type() const;
  ::substrait::proto::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::proto::Type* output_type);
  ::substrait::proto::Type* unsafe_arena_release_output_type();

  // uint32 function_reference = 1;
  void clear_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference() const;
  void set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_reference() const;
  void _internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.ScalarFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument > arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption > options_;
  ::substrait::proto::Type* output_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Preceding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction.Bound.Preceding) */ {
 public:
  inline Expression_WindowFunction_Bound_Preceding() : Expression_WindowFunction_Bound_Preceding(nullptr) {};
  virtual ~Expression_WindowFunction_Bound_Preceding();

  Expression_WindowFunction_Bound_Preceding(const Expression_WindowFunction_Bound_Preceding& from);
  Expression_WindowFunction_Bound_Preceding(Expression_WindowFunction_Bound_Preceding&& from) noexcept
    : Expression_WindowFunction_Bound_Preceding() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Preceding& operator=(const Expression_WindowFunction_Bound_Preceding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Preceding& operator=(Expression_WindowFunction_Bound_Preceding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction_Bound_Preceding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction_Bound_Preceding* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Preceding*>(
               &_Expression_WindowFunction_Bound_Preceding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Expression_WindowFunction_Bound_Preceding& a, Expression_WindowFunction_Bound_Preceding& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Preceding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Preceding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction_Bound_Preceding* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Preceding>(nullptr);
  }

  Expression_WindowFunction_Bound_Preceding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Preceding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction_Bound_Preceding& from);
  void MergeFrom(const Expression_WindowFunction_Bound_Preceding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_Preceding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction.Bound.Preceding";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction.Bound.Preceding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Following PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction.Bound.Following) */ {
 public:
  inline Expression_WindowFunction_Bound_Following() : Expression_WindowFunction_Bound_Following(nullptr) {};
  virtual ~Expression_WindowFunction_Bound_Following();

  Expression_WindowFunction_Bound_Following(const Expression_WindowFunction_Bound_Following& from);
  Expression_WindowFunction_Bound_Following(Expression_WindowFunction_Bound_Following&& from) noexcept
    : Expression_WindowFunction_Bound_Following() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Following& operator=(const Expression_WindowFunction_Bound_Following& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Following& operator=(Expression_WindowFunction_Bound_Following&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction_Bound_Following& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction_Bound_Following* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Following*>(
               &_Expression_WindowFunction_Bound_Following_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Expression_WindowFunction_Bound_Following& a, Expression_WindowFunction_Bound_Following& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Following* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Following* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction_Bound_Following* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Following>(nullptr);
  }

  Expression_WindowFunction_Bound_Following* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Following>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction_Bound_Following& from);
  void MergeFrom(const Expression_WindowFunction_Bound_Following& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_Following* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction.Bound.Following";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction.Bound.Following)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_CurrentRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction.Bound.CurrentRow) */ {
 public:
  inline Expression_WindowFunction_Bound_CurrentRow() : Expression_WindowFunction_Bound_CurrentRow(nullptr) {};
  virtual ~Expression_WindowFunction_Bound_CurrentRow();

  Expression_WindowFunction_Bound_CurrentRow(const Expression_WindowFunction_Bound_CurrentRow& from);
  Expression_WindowFunction_Bound_CurrentRow(Expression_WindowFunction_Bound_CurrentRow&& from) noexcept
    : Expression_WindowFunction_Bound_CurrentRow() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_CurrentRow& operator=(const Expression_WindowFunction_Bound_CurrentRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_CurrentRow& operator=(Expression_WindowFunction_Bound_CurrentRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction_Bound_CurrentRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction_Bound_CurrentRow* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_CurrentRow*>(
               &_Expression_WindowFunction_Bound_CurrentRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Expression_WindowFunction_Bound_CurrentRow& a, Expression_WindowFunction_Bound_CurrentRow& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_CurrentRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_CurrentRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction_Bound_CurrentRow* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_CurrentRow>(nullptr);
  }

  Expression_WindowFunction_Bound_CurrentRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_CurrentRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction_Bound_CurrentRow& from);
  void MergeFrom(const Expression_WindowFunction_Bound_CurrentRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_CurrentRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction.Bound.CurrentRow";
  }
  protected:
  explicit Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction.Bound.CurrentRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Unbounded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction.Bound.Unbounded) */ {
 public:
  inline Expression_WindowFunction_Bound_Unbounded() : Expression_WindowFunction_Bound_Unbounded(nullptr) {};
  virtual ~Expression_WindowFunction_Bound_Unbounded();

  Expression_WindowFunction_Bound_Unbounded(const Expression_WindowFunction_Bound_Unbounded& from);
  Expression_WindowFunction_Bound_Unbounded(Expression_WindowFunction_Bound_Unbounded&& from) noexcept
    : Expression_WindowFunction_Bound_Unbounded() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Unbounded& operator=(const Expression_WindowFunction_Bound_Unbounded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Unbounded& operator=(Expression_WindowFunction_Bound_Unbounded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction_Bound_Unbounded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction_Bound_Unbounded* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Unbounded*>(
               &_Expression_WindowFunction_Bound_Unbounded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Expression_WindowFunction_Bound_Unbounded& a, Expression_WindowFunction_Bound_Unbounded& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Unbounded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Unbounded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction_Bound_Unbounded* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Unbounded>(nullptr);
  }

  Expression_WindowFunction_Bound_Unbounded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Unbounded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction_Bound_Unbounded& from);
  void MergeFrom(const Expression_WindowFunction_Bound_Unbounded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_Unbounded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction.Bound.Unbounded";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction.Bound.Unbounded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction_Bound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction.Bound) */ {
 public:
  inline Expression_WindowFunction_Bound() : Expression_WindowFunction_Bound(nullptr) {};
  virtual ~Expression_WindowFunction_Bound();

  Expression_WindowFunction_Bound(const Expression_WindowFunction_Bound& from);
  Expression_WindowFunction_Bound(Expression_WindowFunction_Bound&& from) noexcept
    : Expression_WindowFunction_Bound() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound& operator=(const Expression_WindowFunction_Bound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound& operator=(Expression_WindowFunction_Bound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction_Bound& default_instance();

  enum KindCase {
    kPreceding = 1,
    kFollowing = 2,
    kCurrentRow = 3,
    kUnbounded = 4,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction_Bound* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound*>(
               &_Expression_WindowFunction_Bound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Expression_WindowFunction_Bound& a, Expression_WindowFunction_Bound& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction_Bound* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound>(nullptr);
  }

  Expression_WindowFunction_Bound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction_Bound& from);
  void MergeFrom(const Expression_WindowFunction_Bound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction.Bound";
  }
  protected:
  explicit Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_WindowFunction_Bound_Preceding Preceding;
  typedef Expression_WindowFunction_Bound_Following Following;
  typedef Expression_WindowFunction_Bound_CurrentRow CurrentRow;
  typedef Expression_WindowFunction_Bound_Unbounded Unbounded;

  // accessors -------------------------------------------------------

  enum : int {
    kPrecedingFieldNumber = 1,
    kFollowingFieldNumber = 2,
    kCurrentRowFieldNumber = 3,
    kUnboundedFieldNumber = 4,
  };
  // .substrait.proto.Expression.WindowFunction.Bound.Preceding preceding = 1;
  bool has_preceding() const;
  private:
  bool _internal_has_preceding() const;
  public:
  void clear_preceding();
  const ::substrait::proto::Expression_WindowFunction_Bound_Preceding& preceding() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Preceding* release_preceding();
  ::substrait::proto::Expression_WindowFunction_Bound_Preceding* mutable_preceding();
  void set_allocated_preceding(::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound_Preceding& _internal_preceding() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Preceding* _internal_mutable_preceding();
  public:
  void unsafe_arena_set_allocated_preceding(
      ::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding);
  ::substrait::proto::Expression_WindowFunction_Bound_Preceding* unsafe_arena_release_preceding();

  // .substrait.proto.Expression.WindowFunction.Bound.Following following = 2;
  bool has_following() const;
  private:
  bool _internal_has_following() const;
  public:
  void clear_following();
  const ::substrait::proto::Expression_WindowFunction_Bound_Following& following() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Following* release_following();
  ::substrait::proto::Expression_WindowFunction_Bound_Following* mutable_following();
  void set_allocated_following(::substrait::proto::Expression_WindowFunction_Bound_Following* following);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound_Following& _internal_following() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Following* _internal_mutable_following();
  public:
  void unsafe_arena_set_allocated_following(
      ::substrait::proto::Expression_WindowFunction_Bound_Following* following);
  ::substrait::proto::Expression_WindowFunction_Bound_Following* unsafe_arena_release_following();

  // .substrait.proto.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
  bool has_current_row() const;
  private:
  bool _internal_has_current_row() const;
  public:
  void clear_current_row();
  const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow& current_row() const;
  ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* release_current_row();
  ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* mutable_current_row();
  void set_allocated_current_row(::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow& _internal_current_row() const;
  ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* _internal_mutable_current_row();
  public:
  void unsafe_arena_set_allocated_current_row(
      ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row);
  ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* unsafe_arena_release_current_row();

  // .substrait.proto.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
  bool has_unbounded() const;
  private:
  bool _internal_has_unbounded() const;
  public:
  void clear_unbounded();
  const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded& unbounded() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* release_unbounded();
  ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* mutable_unbounded();
  void set_allocated_unbounded(::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded& _internal_unbounded() const;
  ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* _internal_mutable_unbounded();
  public:
  void unsafe_arena_set_allocated_unbounded(
      ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded);
  ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unsafe_arena_release_unbounded();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction.Bound)
 private:
  class _Internal;
  void set_has_preceding();
  void set_has_following();
  void set_has_current_row();
  void set_has_unbounded();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding_;
    ::substrait::proto::Expression_WindowFunction_Bound_Following* following_;
    ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row_;
    ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_WindowFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.WindowFunction) */ {
 public:
  inline Expression_WindowFunction() : Expression_WindowFunction(nullptr) {};
  virtual ~Expression_WindowFunction();

  Expression_WindowFunction(const Expression_WindowFunction& from);
  Expression_WindowFunction(Expression_WindowFunction&& from) noexcept
    : Expression_WindowFunction() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction& operator=(const Expression_WindowFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction& operator=(Expression_WindowFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_WindowFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_WindowFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction*>(
               &_Expression_WindowFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Expression_WindowFunction& a, Expression_WindowFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_WindowFunction* New() const final {
    return CreateMaybeMessage<Expression_WindowFunction>(nullptr);
  }

  Expression_WindowFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_WindowFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_WindowFunction& from);
  void MergeFrom(const Expression_WindowFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.WindowFunction";
  }
  protected:
  explicit Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_WindowFunction_Bound Bound;

  typedef Expression_WindowFunction_BoundsType BoundsType;
  static constexpr BoundsType BOUNDS_TYPE_UNSPECIFIED =
    Expression_WindowFunction_BoundsType_BOUNDS_TYPE_UNSPECIFIED;
  static constexpr BoundsType BOUNDS_TYPE_ROWS =
    Expression_WindowFunction_BoundsType_BOUNDS_TYPE_ROWS;
  static constexpr BoundsType BOUNDS_TYPE_RANGE =
    Expression_WindowFunction_BoundsType_BOUNDS_TYPE_RANGE;
  static inline bool BoundsType_IsValid(int value) {
    return Expression_WindowFunction_BoundsType_IsValid(value);
  }
  static constexpr BoundsType BoundsType_MIN =
    Expression_WindowFunction_BoundsType_BoundsType_MIN;
  static constexpr BoundsType BoundsType_MAX =
    Expression_WindowFunction_BoundsType_BoundsType_MAX;
  static constexpr int BoundsType_ARRAYSIZE =
    Expression_WindowFunction_BoundsType_BoundsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BoundsType_descriptor() {
    return Expression_WindowFunction_BoundsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BoundsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BoundsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BoundsType_Name.");
    return Expression_WindowFunction_BoundsType_Name(enum_t_value);
  }
  static inline bool BoundsType_Parse(const std::string& name,
      BoundsType* value) {
    return Expression_WindowFunction_BoundsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 2,
    kSortsFieldNumber = 3,
    kArgsFieldNumber = 8,
    kArgumentsFieldNumber = 9,
    kOptionsFieldNumber = 11,
    kUpperBoundFieldNumber = 4,
    kLowerBoundFieldNumber = 5,
    kOutputTypeFieldNumber = 7,
    kFunctionReferenceFieldNumber = 1,
    kPhaseFieldNumber = 6,
    kInvocationFieldNumber = 10,
    kBoundsTypeFieldNumber = 12,
  };
  // repeated .substrait.proto.Expression partitions = 2;
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;
  public:
  void clear_partitions();
  ::substrait::proto::Expression* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_partitions();
  private:
  const ::substrait::proto::Expression& _internal_partitions(int index) const;
  ::substrait::proto::Expression* _internal_add_partitions();
  public:
  const ::substrait::proto::Expression& partitions(int index) const;
  ::substrait::proto::Expression* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      partitions() const;

  // repeated .substrait.proto.SortField sorts = 3;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::substrait::proto::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
      mutable_sorts();
  private:
  const ::substrait::proto::SortField& _internal_sorts(int index) const;
  ::substrait::proto::SortField* _internal_add_sorts();
  public:
  const ::substrait::proto::SortField& sorts(int index) const;
  ::substrait::proto::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
      sorts() const;

  // repeated .substrait.proto.Expression args = 8 [deprecated = true];
  PROTOBUF_DEPRECATED int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_args();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* mutable_args(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_args();
  private:
  const ::substrait::proto::Expression& _internal_args(int index) const;
  ::substrait::proto::Expression* _internal_add_args();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression& args(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* add_args();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      args() const;

  // repeated .substrait.proto.FunctionArgument arguments = 9;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::substrait::proto::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::proto::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::proto::FunctionArgument* _internal_add_arguments();
  public:
  const ::substrait::proto::FunctionArgument& arguments(int index) const;
  ::substrait::proto::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
      arguments() const;

  // repeated .substrait.proto.FunctionOption options = 11;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::proto::FunctionOption& _internal_options(int index) const;
  ::substrait::proto::FunctionOption* _internal_add_options();
  public:
  const ::substrait::proto::FunctionOption& options(int index) const;
  ::substrait::proto::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
      options() const;

  // .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  const ::substrait::proto::Expression_WindowFunction_Bound& upper_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* release_upper_bound();
  ::substrait::proto::Expression_WindowFunction_Bound* mutable_upper_bound();
  void set_allocated_upper_bound(::substrait::proto::Expression_WindowFunction_Bound* upper_bound);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound& _internal_upper_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* _internal_mutable_upper_bound();
  public:
  void unsafe_arena_set_allocated_upper_bound(
      ::substrait::proto::Expression_WindowFunction_Bound* upper_bound);
  ::substrait::proto::Expression_WindowFunction_Bound* unsafe_arena_release_upper_bound();

  // .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
  bool has_lower_bound() const;
  private:
  bool _internal_has_lower_bound() const;
  public:
  void clear_lower_bound();
  const ::substrait::proto::Expression_WindowFunction_Bound& lower_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* release_lower_bound();
  ::substrait::proto::Expression_WindowFunction_Bound* mutable_lower_bound();
  void set_allocated_lower_bound(::substrait::proto::Expression_WindowFunction_Bound* lower_bound);
  private:
  const ::substrait::proto::Expression_WindowFunction_Bound& _internal_lower_bound() const;
  ::substrait::proto::Expression_WindowFunction_Bound* _internal_mutable_lower_bound();
  public:
  void unsafe_arena_set_allocated_lower_bound(
      ::substrait::proto::Expression_WindowFunction_Bound* lower_bound);
  ::substrait::proto::Expression_WindowFunction_Bound* unsafe_arena_release_lower_bound();

  // .substrait.proto.Type output_type = 7;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::substrait::proto::Type& output_type() const;
  ::substrait::proto::Type* release_output_type();
  ::substrait::proto::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::proto::Type* output_type);
  private:
  const ::substrait::proto::Type& _internal_output_type() const;
  ::substrait::proto::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::proto::Type* output_type);
  ::substrait::proto::Type* unsafe_arena_release_output_type();

  // uint32 function_reference = 1;
  void clear_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference() const;
  void set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_reference() const;
  void _internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .substrait.proto.AggregationPhase phase = 6;
  void clear_phase();
  ::substrait::proto::AggregationPhase phase() const;
  void set_phase(::substrait::proto::AggregationPhase value);
  private:
  ::substrait::proto::AggregationPhase _internal_phase() const;
  void _internal_set_phase(::substrait::proto::AggregationPhase value);
  public:

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
  void clear_invocation();
  ::substrait::proto::AggregateFunction_AggregationInvocation invocation() const;
  void set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  private:
  ::substrait::proto::AggregateFunction_AggregationInvocation _internal_invocation() const;
  void _internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  public:

  // .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
  void clear_bounds_type();
  ::substrait::proto::Expression_WindowFunction_BoundsType bounds_type() const;
  void set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value);
  private:
  ::substrait::proto::Expression_WindowFunction_BoundsType _internal_bounds_type() const;
  void _internal_set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.WindowFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > partitions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField > sorts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument > arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption > options_;
  ::substrait::proto::Expression_WindowFunction_Bound* upper_bound_;
  ::substrait::proto::Expression_WindowFunction_Bound* lower_bound_;
  ::substrait::proto::Type* output_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference_;
  int phase_;
  int invocation_;
  int bounds_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_IfThen_IfClause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.IfThen.IfClause) */ {
 public:
  inline Expression_IfThen_IfClause() : Expression_IfThen_IfClause(nullptr) {};
  virtual ~Expression_IfThen_IfClause();

  Expression_IfThen_IfClause(const Expression_IfThen_IfClause& from);
  Expression_IfThen_IfClause(Expression_IfThen_IfClause&& from) noexcept
    : Expression_IfThen_IfClause() {
    *this = ::std::move(from);
  }

  inline Expression_IfThen_IfClause& operator=(const Expression_IfThen_IfClause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_IfThen_IfClause& operator=(Expression_IfThen_IfClause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_IfThen_IfClause& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_IfThen_IfClause* internal_default_instance() {
    return reinterpret_cast<const Expression_IfThen_IfClause*>(
               &_Expression_IfThen_IfClause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Expression_IfThen_IfClause& a, Expression_IfThen_IfClause& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_IfThen_IfClause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_IfThen_IfClause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_IfThen_IfClause* New() const final {
    return CreateMaybeMessage<Expression_IfThen_IfClause>(nullptr);
  }

  Expression_IfThen_IfClause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_IfThen_IfClause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_IfThen_IfClause& from);
  void MergeFrom(const Expression_IfThen_IfClause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_IfThen_IfClause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.IfThen.IfClause";
  }
  protected:
  explicit Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfFieldNumber = 1,
    kThenFieldNumber = 2,
  };
  // .substrait.proto.Expression if = 1;
  bool has_if_() const;
  private:
  bool _internal_has_if_() const;
  public:
  void clear_if_();
  const ::substrait::proto::Expression& if_() const;
  ::substrait::proto::Expression* release_if_();
  ::substrait::proto::Expression* mutable_if_();
  void set_allocated_if_(::substrait::proto::Expression* if_);
  private:
  const ::substrait::proto::Expression& _internal_if_() const;
  ::substrait::proto::Expression* _internal_mutable_if_();
  public:
  void unsafe_arena_set_allocated_if_(
      ::substrait::proto::Expression* if_);
  ::substrait::proto::Expression* unsafe_arena_release_if_();

  // .substrait.proto.Expression then = 2;
  bool has_then() const;
  private:
  bool _internal_has_then() const;
  public:
  void clear_then();
  const ::substrait::proto::Expression& then() const;
  ::substrait::proto::Expression* release_then();
  ::substrait::proto::Expression* mutable_then();
  void set_allocated_then(::substrait::proto::Expression* then);
  private:
  const ::substrait::proto::Expression& _internal_then() const;
  ::substrait::proto::Expression* _internal_mutable_then();
  public:
  void unsafe_arena_set_allocated_then(
      ::substrait::proto::Expression* then);
  ::substrait::proto::Expression* unsafe_arena_release_then();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.IfThen.IfClause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* if__;
  ::substrait::proto::Expression* then_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_IfThen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.IfThen) */ {
 public:
  inline Expression_IfThen() : Expression_IfThen(nullptr) {};
  virtual ~Expression_IfThen();

  Expression_IfThen(const Expression_IfThen& from);
  Expression_IfThen(Expression_IfThen&& from) noexcept
    : Expression_IfThen() {
    *this = ::std::move(from);
  }

  inline Expression_IfThen& operator=(const Expression_IfThen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_IfThen& operator=(Expression_IfThen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_IfThen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_IfThen* internal_default_instance() {
    return reinterpret_cast<const Expression_IfThen*>(
               &_Expression_IfThen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Expression_IfThen& a, Expression_IfThen& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_IfThen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_IfThen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_IfThen* New() const final {
    return CreateMaybeMessage<Expression_IfThen>(nullptr);
  }

  Expression_IfThen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_IfThen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_IfThen& from);
  void MergeFrom(const Expression_IfThen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_IfThen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.IfThen";
  }
  protected:
  explicit Expression_IfThen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_IfThen_IfClause IfClause;

  // accessors -------------------------------------------------------

  enum : int {
    kIfsFieldNumber = 1,
    kElseFieldNumber = 2,
  };
  // repeated .substrait.proto.Expression.IfThen.IfClause ifs = 1;
  int ifs_size() const;
  private:
  int _internal_ifs_size() const;
  public:
  void clear_ifs();
  ::substrait::proto::Expression_IfThen_IfClause* mutable_ifs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_IfThen_IfClause >*
      mutable_ifs();
  private:
  const ::substrait::proto::Expression_IfThen_IfClause& _internal_ifs(int index) const;
  ::substrait::proto::Expression_IfThen_IfClause* _internal_add_ifs();
  public:
  const ::substrait::proto::Expression_IfThen_IfClause& ifs(int index) const;
  ::substrait::proto::Expression_IfThen_IfClause* add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_IfThen_IfClause >&
      ifs() const;

  // .substrait.proto.Expression else = 2;
  bool has_else_() const;
  private:
  bool _internal_has_else_() const;
  public:
  void clear_else_();
  const ::substrait::proto::Expression& else_() const;
  ::substrait::proto::Expression* release_else_();
  ::substrait::proto::Expression* mutable_else_();
  void set_allocated_else_(::substrait::proto::Expression* else_);
  private:
  const ::substrait::proto::Expression& _internal_else_() const;
  ::substrait::proto::Expression* _internal_mutable_else_();
  public:
  void unsafe_arena_set_allocated_else_(
      ::substrait::proto::Expression* else_);
  ::substrait::proto::Expression* unsafe_arena_release_else_();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.IfThen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_IfThen_IfClause > ifs_;
  ::substrait::proto::Expression* else__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Cast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Cast) */ {
 public:
  inline Expression_Cast() : Expression_Cast(nullptr) {};
  virtual ~Expression_Cast();

  Expression_Cast(const Expression_Cast& from);
  Expression_Cast(Expression_Cast&& from) noexcept
    : Expression_Cast() {
    *this = ::std::move(from);
  }

  inline Expression_Cast& operator=(const Expression_Cast& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Cast& operator=(Expression_Cast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Cast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Cast* internal_default_instance() {
    return reinterpret_cast<const Expression_Cast*>(
               &_Expression_Cast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Expression_Cast& a, Expression_Cast& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Cast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Cast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Cast* New() const final {
    return CreateMaybeMessage<Expression_Cast>(nullptr);
  }

  Expression_Cast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Cast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Cast& from);
  void MergeFrom(const Expression_Cast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Cast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Cast";
  }
  protected:
  explicit Expression_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Cast_FailureBehavior FailureBehavior;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_UNSPECIFIED =
    Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_UNSPECIFIED;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_RETURN_NULL =
    Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_RETURN_NULL;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_THROW_EXCEPTION =
    Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_THROW_EXCEPTION;
  static inline bool FailureBehavior_IsValid(int value) {
    return Expression_Cast_FailureBehavior_IsValid(value);
  }
  static constexpr FailureBehavior FailureBehavior_MIN =
    Expression_Cast_FailureBehavior_FailureBehavior_MIN;
  static constexpr FailureBehavior FailureBehavior_MAX =
    Expression_Cast_FailureBehavior_FailureBehavior_MAX;
  static constexpr int FailureBehavior_ARRAYSIZE =
    Expression_Cast_FailureBehavior_FailureBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailureBehavior_descriptor() {
    return Expression_Cast_FailureBehavior_descriptor();
  }
  template<typename T>
  static inline const std::string& FailureBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailureBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailureBehavior_Name.");
    return Expression_Cast_FailureBehavior_Name(enum_t_value);
  }
  static inline bool FailureBehavior_Parse(const std::string& name,
      FailureBehavior* value) {
    return Expression_Cast_FailureBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInputFieldNumber = 2,
    kFailureBehaviorFieldNumber = 3,
  };
  // .substrait.proto.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::substrait::proto::Type& type() const;
  ::substrait::proto::Type* release_type();
  ::substrait::proto::Type* mutable_type();
  void set_allocated_type(::substrait::proto::Type* type);
  private:
  const ::substrait::proto::Type& _internal_type() const;
  ::substrait::proto::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::substrait::proto::Type* type);
  ::substrait::proto::Type* unsafe_arena_release_type();

  // .substrait.proto.Expression input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Expression& input() const;
  ::substrait::proto::Expression* release_input();
  ::substrait::proto::Expression* mutable_input();
  void set_allocated_input(::substrait::proto::Expression* input);
  private:
  const ::substrait::proto::Expression& _internal_input() const;
  ::substrait::proto::Expression* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Expression* input);
  ::substrait::proto::Expression* unsafe_arena_release_input();

  // .substrait.proto.Expression.Cast.FailureBehavior failure_behavior = 3;
  void clear_failure_behavior();
  ::substrait::proto::Expression_Cast_FailureBehavior failure_behavior() const;
  void set_failure_behavior(::substrait::proto::Expression_Cast_FailureBehavior value);
  private:
  ::substrait::proto::Expression_Cast_FailureBehavior _internal_failure_behavior() const;
  void _internal_set_failure_behavior(::substrait::proto::Expression_Cast_FailureBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Cast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Type* type_;
  ::substrait::proto::Expression* input_;
  int failure_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_SwitchExpression_IfValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.SwitchExpression.IfValue) */ {
 public:
  inline Expression_SwitchExpression_IfValue() : Expression_SwitchExpression_IfValue(nullptr) {};
  virtual ~Expression_SwitchExpression_IfValue();

  Expression_SwitchExpression_IfValue(const Expression_SwitchExpression_IfValue& from);
  Expression_SwitchExpression_IfValue(Expression_SwitchExpression_IfValue&& from) noexcept
    : Expression_SwitchExpression_IfValue() {
    *this = ::std::move(from);
  }

  inline Expression_SwitchExpression_IfValue& operator=(const Expression_SwitchExpression_IfValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SwitchExpression_IfValue& operator=(Expression_SwitchExpression_IfValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_SwitchExpression_IfValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_SwitchExpression_IfValue* internal_default_instance() {
    return reinterpret_cast<const Expression_SwitchExpression_IfValue*>(
               &_Expression_SwitchExpression_IfValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Expression_SwitchExpression_IfValue& a, Expression_SwitchExpression_IfValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SwitchExpression_IfValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SwitchExpression_IfValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_SwitchExpression_IfValue* New() const final {
    return CreateMaybeMessage<Expression_SwitchExpression_IfValue>(nullptr);
  }

  Expression_SwitchExpression_IfValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_SwitchExpression_IfValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_SwitchExpression_IfValue& from);
  void MergeFrom(const Expression_SwitchExpression_IfValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SwitchExpression_IfValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.SwitchExpression.IfValue";
  }
  protected:
  explicit Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfFieldNumber = 1,
    kThenFieldNumber = 2,
  };
  // .substrait.proto.Expression.Literal if = 1;
  bool has_if_() const;
  private:
  bool _internal_has_if_() const;
  public:
  void clear_if_();
  const ::substrait::proto::Expression_Literal& if_() const;
  ::substrait::proto::Expression_Literal* release_if_();
  ::substrait::proto::Expression_Literal* mutable_if_();
  void set_allocated_if_(::substrait::proto::Expression_Literal* if_);
  private:
  const ::substrait::proto::Expression_Literal& _internal_if_() const;
  ::substrait::proto::Expression_Literal* _internal_mutable_if_();
  public:
  void unsafe_arena_set_allocated_if_(
      ::substrait::proto::Expression_Literal* if_);
  ::substrait::proto::Expression_Literal* unsafe_arena_release_if_();

  // .substrait.proto.Expression then = 2;
  bool has_then() const;
  private:
  bool _internal_has_then() const;
  public:
  void clear_then();
  const ::substrait::proto::Expression& then() const;
  ::substrait::proto::Expression* release_then();
  ::substrait::proto::Expression* mutable_then();
  void set_allocated_then(::substrait::proto::Expression* then);
  private:
  const ::substrait::proto::Expression& _internal_then() const;
  ::substrait::proto::Expression* _internal_mutable_then();
  public:
  void unsafe_arena_set_allocated_then(
      ::substrait::proto::Expression* then);
  ::substrait::proto::Expression* unsafe_arena_release_then();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.SwitchExpression.IfValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_Literal* if__;
  ::substrait::proto::Expression* then_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_SwitchExpression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.SwitchExpression) */ {
 public:
  inline Expression_SwitchExpression() : Expression_SwitchExpression(nullptr) {};
  virtual ~Expression_SwitchExpression();

  Expression_SwitchExpression(const Expression_SwitchExpression& from);
  Expression_SwitchExpression(Expression_SwitchExpression&& from) noexcept
    : Expression_SwitchExpression() {
    *this = ::std::move(from);
  }

  inline Expression_SwitchExpression& operator=(const Expression_SwitchExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SwitchExpression& operator=(Expression_SwitchExpression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_SwitchExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_SwitchExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_SwitchExpression*>(
               &_Expression_SwitchExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Expression_SwitchExpression& a, Expression_SwitchExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SwitchExpression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SwitchExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_SwitchExpression* New() const final {
    return CreateMaybeMessage<Expression_SwitchExpression>(nullptr);
  }

  Expression_SwitchExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_SwitchExpression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_SwitchExpression& from);
  void MergeFrom(const Expression_SwitchExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SwitchExpression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.SwitchExpression";
  }
  protected:
  explicit Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_SwitchExpression_IfValue IfValue;

  // accessors -------------------------------------------------------

  enum : int {
    kIfsFieldNumber = 1,
    kElseFieldNumber = 2,
    kMatchFieldNumber = 3,
  };
  // repeated .substrait.proto.Expression.SwitchExpression.IfValue ifs = 1;
  int ifs_size() const;
  private:
  int _internal_ifs_size() const;
  public:
  void clear_ifs();
  ::substrait::proto::Expression_SwitchExpression_IfValue* mutable_ifs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_SwitchExpression_IfValue >*
      mutable_ifs();
  private:
  const ::substrait::proto::Expression_SwitchExpression_IfValue& _internal_ifs(int index) const;
  ::substrait::proto::Expression_SwitchExpression_IfValue* _internal_add_ifs();
  public:
  const ::substrait::proto::Expression_SwitchExpression_IfValue& ifs(int index) const;
  ::substrait::proto::Expression_SwitchExpression_IfValue* add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_SwitchExpression_IfValue >&
      ifs() const;

  // .substrait.proto.Expression else = 2;
  bool has_else_() const;
  private:
  bool _internal_has_else_() const;
  public:
  void clear_else_();
  const ::substrait::proto::Expression& else_() const;
  ::substrait::proto::Expression* release_else_();
  ::substrait::proto::Expression* mutable_else_();
  void set_allocated_else_(::substrait::proto::Expression* else_);
  private:
  const ::substrait::proto::Expression& _internal_else_() const;
  ::substrait::proto::Expression* _internal_mutable_else_();
  public:
  void unsafe_arena_set_allocated_else_(
      ::substrait::proto::Expression* else_);
  ::substrait::proto::Expression* unsafe_arena_release_else_();

  // .substrait.proto.Expression match = 3;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::substrait::proto::Expression& match() const;
  ::substrait::proto::Expression* release_match();
  ::substrait::proto::Expression* mutable_match();
  void set_allocated_match(::substrait::proto::Expression* match);
  private:
  const ::substrait::proto::Expression& _internal_match() const;
  ::substrait::proto::Expression* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::substrait::proto::Expression* match);
  ::substrait::proto::Expression* unsafe_arena_release_match();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.SwitchExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_SwitchExpression_IfValue > ifs_;
  ::substrait::proto::Expression* else__;
  ::substrait::proto::Expression* match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_SingularOrList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.SingularOrList) */ {
 public:
  inline Expression_SingularOrList() : Expression_SingularOrList(nullptr) {};
  virtual ~Expression_SingularOrList();

  Expression_SingularOrList(const Expression_SingularOrList& from);
  Expression_SingularOrList(Expression_SingularOrList&& from) noexcept
    : Expression_SingularOrList() {
    *this = ::std::move(from);
  }

  inline Expression_SingularOrList& operator=(const Expression_SingularOrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SingularOrList& operator=(Expression_SingularOrList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_SingularOrList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_SingularOrList* internal_default_instance() {
    return reinterpret_cast<const Expression_SingularOrList*>(
               &_Expression_SingularOrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Expression_SingularOrList& a, Expression_SingularOrList& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SingularOrList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SingularOrList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_SingularOrList* New() const final {
    return CreateMaybeMessage<Expression_SingularOrList>(nullptr);
  }

  Expression_SingularOrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_SingularOrList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_SingularOrList& from);
  void MergeFrom(const Expression_SingularOrList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SingularOrList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.SingularOrList";
  }
  protected:
  explicit Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression options = 2;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::Expression* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_options();
  private:
  const ::substrait::proto::Expression& _internal_options(int index) const;
  ::substrait::proto::Expression* _internal_add_options();
  public:
  const ::substrait::proto::Expression& options(int index) const;
  ::substrait::proto::Expression* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      options() const;

  // .substrait.proto.Expression value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::substrait::proto::Expression& value() const;
  ::substrait::proto::Expression* release_value();
  ::substrait::proto::Expression* mutable_value();
  void set_allocated_value(::substrait::proto::Expression* value);
  private:
  const ::substrait::proto::Expression& _internal_value() const;
  ::substrait::proto::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::proto::Expression* value);
  ::substrait::proto::Expression* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.SingularOrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > options_;
  ::substrait::proto::Expression* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MultiOrList_Record PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MultiOrList.Record) */ {
 public:
  inline Expression_MultiOrList_Record() : Expression_MultiOrList_Record(nullptr) {};
  virtual ~Expression_MultiOrList_Record();

  Expression_MultiOrList_Record(const Expression_MultiOrList_Record& from);
  Expression_MultiOrList_Record(Expression_MultiOrList_Record&& from) noexcept
    : Expression_MultiOrList_Record() {
    *this = ::std::move(from);
  }

  inline Expression_MultiOrList_Record& operator=(const Expression_MultiOrList_Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MultiOrList_Record& operator=(Expression_MultiOrList_Record&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MultiOrList_Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MultiOrList_Record* internal_default_instance() {
    return reinterpret_cast<const Expression_MultiOrList_Record*>(
               &_Expression_MultiOrList_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Expression_MultiOrList_Record& a, Expression_MultiOrList_Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MultiOrList_Record* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MultiOrList_Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MultiOrList_Record* New() const final {
    return CreateMaybeMessage<Expression_MultiOrList_Record>(nullptr);
  }

  Expression_MultiOrList_Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MultiOrList_Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MultiOrList_Record& from);
  void MergeFrom(const Expression_MultiOrList_Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MultiOrList_Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MultiOrList.Record";
  }
  protected:
  explicit Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::substrait::proto::Expression* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_fields();
  private:
  const ::substrait::proto::Expression& _internal_fields(int index) const;
  ::substrait::proto::Expression* _internal_add_fields();
  public:
  const ::substrait::proto::Expression& fields(int index) const;
  ::substrait::proto::Expression* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      fields() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MultiOrList.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MultiOrList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MultiOrList) */ {
 public:
  inline Expression_MultiOrList() : Expression_MultiOrList(nullptr) {};
  virtual ~Expression_MultiOrList();

  Expression_MultiOrList(const Expression_MultiOrList& from);
  Expression_MultiOrList(Expression_MultiOrList&& from) noexcept
    : Expression_MultiOrList() {
    *this = ::std::move(from);
  }

  inline Expression_MultiOrList& operator=(const Expression_MultiOrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MultiOrList& operator=(Expression_MultiOrList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MultiOrList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MultiOrList* internal_default_instance() {
    return reinterpret_cast<const Expression_MultiOrList*>(
               &_Expression_MultiOrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Expression_MultiOrList& a, Expression_MultiOrList& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MultiOrList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MultiOrList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MultiOrList* New() const final {
    return CreateMaybeMessage<Expression_MultiOrList>(nullptr);
  }

  Expression_MultiOrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MultiOrList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MultiOrList& from);
  void MergeFrom(const Expression_MultiOrList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MultiOrList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MultiOrList";
  }
  protected:
  explicit Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_MultiOrList_Record Record;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // repeated .substrait.proto.Expression value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::substrait::proto::Expression* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_value();
  private:
  const ::substrait::proto::Expression& _internal_value(int index) const;
  ::substrait::proto::Expression* _internal_add_value();
  public:
  const ::substrait::proto::Expression& value(int index) const;
  ::substrait::proto::Expression* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      value() const;

  // repeated .substrait.proto.Expression.MultiOrList.Record options = 2;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::Expression_MultiOrList_Record* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MultiOrList_Record >*
      mutable_options();
  private:
  const ::substrait::proto::Expression_MultiOrList_Record& _internal_options(int index) const;
  ::substrait::proto::Expression_MultiOrList_Record* _internal_add_options();
  public:
  const ::substrait::proto::Expression_MultiOrList_Record& options(int index) const;
  ::substrait::proto::Expression_MultiOrList_Record* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MultiOrList_Record >&
      options() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MultiOrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MultiOrList_Record > options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_EmbeddedFunction_PythonPickleFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction) */ {
 public:
  inline Expression_EmbeddedFunction_PythonPickleFunction() : Expression_EmbeddedFunction_PythonPickleFunction(nullptr) {};
  virtual ~Expression_EmbeddedFunction_PythonPickleFunction();

  Expression_EmbeddedFunction_PythonPickleFunction(const Expression_EmbeddedFunction_PythonPickleFunction& from);
  Expression_EmbeddedFunction_PythonPickleFunction(Expression_EmbeddedFunction_PythonPickleFunction&& from) noexcept
    : Expression_EmbeddedFunction_PythonPickleFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction_PythonPickleFunction& operator=(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction_PythonPickleFunction& operator=(Expression_EmbeddedFunction_PythonPickleFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_EmbeddedFunction_PythonPickleFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_EmbeddedFunction_PythonPickleFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction_PythonPickleFunction*>(
               &_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Expression_EmbeddedFunction_PythonPickleFunction& a, Expression_EmbeddedFunction_PythonPickleFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_EmbeddedFunction_PythonPickleFunction* New() const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_PythonPickleFunction>(nullptr);
  }

  Expression_EmbeddedFunction_PythonPickleFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_PythonPickleFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from);
  void MergeFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction_PythonPickleFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrerequisiteFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // repeated string prerequisite = 2;
  int prerequisite_size() const;
  private:
  int _internal_prerequisite_size() const;
  public:
  void clear_prerequisite();
  const std::string& prerequisite(int index) const;
  std::string* mutable_prerequisite(int index);
  void set_prerequisite(int index, const std::string& value);
  void set_prerequisite(int index, std::string&& value);
  void set_prerequisite(int index, const char* value);
  void set_prerequisite(int index, const char* value, size_t size);
  std::string* add_prerequisite();
  void add_prerequisite(const std::string& value);
  void add_prerequisite(std::string&& value);
  void add_prerequisite(const char* value);
  void add_prerequisite(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prerequisite();
  private:
  const std::string& _internal_prerequisite(int index) const;
  std::string* _internal_add_prerequisite();
  public:

  // bytes function = 1;
  void clear_function();
  const std::string& function() const;
  void set_function(const std::string& value);
  void set_function(std::string&& value);
  void set_function(const char* value);
  void set_function(const void* value, size_t size);
  std::string* mutable_function();
  std::string* release_function();
  void set_allocated_function(std::string* function);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_function();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_function(
      std::string* function);
  private:
  const std::string& _internal_function() const;
  void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prerequisite_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_EmbeddedFunction_WebAssemblyFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction) */ {
 public:
  inline Expression_EmbeddedFunction_WebAssemblyFunction() : Expression_EmbeddedFunction_WebAssemblyFunction(nullptr) {};
  virtual ~Expression_EmbeddedFunction_WebAssemblyFunction();

  Expression_EmbeddedFunction_WebAssemblyFunction(const Expression_EmbeddedFunction_WebAssemblyFunction& from);
  Expression_EmbeddedFunction_WebAssemblyFunction(Expression_EmbeddedFunction_WebAssemblyFunction&& from) noexcept
    : Expression_EmbeddedFunction_WebAssemblyFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction_WebAssemblyFunction& operator=(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction_WebAssemblyFunction& operator=(Expression_EmbeddedFunction_WebAssemblyFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_EmbeddedFunction_WebAssemblyFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_EmbeddedFunction_WebAssemblyFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction_WebAssemblyFunction*>(
               &_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(Expression_EmbeddedFunction_WebAssemblyFunction& a, Expression_EmbeddedFunction_WebAssemblyFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_EmbeddedFunction_WebAssemblyFunction* New() const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_WebAssemblyFunction>(nullptr);
  }

  Expression_EmbeddedFunction_WebAssemblyFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_WebAssemblyFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from);
  void MergeFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrerequisiteFieldNumber = 2,
    kScriptFieldNumber = 1,
  };
  // repeated string prerequisite = 2;
  int prerequisite_size() const;
  private:
  int _internal_prerequisite_size() const;
  public:
  void clear_prerequisite();
  const std::string& prerequisite(int index) const;
  std::string* mutable_prerequisite(int index);
  void set_prerequisite(int index, const std::string& value);
  void set_prerequisite(int index, std::string&& value);
  void set_prerequisite(int index, const char* value);
  void set_prerequisite(int index, const char* value, size_t size);
  std::string* add_prerequisite();
  void add_prerequisite(const std::string& value);
  void add_prerequisite(std::string&& value);
  void add_prerequisite(const char* value);
  void add_prerequisite(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prerequisite();
  private:
  const std::string& _internal_prerequisite(int index) const;
  std::string* _internal_add_prerequisite();
  public:

  // bytes script = 1;
  void clear_script();
  const std::string& script() const;
  void set_script(const std::string& value);
  void set_script(std::string&& value);
  void set_script(const char* value);
  void set_script(const void* value, size_t size);
  std::string* mutable_script();
  std::string* release_script();
  void set_allocated_script(std::string* script);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_script();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_script(
      std::string* script);
  private:
  const std::string& _internal_script() const;
  void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prerequisite_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_EmbeddedFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.EmbeddedFunction) */ {
 public:
  inline Expression_EmbeddedFunction() : Expression_EmbeddedFunction(nullptr) {};
  virtual ~Expression_EmbeddedFunction();

  Expression_EmbeddedFunction(const Expression_EmbeddedFunction& from);
  Expression_EmbeddedFunction(Expression_EmbeddedFunction&& from) noexcept
    : Expression_EmbeddedFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction& operator=(const Expression_EmbeddedFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction& operator=(Expression_EmbeddedFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_EmbeddedFunction& default_instance();

  enum KindCase {
    kPythonPickleFunction = 3,
    kWebAssemblyFunction = 4,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_EmbeddedFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction*>(
               &_Expression_EmbeddedFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Expression_EmbeddedFunction& a, Expression_EmbeddedFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_EmbeddedFunction* New() const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction>(nullptr);
  }

  Expression_EmbeddedFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_EmbeddedFunction& from);
  void MergeFrom(const Expression_EmbeddedFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.EmbeddedFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_EmbeddedFunction_PythonPickleFunction PythonPickleFunction;
  typedef Expression_EmbeddedFunction_WebAssemblyFunction WebAssemblyFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 1,
    kOutputTypeFieldNumber = 2,
    kPythonPickleFunctionFieldNumber = 3,
    kWebAssemblyFunctionFieldNumber = 4,
  };
  // repeated .substrait.proto.Expression arguments = 1;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::substrait::proto::Expression* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_arguments();
  private:
  const ::substrait::proto::Expression& _internal_arguments(int index) const;
  ::substrait::proto::Expression* _internal_add_arguments();
  public:
  const ::substrait::proto::Expression& arguments(int index) const;
  ::substrait::proto::Expression* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      arguments() const;

  // .substrait.proto.Type output_type = 2;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::substrait::proto::Type& output_type() const;
  ::substrait::proto::Type* release_output_type();
  ::substrait::proto::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::proto::Type* output_type);
  private:
  const ::substrait::proto::Type& _internal_output_type() const;
  ::substrait::proto::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::proto::Type* output_type);
  ::substrait::proto::Type* unsafe_arena_release_output_type();

  // .substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
  bool has_python_pickle_function() const;
  private:
  bool _internal_has_python_pickle_function() const;
  public:
  void clear_python_pickle_function();
  const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction& python_pickle_function() const;
  ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* release_python_pickle_function();
  ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* mutable_python_pickle_function();
  void set_allocated_python_pickle_function(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function);
  private:
  const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction& _internal_python_pickle_function() const;
  ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* _internal_mutable_python_pickle_function();
  public:
  void unsafe_arena_set_allocated_python_pickle_function(
      ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function);
  ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* unsafe_arena_release_python_pickle_function();

  // .substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
  bool has_web_assembly_function() const;
  private:
  bool _internal_has_web_assembly_function() const;
  public:
  void clear_web_assembly_function();
  const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction& web_assembly_function() const;
  ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* release_web_assembly_function();
  ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* mutable_web_assembly_function();
  void set_allocated_web_assembly_function(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function);
  private:
  const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction& _internal_web_assembly_function() const;
  ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* _internal_mutable_web_assembly_function();
  public:
  void unsafe_arena_set_allocated_web_assembly_function(
      ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function);
  ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* unsafe_arena_release_web_assembly_function();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.EmbeddedFunction)
 private:
  class _Internal;
  void set_has_python_pickle_function();
  void set_has_web_assembly_function();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > arguments_;
  ::substrait::proto::Type* output_type_;
  union KindUnion {
    KindUnion() {}
    ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function_;
    ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_ReferenceSegment_MapKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.ReferenceSegment.MapKey) */ {
 public:
  inline Expression_ReferenceSegment_MapKey() : Expression_ReferenceSegment_MapKey(nullptr) {};
  virtual ~Expression_ReferenceSegment_MapKey();

  Expression_ReferenceSegment_MapKey(const Expression_ReferenceSegment_MapKey& from);
  Expression_ReferenceSegment_MapKey(Expression_ReferenceSegment_MapKey&& from) noexcept
    : Expression_ReferenceSegment_MapKey() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_MapKey& operator=(const Expression_ReferenceSegment_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_MapKey& operator=(Expression_ReferenceSegment_MapKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_ReferenceSegment_MapKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_ReferenceSegment_MapKey* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_MapKey*>(
               &_Expression_ReferenceSegment_MapKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Expression_ReferenceSegment_MapKey& a, Expression_ReferenceSegment_MapKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_MapKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_MapKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_ReferenceSegment_MapKey* New() const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_MapKey>(nullptr);
  }

  Expression_ReferenceSegment_MapKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_MapKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_ReferenceSegment_MapKey& from);
  void MergeFrom(const Expression_ReferenceSegment_MapKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_MapKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.ReferenceSegment.MapKey";
  }
  protected:
  explicit Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
    kChildFieldNumber = 2,
  };
  // .substrait.proto.Expression.Literal map_key = 1;
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;
  public:
  void clear_map_key();
  const ::substrait::proto::Expression_Literal& map_key() const;
  ::substrait::proto::Expression_Literal* release_map_key();
  ::substrait::proto::Expression_Literal* mutable_map_key();
  void set_allocated_map_key(::substrait::proto::Expression_Literal* map_key);
  private:
  const ::substrait::proto::Expression_Literal& _internal_map_key() const;
  ::substrait::proto::Expression_Literal* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::substrait::proto::Expression_Literal* map_key);
  ::substrait::proto::Expression_Literal* unsafe_arena_release_map_key();

  // .substrait.proto.Expression.ReferenceSegment child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_ReferenceSegment& child() const;
  ::substrait::proto::Expression_ReferenceSegment* release_child();
  ::substrait::proto::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child);
  private:
  const ::substrait::proto::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::proto::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_ReferenceSegment* child);
  ::substrait::proto::Expression_ReferenceSegment* unsafe_arena_release_child();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.ReferenceSegment.MapKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_Literal* map_key_;
  ::substrait::proto::Expression_ReferenceSegment* child_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_ReferenceSegment_StructField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.ReferenceSegment.StructField) */ {
 public:
  inline Expression_ReferenceSegment_StructField() : Expression_ReferenceSegment_StructField(nullptr) {};
  virtual ~Expression_ReferenceSegment_StructField();

  Expression_ReferenceSegment_StructField(const Expression_ReferenceSegment_StructField& from);
  Expression_ReferenceSegment_StructField(Expression_ReferenceSegment_StructField&& from) noexcept
    : Expression_ReferenceSegment_StructField() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_StructField& operator=(const Expression_ReferenceSegment_StructField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_StructField& operator=(Expression_ReferenceSegment_StructField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_ReferenceSegment_StructField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_ReferenceSegment_StructField* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_StructField*>(
               &_Expression_ReferenceSegment_StructField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Expression_ReferenceSegment_StructField& a, Expression_ReferenceSegment_StructField& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_StructField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_StructField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_ReferenceSegment_StructField* New() const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_StructField>(nullptr);
  }

  Expression_ReferenceSegment_StructField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_StructField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_ReferenceSegment_StructField& from);
  void MergeFrom(const Expression_ReferenceSegment_StructField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_StructField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.ReferenceSegment.StructField";
  }
  protected:
  explicit Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // .substrait.proto.Expression.ReferenceSegment child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_ReferenceSegment& child() const;
  ::substrait::proto::Expression_ReferenceSegment* release_child();
  ::substrait::proto::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child);
  private:
  const ::substrait::proto::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::proto::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_ReferenceSegment* child);
  ::substrait::proto::Expression_ReferenceSegment* unsafe_arena_release_child();

  // int32 field = 1;
  void clear_field();
  ::PROTOBUF_NAMESPACE_ID::int32 field() const;
  void set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field() const;
  void _internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.ReferenceSegment.StructField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_ReferenceSegment* child_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_ReferenceSegment_ListElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.ReferenceSegment.ListElement) */ {
 public:
  inline Expression_ReferenceSegment_ListElement() : Expression_ReferenceSegment_ListElement(nullptr) {};
  virtual ~Expression_ReferenceSegment_ListElement();

  Expression_ReferenceSegment_ListElement(const Expression_ReferenceSegment_ListElement& from);
  Expression_ReferenceSegment_ListElement(Expression_ReferenceSegment_ListElement&& from) noexcept
    : Expression_ReferenceSegment_ListElement() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_ListElement& operator=(const Expression_ReferenceSegment_ListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_ListElement& operator=(Expression_ReferenceSegment_ListElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_ReferenceSegment_ListElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_ReferenceSegment_ListElement* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_ListElement*>(
               &_Expression_ReferenceSegment_ListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Expression_ReferenceSegment_ListElement& a, Expression_ReferenceSegment_ListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_ListElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_ListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_ReferenceSegment_ListElement* New() const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_ListElement>(nullptr);
  }

  Expression_ReferenceSegment_ListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_ListElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_ReferenceSegment_ListElement& from);
  void MergeFrom(const Expression_ReferenceSegment_ListElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_ListElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.ReferenceSegment.ListElement";
  }
  protected:
  explicit Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kOffsetFieldNumber = 1,
  };
  // .substrait.proto.Expression.ReferenceSegment child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_ReferenceSegment& child() const;
  ::substrait::proto::Expression_ReferenceSegment* release_child();
  ::substrait::proto::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child);
  private:
  const ::substrait::proto::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::proto::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_ReferenceSegment* child);
  ::substrait::proto::Expression_ReferenceSegment* unsafe_arena_release_child();

  // int32 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.ReferenceSegment.ListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_ReferenceSegment* child_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_ReferenceSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.ReferenceSegment) */ {
 public:
  inline Expression_ReferenceSegment() : Expression_ReferenceSegment(nullptr) {};
  virtual ~Expression_ReferenceSegment();

  Expression_ReferenceSegment(const Expression_ReferenceSegment& from);
  Expression_ReferenceSegment(Expression_ReferenceSegment&& from) noexcept
    : Expression_ReferenceSegment() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment& operator=(const Expression_ReferenceSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment& operator=(Expression_ReferenceSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_ReferenceSegment& default_instance();

  enum ReferenceTypeCase {
    kMapKey = 1,
    kStructField = 2,
    kListElement = 3,
    REFERENCE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_ReferenceSegment* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment*>(
               &_Expression_ReferenceSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Expression_ReferenceSegment& a, Expression_ReferenceSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_ReferenceSegment* New() const final {
    return CreateMaybeMessage<Expression_ReferenceSegment>(nullptr);
  }

  Expression_ReferenceSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_ReferenceSegment& from);
  void MergeFrom(const Expression_ReferenceSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.ReferenceSegment";
  }
  protected:
  explicit Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_ReferenceSegment_MapKey MapKey;
  typedef Expression_ReferenceSegment_StructField StructField;
  typedef Expression_ReferenceSegment_ListElement ListElement;

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
    kStructFieldFieldNumber = 2,
    kListElementFieldNumber = 3,
  };
  // .substrait.proto.Expression.ReferenceSegment.MapKey map_key = 1;
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;
  public:
  void clear_map_key();
  const ::substrait::proto::Expression_ReferenceSegment_MapKey& map_key() const;
  ::substrait::proto::Expression_ReferenceSegment_MapKey* release_map_key();
  ::substrait::proto::Expression_ReferenceSegment_MapKey* mutable_map_key();
  void set_allocated_map_key(::substrait::proto::Expression_ReferenceSegment_MapKey* map_key);
  private:
  const ::substrait::proto::Expression_ReferenceSegment_MapKey& _internal_map_key() const;
  ::substrait::proto::Expression_ReferenceSegment_MapKey* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::substrait::proto::Expression_ReferenceSegment_MapKey* map_key);
  ::substrait::proto::Expression_ReferenceSegment_MapKey* unsafe_arena_release_map_key();

  // .substrait.proto.Expression.ReferenceSegment.StructField struct_field = 2;
  bool has_struct_field() const;
  private:
  bool _internal_has_struct_field() const;
  public:
  void clear_struct_field();
  const ::substrait::proto::Expression_ReferenceSegment_StructField& struct_field() const;
  ::substrait::proto::Expression_ReferenceSegment_StructField* release_struct_field();
  ::substrait::proto::Expression_ReferenceSegment_StructField* mutable_struct_field();
  void set_allocated_struct_field(::substrait::proto::Expression_ReferenceSegment_StructField* struct_field);
  private:
  const ::substrait::proto::Expression_ReferenceSegment_StructField& _internal_struct_field() const;
  ::substrait::proto::Expression_ReferenceSegment_StructField* _internal_mutable_struct_field();
  public:
  void unsafe_arena_set_allocated_struct_field(
      ::substrait::proto::Expression_ReferenceSegment_StructField* struct_field);
  ::substrait::proto::Expression_ReferenceSegment_StructField* unsafe_arena_release_struct_field();

  // .substrait.proto.Expression.ReferenceSegment.ListElement list_element = 3;
  bool has_list_element() const;
  private:
  bool _internal_has_list_element() const;
  public:
  void clear_list_element();
  const ::substrait::proto::Expression_ReferenceSegment_ListElement& list_element() const;
  ::substrait::proto::Expression_ReferenceSegment_ListElement* release_list_element();
  ::substrait::proto::Expression_ReferenceSegment_ListElement* mutable_list_element();
  void set_allocated_list_element(::substrait::proto::Expression_ReferenceSegment_ListElement* list_element);
  private:
  const ::substrait::proto::Expression_ReferenceSegment_ListElement& _internal_list_element() const;
  ::substrait::proto::Expression_ReferenceSegment_ListElement* _internal_mutable_list_element();
  public:
  void unsafe_arena_set_allocated_list_element(
      ::substrait::proto::Expression_ReferenceSegment_ListElement* list_element);
  ::substrait::proto::Expression_ReferenceSegment_ListElement* unsafe_arena_release_list_element();

  void clear_reference_type();
  ReferenceTypeCase reference_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.ReferenceSegment)
 private:
  class _Internal;
  void set_has_map_key();
  void set_has_struct_field();
  void set_has_list_element();

  inline bool has_reference_type() const;
  inline void clear_has_reference_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ReferenceTypeUnion {
    ReferenceTypeUnion() {}
    ::substrait::proto::Expression_ReferenceSegment_MapKey* map_key_;
    ::substrait::proto::Expression_ReferenceSegment_StructField* struct_field_;
    ::substrait::proto::Expression_ReferenceSegment_ListElement* list_element_;
  } reference_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_Select PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.Select) */ {
 public:
  inline Expression_MaskExpression_Select() : Expression_MaskExpression_Select(nullptr) {};
  virtual ~Expression_MaskExpression_Select();

  Expression_MaskExpression_Select(const Expression_MaskExpression_Select& from);
  Expression_MaskExpression_Select(Expression_MaskExpression_Select&& from) noexcept
    : Expression_MaskExpression_Select() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_Select& operator=(const Expression_MaskExpression_Select& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_Select& operator=(Expression_MaskExpression_Select&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_Select& default_instance();

  enum TypeCase {
    kStruct = 1,
    kList = 2,
    kMap = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_Select* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_Select*>(
               &_Expression_MaskExpression_Select_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Expression_MaskExpression_Select& a, Expression_MaskExpression_Select& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_Select* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_Select* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_Select* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_Select>(nullptr);
  }

  Expression_MaskExpression_Select* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_Select>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_Select& from);
  void MergeFrom(const Expression_MaskExpression_Select& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_Select* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.Select";
  }
  protected:
  explicit Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldNumber = 1,
    kListFieldNumber = 2,
    kMapFieldNumber = 3,
  };
  // .substrait.proto.Expression.MaskExpression.StructSelect struct = 1;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::substrait::proto::Expression_MaskExpression_StructSelect& struct_() const;
  ::substrait::proto::Expression_MaskExpression_StructSelect* release_struct_();
  ::substrait::proto::Expression_MaskExpression_StructSelect* mutable_struct_();
  void set_allocated_struct_(::substrait::proto::Expression_MaskExpression_StructSelect* struct_);
  private:
  const ::substrait::proto::Expression_MaskExpression_StructSelect& _internal_struct_() const;
  ::substrait::proto::Expression_MaskExpression_StructSelect* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::proto::Expression_MaskExpression_StructSelect* struct_);
  ::substrait::proto::Expression_MaskExpression_StructSelect* unsafe_arena_release_struct_();

  // .substrait.proto.Expression.MaskExpression.ListSelect list = 2;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::substrait::proto::Expression_MaskExpression_ListSelect& list() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect* release_list();
  ::substrait::proto::Expression_MaskExpression_ListSelect* mutable_list();
  void set_allocated_list(::substrait::proto::Expression_MaskExpression_ListSelect* list);
  private:
  const ::substrait::proto::Expression_MaskExpression_ListSelect& _internal_list() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::proto::Expression_MaskExpression_ListSelect* list);
  ::substrait::proto::Expression_MaskExpression_ListSelect* unsafe_arena_release_list();

  // .substrait.proto.Expression.MaskExpression.MapSelect map = 3;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::substrait::proto::Expression_MaskExpression_MapSelect& map() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect* release_map();
  ::substrait::proto::Expression_MaskExpression_MapSelect* mutable_map();
  void set_allocated_map(::substrait::proto::Expression_MaskExpression_MapSelect* map);
  private:
  const ::substrait::proto::Expression_MaskExpression_MapSelect& _internal_map() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::proto::Expression_MaskExpression_MapSelect* map);
  ::substrait::proto::Expression_MaskExpression_MapSelect* unsafe_arena_release_map();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.Select)
 private:
  class _Internal;
  void set_has_struct_();
  void set_has_list();
  void set_has_map();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::substrait::proto::Expression_MaskExpression_StructSelect* struct__;
    ::substrait::proto::Expression_MaskExpression_ListSelect* list_;
    ::substrait::proto::Expression_MaskExpression_MapSelect* map_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_StructSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.StructSelect) */ {
 public:
  inline Expression_MaskExpression_StructSelect() : Expression_MaskExpression_StructSelect(nullptr) {};
  virtual ~Expression_MaskExpression_StructSelect();

  Expression_MaskExpression_StructSelect(const Expression_MaskExpression_StructSelect& from);
  Expression_MaskExpression_StructSelect(Expression_MaskExpression_StructSelect&& from) noexcept
    : Expression_MaskExpression_StructSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_StructSelect& operator=(const Expression_MaskExpression_StructSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_StructSelect& operator=(Expression_MaskExpression_StructSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_StructSelect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_StructSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_StructSelect*>(
               &_Expression_MaskExpression_StructSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Expression_MaskExpression_StructSelect& a, Expression_MaskExpression_StructSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_StructSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_StructSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_StructSelect* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructSelect>(nullptr);
  }

  Expression_MaskExpression_StructSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_StructSelect& from);
  void MergeFrom(const Expression_MaskExpression_StructSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_StructSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.StructSelect";
  }
  protected:
  explicit Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructItemsFieldNumber = 1,
  };
  // repeated .substrait.proto.Expression.MaskExpression.StructItem struct_items = 1;
  int struct_items_size() const;
  private:
  int _internal_struct_items_size() const;
  public:
  void clear_struct_items();
  ::substrait::proto::Expression_MaskExpression_StructItem* mutable_struct_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_StructItem >*
      mutable_struct_items();
  private:
  const ::substrait::proto::Expression_MaskExpression_StructItem& _internal_struct_items(int index) const;
  ::substrait::proto::Expression_MaskExpression_StructItem* _internal_add_struct_items();
  public:
  const ::substrait::proto::Expression_MaskExpression_StructItem& struct_items(int index) const;
  ::substrait::proto::Expression_MaskExpression_StructItem* add_struct_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_StructItem >&
      struct_items() const;

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.StructSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_StructItem > struct_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_StructItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.StructItem) */ {
 public:
  inline Expression_MaskExpression_StructItem() : Expression_MaskExpression_StructItem(nullptr) {};
  virtual ~Expression_MaskExpression_StructItem();

  Expression_MaskExpression_StructItem(const Expression_MaskExpression_StructItem& from);
  Expression_MaskExpression_StructItem(Expression_MaskExpression_StructItem&& from) noexcept
    : Expression_MaskExpression_StructItem() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_StructItem& operator=(const Expression_MaskExpression_StructItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_StructItem& operator=(Expression_MaskExpression_StructItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_StructItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_StructItem* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_StructItem*>(
               &_Expression_MaskExpression_StructItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(Expression_MaskExpression_StructItem& a, Expression_MaskExpression_StructItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_StructItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_StructItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_StructItem* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructItem>(nullptr);
  }

  Expression_MaskExpression_StructItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_StructItem& from);
  void MergeFrom(const Expression_MaskExpression_StructItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_StructItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.StructItem";
  }
  protected:
  explicit Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_MaskExpression_Select& child() const;
  ::substrait::proto::Expression_MaskExpression_Select* release_child();
  ::substrait::proto::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::proto::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::proto::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_MaskExpression_Select* child);
  ::substrait::proto::Expression_MaskExpression_Select* unsafe_arena_release_child();

  // int32 field = 1;
  void clear_field();
  ::PROTOBUF_NAMESPACE_ID::int32 field() const;
  void set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field() const;
  void _internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.StructItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_MaskExpression_Select* child_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() : Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(nullptr) {};
  virtual ~Expression_MaskExpression_ListSelect_ListSelectItem_ListElement();

  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from);
  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& operator=(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& a, Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(nullptr);
  }

  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from);
  void MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // int32 field = 1;
  void clear_field();
  ::PROTOBUF_NAMESPACE_ID::int32 field() const;
  void set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field() const;
  void _internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() : Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(nullptr) {};
  virtual ~Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice();

  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from);
  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& operator=(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& a, Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(nullptr);
  }

  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from);
  void MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem() : Expression_MaskExpression_ListSelect_ListSelectItem(nullptr) {};
  virtual ~Expression_MaskExpression_ListSelect_ListSelectItem();

  Expression_MaskExpression_ListSelect_ListSelectItem(const Expression_MaskExpression_ListSelect_ListSelectItem& from);
  Expression_MaskExpression_ListSelect_ListSelectItem(Expression_MaskExpression_ListSelect_ListSelectItem&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem& operator=(Expression_MaskExpression_ListSelect_ListSelectItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem& default_instance();

  enum TypeCase {
    kItem = 1,
    kSlice = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_ListSelect_ListSelectItem* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem& a, Expression_MaskExpression_ListSelect_ListSelectItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_ListSelect_ListSelectItem* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem>(nullptr);
  }

  Expression_MaskExpression_ListSelect_ListSelectItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from);
  void MergeFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_ListSelect_ListSelectItem_ListElement ListElement;
  typedef Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice ListSlice;

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kSliceFieldNumber = 2,
  };
  // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& item() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* release_item();
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* mutable_item();
  void set_allocated_item(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item);
  private:
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& _internal_item() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item);
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* unsafe_arena_release_item();

  // .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
  bool has_slice() const;
  private:
  bool _internal_has_slice() const;
  public:
  void clear_slice();
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& slice() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* release_slice();
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* mutable_slice();
  void set_allocated_slice(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice);
  private:
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& _internal_slice() const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* _internal_mutable_slice();
  public:
  void unsafe_arena_set_allocated_slice(
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice);
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* unsafe_arena_release_slice();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem)
 private:
  class _Internal;
  void set_has_item();
  void set_has_slice();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item_;
    ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.ListSelect) */ {
 public:
  inline Expression_MaskExpression_ListSelect() : Expression_MaskExpression_ListSelect(nullptr) {};
  virtual ~Expression_MaskExpression_ListSelect();

  Expression_MaskExpression_ListSelect(const Expression_MaskExpression_ListSelect& from);
  Expression_MaskExpression_ListSelect(Expression_MaskExpression_ListSelect&& from) noexcept
    : Expression_MaskExpression_ListSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect& operator=(const Expression_MaskExpression_ListSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect& operator=(Expression_MaskExpression_ListSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_ListSelect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_ListSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect*>(
               &_Expression_MaskExpression_ListSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Expression_MaskExpression_ListSelect& a, Expression_MaskExpression_ListSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_ListSelect* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect>(nullptr);
  }

  Expression_MaskExpression_ListSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_ListSelect& from);
  void MergeFrom(const Expression_MaskExpression_ListSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.ListSelect";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_ListSelect_ListSelectItem ListSelectItem;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kChildFieldNumber = 2,
  };
  // repeated .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  int selection_size() const;
  private:
  int _internal_selection_size() const;
  public:
  void clear_selection();
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* mutable_selection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >*
      mutable_selection();
  private:
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem& _internal_selection(int index) const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* _internal_add_selection();
  public:
  const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem& selection(int index) const;
  ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* add_selection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >&
      selection() const;

  // .substrait.proto.Expression.MaskExpression.Select child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_MaskExpression_Select& child() const;
  ::substrait::proto::Expression_MaskExpression_Select* release_child();
  ::substrait::proto::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::proto::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::proto::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_MaskExpression_Select* child);
  ::substrait::proto::Expression_MaskExpression_Select* unsafe_arena_release_child();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.ListSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem > selection_;
  ::substrait::proto::Expression_MaskExpression_Select* child_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect_MapKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.MapSelect.MapKey) */ {
 public:
  inline Expression_MaskExpression_MapSelect_MapKey() : Expression_MaskExpression_MapSelect_MapKey(nullptr) {};
  virtual ~Expression_MaskExpression_MapSelect_MapKey();

  Expression_MaskExpression_MapSelect_MapKey(const Expression_MaskExpression_MapSelect_MapKey& from);
  Expression_MaskExpression_MapSelect_MapKey(Expression_MaskExpression_MapSelect_MapKey&& from) noexcept
    : Expression_MaskExpression_MapSelect_MapKey() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect_MapKey& operator=(const Expression_MaskExpression_MapSelect_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect_MapKey& operator=(Expression_MaskExpression_MapSelect_MapKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_MapSelect_MapKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_MapSelect_MapKey* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect_MapKey*>(
               &_Expression_MaskExpression_MapSelect_MapKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(Expression_MaskExpression_MapSelect_MapKey& a, Expression_MaskExpression_MapSelect_MapKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect_MapKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect_MapKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_MapSelect_MapKey* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKey>(nullptr);
  }

  Expression_MaskExpression_MapSelect_MapKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_MapSelect_MapKey& from);
  void MergeFrom(const Expression_MaskExpression_MapSelect_MapKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect_MapKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.MapSelect.MapKey";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
  };
  // string map_key = 1;
  void clear_map_key();
  const std::string& map_key() const;
  void set_map_key(const std::string& value);
  void set_map_key(std::string&& value);
  void set_map_key(const char* value);
  void set_map_key(const char* value, size_t size);
  std::string* mutable_map_key();
  std::string* release_map_key();
  void set_allocated_map_key(std::string* map_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_key(
      std::string* map_key);
  private:
  const std::string& _internal_map_key() const;
  void _internal_set_map_key(const std::string& value);
  std::string* _internal_mutable_map_key();
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.MapSelect.MapKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect_MapKeyExpression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression) */ {
 public:
  inline Expression_MaskExpression_MapSelect_MapKeyExpression() : Expression_MaskExpression_MapSelect_MapKeyExpression(nullptr) {};
  virtual ~Expression_MaskExpression_MapSelect_MapKeyExpression();

  Expression_MaskExpression_MapSelect_MapKeyExpression(const Expression_MaskExpression_MapSelect_MapKeyExpression& from);
  Expression_MaskExpression_MapSelect_MapKeyExpression(Expression_MaskExpression_MapSelect_MapKeyExpression&& from) noexcept
    : Expression_MaskExpression_MapSelect_MapKeyExpression() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect_MapKeyExpression& operator=(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect_MapKeyExpression& operator=(Expression_MaskExpression_MapSelect_MapKeyExpression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_MapSelect_MapKeyExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_MapSelect_MapKeyExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect_MapKeyExpression*>(
               &_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Expression_MaskExpression_MapSelect_MapKeyExpression& a, Expression_MaskExpression_MapSelect_MapKeyExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_MapSelect_MapKeyExpression* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKeyExpression>(nullptr);
  }

  Expression_MaskExpression_MapSelect_MapKeyExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKeyExpression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from);
  void MergeFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyExpressionFieldNumber = 1,
  };
  // string map_key_expression = 1;
  void clear_map_key_expression();
  const std::string& map_key_expression() const;
  void set_map_key_expression(const std::string& value);
  void set_map_key_expression(std::string&& value);
  void set_map_key_expression(const char* value);
  void set_map_key_expression(const char* value, size_t size);
  std::string* mutable_map_key_expression();
  std::string* release_map_key_expression();
  void set_allocated_map_key_expression(std::string* map_key_expression);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_map_key_expression();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_map_key_expression(
      std::string* map_key_expression);
  private:
  const std::string& _internal_map_key_expression() const;
  void _internal_set_map_key_expression(const std::string& value);
  std::string* _internal_mutable_map_key_expression();
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_key_expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression.MapSelect) */ {
 public:
  inline Expression_MaskExpression_MapSelect() : Expression_MaskExpression_MapSelect(nullptr) {};
  virtual ~Expression_MaskExpression_MapSelect();

  Expression_MaskExpression_MapSelect(const Expression_MaskExpression_MapSelect& from);
  Expression_MaskExpression_MapSelect(Expression_MaskExpression_MapSelect&& from) noexcept
    : Expression_MaskExpression_MapSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect& operator=(const Expression_MaskExpression_MapSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect& operator=(Expression_MaskExpression_MapSelect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression_MapSelect& default_instance();

  enum SelectCase {
    kKey = 1,
    kExpression = 2,
    SELECT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression_MapSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect*>(
               &_Expression_MaskExpression_MapSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(Expression_MaskExpression_MapSelect& a, Expression_MaskExpression_MapSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression_MapSelect* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect>(nullptr);
  }

  Expression_MaskExpression_MapSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression_MapSelect& from);
  void MergeFrom(const Expression_MaskExpression_MapSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression.MapSelect";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_MapSelect_MapKey MapKey;
  typedef Expression_MaskExpression_MapSelect_MapKeyExpression MapKeyExpression;

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kKeyFieldNumber = 1,
    kExpressionFieldNumber = 2,
  };
  // .substrait.proto.Expression.MaskExpression.Select child = 3;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::substrait::proto::Expression_MaskExpression_Select& child() const;
  ::substrait::proto::Expression_MaskExpression_Select* release_child();
  ::substrait::proto::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::proto::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::proto::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::proto::Expression_MaskExpression_Select* child);
  ::substrait::proto::Expression_MaskExpression_Select* unsafe_arena_release_child();

  // .substrait.proto.Expression.MaskExpression.MapSelect.MapKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey& key() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* release_key();
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* mutable_key();
  void set_allocated_key(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key);
  private:
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey& _internal_key() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key);
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* unsafe_arena_release_key();

  // .substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression& expression() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* release_expression();
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression);
  private:
  const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression& _internal_expression() const;
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression);
  ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* unsafe_arena_release_expression();

  void clear_select();
  SelectCase select_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression.MapSelect)
 private:
  class _Internal;
  void set_has_key();
  void set_has_expression();

  inline bool has_select() const;
  inline void clear_has_select();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_MaskExpression_Select* child_;
  union SelectUnion {
    SelectUnion() {}
    ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key_;
    ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression_;
  } select_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_MaskExpression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.MaskExpression) */ {
 public:
  inline Expression_MaskExpression() : Expression_MaskExpression(nullptr) {};
  virtual ~Expression_MaskExpression();

  Expression_MaskExpression(const Expression_MaskExpression& from);
  Expression_MaskExpression(Expression_MaskExpression&& from) noexcept
    : Expression_MaskExpression() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression& operator=(const Expression_MaskExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression& operator=(Expression_MaskExpression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_MaskExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_MaskExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression*>(
               &_Expression_MaskExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(Expression_MaskExpression& a, Expression_MaskExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_MaskExpression* New() const final {
    return CreateMaybeMessage<Expression_MaskExpression>(nullptr);
  }

  Expression_MaskExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_MaskExpression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_MaskExpression& from);
  void MergeFrom(const Expression_MaskExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.MaskExpression";
  }
  protected:
  explicit Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_Select Select;
  typedef Expression_MaskExpression_StructSelect StructSelect;
  typedef Expression_MaskExpression_StructItem StructItem;
  typedef Expression_MaskExpression_ListSelect ListSelect;
  typedef Expression_MaskExpression_MapSelect MapSelect;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectFieldNumber = 1,
    kMaintainSingularStructFieldNumber = 2,
  };
  // .substrait.proto.Expression.MaskExpression.StructSelect select = 1;
  bool has_select() const;
  private:
  bool _internal_has_select() const;
  public:
  void clear_select();
  const ::substrait::proto::Expression_MaskExpression_StructSelect& select() const;
  ::substrait::proto::Expression_MaskExpression_StructSelect* release_select();
  ::substrait::proto::Expression_MaskExpression_StructSelect* mutable_select();
  void set_allocated_select(::substrait::proto::Expression_MaskExpression_StructSelect* select);
  private:
  const ::substrait::proto::Expression_MaskExpression_StructSelect& _internal_select() const;
  ::substrait::proto::Expression_MaskExpression_StructSelect* _internal_mutable_select();
  public:
  void unsafe_arena_set_allocated_select(
      ::substrait::proto::Expression_MaskExpression_StructSelect* select);
  ::substrait::proto::Expression_MaskExpression_StructSelect* unsafe_arena_release_select();

  // bool maintain_singular_struct = 2;
  void clear_maintain_singular_struct();
  bool maintain_singular_struct() const;
  void set_maintain_singular_struct(bool value);
  private:
  bool _internal_maintain_singular_struct() const;
  void _internal_set_maintain_singular_struct(bool value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.MaskExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression_MaskExpression_StructSelect* select_;
  bool maintain_singular_struct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_FieldReference_RootReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.FieldReference.RootReference) */ {
 public:
  inline Expression_FieldReference_RootReference() : Expression_FieldReference_RootReference(nullptr) {};
  virtual ~Expression_FieldReference_RootReference();

  Expression_FieldReference_RootReference(const Expression_FieldReference_RootReference& from);
  Expression_FieldReference_RootReference(Expression_FieldReference_RootReference&& from) noexcept
    : Expression_FieldReference_RootReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference_RootReference& operator=(const Expression_FieldReference_RootReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference_RootReference& operator=(Expression_FieldReference_RootReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_FieldReference_RootReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_FieldReference_RootReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference_RootReference*>(
               &_Expression_FieldReference_RootReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(Expression_FieldReference_RootReference& a, Expression_FieldReference_RootReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference_RootReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference_RootReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_FieldReference_RootReference* New() const final {
    return CreateMaybeMessage<Expression_FieldReference_RootReference>(nullptr);
  }

  Expression_FieldReference_RootReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_FieldReference_RootReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_FieldReference_RootReference& from);
  void MergeFrom(const Expression_FieldReference_RootReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_FieldReference_RootReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.FieldReference.RootReference";
  }
  protected:
  explicit Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.FieldReference.RootReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_FieldReference_OuterReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.FieldReference.OuterReference) */ {
 public:
  inline Expression_FieldReference_OuterReference() : Expression_FieldReference_OuterReference(nullptr) {};
  virtual ~Expression_FieldReference_OuterReference();

  Expression_FieldReference_OuterReference(const Expression_FieldReference_OuterReference& from);
  Expression_FieldReference_OuterReference(Expression_FieldReference_OuterReference&& from) noexcept
    : Expression_FieldReference_OuterReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference_OuterReference& operator=(const Expression_FieldReference_OuterReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference_OuterReference& operator=(Expression_FieldReference_OuterReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_FieldReference_OuterReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_FieldReference_OuterReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference_OuterReference*>(
               &_Expression_FieldReference_OuterReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(Expression_FieldReference_OuterReference& a, Expression_FieldReference_OuterReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference_OuterReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference_OuterReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_FieldReference_OuterReference* New() const final {
    return CreateMaybeMessage<Expression_FieldReference_OuterReference>(nullptr);
  }

  Expression_FieldReference_OuterReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_FieldReference_OuterReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_FieldReference_OuterReference& from);
  void MergeFrom(const Expression_FieldReference_OuterReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_FieldReference_OuterReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.FieldReference.OuterReference";
  }
  protected:
  explicit Expression_FieldReference_OuterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsOutFieldNumber = 1,
  };
  // uint32 steps_out = 1;
  void clear_steps_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_out() const;
  void set_steps_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steps_out() const;
  void _internal_set_steps_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.FieldReference.OuterReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_FieldReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.FieldReference) */ {
 public:
  inline Expression_FieldReference() : Expression_FieldReference(nullptr) {};
  virtual ~Expression_FieldReference();

  Expression_FieldReference(const Expression_FieldReference& from);
  Expression_FieldReference(Expression_FieldReference&& from) noexcept
    : Expression_FieldReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference& operator=(const Expression_FieldReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference& operator=(Expression_FieldReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_FieldReference& default_instance();

  enum ReferenceTypeCase {
    kDirectReference = 1,
    kMaskedReference = 2,
    REFERENCE_TYPE_NOT_SET = 0,
  };

  enum RootTypeCase {
    kExpression = 3,
    kRootReference = 4,
    kOuterReference = 5,
    ROOT_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_FieldReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference*>(
               &_Expression_FieldReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(Expression_FieldReference& a, Expression_FieldReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_FieldReference* New() const final {
    return CreateMaybeMessage<Expression_FieldReference>(nullptr);
  }

  Expression_FieldReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_FieldReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_FieldReference& from);
  void MergeFrom(const Expression_FieldReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_FieldReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.FieldReference";
  }
  protected:
  explicit Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_FieldReference_RootReference RootReference;
  typedef Expression_FieldReference_OuterReference OuterReference;

  // accessors -------------------------------------------------------

  enum : int {
    kDirectReferenceFieldNumber = 1,
    kMaskedReferenceFieldNumber = 2,
    kExpressionFieldNumber = 3,
    kRootReferenceFieldNumber = 4,
    kOuterReferenceFieldNumber = 5,
  };
  // .substrait.proto.Expression.ReferenceSegment direct_reference = 1;
  bool has_direct_reference() const;
  private:
  bool _internal_has_direct_reference() const;
  public:
  void clear_direct_reference();
  const ::substrait::proto::Expression_ReferenceSegment& direct_reference() const;
  ::substrait::proto::Expression_ReferenceSegment* release_direct_reference();
  ::substrait::proto::Expression_ReferenceSegment* mutable_direct_reference();
  void set_allocated_direct_reference(::substrait::proto::Expression_ReferenceSegment* direct_reference);
  private:
  const ::substrait::proto::Expression_ReferenceSegment& _internal_direct_reference() const;
  ::substrait::proto::Expression_ReferenceSegment* _internal_mutable_direct_reference();
  public:
  void unsafe_arena_set_allocated_direct_reference(
      ::substrait::proto::Expression_ReferenceSegment* direct_reference);
  ::substrait::proto::Expression_ReferenceSegment* unsafe_arena_release_direct_reference();

  // .substrait.proto.Expression.MaskExpression masked_reference = 2;
  bool has_masked_reference() const;
  private:
  bool _internal_has_masked_reference() const;
  public:
  void clear_masked_reference();
  const ::substrait::proto::Expression_MaskExpression& masked_reference() const;
  ::substrait::proto::Expression_MaskExpression* release_masked_reference();
  ::substrait::proto::Expression_MaskExpression* mutable_masked_reference();
  void set_allocated_masked_reference(::substrait::proto::Expression_MaskExpression* masked_reference);
  private:
  const ::substrait::proto::Expression_MaskExpression& _internal_masked_reference() const;
  ::substrait::proto::Expression_MaskExpression* _internal_mutable_masked_reference();
  public:
  void unsafe_arena_set_allocated_masked_reference(
      ::substrait::proto::Expression_MaskExpression* masked_reference);
  ::substrait::proto::Expression_MaskExpression* unsafe_arena_release_masked_reference();

  // .substrait.proto.Expression expression = 3;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::proto::Expression& expression() const;
  ::substrait::proto::Expression* release_expression();
  ::substrait::proto::Expression* mutable_expression();
  void set_allocated_expression(::substrait::proto::Expression* expression);
  private:
  const ::substrait::proto::Expression& _internal_expression() const;
  ::substrait::proto::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::proto::Expression* expression);
  ::substrait::proto::Expression* unsafe_arena_release_expression();

  // .substrait.proto.Expression.FieldReference.RootReference root_reference = 4;
  bool has_root_reference() const;
  private:
  bool _internal_has_root_reference() const;
  public:
  void clear_root_reference();
  const ::substrait::proto::Expression_FieldReference_RootReference& root_reference() const;
  ::substrait::proto::Expression_FieldReference_RootReference* release_root_reference();
  ::substrait::proto::Expression_FieldReference_RootReference* mutable_root_reference();
  void set_allocated_root_reference(::substrait::proto::Expression_FieldReference_RootReference* root_reference);
  private:
  const ::substrait::proto::Expression_FieldReference_RootReference& _internal_root_reference() const;
  ::substrait::proto::Expression_FieldReference_RootReference* _internal_mutable_root_reference();
  public:
  void unsafe_arena_set_allocated_root_reference(
      ::substrait::proto::Expression_FieldReference_RootReference* root_reference);
  ::substrait::proto::Expression_FieldReference_RootReference* unsafe_arena_release_root_reference();

  // .substrait.proto.Expression.FieldReference.OuterReference outer_reference = 5;
  bool has_outer_reference() const;
  private:
  bool _internal_has_outer_reference() const;
  public:
  void clear_outer_reference();
  const ::substrait::proto::Expression_FieldReference_OuterReference& outer_reference() const;
  ::substrait::proto::Expression_FieldReference_OuterReference* release_outer_reference();
  ::substrait::proto::Expression_FieldReference_OuterReference* mutable_outer_reference();
  void set_allocated_outer_reference(::substrait::proto::Expression_FieldReference_OuterReference* outer_reference);
  private:
  const ::substrait::proto::Expression_FieldReference_OuterReference& _internal_outer_reference() const;
  ::substrait::proto::Expression_FieldReference_OuterReference* _internal_mutable_outer_reference();
  public:
  void unsafe_arena_set_allocated_outer_reference(
      ::substrait::proto::Expression_FieldReference_OuterReference* outer_reference);
  ::substrait::proto::Expression_FieldReference_OuterReference* unsafe_arena_release_outer_reference();

  void clear_reference_type();
  ReferenceTypeCase reference_type_case() const;
  void clear_root_type();
  RootTypeCase root_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.FieldReference)
 private:
  class _Internal;
  void set_has_direct_reference();
  void set_has_masked_reference();
  void set_has_expression();
  void set_has_root_reference();
  void set_has_outer_reference();

  inline bool has_reference_type() const;
  inline void clear_has_reference_type();

  inline bool has_root_type() const;
  inline void clear_has_root_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ReferenceTypeUnion {
    ReferenceTypeUnion() {}
    ::substrait::proto::Expression_ReferenceSegment* direct_reference_;
    ::substrait::proto::Expression_MaskExpression* masked_reference_;
  } reference_type_;
  union RootTypeUnion {
    RootTypeUnion() {}
    ::substrait::proto::Expression* expression_;
    ::substrait::proto::Expression_FieldReference_RootReference* root_reference_;
    ::substrait::proto::Expression_FieldReference_OuterReference* outer_reference_;
  } root_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Subquery_Scalar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Subquery.Scalar) */ {
 public:
  inline Expression_Subquery_Scalar() : Expression_Subquery_Scalar(nullptr) {};
  virtual ~Expression_Subquery_Scalar();

  Expression_Subquery_Scalar(const Expression_Subquery_Scalar& from);
  Expression_Subquery_Scalar(Expression_Subquery_Scalar&& from) noexcept
    : Expression_Subquery_Scalar() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_Scalar& operator=(const Expression_Subquery_Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_Scalar& operator=(Expression_Subquery_Scalar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Subquery_Scalar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Subquery_Scalar* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_Scalar*>(
               &_Expression_Subquery_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(Expression_Subquery_Scalar& a, Expression_Subquery_Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_Scalar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Subquery_Scalar* New() const final {
    return CreateMaybeMessage<Expression_Subquery_Scalar>(nullptr);
  }

  Expression_Subquery_Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Subquery_Scalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Subquery_Scalar& from);
  void MergeFrom(const Expression_Subquery_Scalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Subquery.Scalar";
  }
  protected:
  explicit Expression_Subquery_Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // .substrait.proto.Rel input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::proto::Rel& input() const;
  ::substrait::proto::Rel* release_input();
  ::substrait::proto::Rel* mutable_input();
  void set_allocated_input(::substrait::proto::Rel* input);
  private:
  const ::substrait::proto::Rel& _internal_input() const;
  ::substrait::proto::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::proto::Rel* input);
  ::substrait::proto::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Subquery.Scalar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Subquery_InPredicate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Subquery.InPredicate) */ {
 public:
  inline Expression_Subquery_InPredicate() : Expression_Subquery_InPredicate(nullptr) {};
  virtual ~Expression_Subquery_InPredicate();

  Expression_Subquery_InPredicate(const Expression_Subquery_InPredicate& from);
  Expression_Subquery_InPredicate(Expression_Subquery_InPredicate&& from) noexcept
    : Expression_Subquery_InPredicate() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_InPredicate& operator=(const Expression_Subquery_InPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_InPredicate& operator=(Expression_Subquery_InPredicate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Subquery_InPredicate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Subquery_InPredicate* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_InPredicate*>(
               &_Expression_Subquery_InPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(Expression_Subquery_InPredicate& a, Expression_Subquery_InPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_InPredicate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_InPredicate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Subquery_InPredicate* New() const final {
    return CreateMaybeMessage<Expression_Subquery_InPredicate>(nullptr);
  }

  Expression_Subquery_InPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Subquery_InPredicate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Subquery_InPredicate& from);
  void MergeFrom(const Expression_Subquery_InPredicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_InPredicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Subquery.InPredicate";
  }
  protected:
  explicit Expression_Subquery_InPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedlesFieldNumber = 1,
    kHaystackFieldNumber = 2,
  };
  // repeated .substrait.proto.Expression needles = 1;
  int needles_size() const;
  private:
  int _internal_needles_size() const;
  public:
  void clear_needles();
  ::substrait::proto::Expression* mutable_needles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_needles();
  private:
  const ::substrait::proto::Expression& _internal_needles(int index) const;
  ::substrait::proto::Expression* _internal_add_needles();
  public:
  const ::substrait::proto::Expression& needles(int index) const;
  ::substrait::proto::Expression* add_needles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      needles() const;

  // .substrait.proto.Rel haystack = 2;
  bool has_haystack() const;
  private:
  bool _internal_has_haystack() const;
  public:
  void clear_haystack();
  const ::substrait::proto::Rel& haystack() const;
  ::substrait::proto::Rel* release_haystack();
  ::substrait::proto::Rel* mutable_haystack();
  void set_allocated_haystack(::substrait::proto::Rel* haystack);
  private:
  const ::substrait::proto::Rel& _internal_haystack() const;
  ::substrait::proto::Rel* _internal_mutable_haystack();
  public:
  void unsafe_arena_set_allocated_haystack(
      ::substrait::proto::Rel* haystack);
  ::substrait::proto::Rel* unsafe_arena_release_haystack();

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Subquery.InPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > needles_;
  ::substrait::proto::Rel* haystack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Subquery_SetPredicate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Subquery.SetPredicate) */ {
 public:
  inline Expression_Subquery_SetPredicate() : Expression_Subquery_SetPredicate(nullptr) {};
  virtual ~Expression_Subquery_SetPredicate();

  Expression_Subquery_SetPredicate(const Expression_Subquery_SetPredicate& from);
  Expression_Subquery_SetPredicate(Expression_Subquery_SetPredicate&& from) noexcept
    : Expression_Subquery_SetPredicate() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_SetPredicate& operator=(const Expression_Subquery_SetPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_SetPredicate& operator=(Expression_Subquery_SetPredicate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Subquery_SetPredicate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Subquery_SetPredicate* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_SetPredicate*>(
               &_Expression_Subquery_SetPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(Expression_Subquery_SetPredicate& a, Expression_Subquery_SetPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_SetPredicate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_SetPredicate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Subquery_SetPredicate* New() const final {
    return CreateMaybeMessage<Expression_Subquery_SetPredicate>(nullptr);
  }

  Expression_Subquery_SetPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Subquery_SetPredicate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Subquery_SetPredicate& from);
  void MergeFrom(const Expression_Subquery_SetPredicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_SetPredicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Subquery.SetPredicate";
  }
  protected:
  explicit Expression_Subquery_SetPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Subquery_SetPredicate_PredicateOp PredicateOp;
  static constexpr PredicateOp PREDICATE_OP_UNSPECIFIED =
    Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNSPECIFIED;
  static constexpr PredicateOp PREDICATE_OP_EXISTS =
    Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_EXISTS;
  static constexpr PredicateOp PREDICATE_OP_UNIQUE =
    Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNIQUE;
  static inline bool PredicateOp_IsValid(int value) {
    return Expression_Subquery_SetPredicate_PredicateOp_IsValid(value);
  }
  static constexpr PredicateOp PredicateOp_MIN =
    Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MIN;
  static constexpr PredicateOp PredicateOp_MAX =
    Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MAX;
  static constexpr int PredicateOp_ARRAYSIZE =
    Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PredicateOp_descriptor() {
    return Expression_Subquery_SetPredicate_PredicateOp_descriptor();
  }
  template<typename T>
  static inline const std::string& PredicateOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PredicateOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PredicateOp_Name.");
    return Expression_Subquery_SetPredicate_PredicateOp_Name(enum_t_value);
  }
  static inline bool PredicateOp_Parse(const std::string& name,
      PredicateOp* value) {
    return Expression_Subquery_SetPredicate_PredicateOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesFieldNumber = 2,
    kPredicateOpFieldNumber = 1,
  };
  // .substrait.proto.Rel tuples = 2;
  bool has_tuples() const;
  private:
  bool _internal_has_tuples() const;
  public:
  void clear_tuples();
  const ::substrait::proto::Rel& tuples() const;
  ::substrait::proto::Rel* release_tuples();
  ::substrait::proto::Rel* mutable_tuples();
  void set_allocated_tuples(::substrait::proto::Rel* tuples);
  private:
  const ::substrait::proto::Rel& _internal_tuples() const;
  ::substrait::proto::Rel* _internal_mutable_tuples();
  public:
  void unsafe_arena_set_allocated_tuples(
      ::substrait::proto::Rel* tuples);
  ::substrait::proto::Rel* unsafe_arena_release_tuples();

  // .substrait.proto.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
  void clear_predicate_op();
  ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp predicate_op() const;
  void set_predicate_op(::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp value);
  private:
  ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp _internal_predicate_op() const;
  void _internal_set_predicate_op(::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Subquery.SetPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Rel* tuples_;
  int predicate_op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Subquery_SetComparison PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Subquery.SetComparison) */ {
 public:
  inline Expression_Subquery_SetComparison() : Expression_Subquery_SetComparison(nullptr) {};
  virtual ~Expression_Subquery_SetComparison();

  Expression_Subquery_SetComparison(const Expression_Subquery_SetComparison& from);
  Expression_Subquery_SetComparison(Expression_Subquery_SetComparison&& from) noexcept
    : Expression_Subquery_SetComparison() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_SetComparison& operator=(const Expression_Subquery_SetComparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_SetComparison& operator=(Expression_Subquery_SetComparison&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Subquery_SetComparison& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Subquery_SetComparison* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_SetComparison*>(
               &_Expression_Subquery_SetComparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(Expression_Subquery_SetComparison& a, Expression_Subquery_SetComparison& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_SetComparison* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_SetComparison* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Subquery_SetComparison* New() const final {
    return CreateMaybeMessage<Expression_Subquery_SetComparison>(nullptr);
  }

  Expression_Subquery_SetComparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Subquery_SetComparison>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Subquery_SetComparison& from);
  void MergeFrom(const Expression_Subquery_SetComparison& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_SetComparison* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Subquery.SetComparison";
  }
  protected:
  explicit Expression_Subquery_SetComparison(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Subquery_SetComparison_ComparisonOp ComparisonOp;
  static constexpr ComparisonOp COMPARISON_OP_UNSPECIFIED =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_UNSPECIFIED;
  static constexpr ComparisonOp COMPARISON_OP_EQ =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_EQ;
  static constexpr ComparisonOp COMPARISON_OP_NE =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_NE;
  static constexpr ComparisonOp COMPARISON_OP_LT =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LT;
  static constexpr ComparisonOp COMPARISON_OP_GT =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GT;
  static constexpr ComparisonOp COMPARISON_OP_LE =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LE;
  static constexpr ComparisonOp COMPARISON_OP_GE =
    Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GE;
  static inline bool ComparisonOp_IsValid(int value) {
    return Expression_Subquery_SetComparison_ComparisonOp_IsValid(value);
  }
  static constexpr ComparisonOp ComparisonOp_MIN =
    Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MIN;
  static constexpr ComparisonOp ComparisonOp_MAX =
    Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MAX;
  static constexpr int ComparisonOp_ARRAYSIZE =
    Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ComparisonOp_descriptor() {
    return Expression_Subquery_SetComparison_ComparisonOp_descriptor();
  }
  template<typename T>
  static inline const std::string& ComparisonOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ComparisonOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ComparisonOp_Name.");
    return Expression_Subquery_SetComparison_ComparisonOp_Name(enum_t_value);
  }
  static inline bool ComparisonOp_Parse(const std::string& name,
      ComparisonOp* value) {
    return Expression_Subquery_SetComparison_ComparisonOp_Parse(name, value);
  }

  typedef Expression_Subquery_SetComparison_ReductionOp ReductionOp;
  static constexpr ReductionOp REDUCTION_OP_UNSPECIFIED =
    Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_UNSPECIFIED;
  static constexpr ReductionOp REDUCTION_OP_ANY =
    Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ANY;
  static constexpr ReductionOp REDUCTION_OP_ALL =
    Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ALL;
  static inline bool ReductionOp_IsValid(int value) {
    return Expression_Subquery_SetComparison_ReductionOp_IsValid(value);
  }
  static constexpr ReductionOp ReductionOp_MIN =
    Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MIN;
  static constexpr ReductionOp ReductionOp_MAX =
    Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MAX;
  static constexpr int ReductionOp_ARRAYSIZE =
    Expression_Subquery_SetComparison_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReductionOp_descriptor() {
    return Expression_Subquery_SetComparison_ReductionOp_descriptor();
  }
  template<typename T>
  static inline const std::string& ReductionOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReductionOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReductionOp_Name.");
    return Expression_Subquery_SetComparison_ReductionOp_Name(enum_t_value);
  }
  static inline bool ReductionOp_Parse(const std::string& name,
      ReductionOp* value) {
    return Expression_Subquery_SetComparison_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kReductionOpFieldNumber = 1,
    kComparisonOpFieldNumber = 2,
  };
  // .substrait.proto.Expression left = 3;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::proto::Expression& left() const;
  ::substrait::proto::Expression* release_left();
  ::substrait::proto::Expression* mutable_left();
  void set_allocated_left(::substrait::proto::Expression* left);
  private:
  const ::substrait::proto::Expression& _internal_left() const;
  ::substrait::proto::Expression* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::proto::Expression* left);
  ::substrait::proto::Expression* unsafe_arena_release_left();

  // .substrait.proto.Rel right = 4;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::proto::Rel& right() const;
  ::substrait::proto::Rel* release_right();
  ::substrait::proto::Rel* mutable_right();
  void set_allocated_right(::substrait::proto::Rel* right);
  private:
  const ::substrait::proto::Rel& _internal_right() const;
  ::substrait::proto::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::proto::Rel* right);
  ::substrait::proto::Rel* unsafe_arena_release_right();

  // .substrait.proto.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
  void clear_reduction_op();
  ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp reduction_op() const;
  void set_reduction_op(::substrait::proto::Expression_Subquery_SetComparison_ReductionOp value);
  private:
  ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp _internal_reduction_op() const;
  void _internal_set_reduction_op(::substrait::proto::Expression_Subquery_SetComparison_ReductionOp value);
  public:

  // .substrait.proto.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
  void clear_comparison_op();
  ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp comparison_op() const;
  void set_comparison_op(::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp value);
  private:
  ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp _internal_comparison_op() const;
  void _internal_set_comparison_op(::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Subquery.SetComparison)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* left_;
  ::substrait::proto::Rel* right_;
  int reduction_op_;
  int comparison_op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression_Subquery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression.Subquery) */ {
 public:
  inline Expression_Subquery() : Expression_Subquery(nullptr) {};
  virtual ~Expression_Subquery();

  Expression_Subquery(const Expression_Subquery& from);
  Expression_Subquery(Expression_Subquery&& from) noexcept
    : Expression_Subquery() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery& operator=(const Expression_Subquery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery& operator=(Expression_Subquery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression_Subquery& default_instance();

  enum SubqueryTypeCase {
    kScalar = 1,
    kInPredicate = 2,
    kSetPredicate = 3,
    kSetComparison = 4,
    SUBQUERY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression_Subquery* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery*>(
               &_Expression_Subquery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(Expression_Subquery& a, Expression_Subquery& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression_Subquery* New() const final {
    return CreateMaybeMessage<Expression_Subquery>(nullptr);
  }

  Expression_Subquery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression_Subquery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression_Subquery& from);
  void MergeFrom(const Expression_Subquery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression.Subquery";
  }
  protected:
  explicit Expression_Subquery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Subquery_Scalar Scalar;
  typedef Expression_Subquery_InPredicate InPredicate;
  typedef Expression_Subquery_SetPredicate SetPredicate;
  typedef Expression_Subquery_SetComparison SetComparison;

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
    kInPredicateFieldNumber = 2,
    kSetPredicateFieldNumber = 3,
    kSetComparisonFieldNumber = 4,
  };
  // .substrait.proto.Expression.Subquery.Scalar scalar = 1;
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;
  public:
  void clear_scalar();
  const ::substrait::proto::Expression_Subquery_Scalar& scalar() const;
  ::substrait::proto::Expression_Subquery_Scalar* release_scalar();
  ::substrait::proto::Expression_Subquery_Scalar* mutable_scalar();
  void set_allocated_scalar(::substrait::proto::Expression_Subquery_Scalar* scalar);
  private:
  const ::substrait::proto::Expression_Subquery_Scalar& _internal_scalar() const;
  ::substrait::proto::Expression_Subquery_Scalar* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::substrait::proto::Expression_Subquery_Scalar* scalar);
  ::substrait::proto::Expression_Subquery_Scalar* unsafe_arena_release_scalar();

  // .substrait.proto.Expression.Subquery.InPredicate in_predicate = 2;
  bool has_in_predicate() const;
  private:
  bool _internal_has_in_predicate() const;
  public:
  void clear_in_predicate();
  const ::substrait::proto::Expression_Subquery_InPredicate& in_predicate() const;
  ::substrait::proto::Expression_Subquery_InPredicate* release_in_predicate();
  ::substrait::proto::Expression_Subquery_InPredicate* mutable_in_predicate();
  void set_allocated_in_predicate(::substrait::proto::Expression_Subquery_InPredicate* in_predicate);
  private:
  const ::substrait::proto::Expression_Subquery_InPredicate& _internal_in_predicate() const;
  ::substrait::proto::Expression_Subquery_InPredicate* _internal_mutable_in_predicate();
  public:
  void unsafe_arena_set_allocated_in_predicate(
      ::substrait::proto::Expression_Subquery_InPredicate* in_predicate);
  ::substrait::proto::Expression_Subquery_InPredicate* unsafe_arena_release_in_predicate();

  // .substrait.proto.Expression.Subquery.SetPredicate set_predicate = 3;
  bool has_set_predicate() const;
  private:
  bool _internal_has_set_predicate() const;
  public:
  void clear_set_predicate();
  const ::substrait::proto::Expression_Subquery_SetPredicate& set_predicate() const;
  ::substrait::proto::Expression_Subquery_SetPredicate* release_set_predicate();
  ::substrait::proto::Expression_Subquery_SetPredicate* mutable_set_predicate();
  void set_allocated_set_predicate(::substrait::proto::Expression_Subquery_SetPredicate* set_predicate);
  private:
  const ::substrait::proto::Expression_Subquery_SetPredicate& _internal_set_predicate() const;
  ::substrait::proto::Expression_Subquery_SetPredicate* _internal_mutable_set_predicate();
  public:
  void unsafe_arena_set_allocated_set_predicate(
      ::substrait::proto::Expression_Subquery_SetPredicate* set_predicate);
  ::substrait::proto::Expression_Subquery_SetPredicate* unsafe_arena_release_set_predicate();

  // .substrait.proto.Expression.Subquery.SetComparison set_comparison = 4;
  bool has_set_comparison() const;
  private:
  bool _internal_has_set_comparison() const;
  public:
  void clear_set_comparison();
  const ::substrait::proto::Expression_Subquery_SetComparison& set_comparison() const;
  ::substrait::proto::Expression_Subquery_SetComparison* release_set_comparison();
  ::substrait::proto::Expression_Subquery_SetComparison* mutable_set_comparison();
  void set_allocated_set_comparison(::substrait::proto::Expression_Subquery_SetComparison* set_comparison);
  private:
  const ::substrait::proto::Expression_Subquery_SetComparison& _internal_set_comparison() const;
  ::substrait::proto::Expression_Subquery_SetComparison* _internal_mutable_set_comparison();
  public:
  void unsafe_arena_set_allocated_set_comparison(
      ::substrait::proto::Expression_Subquery_SetComparison* set_comparison);
  ::substrait::proto::Expression_Subquery_SetComparison* unsafe_arena_release_set_comparison();

  void clear_subquery_type();
  SubqueryTypeCase subquery_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression.Subquery)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_in_predicate();
  void set_has_set_predicate();
  void set_has_set_comparison();

  inline bool has_subquery_type() const;
  inline void clear_has_subquery_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SubqueryTypeUnion {
    SubqueryTypeUnion() {}
    ::substrait::proto::Expression_Subquery_Scalar* scalar_;
    ::substrait::proto::Expression_Subquery_InPredicate* in_predicate_;
    ::substrait::proto::Expression_Subquery_SetPredicate* set_predicate_;
    ::substrait::proto::Expression_Subquery_SetComparison* set_comparison_;
  } subquery_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class Expression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.Expression) */ {
 public:
  inline Expression() : Expression(nullptr) {};
  virtual ~Expression();

  Expression(const Expression& from);
  Expression(Expression&& from) noexcept
    : Expression() {
    *this = ::std::move(from);
  }

  inline Expression& operator=(const Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression& operator=(Expression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expression& default_instance();

  enum RexTypeCase {
    kLiteral = 1,
    kSelection = 2,
    kScalarFunction = 3,
    kWindowFunction = 5,
    kIfThen = 6,
    kSwitchExpression = 7,
    kSingularOrList = 8,
    kMultiOrList = 9,
    kCast = 11,
    kSubquery = 12,
    kNested = 13,
    kEnum = 10,
    REX_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression* internal_default_instance() {
    return reinterpret_cast<const Expression*>(
               &_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Expression& a, Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expression* New() const final {
    return CreateMaybeMessage<Expression>(nullptr);
  }

  Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expression& from);
  void MergeFrom(const Expression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.Expression";
  }
  protected:
  explicit Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expression_Enum Enum;
  typedef Expression_Literal Literal;
  typedef Expression_Nested Nested;
  typedef Expression_ScalarFunction ScalarFunction;
  typedef Expression_WindowFunction WindowFunction;
  typedef Expression_IfThen IfThen;
  typedef Expression_Cast Cast;
  typedef Expression_SwitchExpression SwitchExpression;
  typedef Expression_SingularOrList SingularOrList;
  typedef Expression_MultiOrList MultiOrList;
  typedef Expression_EmbeddedFunction EmbeddedFunction;
  typedef Expression_ReferenceSegment ReferenceSegment;
  typedef Expression_MaskExpression MaskExpression;
  typedef Expression_FieldReference FieldReference;
  typedef Expression_Subquery Subquery;

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kScalarFunctionFieldNumber = 3,
    kWindowFunctionFieldNumber = 5,
    kIfThenFieldNumber = 6,
    kSwitchExpressionFieldNumber = 7,
    kSingularOrListFieldNumber = 8,
    kMultiOrListFieldNumber = 9,
    kCastFieldNumber = 11,
    kSubqueryFieldNumber = 12,
    kNestedFieldNumber = 13,
    kEnumFieldNumber = 10,
  };
  // .substrait.proto.Expression.Literal literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::substrait::proto::Expression_Literal& literal() const;
  ::substrait::proto::Expression_Literal* release_literal();
  ::substrait::proto::Expression_Literal* mutable_literal();
  void set_allocated_literal(::substrait::proto::Expression_Literal* literal);
  private:
  const ::substrait::proto::Expression_Literal& _internal_literal() const;
  ::substrait::proto::Expression_Literal* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::substrait::proto::Expression_Literal* literal);
  ::substrait::proto::Expression_Literal* unsafe_arena_release_literal();

  // .substrait.proto.Expression.FieldReference selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::substrait::proto::Expression_FieldReference& selection() const;
  ::substrait::proto::Expression_FieldReference* release_selection();
  ::substrait::proto::Expression_FieldReference* mutable_selection();
  void set_allocated_selection(::substrait::proto::Expression_FieldReference* selection);
  private:
  const ::substrait::proto::Expression_FieldReference& _internal_selection() const;
  ::substrait::proto::Expression_FieldReference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::substrait::proto::Expression_FieldReference* selection);
  ::substrait::proto::Expression_FieldReference* unsafe_arena_release_selection();

  // .substrait.proto.Expression.ScalarFunction scalar_function = 3;
  bool has_scalar_function() const;
  private:
  bool _internal_has_scalar_function() const;
  public:
  void clear_scalar_function();
  const ::substrait::proto::Expression_ScalarFunction& scalar_function() const;
  ::substrait::proto::Expression_ScalarFunction* release_scalar_function();
  ::substrait::proto::Expression_ScalarFunction* mutable_scalar_function();
  void set_allocated_scalar_function(::substrait::proto::Expression_ScalarFunction* scalar_function);
  private:
  const ::substrait::proto::Expression_ScalarFunction& _internal_scalar_function() const;
  ::substrait::proto::Expression_ScalarFunction* _internal_mutable_scalar_function();
  public:
  void unsafe_arena_set_allocated_scalar_function(
      ::substrait::proto::Expression_ScalarFunction* scalar_function);
  ::substrait::proto::Expression_ScalarFunction* unsafe_arena_release_scalar_function();

  // .substrait.proto.Expression.WindowFunction window_function = 5;
  bool has_window_function() const;
  private:
  bool _internal_has_window_function() const;
  public:
  void clear_window_function();
  const ::substrait::proto::Expression_WindowFunction& window_function() const;
  ::substrait::proto::Expression_WindowFunction* release_window_function();
  ::substrait::proto::Expression_WindowFunction* mutable_window_function();
  void set_allocated_window_function(::substrait::proto::Expression_WindowFunction* window_function);
  private:
  const ::substrait::proto::Expression_WindowFunction& _internal_window_function() const;
  ::substrait::proto::Expression_WindowFunction* _internal_mutable_window_function();
  public:
  void unsafe_arena_set_allocated_window_function(
      ::substrait::proto::Expression_WindowFunction* window_function);
  ::substrait::proto::Expression_WindowFunction* unsafe_arena_release_window_function();

  // .substrait.proto.Expression.IfThen if_then = 6;
  bool has_if_then() const;
  private:
  bool _internal_has_if_then() const;
  public:
  void clear_if_then();
  const ::substrait::proto::Expression_IfThen& if_then() const;
  ::substrait::proto::Expression_IfThen* release_if_then();
  ::substrait::proto::Expression_IfThen* mutable_if_then();
  void set_allocated_if_then(::substrait::proto::Expression_IfThen* if_then);
  private:
  const ::substrait::proto::Expression_IfThen& _internal_if_then() const;
  ::substrait::proto::Expression_IfThen* _internal_mutable_if_then();
  public:
  void unsafe_arena_set_allocated_if_then(
      ::substrait::proto::Expression_IfThen* if_then);
  ::substrait::proto::Expression_IfThen* unsafe_arena_release_if_then();

  // .substrait.proto.Expression.SwitchExpression switch_expression = 7;
  bool has_switch_expression() const;
  private:
  bool _internal_has_switch_expression() const;
  public:
  void clear_switch_expression();
  const ::substrait::proto::Expression_SwitchExpression& switch_expression() const;
  ::substrait::proto::Expression_SwitchExpression* release_switch_expression();
  ::substrait::proto::Expression_SwitchExpression* mutable_switch_expression();
  void set_allocated_switch_expression(::substrait::proto::Expression_SwitchExpression* switch_expression);
  private:
  const ::substrait::proto::Expression_SwitchExpression& _internal_switch_expression() const;
  ::substrait::proto::Expression_SwitchExpression* _internal_mutable_switch_expression();
  public:
  void unsafe_arena_set_allocated_switch_expression(
      ::substrait::proto::Expression_SwitchExpression* switch_expression);
  ::substrait::proto::Expression_SwitchExpression* unsafe_arena_release_switch_expression();

  // .substrait.proto.Expression.SingularOrList singular_or_list = 8;
  bool has_singular_or_list() const;
  private:
  bool _internal_has_singular_or_list() const;
  public:
  void clear_singular_or_list();
  const ::substrait::proto::Expression_SingularOrList& singular_or_list() const;
  ::substrait::proto::Expression_SingularOrList* release_singular_or_list();
  ::substrait::proto::Expression_SingularOrList* mutable_singular_or_list();
  void set_allocated_singular_or_list(::substrait::proto::Expression_SingularOrList* singular_or_list);
  private:
  const ::substrait::proto::Expression_SingularOrList& _internal_singular_or_list() const;
  ::substrait::proto::Expression_SingularOrList* _internal_mutable_singular_or_list();
  public:
  void unsafe_arena_set_allocated_singular_or_list(
      ::substrait::proto::Expression_SingularOrList* singular_or_list);
  ::substrait::proto::Expression_SingularOrList* unsafe_arena_release_singular_or_list();

  // .substrait.proto.Expression.MultiOrList multi_or_list = 9;
  bool has_multi_or_list() const;
  private:
  bool _internal_has_multi_or_list() const;
  public:
  void clear_multi_or_list();
  const ::substrait::proto::Expression_MultiOrList& multi_or_list() const;
  ::substrait::proto::Expression_MultiOrList* release_multi_or_list();
  ::substrait::proto::Expression_MultiOrList* mutable_multi_or_list();
  void set_allocated_multi_or_list(::substrait::proto::Expression_MultiOrList* multi_or_list);
  private:
  const ::substrait::proto::Expression_MultiOrList& _internal_multi_or_list() const;
  ::substrait::proto::Expression_MultiOrList* _internal_mutable_multi_or_list();
  public:
  void unsafe_arena_set_allocated_multi_or_list(
      ::substrait::proto::Expression_MultiOrList* multi_or_list);
  ::substrait::proto::Expression_MultiOrList* unsafe_arena_release_multi_or_list();

  // .substrait.proto.Expression.Cast cast = 11;
  bool has_cast() const;
  private:
  bool _internal_has_cast() const;
  public:
  void clear_cast();
  const ::substrait::proto::Expression_Cast& cast() const;
  ::substrait::proto::Expression_Cast* release_cast();
  ::substrait::proto::Expression_Cast* mutable_cast();
  void set_allocated_cast(::substrait::proto::Expression_Cast* cast);
  private:
  const ::substrait::proto::Expression_Cast& _internal_cast() const;
  ::substrait::proto::Expression_Cast* _internal_mutable_cast();
  public:
  void unsafe_arena_set_allocated_cast(
      ::substrait::proto::Expression_Cast* cast);
  ::substrait::proto::Expression_Cast* unsafe_arena_release_cast();

  // .substrait.proto.Expression.Subquery subquery = 12;
  bool has_subquery() const;
  private:
  bool _internal_has_subquery() const;
  public:
  void clear_subquery();
  const ::substrait::proto::Expression_Subquery& subquery() const;
  ::substrait::proto::Expression_Subquery* release_subquery();
  ::substrait::proto::Expression_Subquery* mutable_subquery();
  void set_allocated_subquery(::substrait::proto::Expression_Subquery* subquery);
  private:
  const ::substrait::proto::Expression_Subquery& _internal_subquery() const;
  ::substrait::proto::Expression_Subquery* _internal_mutable_subquery();
  public:
  void unsafe_arena_set_allocated_subquery(
      ::substrait::proto::Expression_Subquery* subquery);
  ::substrait::proto::Expression_Subquery* unsafe_arena_release_subquery();

  // .substrait.proto.Expression.Nested nested = 13;
  bool has_nested() const;
  private:
  bool _internal_has_nested() const;
  public:
  void clear_nested();
  const ::substrait::proto::Expression_Nested& nested() const;
  ::substrait::proto::Expression_Nested* release_nested();
  ::substrait::proto::Expression_Nested* mutable_nested();
  void set_allocated_nested(::substrait::proto::Expression_Nested* nested);
  private:
  const ::substrait::proto::Expression_Nested& _internal_nested() const;
  ::substrait::proto::Expression_Nested* _internal_mutable_nested();
  public:
  void unsafe_arena_set_allocated_nested(
      ::substrait::proto::Expression_Nested* nested);
  ::substrait::proto::Expression_Nested* unsafe_arena_release_nested();

  // .substrait.proto.Expression.Enum enum = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  PROTOBUF_DEPRECATED void clear_enum_();
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression_Enum& enum_() const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_Enum* release_enum_();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_Enum* mutable_enum_();
  PROTOBUF_DEPRECATED void set_allocated_enum_(::substrait::proto::Expression_Enum* enum_);
  private:
  const ::substrait::proto::Expression_Enum& _internal_enum_() const;
  ::substrait::proto::Expression_Enum* _internal_mutable_enum_();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_enum_(
      ::substrait::proto::Expression_Enum* enum_);
  PROTOBUF_DEPRECATED ::substrait::proto::Expression_Enum* unsafe_arena_release_enum_();

  void clear_rex_type();
  RexTypeCase rex_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.Expression)
 private:
  class _Internal;
  void set_has_literal();
  void set_has_selection();
  void set_has_scalar_function();
  void set_has_window_function();
  void set_has_if_then();
  void set_has_switch_expression();
  void set_has_singular_or_list();
  void set_has_multi_or_list();
  void set_has_cast();
  void set_has_subquery();
  void set_has_nested();
  void set_has_enum_();

  inline bool has_rex_type() const;
  inline void clear_has_rex_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RexTypeUnion {
    RexTypeUnion() {}
    ::substrait::proto::Expression_Literal* literal_;
    ::substrait::proto::Expression_FieldReference* selection_;
    ::substrait::proto::Expression_ScalarFunction* scalar_function_;
    ::substrait::proto::Expression_WindowFunction* window_function_;
    ::substrait::proto::Expression_IfThen* if_then_;
    ::substrait::proto::Expression_SwitchExpression* switch_expression_;
    ::substrait::proto::Expression_SingularOrList* singular_or_list_;
    ::substrait::proto::Expression_MultiOrList* multi_or_list_;
    ::substrait::proto::Expression_Cast* cast_;
    ::substrait::proto::Expression_Subquery* subquery_;
    ::substrait::proto::Expression_Nested* nested_;
    ::substrait::proto::Expression_Enum* enum__;
  } rex_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class SortField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.SortField) */ {
 public:
  inline SortField() : SortField(nullptr) {};
  virtual ~SortField();

  SortField(const SortField& from);
  SortField(SortField&& from) noexcept
    : SortField() {
    *this = ::std::move(from);
  }

  inline SortField& operator=(const SortField& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortField& operator=(SortField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SortField& default_instance();

  enum SortKindCase {
    kDirection = 2,
    kComparisonFunctionReference = 3,
    SORT_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SortField* internal_default_instance() {
    return reinterpret_cast<const SortField*>(
               &_SortField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SortField& a, SortField& b) {
    a.Swap(&b);
  }
  inline void Swap(SortField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortField* New() const final {
    return CreateMaybeMessage<SortField>(nullptr);
  }

  SortField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortField& from);
  void MergeFrom(const SortField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.SortField";
  }
  protected:
  explicit SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SortField_SortDirection SortDirection;
  static constexpr SortDirection SORT_DIRECTION_UNSPECIFIED =
    SortField_SortDirection_SORT_DIRECTION_UNSPECIFIED;
  static constexpr SortDirection SORT_DIRECTION_ASC_NULLS_FIRST =
    SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_FIRST;
  static constexpr SortDirection SORT_DIRECTION_ASC_NULLS_LAST =
    SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_LAST;
  static constexpr SortDirection SORT_DIRECTION_DESC_NULLS_FIRST =
    SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_FIRST;
  static constexpr SortDirection SORT_DIRECTION_DESC_NULLS_LAST =
    SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_LAST;
  static constexpr SortDirection SORT_DIRECTION_CLUSTERED =
    SortField_SortDirection_SORT_DIRECTION_CLUSTERED;
  static inline bool SortDirection_IsValid(int value) {
    return SortField_SortDirection_IsValid(value);
  }
  static constexpr SortDirection SortDirection_MIN =
    SortField_SortDirection_SortDirection_MIN;
  static constexpr SortDirection SortDirection_MAX =
    SortField_SortDirection_SortDirection_MAX;
  static constexpr int SortDirection_ARRAYSIZE =
    SortField_SortDirection_SortDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortDirection_descriptor() {
    return SortField_SortDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& SortDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortDirection_Name.");
    return SortField_SortDirection_Name(enum_t_value);
  }
  static inline bool SortDirection_Parse(const std::string& name,
      SortDirection* value) {
    return SortField_SortDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExprFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kComparisonFunctionReferenceFieldNumber = 3,
  };
  // .substrait.proto.Expression expr = 1;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const ::substrait::proto::Expression& expr() const;
  ::substrait::proto::Expression* release_expr();
  ::substrait::proto::Expression* mutable_expr();
  void set_allocated_expr(::substrait::proto::Expression* expr);
  private:
  const ::substrait::proto::Expression& _internal_expr() const;
  ::substrait::proto::Expression* _internal_mutable_expr();
  public:
  void unsafe_arena_set_allocated_expr(
      ::substrait::proto::Expression* expr);
  ::substrait::proto::Expression* unsafe_arena_release_expr();

  // .substrait.proto.SortField.SortDirection direction = 2;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::substrait::proto::SortField_SortDirection direction() const;
  void set_direction(::substrait::proto::SortField_SortDirection value);
  private:
  ::substrait::proto::SortField_SortDirection _internal_direction() const;
  void _internal_set_direction(::substrait::proto::SortField_SortDirection value);
  public:

  // uint32 comparison_function_reference = 3;
  private:
  bool _internal_has_comparison_function_reference() const;
  public:
  void clear_comparison_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 comparison_function_reference() const;
  void set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comparison_function_reference() const;
  void _internal_set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_sort_kind();
  SortKindCase sort_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.proto.SortField)
 private:
  class _Internal;
  void set_has_direction();
  void set_has_comparison_function_reference();

  inline bool has_sort_kind() const;
  inline void clear_has_sort_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::proto::Expression* expr_;
  union SortKindUnion {
    SortKindUnion() {}
    int direction_;
    ::PROTOBUF_NAMESPACE_ID::uint32 comparison_function_reference_;
  } sort_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class AggregateFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.AggregateFunction) */ {
 public:
  inline AggregateFunction() : AggregateFunction(nullptr) {};
  virtual ~AggregateFunction();

  AggregateFunction(const AggregateFunction& from);
  AggregateFunction(AggregateFunction&& from) noexcept
    : AggregateFunction() {
    *this = ::std::move(from);
  }

  inline AggregateFunction& operator=(const AggregateFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateFunction& operator=(AggregateFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateFunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateFunction* internal_default_instance() {
    return reinterpret_cast<const AggregateFunction*>(
               &_AggregateFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(AggregateFunction& a, AggregateFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateFunction* New() const final {
    return CreateMaybeMessage<AggregateFunction>(nullptr);
  }

  AggregateFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateFunction& from);
  void MergeFrom(const AggregateFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.AggregateFunction";
  }
  protected:
  explicit AggregateFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AggregateFunction_AggregationInvocation AggregationInvocation;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_UNSPECIFIED =
    AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_UNSPECIFIED;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_ALL =
    AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_ALL;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_DISTINCT =
    AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_DISTINCT;
  static inline bool AggregationInvocation_IsValid(int value) {
    return AggregateFunction_AggregationInvocation_IsValid(value);
  }
  static constexpr AggregationInvocation AggregationInvocation_MIN =
    AggregateFunction_AggregationInvocation_AggregationInvocation_MIN;
  static constexpr AggregationInvocation AggregationInvocation_MAX =
    AggregateFunction_AggregationInvocation_AggregationInvocation_MAX;
  static constexpr int AggregationInvocation_ARRAYSIZE =
    AggregateFunction_AggregationInvocation_AggregationInvocation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AggregationInvocation_descriptor() {
    return AggregateFunction_AggregationInvocation_descriptor();
  }
  template<typename T>
  static inline const std::string& AggregationInvocation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AggregationInvocation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AggregationInvocation_Name.");
    return AggregateFunction_AggregationInvocation_Name(enum_t_value);
  }
  static inline bool AggregationInvocation_Parse(const std::string& name,
      AggregationInvocation* value) {
    return AggregateFunction_AggregationInvocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kSortsFieldNumber = 3,
    kArgumentsFieldNumber = 7,
    kOptionsFieldNumber = 8,
    kOutputTypeFieldNumber = 5,
    kFunctionReferenceFieldNumber = 1,
    kPhaseFieldNumber = 4,
    kInvocationFieldNumber = 6,
  };
  // repeated .substrait.proto.Expression args = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_args();
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* mutable_args(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
      mutable_args();
  private:
  const ::substrait::proto::Expression& _internal_args(int index) const;
  ::substrait::proto::Expression* _internal_add_args();
  public:
  PROTOBUF_DEPRECATED const ::substrait::proto::Expression& args(int index) const;
  PROTOBUF_DEPRECATED ::substrait::proto::Expression* add_args();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
      args() const;

  // repeated .substrait.proto.SortField sorts = 3;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::substrait::proto::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
      mutable_sorts();
  private:
  const ::substrait::proto::SortField& _internal_sorts(int index) const;
  ::substrait::proto::SortField* _internal_add_sorts();
  public:
  const ::substrait::proto::SortField& sorts(int index) const;
  ::substrait::proto::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
      sorts() const;

  // repeated .substrait.proto.FunctionArgument arguments = 7;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::substrait::proto::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::proto::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::proto::FunctionArgument* _internal_add_arguments();
  public:
  const ::substrait::proto::FunctionArgument& arguments(int index) const;
  ::substrait::proto::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
      arguments() const;

  // repeated .substrait.proto.FunctionOption options = 8;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::substrait::proto::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::proto::FunctionOption& _internal_options(int index) const;
  ::substrait::proto::FunctionOption* _internal_add_options();
  public:
  const ::substrait::proto::FunctionOption& options(int index) const;
  ::substrait::proto::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
      options() const;

  // .substrait.proto.Type output_type = 5;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::substrait::proto::Type& output_type() const;
  ::substrait::proto::Type* release_output_type();
  ::substrait::proto::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::proto::Type* output_type);
  private:
  const ::substrait::proto::Type& _internal_output_type() const;
  ::substrait::proto::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::proto::Type* output_type);
  ::substrait::proto::Type* unsafe_arena_release_output_type();

  // uint32 function_reference = 1;
  void clear_function_reference();
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference() const;
  void set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_function_reference() const;
  void _internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .substrait.proto.AggregationPhase phase = 4;
  void clear_phase();
  ::substrait::proto::AggregationPhase phase() const;
  void set_phase(::substrait::proto::AggregationPhase value);
  private:
  ::substrait::proto::AggregationPhase _internal_phase() const;
  void _internal_set_phase(::substrait::proto::AggregationPhase value);
  public:

  // .substrait.proto.AggregateFunction.AggregationInvocation invocation = 6;
  void clear_invocation();
  ::substrait::proto::AggregateFunction_AggregationInvocation invocation() const;
  void set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  private:
  ::substrait::proto::AggregateFunction_AggregationInvocation _internal_invocation() const;
  void _internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.AggregateFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression > args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField > sorts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument > arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption > options_;
  ::substrait::proto::Type* output_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 function_reference_;
  int phase_;
  int invocation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// -------------------------------------------------------------------

class ReferenceRel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.proto.ReferenceRel) */ {
 public:
  inline ReferenceRel() : ReferenceRel(nullptr) {};
  virtual ~ReferenceRel();

  ReferenceRel(const ReferenceRel& from);
  ReferenceRel(ReferenceRel&& from) noexcept
    : ReferenceRel() {
    *this = ::std::move(from);
  }

  inline ReferenceRel& operator=(const ReferenceRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceRel& operator=(ReferenceRel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReferenceRel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceRel* internal_default_instance() {
    return reinterpret_cast<const ReferenceRel*>(
               &_ReferenceRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ReferenceRel& a, ReferenceRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceRel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceRel* New() const final {
    return CreateMaybeMessage<ReferenceRel>(nullptr);
  }

  ReferenceRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceRel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceRel& from);
  void MergeFrom(const ReferenceRel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceRel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.proto.ReferenceRel";
  }
  protected:
  explicit ReferenceRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_substrait_2fproto_2falgebra_2eproto);
    return ::descriptor_table_substrait_2fproto_2falgebra_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtreeOrdinalFieldNumber = 1,
  };
  // int32 subtree_ordinal = 1;
  void clear_subtree_ordinal();
  ::PROTOBUF_NAMESPACE_ID::int32 subtree_ordinal() const;
  void set_subtree_ordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtree_ordinal() const;
  void _internal_set_subtree_ordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.proto.ReferenceRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtree_ordinal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fproto_2falgebra_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelCommon_Direct

// -------------------------------------------------------------------

// RelCommon_Emit

// repeated int32 output_mapping = 1;
inline int RelCommon_Emit::_internal_output_mapping_size() const {
  return output_mapping_.size();
}
inline int RelCommon_Emit::output_mapping_size() const {
  return _internal_output_mapping_size();
}
inline void RelCommon_Emit::clear_output_mapping() {
  output_mapping_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelCommon_Emit::_internal_output_mapping(int index) const {
  return output_mapping_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelCommon_Emit::output_mapping(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Emit.output_mapping)
  return _internal_output_mapping(index);
}
inline void RelCommon_Emit::set_output_mapping(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_mapping_.Set(index, value);
  // @@protoc_insertion_point(field_set:substrait.proto.RelCommon.Emit.output_mapping)
}
inline void RelCommon_Emit::_internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_mapping_.Add(value);
}
inline void RelCommon_Emit::add_output_mapping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_output_mapping(value);
  // @@protoc_insertion_point(field_add:substrait.proto.RelCommon.Emit.output_mapping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RelCommon_Emit::_internal_output_mapping() const {
  return output_mapping_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RelCommon_Emit::output_mapping() const {
  // @@protoc_insertion_point(field_list:substrait.proto.RelCommon.Emit.output_mapping)
  return _internal_output_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RelCommon_Emit::_internal_mutable_output_mapping() {
  return &output_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RelCommon_Emit::mutable_output_mapping() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.RelCommon.Emit.output_mapping)
  return _internal_mutable_output_mapping();
}

// -------------------------------------------------------------------

// RelCommon_Hint_Stats

// double row_count = 1;
inline void RelCommon_Hint_Stats::clear_row_count() {
  row_count_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_row_count() const {
  return row_count_;
}
inline double RelCommon_Hint_Stats::row_count() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.Stats.row_count)
  return _internal_row_count();
}
inline void RelCommon_Hint_Stats::_internal_set_row_count(double value) {
  
  row_count_ = value;
}
inline void RelCommon_Hint_Stats::set_row_count(double value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:substrait.proto.RelCommon.Hint.Stats.row_count)
}

// double record_size = 2;
inline void RelCommon_Hint_Stats::clear_record_size() {
  record_size_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_record_size() const {
  return record_size_;
}
inline double RelCommon_Hint_Stats::record_size() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.Stats.record_size)
  return _internal_record_size();
}
inline void RelCommon_Hint_Stats::_internal_set_record_size(double value) {
  
  record_size_ = value;
}
inline void RelCommon_Hint_Stats::set_record_size(double value) {
  _internal_set_record_size(value);
  // @@protoc_insertion_point(field_set:substrait.proto.RelCommon.Hint.Stats.record_size)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool RelCommon_Hint_Stats::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint_Stats::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint_Stats::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint_Stats::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.Stats.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_Stats::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.Hint.Stats.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_Stats::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_Stats::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.Hint.Stats.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_Stats::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_Stats::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.Hint.Stats.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void RelCommon_Hint_Stats::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.Hint.Stats.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint_RuntimeConstraint

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool RelCommon_Hint_RuntimeConstraint::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint_RuntimeConstraint::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_RuntimeConstraint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void RelCommon_Hint_RuntimeConstraint::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint

// .substrait.proto.RelCommon.Hint.Stats stats = 1;
inline bool RelCommon_Hint::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool RelCommon_Hint::has_stats() const {
  return _internal_has_stats();
}
inline void RelCommon_Hint::clear_stats() {
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::substrait::proto::RelCommon_Hint_Stats& RelCommon_Hint::_internal_stats() const {
  const ::substrait::proto::RelCommon_Hint_Stats* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon_Hint_Stats*>(
      &::substrait::proto::_RelCommon_Hint_Stats_default_instance_);
}
inline const ::substrait::proto::RelCommon_Hint_Stats& RelCommon_Hint::stats() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.stats)
  return _internal_stats();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_stats(
    ::substrait::proto::RelCommon_Hint_Stats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.Hint.stats)
}
inline ::substrait::proto::RelCommon_Hint_Stats* RelCommon_Hint::release_stats() {
  auto temp = unsafe_arena_release_stats();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon_Hint_Stats* RelCommon_Hint::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.Hint.stats)
  
  ::substrait::proto::RelCommon_Hint_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon_Hint_Stats* RelCommon_Hint::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon_Hint_Stats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::substrait::proto::RelCommon_Hint_Stats* RelCommon_Hint::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.Hint.stats)
  return _internal_mutable_stats();
}
inline void RelCommon_Hint::set_allocated_stats(::substrait::proto::RelCommon_Hint_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.Hint.stats)
}

// .substrait.proto.RelCommon.Hint.RuntimeConstraint constraint = 2;
inline bool RelCommon_Hint::_internal_has_constraint() const {
  return this != internal_default_instance() && constraint_ != nullptr;
}
inline bool RelCommon_Hint::has_constraint() const {
  return _internal_has_constraint();
}
inline void RelCommon_Hint::clear_constraint() {
  if (GetArena() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
}
inline const ::substrait::proto::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::_internal_constraint() const {
  const ::substrait::proto::RelCommon_Hint_RuntimeConstraint* p = constraint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon_Hint_RuntimeConstraint*>(
      &::substrait::proto::_RelCommon_Hint_RuntimeConstraint_default_instance_);
}
inline const ::substrait::proto::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::constraint() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.constraint)
  return _internal_constraint();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_constraint(
    ::substrait::proto::RelCommon_Hint_RuntimeConstraint* constraint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.Hint.constraint)
}
inline ::substrait::proto::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::release_constraint() {
  auto temp = unsafe_arena_release_constraint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.Hint.constraint)
  
  ::substrait::proto::RelCommon_Hint_RuntimeConstraint* temp = constraint_;
  constraint_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::_internal_mutable_constraint() {
  
  if (constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon_Hint_RuntimeConstraint>(GetArena());
    constraint_ = p;
  }
  return constraint_;
}
inline ::substrait::proto::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.Hint.constraint)
  return _internal_mutable_constraint();
}
inline void RelCommon_Hint::set_allocated_constraint(::substrait::proto::RelCommon_Hint_RuntimeConstraint* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete constraint_;
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(constraint);
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    
  } else {
    
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.Hint.constraint)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool RelCommon_Hint::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon_Hint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.Hint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.Hint.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.Hint.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon_Hint::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.Hint.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void RelCommon_Hint::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.Hint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon

// .substrait.proto.RelCommon.Direct direct = 1;
inline bool RelCommon::_internal_has_direct() const {
  return emit_kind_case() == kDirect;
}
inline bool RelCommon::has_direct() const {
  return _internal_has_direct();
}
inline void RelCommon::set_has_direct() {
  _oneof_case_[0] = kDirect;
}
inline void RelCommon::clear_direct() {
  if (_internal_has_direct()) {
    if (GetArena() == nullptr) {
      delete emit_kind_.direct_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::proto::RelCommon_Direct* RelCommon::release_direct() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_emit_kind();
      ::substrait::proto::RelCommon_Direct* temp = emit_kind_.direct_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::RelCommon_Direct& RelCommon::_internal_direct() const {
  return _internal_has_direct()
      ? *emit_kind_.direct_
      : *reinterpret_cast< ::substrait::proto::RelCommon_Direct*>(&::substrait::proto::_RelCommon_Direct_default_instance_);
}
inline const ::substrait::proto::RelCommon_Direct& RelCommon::direct() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.direct)
  return _internal_direct();
}
inline ::substrait::proto::RelCommon_Direct* RelCommon::unsafe_arena_release_direct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_emit_kind();
    ::substrait::proto::RelCommon_Direct* temp = emit_kind_.direct_;
    emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_direct(::substrait::proto::RelCommon_Direct* direct) {
  clear_emit_kind();
  if (direct) {
    set_has_direct();
    emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.direct)
}
inline ::substrait::proto::RelCommon_Direct* RelCommon::_internal_mutable_direct() {
  if (!_internal_has_direct()) {
    clear_emit_kind();
    set_has_direct();
    emit_kind_.direct_ = CreateMaybeMessage< ::substrait::proto::RelCommon_Direct >(GetArena());
  }
  return emit_kind_.direct_;
}
inline ::substrait::proto::RelCommon_Direct* RelCommon::mutable_direct() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.direct)
  return _internal_mutable_direct();
}

// .substrait.proto.RelCommon.Emit emit = 2;
inline bool RelCommon::_internal_has_emit() const {
  return emit_kind_case() == kEmit;
}
inline bool RelCommon::has_emit() const {
  return _internal_has_emit();
}
inline void RelCommon::set_has_emit() {
  _oneof_case_[0] = kEmit;
}
inline void RelCommon::clear_emit() {
  if (_internal_has_emit()) {
    if (GetArena() == nullptr) {
      delete emit_kind_.emit_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::proto::RelCommon_Emit* RelCommon::release_emit() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_emit_kind();
      ::substrait::proto::RelCommon_Emit* temp = emit_kind_.emit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::RelCommon_Emit& RelCommon::_internal_emit() const {
  return _internal_has_emit()
      ? *emit_kind_.emit_
      : *reinterpret_cast< ::substrait::proto::RelCommon_Emit*>(&::substrait::proto::_RelCommon_Emit_default_instance_);
}
inline const ::substrait::proto::RelCommon_Emit& RelCommon::emit() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.emit)
  return _internal_emit();
}
inline ::substrait::proto::RelCommon_Emit* RelCommon::unsafe_arena_release_emit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_emit_kind();
    ::substrait::proto::RelCommon_Emit* temp = emit_kind_.emit_;
    emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_emit(::substrait::proto::RelCommon_Emit* emit) {
  clear_emit_kind();
  if (emit) {
    set_has_emit();
    emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.emit)
}
inline ::substrait::proto::RelCommon_Emit* RelCommon::_internal_mutable_emit() {
  if (!_internal_has_emit()) {
    clear_emit_kind();
    set_has_emit();
    emit_kind_.emit_ = CreateMaybeMessage< ::substrait::proto::RelCommon_Emit >(GetArena());
  }
  return emit_kind_.emit_;
}
inline ::substrait::proto::RelCommon_Emit* RelCommon::mutable_emit() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.emit)
  return _internal_mutable_emit();
}

// .substrait.proto.RelCommon.Hint hint = 3;
inline bool RelCommon::_internal_has_hint() const {
  return this != internal_default_instance() && hint_ != nullptr;
}
inline bool RelCommon::has_hint() const {
  return _internal_has_hint();
}
inline void RelCommon::clear_hint() {
  if (GetArena() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
}
inline const ::substrait::proto::RelCommon_Hint& RelCommon::_internal_hint() const {
  const ::substrait::proto::RelCommon_Hint* p = hint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon_Hint*>(
      &::substrait::proto::_RelCommon_Hint_default_instance_);
}
inline const ::substrait::proto::RelCommon_Hint& RelCommon::hint() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.hint)
  return _internal_hint();
}
inline void RelCommon::unsafe_arena_set_allocated_hint(
    ::substrait::proto::RelCommon_Hint* hint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hint_);
  }
  hint_ = hint;
  if (hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.hint)
}
inline ::substrait::proto::RelCommon_Hint* RelCommon::release_hint() {
  auto temp = unsafe_arena_release_hint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon_Hint* RelCommon::unsafe_arena_release_hint() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.hint)
  
  ::substrait::proto::RelCommon_Hint* temp = hint_;
  hint_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon_Hint* RelCommon::_internal_mutable_hint() {
  
  if (hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon_Hint>(GetArena());
    hint_ = p;
  }
  return hint_;
}
inline ::substrait::proto::RelCommon_Hint* RelCommon::mutable_hint() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.hint)
  return _internal_mutable_hint();
}
inline void RelCommon::set_allocated_hint(::substrait::proto::RelCommon_Hint* hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hint_;
  }
  if (hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hint);
    if (message_arena != submessage_arena) {
      hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.hint)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 4;
inline bool RelCommon::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& RelCommon::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelCommon.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelCommon.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelCommon.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* RelCommon::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelCommon.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void RelCommon::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelCommon.advanced_extension)
}

inline bool RelCommon::has_emit_kind() const {
  return emit_kind_case() != EMIT_KIND_NOT_SET;
}
inline void RelCommon::clear_has_emit_kind() {
  _oneof_case_[0] = EMIT_KIND_NOT_SET;
}
inline RelCommon::EmitKindCase RelCommon::emit_kind_case() const {
  return RelCommon::EmitKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_NamedTable

// repeated string names = 1;
inline int ReadRel_NamedTable::_internal_names_size() const {
  return names_.size();
}
inline int ReadRel_NamedTable::names_size() const {
  return _internal_names_size();
}
inline void ReadRel_NamedTable::clear_names() {
  names_.Clear();
}
inline std::string* ReadRel_NamedTable::add_names() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.ReadRel.NamedTable.names)
  return _internal_add_names();
}
inline const std::string& ReadRel_NamedTable::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ReadRel_NamedTable::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.NamedTable.names)
  return _internal_names(index);
}
inline std::string* ReadRel_NamedTable::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.NamedTable.names)
  return names_.Mutable(index);
}
inline void ReadRel_NamedTable::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.NamedTable.names)
  names_.Mutable(index)->assign(value);
}
inline void ReadRel_NamedTable::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.NamedTable.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void ReadRel_NamedTable::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ReadRel.NamedTable.names)
}
inline std::string* ReadRel_NamedTable::_internal_add_names() {
  return names_.Add();
}
inline void ReadRel_NamedTable::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.ReadRel.NamedTable.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRel_NamedTable::names() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ReadRel.NamedTable.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRel_NamedTable::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ReadRel.NamedTable.names)
  return &names_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ReadRel_NamedTable::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel_NamedTable::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel_NamedTable::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel_NamedTable::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.NamedTable.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_NamedTable::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.NamedTable.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_NamedTable::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_NamedTable::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.NamedTable.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_NamedTable::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_NamedTable::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.NamedTable.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ReadRel_NamedTable::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.NamedTable.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel_VirtualTable

// repeated .substrait.proto.Expression.Literal.Struct values = 1;
inline int ReadRel_VirtualTable::_internal_values_size() const {
  return values_.size();
}
inline int ReadRel_VirtualTable::values_size() const {
  return _internal_values_size();
}
inline void ReadRel_VirtualTable::clear_values() {
  values_.Clear();
}
inline ::substrait::proto::Expression_Literal_Struct* ReadRel_VirtualTable::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.VirtualTable.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Struct >*
ReadRel_VirtualTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ReadRel.VirtualTable.values)
  return &values_;
}
inline const ::substrait::proto::Expression_Literal_Struct& ReadRel_VirtualTable::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::substrait::proto::Expression_Literal_Struct& ReadRel_VirtualTable::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.VirtualTable.values)
  return _internal_values(index);
}
inline ::substrait::proto::Expression_Literal_Struct* ReadRel_VirtualTable::_internal_add_values() {
  return values_.Add();
}
inline ::substrait::proto::Expression_Literal_Struct* ReadRel_VirtualTable::add_values() {
  // @@protoc_insertion_point(field_add:substrait.proto.ReadRel.VirtualTable.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Struct >&
ReadRel_VirtualTable::values() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ReadRel.VirtualTable.values)
  return values_;
}

// -------------------------------------------------------------------

// ReadRel_ExtensionTable

// .google.protobuf.Any detail = 1;
inline bool ReadRel_ExtensionTable::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ReadRel_ExtensionTable::has_detail() const {
  return _internal_has_detail();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::_internal_detail() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::detail() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.ExtensionTable.detail)
  return _internal_detail();
}
inline void ReadRel_ExtensionTable::unsafe_arena_set_allocated_detail(
    PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.ExtensionTable.detail)
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::release_detail() {
  auto temp = unsafe_arena_release_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.ExtensionTable.detail)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.ExtensionTable.detail)
  return _internal_mutable_detail();
}
inline void ReadRel_ExtensionTable::set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail)->GetArena();
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.ExtensionTable.detail)
}

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_OrcReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles

// string uri_path = 1;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path() const {
  return path_type_case() == kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path() {
  _oneof_case_[0] = kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path() {
  if (_internal_has_uri_path()) {
    path_type_.uri_path_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_uri_path();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(const std::string& value) {
  _internal_set_uri_path(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_mutable_uri_path();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path() const {
  if (_internal_has_uri_path()) {
    return path_type_.uri_path_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path(const std::string& value) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(const char* value,
                             size_t size) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path() {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
  if (_internal_has_uri_path()) {
    clear_has_path_type();
    return path_type_.uri_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path(std::string* uri_path) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path != nullptr) {
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(uri_path);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_uri_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uri_path()) {
    clear_has_path_type();
    return path_type_.uri_path_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_uri_path(std::string* uri_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uri_path()) {
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_type();
  if (uri_path) {
    set_has_uri_path();
    path_type_.uri_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri_path, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path)
}

// string uri_path_glob = 2;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path_glob() const {
  return path_type_case() == kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path_glob() {
  _oneof_case_[0] = kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path_glob() {
  if (_internal_has_uri_path_glob()) {
    path_type_.uri_path_glob_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path_glob() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_uri_path_glob();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(const std::string& value) {
  _internal_set_uri_path_glob(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path_glob() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_mutable_uri_path_glob();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path_glob() const {
  if (_internal_has_uri_path_glob()) {
    return path_type_.uri_path_glob_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path_glob(const std::string& value) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(const char* value,
                             size_t size) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path_glob() {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_glob_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path_glob() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  if (_internal_has_uri_path_glob()) {
    clear_has_path_type();
    return path_type_.uri_path_glob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path_glob(std::string* uri_path_glob) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path_glob != nullptr) {
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(uri_path_glob);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_uri_path_glob() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uri_path_glob()) {
    clear_has_path_type();
    return path_type_.uri_path_glob_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_uri_path_glob(std::string* uri_path_glob) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uri_path_glob()) {
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_type();
  if (uri_path_glob) {
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri_path_glob, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}

// string uri_file = 3;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_file() const {
  return path_type_case() == kUriFile;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_file() {
  _oneof_case_[0] = kUriFile;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_file() {
  if (_internal_has_uri_file()) {
    path_type_.uri_file_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_file() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _internal_uri_file();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_file(const std::string& value) {
  _internal_set_uri_file(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_file() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _internal_mutable_uri_file();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_file() const {
  if (_internal_has_uri_file()) {
    return path_type_.uri_file_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_file(const std::string& value) {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_file(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_file(const char* value,
                             size_t size) {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_file() {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_file() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
  if (_internal_has_uri_file()) {
    clear_has_path_type();
    return path_type_.uri_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_file(std::string* uri_file) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_file != nullptr) {
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(uri_file);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_uri_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uri_file()) {
    clear_has_path_type();
    return path_type_.uri_file_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_uri_file(std::string* uri_file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uri_file()) {
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_type();
  if (uri_file) {
    set_has_uri_file();
    path_type_.uri_file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri_file, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_file)
}

// string uri_folder = 4;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_folder() const {
  return path_type_case() == kUriFolder;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_folder() {
  _oneof_case_[0] = kUriFolder;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_folder() {
  if (_internal_has_uri_folder()) {
    path_type_.uri_folder_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_folder() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _internal_uri_folder();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(const std::string& value) {
  _internal_set_uri_folder(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_folder() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _internal_mutable_uri_folder();
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_folder() const {
  if (_internal_has_uri_folder()) {
    return path_type_.uri_folder_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_folder(const std::string& value) {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(const char* value,
                             size_t size) {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_folder() {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_folder_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_folder() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  if (_internal_has_uri_folder()) {
    clear_has_path_type();
    return path_type_.uri_folder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_folder(std::string* uri_folder) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_folder != nullptr) {
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(uri_folder);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_uri_folder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uri_folder()) {
    clear_has_path_type();
    return path_type_.uri_folder_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_uri_folder(std::string* uri_folder) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uri_folder()) {
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_type();
  if (uri_folder) {
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri_folder, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}

// uint64 partition_index = 6;
inline void ReadRel_LocalFiles_FileOrFiles::clear_partition_index() {
  partition_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::_internal_partition_index() const {
  return partition_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::partition_index() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.partition_index)
  return _internal_partition_index();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_partition_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  partition_index_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_partition_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_partition_index(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.partition_index)
}

// uint64 start = 7;
inline void ReadRel_LocalFiles_FileOrFiles::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::start() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.start)
  return _internal_start();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.start)
}

// uint64 length = 8;
inline void ReadRel_LocalFiles_FileOrFiles::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRel_LocalFiles_FileOrFiles::length() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.length)
  return _internal_length();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReadRel.LocalFiles.FileOrFiles.length)
}

// .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_parquet() const {
  return file_format_case() == kParquet;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_parquet() const {
  return _internal_has_parquet();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_parquet() {
  _oneof_case_[1] = kParquet;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_parquet() {
  if (_internal_has_parquet()) {
    if (GetArena() == nullptr) {
      delete file_format_.parquet_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::release_parquet() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
  if (_internal_has_parquet()) {
    clear_has_file_format();
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* temp = file_format_.parquet_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    file_format_.parquet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_parquet() const {
  return _internal_has_parquet()
      ? *file_format_.parquet_
      : *reinterpret_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_);
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& ReadRel_LocalFiles_FileOrFiles::parquet() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
  return _internal_parquet();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_parquet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
  if (_internal_has_parquet()) {
    clear_has_file_format();
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* temp = file_format_.parquet_;
    file_format_.parquet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_parquet(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet) {
  clear_file_format();
  if (parquet) {
    set_has_parquet();
    file_format_.parquet_ = parquet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_parquet() {
  if (!_internal_has_parquet()) {
    clear_file_format();
    set_has_parquet();
    file_format_.parquet_ = CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(GetArena());
  }
  return file_format_.parquet_;
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_parquet() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.parquet)
  return _internal_mutable_parquet();
}

// .substrait.proto.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_arrow() const {
  return file_format_case() == kArrow;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_arrow() const {
  return _internal_has_arrow();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_arrow() {
  _oneof_case_[1] = kArrow;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_arrow() {
  if (_internal_has_arrow()) {
    if (GetArena() == nullptr) {
      delete file_format_.arrow_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::release_arrow() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
  if (_internal_has_arrow()) {
    clear_has_file_format();
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* temp = file_format_.arrow_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    file_format_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_arrow() const {
  return _internal_has_arrow()
      ? *file_format_.arrow_
      : *reinterpret_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_);
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& ReadRel_LocalFiles_FileOrFiles::arrow() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
  return _internal_arrow();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_arrow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
  if (_internal_has_arrow()) {
    clear_has_file_format();
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* temp = file_format_.arrow_;
    file_format_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_arrow(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow) {
  clear_file_format();
  if (arrow) {
    set_has_arrow();
    file_format_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_arrow() {
  if (!_internal_has_arrow()) {
    clear_file_format();
    set_has_arrow();
    file_format_.arrow_ = CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(GetArena());
  }
  return file_format_.arrow_;
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_arrow() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.arrow)
  return _internal_mutable_arrow();
}

// .substrait.proto.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_orc() const {
  return file_format_case() == kOrc;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_orc() const {
  return _internal_has_orc();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_orc() {
  _oneof_case_[1] = kOrc;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_orc() {
  if (_internal_has_orc()) {
    if (GetArena() == nullptr) {
      delete file_format_.orc_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::release_orc() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
  if (_internal_has_orc()) {
    clear_has_file_format();
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* temp = file_format_.orc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    file_format_.orc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_orc() const {
  return _internal_has_orc()
      ? *file_format_.orc_
      : *reinterpret_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_);
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& ReadRel_LocalFiles_FileOrFiles::orc() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
  return _internal_orc();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_orc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
  if (_internal_has_orc()) {
    clear_has_file_format();
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* temp = file_format_.orc_;
    file_format_.orc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_orc(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc) {
  clear_file_format();
  if (orc) {
    set_has_orc();
    file_format_.orc_ = orc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_orc() {
  if (!_internal_has_orc()) {
    clear_file_format();
    set_has_orc();
    file_format_.orc_ = CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(GetArena());
  }
  return file_format_.orc_;
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_orc() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.orc)
  return _internal_mutable_orc();
}

// .google.protobuf.Any extension = 12;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_extension() const {
  return file_format_case() == kExtension;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_extension() const {
  return _internal_has_extension();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_extension() {
  _oneof_case_[1] = kExtension;
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::release_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
  if (_internal_has_extension()) {
    clear_has_file_format();
      PROTOBUF_NAMESPACE_ID::Any* temp = file_format_.extension_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    file_format_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& ReadRel_LocalFiles_FileOrFiles::_internal_extension() const {
  return _internal_has_extension()
      ? *file_format_.extension_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ReadRel_LocalFiles_FileOrFiles::extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
  return _internal_extension();
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
  if (_internal_has_extension()) {
    clear_has_file_format();
    PROTOBUF_NAMESPACE_ID::Any* temp = file_format_.extension_;
    file_format_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_extension(PROTOBUF_NAMESPACE_ID::Any* extension) {
  clear_file_format();
  if (extension) {
    set_has_extension();
    file_format_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_extension() {
  if (!_internal_has_extension()) {
    clear_file_format();
    set_has_extension();
    file_format_.extension_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return file_format_.extension_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.extension)
  return _internal_mutable_extension();
}

// .substrait.proto.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_dwrf() const {
  return file_format_case() == kDwrf;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_dwrf() const {
  return _internal_has_dwrf();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_dwrf() {
  _oneof_case_[1] = kDwrf;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_dwrf() {
  if (_internal_has_dwrf()) {
    if (GetArena() == nullptr) {
      delete file_format_.dwrf_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::release_dwrf() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
  if (_internal_has_dwrf()) {
    clear_has_file_format();
      ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* temp = file_format_.dwrf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    file_format_.dwrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_dwrf() const {
  return _internal_has_dwrf()
      ? *file_format_.dwrf_
      : *reinterpret_cast< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions*>(&::substrait::proto::_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_);
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& ReadRel_LocalFiles_FileOrFiles::dwrf() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
  return _internal_dwrf();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_dwrf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
  if (_internal_has_dwrf()) {
    clear_has_file_format();
    ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* temp = file_format_.dwrf_;
    file_format_.dwrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_dwrf(::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf) {
  clear_file_format();
  if (dwrf) {
    set_has_dwrf();
    file_format_.dwrf_ = dwrf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_dwrf() {
  if (!_internal_has_dwrf()) {
    clear_file_format();
    set_has_dwrf();
    file_format_.dwrf_ = CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(GetArena());
  }
  return file_format_.dwrf_;
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_dwrf() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.FileOrFiles.dwrf)
  return _internal_mutable_dwrf();
}

inline bool ReadRel_LocalFiles_FileOrFiles::has_path_type() const {
  return path_type_case() != PATH_TYPE_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_path_type() {
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_file_format() const {
  return file_format_case() != FILE_FORMAT_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_file_format() {
  _oneof_case_[1] = FILE_FORMAT_NOT_SET;
}
inline ReadRel_LocalFiles_FileOrFiles::PathTypeCase ReadRel_LocalFiles_FileOrFiles::path_type_case() const {
  return ReadRel_LocalFiles_FileOrFiles::PathTypeCase(_oneof_case_[0]);
}
inline ReadRel_LocalFiles_FileOrFiles::FileFormatCase ReadRel_LocalFiles_FileOrFiles::file_format_case() const {
  return ReadRel_LocalFiles_FileOrFiles::FileFormatCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReadRel_LocalFiles

// repeated .substrait.proto.ReadRel.LocalFiles.FileOrFiles items = 1;
inline int ReadRel_LocalFiles::_internal_items_size() const {
  return items_.size();
}
inline int ReadRel_LocalFiles::items_size() const {
  return _internal_items_size();
}
inline void ReadRel_LocalFiles::clear_items() {
  items_.Clear();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >*
ReadRel_LocalFiles::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ReadRel.LocalFiles.items)
  return &items_;
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::substrait::proto::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::items(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.items)
  return _internal_items(index);
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::_internal_add_items() {
  return items_.Add();
}
inline ::substrait::proto::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::add_items() {
  // @@protoc_insertion_point(field_add:substrait.proto.ReadRel.LocalFiles.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ReadRel_LocalFiles_FileOrFiles >&
ReadRel_LocalFiles::items() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ReadRel.LocalFiles.items)
  return items_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ReadRel_LocalFiles::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel_LocalFiles::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel_LocalFiles::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel_LocalFiles::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.LocalFiles.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_LocalFiles::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.LocalFiles.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_LocalFiles::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_LocalFiles::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.LocalFiles.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_LocalFiles::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel_LocalFiles::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.LocalFiles.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ReadRel_LocalFiles::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.LocalFiles.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel

// .substrait.proto.RelCommon common = 1;
inline bool ReadRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ReadRel::has_common() const {
  return _internal_has_common();
}
inline void ReadRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ReadRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ReadRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.common)
  return _internal_common();
}
inline void ReadRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.common)
}
inline ::substrait::proto::RelCommon* ReadRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ReadRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ReadRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ReadRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.common)
  return _internal_mutable_common();
}
inline void ReadRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.common)
}

// .substrait.proto.NamedStruct base_schema = 2;
inline bool ReadRel::_internal_has_base_schema() const {
  return this != internal_default_instance() && base_schema_ != nullptr;
}
inline bool ReadRel::has_base_schema() const {
  return _internal_has_base_schema();
}
inline const ::substrait::proto::NamedStruct& ReadRel::_internal_base_schema() const {
  const ::substrait::proto::NamedStruct* p = base_schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::NamedStruct*>(
      &::substrait::proto::_NamedStruct_default_instance_);
}
inline const ::substrait::proto::NamedStruct& ReadRel::base_schema() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.base_schema)
  return _internal_base_schema();
}
inline void ReadRel::unsafe_arena_set_allocated_base_schema(
    ::substrait::proto::NamedStruct* base_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  base_schema_ = base_schema;
  if (base_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.base_schema)
}
inline ::substrait::proto::NamedStruct* ReadRel::release_base_schema() {
  auto temp = unsafe_arena_release_base_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::NamedStruct* ReadRel::unsafe_arena_release_base_schema() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.base_schema)
  
  ::substrait::proto::NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
  return temp;
}
inline ::substrait::proto::NamedStruct* ReadRel::_internal_mutable_base_schema() {
  
  if (base_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::NamedStruct>(GetArena());
    base_schema_ = p;
  }
  return base_schema_;
}
inline ::substrait::proto::NamedStruct* ReadRel::mutable_base_schema() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.base_schema)
  return _internal_mutable_base_schema();
}
inline void ReadRel::set_allocated_base_schema(::substrait::proto::NamedStruct* base_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  if (base_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema)->GetArena();
    if (message_arena != submessage_arena) {
      base_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_schema, submessage_arena);
    }
    
  } else {
    
  }
  base_schema_ = base_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.base_schema)
}

// .substrait.proto.Expression filter = 3;
inline bool ReadRel::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ReadRel::has_filter() const {
  return _internal_has_filter();
}
inline void ReadRel::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::substrait::proto::Expression& ReadRel::_internal_filter() const {
  const ::substrait::proto::Expression* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& ReadRel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.filter)
  return _internal_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_filter(
    ::substrait::proto::Expression* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.filter)
}
inline ::substrait::proto::Expression* ReadRel::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* ReadRel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.filter)
  
  ::substrait::proto::Expression* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* ReadRel::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::substrait::proto::Expression* ReadRel::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.filter)
  return _internal_mutable_filter();
}
inline void ReadRel::set_allocated_filter(::substrait::proto::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.filter)
}

// .substrait.proto.Expression best_effort_filter = 11;
inline bool ReadRel::_internal_has_best_effort_filter() const {
  return this != internal_default_instance() && best_effort_filter_ != nullptr;
}
inline bool ReadRel::has_best_effort_filter() const {
  return _internal_has_best_effort_filter();
}
inline void ReadRel::clear_best_effort_filter() {
  if (GetArena() == nullptr && best_effort_filter_ != nullptr) {
    delete best_effort_filter_;
  }
  best_effort_filter_ = nullptr;
}
inline const ::substrait::proto::Expression& ReadRel::_internal_best_effort_filter() const {
  const ::substrait::proto::Expression* p = best_effort_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& ReadRel::best_effort_filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.best_effort_filter)
  return _internal_best_effort_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_best_effort_filter(
    ::substrait::proto::Expression* best_effort_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(best_effort_filter_);
  }
  best_effort_filter_ = best_effort_filter;
  if (best_effort_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.best_effort_filter)
}
inline ::substrait::proto::Expression* ReadRel::release_best_effort_filter() {
  auto temp = unsafe_arena_release_best_effort_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* ReadRel::unsafe_arena_release_best_effort_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.best_effort_filter)
  
  ::substrait::proto::Expression* temp = best_effort_filter_;
  best_effort_filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* ReadRel::_internal_mutable_best_effort_filter() {
  
  if (best_effort_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    best_effort_filter_ = p;
  }
  return best_effort_filter_;
}
inline ::substrait::proto::Expression* ReadRel::mutable_best_effort_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.best_effort_filter)
  return _internal_mutable_best_effort_filter();
}
inline void ReadRel::set_allocated_best_effort_filter(::substrait::proto::Expression* best_effort_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete best_effort_filter_;
  }
  if (best_effort_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(best_effort_filter);
    if (message_arena != submessage_arena) {
      best_effort_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, best_effort_filter, submessage_arena);
    }
    
  } else {
    
  }
  best_effort_filter_ = best_effort_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.best_effort_filter)
}

// .substrait.proto.Expression.MaskExpression projection = 4;
inline bool ReadRel::_internal_has_projection() const {
  return this != internal_default_instance() && projection_ != nullptr;
}
inline bool ReadRel::has_projection() const {
  return _internal_has_projection();
}
inline void ReadRel::clear_projection() {
  if (GetArena() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
}
inline const ::substrait::proto::Expression_MaskExpression& ReadRel::_internal_projection() const {
  const ::substrait::proto::Expression_MaskExpression* p = projection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_MaskExpression*>(
      &::substrait::proto::_Expression_MaskExpression_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression& ReadRel::projection() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.projection)
  return _internal_projection();
}
inline void ReadRel::unsafe_arena_set_allocated_projection(
    ::substrait::proto::Expression_MaskExpression* projection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.projection)
}
inline ::substrait::proto::Expression_MaskExpression* ReadRel::release_projection() {
  auto temp = unsafe_arena_release_projection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression* ReadRel::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.projection)
  
  ::substrait::proto::Expression_MaskExpression* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression* ReadRel::_internal_mutable_projection() {
  
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_MaskExpression>(GetArena());
    projection_ = p;
  }
  return projection_;
}
inline ::substrait::proto::Expression_MaskExpression* ReadRel::mutable_projection() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.projection)
  return _internal_mutable_projection();
}
inline void ReadRel::set_allocated_projection(::substrait::proto::Expression_MaskExpression* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete projection_;
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(projection);
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    
  } else {
    
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.projection)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ReadRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ReadRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ReadRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ReadRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ReadRel.advanced_extension)
}

// .substrait.proto.ReadRel.VirtualTable virtual_table = 5;
inline bool ReadRel::_internal_has_virtual_table() const {
  return read_type_case() == kVirtualTable;
}
inline bool ReadRel::has_virtual_table() const {
  return _internal_has_virtual_table();
}
inline void ReadRel::set_has_virtual_table() {
  _oneof_case_[0] = kVirtualTable;
}
inline void ReadRel::clear_virtual_table() {
  if (_internal_has_virtual_table()) {
    if (GetArena() == nullptr) {
      delete read_type_.virtual_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::proto::ReadRel_VirtualTable* ReadRel::release_virtual_table() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
      ::substrait::proto::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_VirtualTable& ReadRel::_internal_virtual_table() const {
  return _internal_has_virtual_table()
      ? *read_type_.virtual_table_
      : *reinterpret_cast< ::substrait::proto::ReadRel_VirtualTable*>(&::substrait::proto::_ReadRel_VirtualTable_default_instance_);
}
inline const ::substrait::proto::ReadRel_VirtualTable& ReadRel::virtual_table() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.virtual_table)
  return _internal_virtual_table();
}
inline ::substrait::proto::ReadRel_VirtualTable* ReadRel::unsafe_arena_release_virtual_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
    ::substrait::proto::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_virtual_table(::substrait::proto::ReadRel_VirtualTable* virtual_table) {
  clear_read_type();
  if (virtual_table) {
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.virtual_table)
}
inline ::substrait::proto::ReadRel_VirtualTable* ReadRel::_internal_mutable_virtual_table() {
  if (!_internal_has_virtual_table()) {
    clear_read_type();
    set_has_virtual_table();
    read_type_.virtual_table_ = CreateMaybeMessage< ::substrait::proto::ReadRel_VirtualTable >(GetArena());
  }
  return read_type_.virtual_table_;
}
inline ::substrait::proto::ReadRel_VirtualTable* ReadRel::mutable_virtual_table() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.virtual_table)
  return _internal_mutable_virtual_table();
}

// .substrait.proto.ReadRel.LocalFiles local_files = 6;
inline bool ReadRel::_internal_has_local_files() const {
  return read_type_case() == kLocalFiles;
}
inline bool ReadRel::has_local_files() const {
  return _internal_has_local_files();
}
inline void ReadRel::set_has_local_files() {
  _oneof_case_[0] = kLocalFiles;
}
inline void ReadRel::clear_local_files() {
  if (_internal_has_local_files()) {
    if (GetArena() == nullptr) {
      delete read_type_.local_files_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::proto::ReadRel_LocalFiles* ReadRel::release_local_files() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
      ::substrait::proto::ReadRel_LocalFiles* temp = read_type_.local_files_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_LocalFiles& ReadRel::_internal_local_files() const {
  return _internal_has_local_files()
      ? *read_type_.local_files_
      : *reinterpret_cast< ::substrait::proto::ReadRel_LocalFiles*>(&::substrait::proto::_ReadRel_LocalFiles_default_instance_);
}
inline const ::substrait::proto::ReadRel_LocalFiles& ReadRel::local_files() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.local_files)
  return _internal_local_files();
}
inline ::substrait::proto::ReadRel_LocalFiles* ReadRel::unsafe_arena_release_local_files() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
    ::substrait::proto::ReadRel_LocalFiles* temp = read_type_.local_files_;
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_local_files(::substrait::proto::ReadRel_LocalFiles* local_files) {
  clear_read_type();
  if (local_files) {
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.local_files)
}
inline ::substrait::proto::ReadRel_LocalFiles* ReadRel::_internal_mutable_local_files() {
  if (!_internal_has_local_files()) {
    clear_read_type();
    set_has_local_files();
    read_type_.local_files_ = CreateMaybeMessage< ::substrait::proto::ReadRel_LocalFiles >(GetArena());
  }
  return read_type_.local_files_;
}
inline ::substrait::proto::ReadRel_LocalFiles* ReadRel::mutable_local_files() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.local_files)
  return _internal_mutable_local_files();
}

// .substrait.proto.ReadRel.NamedTable named_table = 7;
inline bool ReadRel::_internal_has_named_table() const {
  return read_type_case() == kNamedTable;
}
inline bool ReadRel::has_named_table() const {
  return _internal_has_named_table();
}
inline void ReadRel::set_has_named_table() {
  _oneof_case_[0] = kNamedTable;
}
inline void ReadRel::clear_named_table() {
  if (_internal_has_named_table()) {
    if (GetArena() == nullptr) {
      delete read_type_.named_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::proto::ReadRel_NamedTable* ReadRel::release_named_table() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
      ::substrait::proto::ReadRel_NamedTable* temp = read_type_.named_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_NamedTable& ReadRel::_internal_named_table() const {
  return _internal_has_named_table()
      ? *read_type_.named_table_
      : *reinterpret_cast< ::substrait::proto::ReadRel_NamedTable*>(&::substrait::proto::_ReadRel_NamedTable_default_instance_);
}
inline const ::substrait::proto::ReadRel_NamedTable& ReadRel::named_table() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.named_table)
  return _internal_named_table();
}
inline ::substrait::proto::ReadRel_NamedTable* ReadRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
    ::substrait::proto::ReadRel_NamedTable* temp = read_type_.named_table_;
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_named_table(::substrait::proto::ReadRel_NamedTable* named_table) {
  clear_read_type();
  if (named_table) {
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.named_table)
}
inline ::substrait::proto::ReadRel_NamedTable* ReadRel::_internal_mutable_named_table() {
  if (!_internal_has_named_table()) {
    clear_read_type();
    set_has_named_table();
    read_type_.named_table_ = CreateMaybeMessage< ::substrait::proto::ReadRel_NamedTable >(GetArena());
  }
  return read_type_.named_table_;
}
inline ::substrait::proto::ReadRel_NamedTable* ReadRel::mutable_named_table() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.named_table)
  return _internal_mutable_named_table();
}

// .substrait.proto.ReadRel.ExtensionTable extension_table = 8;
inline bool ReadRel::_internal_has_extension_table() const {
  return read_type_case() == kExtensionTable;
}
inline bool ReadRel::has_extension_table() const {
  return _internal_has_extension_table();
}
inline void ReadRel::set_has_extension_table() {
  _oneof_case_[0] = kExtensionTable;
}
inline void ReadRel::clear_extension_table() {
  if (_internal_has_extension_table()) {
    if (GetArena() == nullptr) {
      delete read_type_.extension_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::proto::ReadRel_ExtensionTable* ReadRel::release_extension_table() {
  // @@protoc_insertion_point(field_release:substrait.proto.ReadRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_read_type();
      ::substrait::proto::ReadRel_ExtensionTable* temp = read_type_.extension_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel_ExtensionTable& ReadRel::_internal_extension_table() const {
  return _internal_has_extension_table()
      ? *read_type_.extension_table_
      : *reinterpret_cast< ::substrait::proto::ReadRel_ExtensionTable*>(&::substrait::proto::_ReadRel_ExtensionTable_default_instance_);
}
inline const ::substrait::proto::ReadRel_ExtensionTable& ReadRel::extension_table() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReadRel.extension_table)
  return _internal_extension_table();
}
inline ::substrait::proto::ReadRel_ExtensionTable* ReadRel::unsafe_arena_release_extension_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ReadRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_read_type();
    ::substrait::proto::ReadRel_ExtensionTable* temp = read_type_.extension_table_;
    read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_extension_table(::substrait::proto::ReadRel_ExtensionTable* extension_table) {
  clear_read_type();
  if (extension_table) {
    set_has_extension_table();
    read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ReadRel.extension_table)
}
inline ::substrait::proto::ReadRel_ExtensionTable* ReadRel::_internal_mutable_extension_table() {
  if (!_internal_has_extension_table()) {
    clear_read_type();
    set_has_extension_table();
    read_type_.extension_table_ = CreateMaybeMessage< ::substrait::proto::ReadRel_ExtensionTable >(GetArena());
  }
  return read_type_.extension_table_;
}
inline ::substrait::proto::ReadRel_ExtensionTable* ReadRel::mutable_extension_table() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ReadRel.extension_table)
  return _internal_mutable_extension_table();
}

inline bool ReadRel::has_read_type() const {
  return read_type_case() != READ_TYPE_NOT_SET;
}
inline void ReadRel::clear_has_read_type() {
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}
inline ReadRel::ReadTypeCase ReadRel::read_type_case() const {
  return ReadRel::ReadTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRel

// .substrait.proto.RelCommon common = 1;
inline bool ProjectRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ProjectRel::has_common() const {
  return _internal_has_common();
}
inline void ProjectRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ProjectRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ProjectRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ProjectRel.common)
  return _internal_common();
}
inline void ProjectRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ProjectRel.common)
}
inline ::substrait::proto::RelCommon* ProjectRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ProjectRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ProjectRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ProjectRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ProjectRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ProjectRel.common)
  return _internal_mutable_common();
}
inline void ProjectRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ProjectRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool ProjectRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ProjectRel::has_input() const {
  return _internal_has_input();
}
inline void ProjectRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& ProjectRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& ProjectRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ProjectRel.input)
  return _internal_input();
}
inline void ProjectRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ProjectRel.input)
}
inline ::substrait::proto::Rel* ProjectRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* ProjectRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.ProjectRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* ProjectRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* ProjectRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ProjectRel.input)
  return _internal_mutable_input();
}
inline void ProjectRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ProjectRel.input)
}

// repeated .substrait.proto.Expression expressions = 3;
inline int ProjectRel::_internal_expressions_size() const {
  return expressions_.size();
}
inline int ProjectRel::expressions_size() const {
  return _internal_expressions_size();
}
inline void ProjectRel::clear_expressions() {
  expressions_.Clear();
}
inline ::substrait::proto::Expression* ProjectRel::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ProjectRel.expressions)
  return expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
ProjectRel::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ProjectRel.expressions)
  return &expressions_;
}
inline const ::substrait::proto::Expression& ProjectRel::_internal_expressions(int index) const {
  return expressions_.Get(index);
}
inline const ::substrait::proto::Expression& ProjectRel::expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ProjectRel.expressions)
  return _internal_expressions(index);
}
inline ::substrait::proto::Expression* ProjectRel::_internal_add_expressions() {
  return expressions_.Add();
}
inline ::substrait::proto::Expression* ProjectRel::add_expressions() {
  // @@protoc_insertion_point(field_add:substrait.proto.ProjectRel.expressions)
  return _internal_add_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
ProjectRel::expressions() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ProjectRel.expressions)
  return expressions_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ProjectRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ProjectRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ProjectRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ProjectRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ProjectRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ProjectRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ProjectRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ProjectRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ProjectRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ProjectRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ProjectRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ProjectRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ProjectRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ProjectRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ProjectRel.advanced_extension)
}

// -------------------------------------------------------------------

// JoinRel

// .substrait.proto.RelCommon common = 1;
inline bool JoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool JoinRel::has_common() const {
  return _internal_has_common();
}
inline void JoinRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& JoinRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& JoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.common)
  return _internal_common();
}
inline void JoinRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.common)
}
inline ::substrait::proto::RelCommon* JoinRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* JoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* JoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* JoinRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.common)
  return _internal_mutable_common();
}
inline void JoinRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.common)
}

// .substrait.proto.Rel left = 2;
inline bool JoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool JoinRel::has_left() const {
  return _internal_has_left();
}
inline void JoinRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Rel& JoinRel::_internal_left() const {
  const ::substrait::proto::Rel* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& JoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.left)
  return _internal_left();
}
inline void JoinRel::unsafe_arena_set_allocated_left(
    ::substrait::proto::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.left)
}
inline ::substrait::proto::Rel* JoinRel::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* JoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.left)
  
  ::substrait::proto::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* JoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Rel* JoinRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.left)
  return _internal_mutable_left();
}
inline void JoinRel::set_allocated_left(::substrait::proto::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.left)
}

// .substrait.proto.Rel right = 3;
inline bool JoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool JoinRel::has_right() const {
  return _internal_has_right();
}
inline void JoinRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& JoinRel::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& JoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.right)
  return _internal_right();
}
inline void JoinRel::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.right)
}
inline ::substrait::proto::Rel* JoinRel::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* JoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* JoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* JoinRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.right)
  return _internal_mutable_right();
}
inline void JoinRel::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.right)
}

// .substrait.proto.Expression expression = 4;
inline bool JoinRel::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool JoinRel::has_expression() const {
  return _internal_has_expression();
}
inline void JoinRel::clear_expression() {
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::substrait::proto::Expression& JoinRel::_internal_expression() const {
  const ::substrait::proto::Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& JoinRel::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.expression)
  return _internal_expression();
}
inline void JoinRel::unsafe_arena_set_allocated_expression(
    ::substrait::proto::Expression* expression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.expression)
}
inline ::substrait::proto::Expression* JoinRel::release_expression() {
  auto temp = unsafe_arena_release_expression();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* JoinRel::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.expression)
  
  ::substrait::proto::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* JoinRel::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    expression_ = p;
  }
  return expression_;
}
inline ::substrait::proto::Expression* JoinRel::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.expression)
  return _internal_mutable_expression();
}
inline void JoinRel::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.expression)
}

// .substrait.proto.Expression post_join_filter = 5;
inline bool JoinRel::_internal_has_post_join_filter() const {
  return this != internal_default_instance() && post_join_filter_ != nullptr;
}
inline bool JoinRel::has_post_join_filter() const {
  return _internal_has_post_join_filter();
}
inline void JoinRel::clear_post_join_filter() {
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
}
inline const ::substrait::proto::Expression& JoinRel::_internal_post_join_filter() const {
  const ::substrait::proto::Expression* p = post_join_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& JoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void JoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::proto::Expression* post_join_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.post_join_filter)
}
inline ::substrait::proto::Expression* JoinRel::release_post_join_filter() {
  auto temp = unsafe_arena_release_post_join_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* JoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.post_join_filter)
  
  ::substrait::proto::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* JoinRel::_internal_mutable_post_join_filter() {
  
  if (post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    post_join_filter_ = p;
  }
  return post_join_filter_;
}
inline ::substrait::proto::Expression* JoinRel::mutable_post_join_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.post_join_filter)
  return _internal_mutable_post_join_filter();
}
inline void JoinRel::set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.post_join_filter)
}

// .substrait.proto.JoinRel.JoinType type = 6;
inline void JoinRel::clear_type() {
  type_ = 0;
}
inline ::substrait::proto::JoinRel_JoinType JoinRel::_internal_type() const {
  return static_cast< ::substrait::proto::JoinRel_JoinType >(type_);
}
inline ::substrait::proto::JoinRel_JoinType JoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.type)
  return _internal_type();
}
inline void JoinRel::_internal_set_type(::substrait::proto::JoinRel_JoinType value) {
  
  type_ = value;
}
inline void JoinRel::set_type(::substrait::proto::JoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.JoinRel.type)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool JoinRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool JoinRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& JoinRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& JoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.JoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void JoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.JoinRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* JoinRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* JoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.JoinRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* JoinRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* JoinRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.JoinRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void JoinRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.JoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// CrossRel

// .substrait.proto.RelCommon common = 1;
inline bool CrossRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool CrossRel::has_common() const {
  return _internal_has_common();
}
inline void CrossRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& CrossRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& CrossRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.CrossRel.common)
  return _internal_common();
}
inline void CrossRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.CrossRel.common)
}
inline ::substrait::proto::RelCommon* CrossRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* CrossRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.CrossRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* CrossRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* CrossRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.CrossRel.common)
  return _internal_mutable_common();
}
inline void CrossRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.CrossRel.common)
}

// .substrait.proto.Rel left = 2;
inline bool CrossRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool CrossRel::has_left() const {
  return _internal_has_left();
}
inline void CrossRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Rel& CrossRel::_internal_left() const {
  const ::substrait::proto::Rel* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& CrossRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.CrossRel.left)
  return _internal_left();
}
inline void CrossRel::unsafe_arena_set_allocated_left(
    ::substrait::proto::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.CrossRel.left)
}
inline ::substrait::proto::Rel* CrossRel::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* CrossRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.CrossRel.left)
  
  ::substrait::proto::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* CrossRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Rel* CrossRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.CrossRel.left)
  return _internal_mutable_left();
}
inline void CrossRel::set_allocated_left(::substrait::proto::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.CrossRel.left)
}

// .substrait.proto.Rel right = 3;
inline bool CrossRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool CrossRel::has_right() const {
  return _internal_has_right();
}
inline void CrossRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& CrossRel::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& CrossRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.CrossRel.right)
  return _internal_right();
}
inline void CrossRel::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.CrossRel.right)
}
inline ::substrait::proto::Rel* CrossRel::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* CrossRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.CrossRel.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* CrossRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* CrossRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.CrossRel.right)
  return _internal_mutable_right();
}
inline void CrossRel::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.CrossRel.right)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool CrossRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool CrossRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& CrossRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& CrossRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.CrossRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void CrossRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.CrossRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* CrossRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* CrossRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.CrossRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* CrossRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* CrossRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.CrossRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void CrossRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.CrossRel.advanced_extension)
}

// -------------------------------------------------------------------

// FetchRel

// .substrait.proto.RelCommon common = 1;
inline bool FetchRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FetchRel::has_common() const {
  return _internal_has_common();
}
inline void FetchRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& FetchRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& FetchRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FetchRel.common)
  return _internal_common();
}
inline void FetchRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FetchRel.common)
}
inline ::substrait::proto::RelCommon* FetchRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* FetchRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.FetchRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* FetchRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* FetchRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FetchRel.common)
  return _internal_mutable_common();
}
inline void FetchRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FetchRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool FetchRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FetchRel::has_input() const {
  return _internal_has_input();
}
inline void FetchRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& FetchRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& FetchRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FetchRel.input)
  return _internal_input();
}
inline void FetchRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FetchRel.input)
}
inline ::substrait::proto::Rel* FetchRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* FetchRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.FetchRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* FetchRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* FetchRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FetchRel.input)
  return _internal_mutable_input();
}
inline void FetchRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FetchRel.input)
}

// int64 offset = 3;
inline void FetchRel::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::offset() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FetchRel.offset)
  return _internal_offset();
}
inline void FetchRel::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void FetchRel::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.proto.FetchRel.offset)
}

// int64 count = 4;
inline void FetchRel::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchRel::count() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FetchRel.count)
  return _internal_count();
}
inline void FetchRel::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void FetchRel::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:substrait.proto.FetchRel.count)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool FetchRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool FetchRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& FetchRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& FetchRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FetchRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FetchRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FetchRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* FetchRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* FetchRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.FetchRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* FetchRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* FetchRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FetchRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void FetchRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FetchRel.advanced_extension)
}

// -------------------------------------------------------------------

// AggregateRel_Grouping

// repeated .substrait.proto.Expression grouping_expressions = 1;
inline int AggregateRel_Grouping::_internal_grouping_expressions_size() const {
  return grouping_expressions_.size();
}
inline int AggregateRel_Grouping::grouping_expressions_size() const {
  return _internal_grouping_expressions_size();
}
inline void AggregateRel_Grouping::clear_grouping_expressions() {
  grouping_expressions_.Clear();
}
inline ::substrait::proto::Expression* AggregateRel_Grouping::mutable_grouping_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.Grouping.grouping_expressions)
  return grouping_expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
AggregateRel_Grouping::mutable_grouping_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateRel.Grouping.grouping_expressions)
  return &grouping_expressions_;
}
inline const ::substrait::proto::Expression& AggregateRel_Grouping::_internal_grouping_expressions(int index) const {
  return grouping_expressions_.Get(index);
}
inline const ::substrait::proto::Expression& AggregateRel_Grouping::grouping_expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.Grouping.grouping_expressions)
  return _internal_grouping_expressions(index);
}
inline ::substrait::proto::Expression* AggregateRel_Grouping::_internal_add_grouping_expressions() {
  return grouping_expressions_.Add();
}
inline ::substrait::proto::Expression* AggregateRel_Grouping::add_grouping_expressions() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateRel.Grouping.grouping_expressions)
  return _internal_add_grouping_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
AggregateRel_Grouping::grouping_expressions() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateRel.Grouping.grouping_expressions)
  return grouping_expressions_;
}

// -------------------------------------------------------------------

// AggregateRel_Measure

// .substrait.proto.AggregateFunction measure = 1;
inline bool AggregateRel_Measure::_internal_has_measure() const {
  return this != internal_default_instance() && measure_ != nullptr;
}
inline bool AggregateRel_Measure::has_measure() const {
  return _internal_has_measure();
}
inline void AggregateRel_Measure::clear_measure() {
  if (GetArena() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
}
inline const ::substrait::proto::AggregateFunction& AggregateRel_Measure::_internal_measure() const {
  const ::substrait::proto::AggregateFunction* p = measure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::AggregateFunction*>(
      &::substrait::proto::_AggregateFunction_default_instance_);
}
inline const ::substrait::proto::AggregateFunction& AggregateRel_Measure::measure() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.Measure.measure)
  return _internal_measure();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_measure(
    ::substrait::proto::AggregateFunction* measure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  measure_ = measure;
  if (measure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateRel.Measure.measure)
}
inline ::substrait::proto::AggregateFunction* AggregateRel_Measure::release_measure() {
  auto temp = unsafe_arena_release_measure();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::AggregateFunction* AggregateRel_Measure::unsafe_arena_release_measure() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateRel.Measure.measure)
  
  ::substrait::proto::AggregateFunction* temp = measure_;
  measure_ = nullptr;
  return temp;
}
inline ::substrait::proto::AggregateFunction* AggregateRel_Measure::_internal_mutable_measure() {
  
  if (measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::AggregateFunction>(GetArena());
    measure_ = p;
  }
  return measure_;
}
inline ::substrait::proto::AggregateFunction* AggregateRel_Measure::mutable_measure() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.Measure.measure)
  return _internal_mutable_measure();
}
inline void AggregateRel_Measure::set_allocated_measure(::substrait::proto::AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete measure_;
  }
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(measure);
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateRel.Measure.measure)
}

// .substrait.proto.Expression filter = 2;
inline bool AggregateRel_Measure::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool AggregateRel_Measure::has_filter() const {
  return _internal_has_filter();
}
inline void AggregateRel_Measure::clear_filter() {
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::substrait::proto::Expression& AggregateRel_Measure::_internal_filter() const {
  const ::substrait::proto::Expression* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& AggregateRel_Measure::filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.Measure.filter)
  return _internal_filter();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_filter(
    ::substrait::proto::Expression* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateRel.Measure.filter)
}
inline ::substrait::proto::Expression* AggregateRel_Measure::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* AggregateRel_Measure::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateRel.Measure.filter)
  
  ::substrait::proto::Expression* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* AggregateRel_Measure::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::substrait::proto::Expression* AggregateRel_Measure::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.Measure.filter)
  return _internal_mutable_filter();
}
inline void AggregateRel_Measure::set_allocated_filter(::substrait::proto::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateRel.Measure.filter)
}

// -------------------------------------------------------------------

// AggregateRel

// .substrait.proto.RelCommon common = 1;
inline bool AggregateRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool AggregateRel::has_common() const {
  return _internal_has_common();
}
inline void AggregateRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& AggregateRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& AggregateRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.common)
  return _internal_common();
}
inline void AggregateRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateRel.common)
}
inline ::substrait::proto::RelCommon* AggregateRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* AggregateRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* AggregateRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* AggregateRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.common)
  return _internal_mutable_common();
}
inline void AggregateRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool AggregateRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool AggregateRel::has_input() const {
  return _internal_has_input();
}
inline void AggregateRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& AggregateRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& AggregateRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.input)
  return _internal_input();
}
inline void AggregateRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateRel.input)
}
inline ::substrait::proto::Rel* AggregateRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* AggregateRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* AggregateRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* AggregateRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.input)
  return _internal_mutable_input();
}
inline void AggregateRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateRel.input)
}

// repeated .substrait.proto.AggregateRel.Grouping groupings = 3;
inline int AggregateRel::_internal_groupings_size() const {
  return groupings_.size();
}
inline int AggregateRel::groupings_size() const {
  return _internal_groupings_size();
}
inline void AggregateRel::clear_groupings() {
  groupings_.Clear();
}
inline ::substrait::proto::AggregateRel_Grouping* AggregateRel::mutable_groupings(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.groupings)
  return groupings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Grouping >*
AggregateRel::mutable_groupings() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateRel.groupings)
  return &groupings_;
}
inline const ::substrait::proto::AggregateRel_Grouping& AggregateRel::_internal_groupings(int index) const {
  return groupings_.Get(index);
}
inline const ::substrait::proto::AggregateRel_Grouping& AggregateRel::groupings(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.groupings)
  return _internal_groupings(index);
}
inline ::substrait::proto::AggregateRel_Grouping* AggregateRel::_internal_add_groupings() {
  return groupings_.Add();
}
inline ::substrait::proto::AggregateRel_Grouping* AggregateRel::add_groupings() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateRel.groupings)
  return _internal_add_groupings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Grouping >&
AggregateRel::groupings() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateRel.groupings)
  return groupings_;
}

// repeated .substrait.proto.AggregateRel.Measure measures = 4;
inline int AggregateRel::_internal_measures_size() const {
  return measures_.size();
}
inline int AggregateRel::measures_size() const {
  return _internal_measures_size();
}
inline void AggregateRel::clear_measures() {
  measures_.Clear();
}
inline ::substrait::proto::AggregateRel_Measure* AggregateRel::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.measures)
  return measures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Measure >*
AggregateRel::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateRel.measures)
  return &measures_;
}
inline const ::substrait::proto::AggregateRel_Measure& AggregateRel::_internal_measures(int index) const {
  return measures_.Get(index);
}
inline const ::substrait::proto::AggregateRel_Measure& AggregateRel::measures(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.measures)
  return _internal_measures(index);
}
inline ::substrait::proto::AggregateRel_Measure* AggregateRel::_internal_add_measures() {
  return measures_.Add();
}
inline ::substrait::proto::AggregateRel_Measure* AggregateRel::add_measures() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateRel.measures)
  return _internal_add_measures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::AggregateRel_Measure >&
AggregateRel::measures() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateRel.measures)
  return measures_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool AggregateRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool AggregateRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& AggregateRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& AggregateRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void AggregateRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* AggregateRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* AggregateRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* AggregateRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* AggregateRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void AggregateRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateRel.advanced_extension)
}

// -------------------------------------------------------------------

// ConsistentPartitionWindowRel_WindowRelFunction

// uint32 function_reference = 1;
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_function_reference() {
  function_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsistentPartitionWindowRel_WindowRelFunction::_internal_function_reference() const {
  return function_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsistentPartitionWindowRel_WindowRelFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.function_reference)
  return _internal_function_reference();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::_internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  function_reference_ = value;
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.function_reference)
}

// repeated .substrait.proto.FunctionArgument arguments = 9;
inline int ConsistentPartitionWindowRel_WindowRelFunction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int ConsistentPartitionWindowRel_WindowRelFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_arguments() {
  arguments_.Clear();
}
inline ::substrait::proto::FunctionArgument* ConsistentPartitionWindowRel_WindowRelFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
ConsistentPartitionWindowRel_WindowRelFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.arguments)
  return &arguments_;
}
inline const ::substrait::proto::FunctionArgument& ConsistentPartitionWindowRel_WindowRelFunction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::substrait::proto::FunctionArgument& ConsistentPartitionWindowRel_WindowRelFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::proto::FunctionArgument* ConsistentPartitionWindowRel_WindowRelFunction::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::substrait::proto::FunctionArgument* ConsistentPartitionWindowRel_WindowRelFunction::add_arguments() {
  // @@protoc_insertion_point(field_add:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
ConsistentPartitionWindowRel_WindowRelFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.arguments)
  return arguments_;
}

// repeated .substrait.proto.FunctionOption options = 11;
inline int ConsistentPartitionWindowRel_WindowRelFunction::_internal_options_size() const {
  return options_.size();
}
inline int ConsistentPartitionWindowRel_WindowRelFunction::options_size() const {
  return _internal_options_size();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::FunctionOption* ConsistentPartitionWindowRel_WindowRelFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
ConsistentPartitionWindowRel_WindowRelFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.options)
  return &options_;
}
inline const ::substrait::proto::FunctionOption& ConsistentPartitionWindowRel_WindowRelFunction::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::FunctionOption& ConsistentPartitionWindowRel_WindowRelFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.options)
  return _internal_options(index);
}
inline ::substrait::proto::FunctionOption* ConsistentPartitionWindowRel_WindowRelFunction::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::FunctionOption* ConsistentPartitionWindowRel_WindowRelFunction::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
ConsistentPartitionWindowRel_WindowRelFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.options)
  return options_;
}

// .substrait.proto.Type output_type = 7;
inline bool ConsistentPartitionWindowRel_WindowRelFunction::_internal_has_output_type() const {
  return this != internal_default_instance() && output_type_ != nullptr;
}
inline bool ConsistentPartitionWindowRel_WindowRelFunction::has_output_type() const {
  return _internal_has_output_type();
}
inline const ::substrait::proto::Type& ConsistentPartitionWindowRel_WindowRelFunction::_internal_output_type() const {
  const ::substrait::proto::Type* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& ConsistentPartitionWindowRel_WindowRelFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.output_type)
  return _internal_output_type();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::proto::Type* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.output_type)
}
inline ::substrait::proto::Type* ConsistentPartitionWindowRel_WindowRelFunction::release_output_type() {
  auto temp = unsafe_arena_release_output_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.output_type)
  
  ::substrait::proto::Type* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* ConsistentPartitionWindowRel_WindowRelFunction::_internal_mutable_output_type() {
  
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::substrait::proto::Type* ConsistentPartitionWindowRel_WindowRelFunction::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.output_type)
  return _internal_mutable_output_type();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_allocated_output_type(::substrait::proto::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type)->GetArena();
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    
  } else {
    
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.output_type)
}

// .substrait.proto.AggregationPhase phase = 6;
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_phase() {
  phase_ = 0;
}
inline ::substrait::proto::AggregationPhase ConsistentPartitionWindowRel_WindowRelFunction::_internal_phase() const {
  return static_cast< ::substrait::proto::AggregationPhase >(phase_);
}
inline ::substrait::proto::AggregationPhase ConsistentPartitionWindowRel_WindowRelFunction::phase() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.phase)
  return _internal_phase();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::_internal_set_phase(::substrait::proto::AggregationPhase value) {
  
  phase_ = value;
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_phase(::substrait::proto::AggregationPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.phase)
}

// .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_invocation() {
  invocation_ = 0;
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation ConsistentPartitionWindowRel_WindowRelFunction::_internal_invocation() const {
  return static_cast< ::substrait::proto::AggregateFunction_AggregationInvocation >(invocation_);
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation ConsistentPartitionWindowRel_WindowRelFunction::invocation() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.invocation)
  return _internal_invocation();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::_internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  
  invocation_ = value;
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  _internal_set_invocation(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.invocation)
}

// .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
inline bool ConsistentPartitionWindowRel_WindowRelFunction::_internal_has_lower_bound() const {
  return this != internal_default_instance() && lower_bound_ != nullptr;
}
inline bool ConsistentPartitionWindowRel_WindowRelFunction::has_lower_bound() const {
  return _internal_has_lower_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_lower_bound() {
  if (GetArena() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& ConsistentPartitionWindowRel_WindowRelFunction::_internal_lower_bound() const {
  const ::substrait::proto::Expression_WindowFunction_Bound* p = lower_bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_WindowFunction_Bound*>(
      &::substrait::proto::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& ConsistentPartitionWindowRel_WindowRelFunction::lower_bound() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.lower_bound)
  return _internal_lower_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_set_allocated_lower_bound(
    ::substrait::proto::Expression_WindowFunction_Bound* lower_bound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_bound_);
  }
  lower_bound_ = lower_bound;
  if (lower_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.lower_bound)
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::release_lower_bound() {
  auto temp = unsafe_arena_release_lower_bound();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_release_lower_bound() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.lower_bound)
  
  ::substrait::proto::Expression_WindowFunction_Bound* temp = lower_bound_;
  lower_bound_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::_internal_mutable_lower_bound() {
  
  if (lower_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound>(GetArena());
    lower_bound_ = p;
  }
  return lower_bound_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.lower_bound)
  return _internal_mutable_lower_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_allocated_lower_bound(::substrait::proto::Expression_WindowFunction_Bound* lower_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_bound_;
  }
  if (lower_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_bound);
    if (message_arena != submessage_arena) {
      lower_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    
  } else {
    
  }
  lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.lower_bound)
}

// .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
inline bool ConsistentPartitionWindowRel_WindowRelFunction::_internal_has_upper_bound() const {
  return this != internal_default_instance() && upper_bound_ != nullptr;
}
inline bool ConsistentPartitionWindowRel_WindowRelFunction::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_upper_bound() {
  if (GetArena() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& ConsistentPartitionWindowRel_WindowRelFunction::_internal_upper_bound() const {
  const ::substrait::proto::Expression_WindowFunction_Bound* p = upper_bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_WindowFunction_Bound*>(
      &::substrait::proto::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& ConsistentPartitionWindowRel_WindowRelFunction::upper_bound() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.upper_bound)
  return _internal_upper_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_set_allocated_upper_bound(
    ::substrait::proto::Expression_WindowFunction_Bound* upper_bound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_bound_);
  }
  upper_bound_ = upper_bound;
  if (upper_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.upper_bound)
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::release_upper_bound() {
  auto temp = unsafe_arena_release_upper_bound();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::unsafe_arena_release_upper_bound() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.upper_bound)
  
  ::substrait::proto::Expression_WindowFunction_Bound* temp = upper_bound_;
  upper_bound_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::_internal_mutable_upper_bound() {
  
  if (upper_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound>(GetArena());
    upper_bound_ = p;
  }
  return upper_bound_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* ConsistentPartitionWindowRel_WindowRelFunction::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.upper_bound)
  return _internal_mutable_upper_bound();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_allocated_upper_bound(::substrait::proto::Expression_WindowFunction_Bound* upper_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_bound_;
  }
  if (upper_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_bound);
    if (message_arena != submessage_arena) {
      upper_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    
  } else {
    
  }
  upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.upper_bound)
}

// .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
inline void ConsistentPartitionWindowRel_WindowRelFunction::clear_bounds_type() {
  bounds_type_ = 0;
}
inline ::substrait::proto::Expression_WindowFunction_BoundsType ConsistentPartitionWindowRel_WindowRelFunction::_internal_bounds_type() const {
  return static_cast< ::substrait::proto::Expression_WindowFunction_BoundsType >(bounds_type_);
}
inline ::substrait::proto::Expression_WindowFunction_BoundsType ConsistentPartitionWindowRel_WindowRelFunction::bounds_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.bounds_type)
  return _internal_bounds_type();
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::_internal_set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value) {
  
  bounds_type_ = value;
}
inline void ConsistentPartitionWindowRel_WindowRelFunction::set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value) {
  _internal_set_bounds_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction.bounds_type)
}

// -------------------------------------------------------------------

// ConsistentPartitionWindowRel

// .substrait.proto.RelCommon common = 1;
inline bool ConsistentPartitionWindowRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ConsistentPartitionWindowRel::has_common() const {
  return _internal_has_common();
}
inline void ConsistentPartitionWindowRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ConsistentPartitionWindowRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ConsistentPartitionWindowRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.common)
  return _internal_common();
}
inline void ConsistentPartitionWindowRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.common)
}
inline ::substrait::proto::RelCommon* ConsistentPartitionWindowRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ConsistentPartitionWindowRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ConsistentPartitionWindowRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ConsistentPartitionWindowRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.common)
  return _internal_mutable_common();
}
inline void ConsistentPartitionWindowRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool ConsistentPartitionWindowRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ConsistentPartitionWindowRel::has_input() const {
  return _internal_has_input();
}
inline void ConsistentPartitionWindowRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& ConsistentPartitionWindowRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& ConsistentPartitionWindowRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.input)
  return _internal_input();
}
inline void ConsistentPartitionWindowRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.input)
}
inline ::substrait::proto::Rel* ConsistentPartitionWindowRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* ConsistentPartitionWindowRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* ConsistentPartitionWindowRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* ConsistentPartitionWindowRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.input)
  return _internal_mutable_input();
}
inline void ConsistentPartitionWindowRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.input)
}

// repeated .substrait.proto.ConsistentPartitionWindowRel.WindowRelFunction window_functions = 3;
inline int ConsistentPartitionWindowRel::_internal_window_functions_size() const {
  return window_functions_.size();
}
inline int ConsistentPartitionWindowRel::window_functions_size() const {
  return _internal_window_functions_size();
}
inline void ConsistentPartitionWindowRel::clear_window_functions() {
  window_functions_.Clear();
}
inline ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* ConsistentPartitionWindowRel::mutable_window_functions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.window_functions)
  return window_functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >*
ConsistentPartitionWindowRel::mutable_window_functions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ConsistentPartitionWindowRel.window_functions)
  return &window_functions_;
}
inline const ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction& ConsistentPartitionWindowRel::_internal_window_functions(int index) const {
  return window_functions_.Get(index);
}
inline const ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction& ConsistentPartitionWindowRel::window_functions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.window_functions)
  return _internal_window_functions(index);
}
inline ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* ConsistentPartitionWindowRel::_internal_add_window_functions() {
  return window_functions_.Add();
}
inline ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction* ConsistentPartitionWindowRel::add_window_functions() {
  // @@protoc_insertion_point(field_add:substrait.proto.ConsistentPartitionWindowRel.window_functions)
  return _internal_add_window_functions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ConsistentPartitionWindowRel_WindowRelFunction >&
ConsistentPartitionWindowRel::window_functions() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ConsistentPartitionWindowRel.window_functions)
  return window_functions_;
}

// repeated .substrait.proto.Expression partition_expressions = 4;
inline int ConsistentPartitionWindowRel::_internal_partition_expressions_size() const {
  return partition_expressions_.size();
}
inline int ConsistentPartitionWindowRel::partition_expressions_size() const {
  return _internal_partition_expressions_size();
}
inline void ConsistentPartitionWindowRel::clear_partition_expressions() {
  partition_expressions_.Clear();
}
inline ::substrait::proto::Expression* ConsistentPartitionWindowRel::mutable_partition_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.partition_expressions)
  return partition_expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
ConsistentPartitionWindowRel::mutable_partition_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ConsistentPartitionWindowRel.partition_expressions)
  return &partition_expressions_;
}
inline const ::substrait::proto::Expression& ConsistentPartitionWindowRel::_internal_partition_expressions(int index) const {
  return partition_expressions_.Get(index);
}
inline const ::substrait::proto::Expression& ConsistentPartitionWindowRel::partition_expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.partition_expressions)
  return _internal_partition_expressions(index);
}
inline ::substrait::proto::Expression* ConsistentPartitionWindowRel::_internal_add_partition_expressions() {
  return partition_expressions_.Add();
}
inline ::substrait::proto::Expression* ConsistentPartitionWindowRel::add_partition_expressions() {
  // @@protoc_insertion_point(field_add:substrait.proto.ConsistentPartitionWindowRel.partition_expressions)
  return _internal_add_partition_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
ConsistentPartitionWindowRel::partition_expressions() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ConsistentPartitionWindowRel.partition_expressions)
  return partition_expressions_;
}

// repeated .substrait.proto.SortField sorts = 5;
inline int ConsistentPartitionWindowRel::_internal_sorts_size() const {
  return sorts_.size();
}
inline int ConsistentPartitionWindowRel::sorts_size() const {
  return _internal_sorts_size();
}
inline void ConsistentPartitionWindowRel::clear_sorts() {
  sorts_.Clear();
}
inline ::substrait::proto::SortField* ConsistentPartitionWindowRel::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
ConsistentPartitionWindowRel::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ConsistentPartitionWindowRel.sorts)
  return &sorts_;
}
inline const ::substrait::proto::SortField& ConsistentPartitionWindowRel::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::substrait::proto::SortField& ConsistentPartitionWindowRel::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.sorts)
  return _internal_sorts(index);
}
inline ::substrait::proto::SortField* ConsistentPartitionWindowRel::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::substrait::proto::SortField* ConsistentPartitionWindowRel::add_sorts() {
  // @@protoc_insertion_point(field_add:substrait.proto.ConsistentPartitionWindowRel.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
ConsistentPartitionWindowRel::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ConsistentPartitionWindowRel.sorts)
  return sorts_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ConsistentPartitionWindowRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ConsistentPartitionWindowRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ConsistentPartitionWindowRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ConsistentPartitionWindowRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ConsistentPartitionWindowRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ConsistentPartitionWindowRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ConsistentPartitionWindowRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ConsistentPartitionWindowRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ConsistentPartitionWindowRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ConsistentPartitionWindowRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ConsistentPartitionWindowRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ConsistentPartitionWindowRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ConsistentPartitionWindowRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ConsistentPartitionWindowRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ConsistentPartitionWindowRel.advanced_extension)
}

// -------------------------------------------------------------------

// SortRel

// .substrait.proto.RelCommon common = 1;
inline bool SortRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SortRel::has_common() const {
  return _internal_has_common();
}
inline void SortRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& SortRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& SortRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortRel.common)
  return _internal_common();
}
inline void SortRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SortRel.common)
}
inline ::substrait::proto::RelCommon* SortRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* SortRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.SortRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* SortRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* SortRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SortRel.common)
  return _internal_mutable_common();
}
inline void SortRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SortRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool SortRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SortRel::has_input() const {
  return _internal_has_input();
}
inline void SortRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& SortRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& SortRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortRel.input)
  return _internal_input();
}
inline void SortRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SortRel.input)
}
inline ::substrait::proto::Rel* SortRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* SortRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.SortRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* SortRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* SortRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SortRel.input)
  return _internal_mutable_input();
}
inline void SortRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SortRel.input)
}

// repeated .substrait.proto.SortField sorts = 3;
inline int SortRel::_internal_sorts_size() const {
  return sorts_.size();
}
inline int SortRel::sorts_size() const {
  return _internal_sorts_size();
}
inline void SortRel::clear_sorts() {
  sorts_.Clear();
}
inline ::substrait::proto::SortField* SortRel::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SortRel.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
SortRel::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.SortRel.sorts)
  return &sorts_;
}
inline const ::substrait::proto::SortField& SortRel::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::substrait::proto::SortField& SortRel::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortRel.sorts)
  return _internal_sorts(index);
}
inline ::substrait::proto::SortField* SortRel::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::substrait::proto::SortField* SortRel::add_sorts() {
  // @@protoc_insertion_point(field_add:substrait.proto.SortRel.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
SortRel::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.proto.SortRel.sorts)
  return sorts_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool SortRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool SortRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& SortRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& SortRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SortRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SortRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* SortRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* SortRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.SortRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* SortRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* SortRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SortRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void SortRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SortRel.advanced_extension)
}

// -------------------------------------------------------------------

// FilterRel

// .substrait.proto.RelCommon common = 1;
inline bool FilterRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FilterRel::has_common() const {
  return _internal_has_common();
}
inline void FilterRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& FilterRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& FilterRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FilterRel.common)
  return _internal_common();
}
inline void FilterRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FilterRel.common)
}
inline ::substrait::proto::RelCommon* FilterRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* FilterRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.FilterRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* FilterRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* FilterRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FilterRel.common)
  return _internal_mutable_common();
}
inline void FilterRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FilterRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool FilterRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FilterRel::has_input() const {
  return _internal_has_input();
}
inline void FilterRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& FilterRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& FilterRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FilterRel.input)
  return _internal_input();
}
inline void FilterRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FilterRel.input)
}
inline ::substrait::proto::Rel* FilterRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* FilterRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.FilterRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* FilterRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* FilterRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FilterRel.input)
  return _internal_mutable_input();
}
inline void FilterRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FilterRel.input)
}

// .substrait.proto.Expression condition = 3;
inline bool FilterRel::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool FilterRel::has_condition() const {
  return _internal_has_condition();
}
inline void FilterRel::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::substrait::proto::Expression& FilterRel::_internal_condition() const {
  const ::substrait::proto::Expression* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& FilterRel::condition() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FilterRel.condition)
  return _internal_condition();
}
inline void FilterRel::unsafe_arena_set_allocated_condition(
    ::substrait::proto::Expression* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FilterRel.condition)
}
inline ::substrait::proto::Expression* FilterRel::release_condition() {
  auto temp = unsafe_arena_release_condition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* FilterRel::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:substrait.proto.FilterRel.condition)
  
  ::substrait::proto::Expression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* FilterRel::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::substrait::proto::Expression* FilterRel::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FilterRel.condition)
  return _internal_mutable_condition();
}
inline void FilterRel::set_allocated_condition(::substrait::proto::Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FilterRel.condition)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool FilterRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool FilterRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& FilterRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& FilterRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FilterRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FilterRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FilterRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* FilterRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* FilterRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.FilterRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* FilterRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* FilterRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FilterRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void FilterRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FilterRel.advanced_extension)
}

// -------------------------------------------------------------------

// SetRel

// .substrait.proto.RelCommon common = 1;
inline bool SetRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SetRel::has_common() const {
  return _internal_has_common();
}
inline void SetRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& SetRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& SetRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SetRel.common)
  return _internal_common();
}
inline void SetRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SetRel.common)
}
inline ::substrait::proto::RelCommon* SetRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* SetRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.SetRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* SetRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* SetRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SetRel.common)
  return _internal_mutable_common();
}
inline void SetRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SetRel.common)
}

// repeated .substrait.proto.Rel inputs = 2;
inline int SetRel::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SetRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void SetRel::clear_inputs() {
  inputs_.Clear();
}
inline ::substrait::proto::Rel* SetRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SetRel.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >*
SetRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.SetRel.inputs)
  return &inputs_;
}
inline const ::substrait::proto::Rel& SetRel::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::substrait::proto::Rel& SetRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.SetRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::proto::Rel* SetRel::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::substrait::proto::Rel* SetRel::add_inputs() {
  // @@protoc_insertion_point(field_add:substrait.proto.SetRel.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >&
SetRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.proto.SetRel.inputs)
  return inputs_;
}

// .substrait.proto.SetRel.SetOp op = 3;
inline void SetRel::clear_op() {
  op_ = 0;
}
inline ::substrait::proto::SetRel_SetOp SetRel::_internal_op() const {
  return static_cast< ::substrait::proto::SetRel_SetOp >(op_);
}
inline ::substrait::proto::SetRel_SetOp SetRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SetRel.op)
  return _internal_op();
}
inline void SetRel::_internal_set_op(::substrait::proto::SetRel_SetOp value) {
  
  op_ = value;
}
inline void SetRel::set_op(::substrait::proto::SetRel_SetOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.SetRel.op)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool SetRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool SetRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& SetRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& SetRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SetRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SetRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SetRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* SetRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* SetRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.SetRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* SetRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* SetRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SetRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void SetRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SetRel.advanced_extension)
}

// -------------------------------------------------------------------

// ExtensionSingleRel

// .substrait.proto.RelCommon common = 1;
inline bool ExtensionSingleRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionSingleRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionSingleRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ExtensionSingleRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ExtensionSingleRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionSingleRel.common)
  return _internal_common();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionSingleRel.common)
}
inline ::substrait::proto::RelCommon* ExtensionSingleRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionSingleRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionSingleRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionSingleRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ExtensionSingleRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionSingleRel.common)
  return _internal_mutable_common();
}
inline void ExtensionSingleRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionSingleRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool ExtensionSingleRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ExtensionSingleRel::has_input() const {
  return _internal_has_input();
}
inline void ExtensionSingleRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& ExtensionSingleRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& ExtensionSingleRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionSingleRel.input)
  return _internal_input();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionSingleRel.input)
}
inline ::substrait::proto::Rel* ExtensionSingleRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* ExtensionSingleRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionSingleRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* ExtensionSingleRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* ExtensionSingleRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionSingleRel.input)
  return _internal_mutable_input();
}
inline void ExtensionSingleRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionSingleRel.input)
}

// .google.protobuf.Any detail = 3;
inline bool ExtensionSingleRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionSingleRel::has_detail() const {
  return _internal_has_detail();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::_internal_detail() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionSingleRel.detail)
  return _internal_detail();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_detail(
    PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionSingleRel.detail)
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::release_detail() {
  auto temp = unsafe_arena_release_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionSingleRel.detail)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionSingleRel.detail)
  return _internal_mutable_detail();
}
inline void ExtensionSingleRel::set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail)->GetArena();
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionSingleRel.detail)
}

// -------------------------------------------------------------------

// ExtensionLeafRel

// .substrait.proto.RelCommon common = 1;
inline bool ExtensionLeafRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionLeafRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionLeafRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ExtensionLeafRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ExtensionLeafRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionLeafRel.common)
  return _internal_common();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionLeafRel.common)
}
inline ::substrait::proto::RelCommon* ExtensionLeafRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionLeafRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionLeafRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionLeafRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ExtensionLeafRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionLeafRel.common)
  return _internal_mutable_common();
}
inline void ExtensionLeafRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionLeafRel.common)
}

// .google.protobuf.Any detail = 2;
inline bool ExtensionLeafRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionLeafRel::has_detail() const {
  return _internal_has_detail();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::_internal_detail() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionLeafRel.detail)
  return _internal_detail();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_detail(
    PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionLeafRel.detail)
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::release_detail() {
  auto temp = unsafe_arena_release_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionLeafRel.detail)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionLeafRel.detail)
  return _internal_mutable_detail();
}
inline void ExtensionLeafRel::set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail)->GetArena();
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionLeafRel.detail)
}

// -------------------------------------------------------------------

// ExtensionMultiRel

// .substrait.proto.RelCommon common = 1;
inline bool ExtensionMultiRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionMultiRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionMultiRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ExtensionMultiRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ExtensionMultiRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionMultiRel.common)
  return _internal_common();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionMultiRel.common)
}
inline ::substrait::proto::RelCommon* ExtensionMultiRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionMultiRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionMultiRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ExtensionMultiRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ExtensionMultiRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionMultiRel.common)
  return _internal_mutable_common();
}
inline void ExtensionMultiRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionMultiRel.common)
}

// repeated .substrait.proto.Rel inputs = 2;
inline int ExtensionMultiRel::_internal_inputs_size() const {
  return inputs_.size();
}
inline int ExtensionMultiRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void ExtensionMultiRel::clear_inputs() {
  inputs_.Clear();
}
inline ::substrait::proto::Rel* ExtensionMultiRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionMultiRel.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >*
ExtensionMultiRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExtensionMultiRel.inputs)
  return &inputs_;
}
inline const ::substrait::proto::Rel& ExtensionMultiRel::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::substrait::proto::Rel& ExtensionMultiRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionMultiRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::proto::Rel* ExtensionMultiRel::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::substrait::proto::Rel* ExtensionMultiRel::add_inputs() {
  // @@protoc_insertion_point(field_add:substrait.proto.ExtensionMultiRel.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Rel >&
ExtensionMultiRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExtensionMultiRel.inputs)
  return inputs_;
}

// .google.protobuf.Any detail = 3;
inline bool ExtensionMultiRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionMultiRel::has_detail() const {
  return _internal_has_detail();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::_internal_detail() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionMultiRel.detail)
  return _internal_detail();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_detail(
    PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionMultiRel.detail)
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::release_detail() {
  auto temp = unsafe_arena_release_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionMultiRel.detail)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionMultiRel.detail)
  return _internal_mutable_detail();
}
inline void ExtensionMultiRel::set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail)->GetArena();
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionMultiRel.detail)
}

// -------------------------------------------------------------------

// ExchangeRel_ScatterFields

// repeated .substrait.proto.Expression.FieldReference fields = 1;
inline int ExchangeRel_ScatterFields::_internal_fields_size() const {
  return fields_.size();
}
inline int ExchangeRel_ScatterFields::fields_size() const {
  return _internal_fields_size();
}
inline void ExchangeRel_ScatterFields::clear_fields() {
  fields_.Clear();
}
inline ::substrait::proto::Expression_FieldReference* ExchangeRel_ScatterFields::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.ScatterFields.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
ExchangeRel_ScatterFields::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExchangeRel.ScatterFields.fields)
  return &fields_;
}
inline const ::substrait::proto::Expression_FieldReference& ExchangeRel_ScatterFields::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::substrait::proto::Expression_FieldReference& ExchangeRel_ScatterFields::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.ScatterFields.fields)
  return _internal_fields(index);
}
inline ::substrait::proto::Expression_FieldReference* ExchangeRel_ScatterFields::_internal_add_fields() {
  return fields_.Add();
}
inline ::substrait::proto::Expression_FieldReference* ExchangeRel_ScatterFields::add_fields() {
  // @@protoc_insertion_point(field_add:substrait.proto.ExchangeRel.ScatterFields.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
ExchangeRel_ScatterFields::fields() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExchangeRel.ScatterFields.fields)
  return fields_;
}

// -------------------------------------------------------------------

// ExchangeRel_SingleBucketExpression

// .substrait.proto.Expression expression = 1;
inline bool ExchangeRel_SingleBucketExpression::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool ExchangeRel_SingleBucketExpression::has_expression() const {
  return _internal_has_expression();
}
inline void ExchangeRel_SingleBucketExpression::clear_expression() {
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::substrait::proto::Expression& ExchangeRel_SingleBucketExpression::_internal_expression() const {
  const ::substrait::proto::Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& ExchangeRel_SingleBucketExpression::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.SingleBucketExpression.expression)
  return _internal_expression();
}
inline void ExchangeRel_SingleBucketExpression::unsafe_arena_set_allocated_expression(
    ::substrait::proto::Expression* expression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.SingleBucketExpression.expression)
}
inline ::substrait::proto::Expression* ExchangeRel_SingleBucketExpression::release_expression() {
  auto temp = unsafe_arena_release_expression();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* ExchangeRel_SingleBucketExpression::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.SingleBucketExpression.expression)
  
  ::substrait::proto::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* ExchangeRel_SingleBucketExpression::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    expression_ = p;
  }
  return expression_;
}
inline ::substrait::proto::Expression* ExchangeRel_SingleBucketExpression::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.SingleBucketExpression.expression)
  return _internal_mutable_expression();
}
inline void ExchangeRel_SingleBucketExpression::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.SingleBucketExpression.expression)
}

// -------------------------------------------------------------------

// ExchangeRel_MultiBucketExpression

// .substrait.proto.Expression expression = 1;
inline bool ExchangeRel_MultiBucketExpression::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool ExchangeRel_MultiBucketExpression::has_expression() const {
  return _internal_has_expression();
}
inline void ExchangeRel_MultiBucketExpression::clear_expression() {
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::substrait::proto::Expression& ExchangeRel_MultiBucketExpression::_internal_expression() const {
  const ::substrait::proto::Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& ExchangeRel_MultiBucketExpression::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.MultiBucketExpression.expression)
  return _internal_expression();
}
inline void ExchangeRel_MultiBucketExpression::unsafe_arena_set_allocated_expression(
    ::substrait::proto::Expression* expression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.MultiBucketExpression.expression)
}
inline ::substrait::proto::Expression* ExchangeRel_MultiBucketExpression::release_expression() {
  auto temp = unsafe_arena_release_expression();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* ExchangeRel_MultiBucketExpression::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.MultiBucketExpression.expression)
  
  ::substrait::proto::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* ExchangeRel_MultiBucketExpression::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    expression_ = p;
  }
  return expression_;
}
inline ::substrait::proto::Expression* ExchangeRel_MultiBucketExpression::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.MultiBucketExpression.expression)
  return _internal_mutable_expression();
}
inline void ExchangeRel_MultiBucketExpression::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.MultiBucketExpression.expression)
}

// bool constrained_to_count = 2;
inline void ExchangeRel_MultiBucketExpression::clear_constrained_to_count() {
  constrained_to_count_ = false;
}
inline bool ExchangeRel_MultiBucketExpression::_internal_constrained_to_count() const {
  return constrained_to_count_;
}
inline bool ExchangeRel_MultiBucketExpression::constrained_to_count() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.MultiBucketExpression.constrained_to_count)
  return _internal_constrained_to_count();
}
inline void ExchangeRel_MultiBucketExpression::_internal_set_constrained_to_count(bool value) {
  
  constrained_to_count_ = value;
}
inline void ExchangeRel_MultiBucketExpression::set_constrained_to_count(bool value) {
  _internal_set_constrained_to_count(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.MultiBucketExpression.constrained_to_count)
}

// -------------------------------------------------------------------

// ExchangeRel_Broadcast

// -------------------------------------------------------------------

// ExchangeRel_RoundRobin

// bool exact = 1;
inline void ExchangeRel_RoundRobin::clear_exact() {
  exact_ = false;
}
inline bool ExchangeRel_RoundRobin::_internal_exact() const {
  return exact_;
}
inline bool ExchangeRel_RoundRobin::exact() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.RoundRobin.exact)
  return _internal_exact();
}
inline void ExchangeRel_RoundRobin::_internal_set_exact(bool value) {
  
  exact_ = value;
}
inline void ExchangeRel_RoundRobin::set_exact(bool value) {
  _internal_set_exact(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.RoundRobin.exact)
}

// -------------------------------------------------------------------

// ExchangeRel_ExchangeTarget

// repeated int32 partition_id = 1;
inline int ExchangeRel_ExchangeTarget::_internal_partition_id_size() const {
  return partition_id_.size();
}
inline int ExchangeRel_ExchangeTarget::partition_id_size() const {
  return _internal_partition_id_size();
}
inline void ExchangeRel_ExchangeTarget::clear_partition_id() {
  partition_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeRel_ExchangeTarget::_internal_partition_id(int index) const {
  return partition_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeRel_ExchangeTarget::partition_id(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_partition_id(index);
}
inline void ExchangeRel_ExchangeTarget::set_partition_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  partition_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.ExchangeTarget.partition_id)
}
inline void ExchangeRel_ExchangeTarget::_internal_add_partition_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  partition_id_.Add(value);
}
inline void ExchangeRel_ExchangeTarget::add_partition_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_partition_id(value);
  // @@protoc_insertion_point(field_add:substrait.proto.ExchangeRel.ExchangeTarget.partition_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ExchangeRel_ExchangeTarget::_internal_partition_id() const {
  return partition_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ExchangeRel_ExchangeTarget::partition_id() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_partition_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ExchangeRel_ExchangeTarget::_internal_mutable_partition_id() {
  return &partition_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ExchangeRel_ExchangeTarget::mutable_partition_id() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_mutable_partition_id();
}

// string uri = 2;
inline bool ExchangeRel_ExchangeTarget::_internal_has_uri() const {
  return target_type_case() == kUri;
}
inline void ExchangeRel_ExchangeTarget::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void ExchangeRel_ExchangeTarget::clear_uri() {
  if (_internal_has_uri()) {
    target_type_.uri_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_target_type();
  }
}
inline const std::string& ExchangeRel_ExchangeTarget::uri() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.ExchangeTarget.uri)
  return _internal_uri();
}
inline void ExchangeRel_ExchangeTarget::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}
inline std::string* ExchangeRel_ExchangeTarget::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.ExchangeTarget.uri)
  return _internal_mutable_uri();
}
inline const std::string& ExchangeRel_ExchangeTarget::_internal_uri() const {
  if (_internal_has_uri()) {
    return target_type_.uri_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ExchangeRel_ExchangeTarget::_internal_set_uri(const std::string& value) {
  if (!_internal_has_uri()) {
    clear_target_type();
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_type_.uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExchangeRel_ExchangeTarget::set_uri(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.ExchangeTarget.uri)
  if (!_internal_has_uri()) {
    clear_target_type();
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_type_.uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}
inline void ExchangeRel_ExchangeTarget::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uri()) {
    clear_target_type();
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_type_.uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}
inline void ExchangeRel_ExchangeTarget::set_uri(const char* value,
                             size_t size) {
  if (!_internal_has_uri()) {
    clear_target_type();
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_type_.uri_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}
inline std::string* ExchangeRel_ExchangeTarget::_internal_mutable_uri() {
  if (!_internal_has_uri()) {
    clear_target_type();
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_type_.uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExchangeRel_ExchangeTarget::release_uri() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.ExchangeTarget.uri)
  if (_internal_has_uri()) {
    clear_has_target_type();
    return target_type_.uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ExchangeRel_ExchangeTarget::set_allocated_uri(std::string* uri) {
  if (has_target_type()) {
    clear_target_type();
  }
  if (uri != nullptr) {
    set_has_uri();
    target_type_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}
inline std::string* ExchangeRel_ExchangeTarget::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.ExchangeTarget.uri)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uri()) {
    clear_has_target_type();
    return target_type_.uri_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ExchangeRel_ExchangeTarget::unsafe_arena_set_allocated_uri(std::string* uri) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uri()) {
    target_type_.uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_target_type();
  if (uri) {
    set_has_uri();
    target_type_.uri_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.ExchangeTarget.uri)
}

// .google.protobuf.Any extended = 3;
inline bool ExchangeRel_ExchangeTarget::_internal_has_extended() const {
  return target_type_case() == kExtended;
}
inline bool ExchangeRel_ExchangeTarget::has_extended() const {
  return _internal_has_extended();
}
inline void ExchangeRel_ExchangeTarget::set_has_extended() {
  _oneof_case_[0] = kExtended;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::release_extended() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.ExchangeTarget.extended)
  if (_internal_has_extended()) {
    clear_has_target_type();
      PROTOBUF_NAMESPACE_ID::Any* temp = target_type_.extended_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_type_.extended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExchangeRel_ExchangeTarget::_internal_extended() const {
  return _internal_has_extended()
      ? *target_type_.extended_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExchangeRel_ExchangeTarget::extended() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.ExchangeTarget.extended)
  return _internal_extended();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::unsafe_arena_release_extended() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.ExchangeTarget.extended)
  if (_internal_has_extended()) {
    clear_has_target_type();
    PROTOBUF_NAMESPACE_ID::Any* temp = target_type_.extended_;
    target_type_.extended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel_ExchangeTarget::unsafe_arena_set_allocated_extended(PROTOBUF_NAMESPACE_ID::Any* extended) {
  clear_target_type();
  if (extended) {
    set_has_extended();
    target_type_.extended_ = extended;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.ExchangeTarget.extended)
}
inline PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::_internal_mutable_extended() {
  if (!_internal_has_extended()) {
    clear_target_type();
    set_has_extended();
    target_type_.extended_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return target_type_.extended_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::mutable_extended() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.ExchangeTarget.extended)
  return _internal_mutable_extended();
}

inline bool ExchangeRel_ExchangeTarget::has_target_type() const {
  return target_type_case() != TARGET_TYPE_NOT_SET;
}
inline void ExchangeRel_ExchangeTarget::clear_has_target_type() {
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}
inline ExchangeRel_ExchangeTarget::TargetTypeCase ExchangeRel_ExchangeTarget::target_type_case() const {
  return ExchangeRel_ExchangeTarget::TargetTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExchangeRel

// .substrait.proto.RelCommon common = 1;
inline bool ExchangeRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExchangeRel::has_common() const {
  return _internal_has_common();
}
inline void ExchangeRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ExchangeRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ExchangeRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.common)
  return _internal_common();
}
inline void ExchangeRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.common)
}
inline ::substrait::proto::RelCommon* ExchangeRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ExchangeRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ExchangeRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ExchangeRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.common)
  return _internal_mutable_common();
}
inline void ExchangeRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool ExchangeRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ExchangeRel::has_input() const {
  return _internal_has_input();
}
inline void ExchangeRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& ExchangeRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& ExchangeRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.input)
  return _internal_input();
}
inline void ExchangeRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.input)
}
inline ::substrait::proto::Rel* ExchangeRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* ExchangeRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* ExchangeRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* ExchangeRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.input)
  return _internal_mutable_input();
}
inline void ExchangeRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.input)
}

// int32 partition_count = 3;
inline void ExchangeRel::clear_partition_count() {
  partition_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeRel::_internal_partition_count() const {
  return partition_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExchangeRel::partition_count() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.partition_count)
  return _internal_partition_count();
}
inline void ExchangeRel::_internal_set_partition_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partition_count_ = value;
}
inline void ExchangeRel::set_partition_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partition_count(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ExchangeRel.partition_count)
}

// repeated .substrait.proto.ExchangeRel.ExchangeTarget targets = 4;
inline int ExchangeRel::_internal_targets_size() const {
  return targets_.size();
}
inline int ExchangeRel::targets_size() const {
  return _internal_targets_size();
}
inline void ExchangeRel::clear_targets() {
  targets_.Clear();
}
inline ::substrait::proto::ExchangeRel_ExchangeTarget* ExchangeRel::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExchangeRel_ExchangeTarget >*
ExchangeRel::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExchangeRel.targets)
  return &targets_;
}
inline const ::substrait::proto::ExchangeRel_ExchangeTarget& ExchangeRel::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const ::substrait::proto::ExchangeRel_ExchangeTarget& ExchangeRel::targets(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.targets)
  return _internal_targets(index);
}
inline ::substrait::proto::ExchangeRel_ExchangeTarget* ExchangeRel::_internal_add_targets() {
  return targets_.Add();
}
inline ::substrait::proto::ExchangeRel_ExchangeTarget* ExchangeRel::add_targets() {
  // @@protoc_insertion_point(field_add:substrait.proto.ExchangeRel.targets)
  return _internal_add_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExchangeRel_ExchangeTarget >&
ExchangeRel::targets() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExchangeRel.targets)
  return targets_;
}

// .substrait.proto.ExchangeRel.ScatterFields scatter_by_fields = 5;
inline bool ExchangeRel::_internal_has_scatter_by_fields() const {
  return exchange_kind_case() == kScatterByFields;
}
inline bool ExchangeRel::has_scatter_by_fields() const {
  return _internal_has_scatter_by_fields();
}
inline void ExchangeRel::set_has_scatter_by_fields() {
  _oneof_case_[0] = kScatterByFields;
}
inline void ExchangeRel::clear_scatter_by_fields() {
  if (_internal_has_scatter_by_fields()) {
    if (GetArena() == nullptr) {
      delete exchange_kind_.scatter_by_fields_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::proto::ExchangeRel_ScatterFields* ExchangeRel::release_scatter_by_fields() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.scatter_by_fields)
  if (_internal_has_scatter_by_fields()) {
    clear_has_exchange_kind();
      ::substrait::proto::ExchangeRel_ScatterFields* temp = exchange_kind_.scatter_by_fields_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    exchange_kind_.scatter_by_fields_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel_ScatterFields& ExchangeRel::_internal_scatter_by_fields() const {
  return _internal_has_scatter_by_fields()
      ? *exchange_kind_.scatter_by_fields_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel_ScatterFields*>(&::substrait::proto::_ExchangeRel_ScatterFields_default_instance_);
}
inline const ::substrait::proto::ExchangeRel_ScatterFields& ExchangeRel::scatter_by_fields() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.scatter_by_fields)
  return _internal_scatter_by_fields();
}
inline ::substrait::proto::ExchangeRel_ScatterFields* ExchangeRel::unsafe_arena_release_scatter_by_fields() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.scatter_by_fields)
  if (_internal_has_scatter_by_fields()) {
    clear_has_exchange_kind();
    ::substrait::proto::ExchangeRel_ScatterFields* temp = exchange_kind_.scatter_by_fields_;
    exchange_kind_.scatter_by_fields_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_scatter_by_fields(::substrait::proto::ExchangeRel_ScatterFields* scatter_by_fields) {
  clear_exchange_kind();
  if (scatter_by_fields) {
    set_has_scatter_by_fields();
    exchange_kind_.scatter_by_fields_ = scatter_by_fields;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.scatter_by_fields)
}
inline ::substrait::proto::ExchangeRel_ScatterFields* ExchangeRel::_internal_mutable_scatter_by_fields() {
  if (!_internal_has_scatter_by_fields()) {
    clear_exchange_kind();
    set_has_scatter_by_fields();
    exchange_kind_.scatter_by_fields_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel_ScatterFields >(GetArena());
  }
  return exchange_kind_.scatter_by_fields_;
}
inline ::substrait::proto::ExchangeRel_ScatterFields* ExchangeRel::mutable_scatter_by_fields() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.scatter_by_fields)
  return _internal_mutable_scatter_by_fields();
}

// .substrait.proto.ExchangeRel.SingleBucketExpression single_target = 6;
inline bool ExchangeRel::_internal_has_single_target() const {
  return exchange_kind_case() == kSingleTarget;
}
inline bool ExchangeRel::has_single_target() const {
  return _internal_has_single_target();
}
inline void ExchangeRel::set_has_single_target() {
  _oneof_case_[0] = kSingleTarget;
}
inline void ExchangeRel::clear_single_target() {
  if (_internal_has_single_target()) {
    if (GetArena() == nullptr) {
      delete exchange_kind_.single_target_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::proto::ExchangeRel_SingleBucketExpression* ExchangeRel::release_single_target() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.single_target)
  if (_internal_has_single_target()) {
    clear_has_exchange_kind();
      ::substrait::proto::ExchangeRel_SingleBucketExpression* temp = exchange_kind_.single_target_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    exchange_kind_.single_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel_SingleBucketExpression& ExchangeRel::_internal_single_target() const {
  return _internal_has_single_target()
      ? *exchange_kind_.single_target_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel_SingleBucketExpression*>(&::substrait::proto::_ExchangeRel_SingleBucketExpression_default_instance_);
}
inline const ::substrait::proto::ExchangeRel_SingleBucketExpression& ExchangeRel::single_target() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.single_target)
  return _internal_single_target();
}
inline ::substrait::proto::ExchangeRel_SingleBucketExpression* ExchangeRel::unsafe_arena_release_single_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.single_target)
  if (_internal_has_single_target()) {
    clear_has_exchange_kind();
    ::substrait::proto::ExchangeRel_SingleBucketExpression* temp = exchange_kind_.single_target_;
    exchange_kind_.single_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_single_target(::substrait::proto::ExchangeRel_SingleBucketExpression* single_target) {
  clear_exchange_kind();
  if (single_target) {
    set_has_single_target();
    exchange_kind_.single_target_ = single_target;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.single_target)
}
inline ::substrait::proto::ExchangeRel_SingleBucketExpression* ExchangeRel::_internal_mutable_single_target() {
  if (!_internal_has_single_target()) {
    clear_exchange_kind();
    set_has_single_target();
    exchange_kind_.single_target_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel_SingleBucketExpression >(GetArena());
  }
  return exchange_kind_.single_target_;
}
inline ::substrait::proto::ExchangeRel_SingleBucketExpression* ExchangeRel::mutable_single_target() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.single_target)
  return _internal_mutable_single_target();
}

// .substrait.proto.ExchangeRel.MultiBucketExpression multi_target = 7;
inline bool ExchangeRel::_internal_has_multi_target() const {
  return exchange_kind_case() == kMultiTarget;
}
inline bool ExchangeRel::has_multi_target() const {
  return _internal_has_multi_target();
}
inline void ExchangeRel::set_has_multi_target() {
  _oneof_case_[0] = kMultiTarget;
}
inline void ExchangeRel::clear_multi_target() {
  if (_internal_has_multi_target()) {
    if (GetArena() == nullptr) {
      delete exchange_kind_.multi_target_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::proto::ExchangeRel_MultiBucketExpression* ExchangeRel::release_multi_target() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.multi_target)
  if (_internal_has_multi_target()) {
    clear_has_exchange_kind();
      ::substrait::proto::ExchangeRel_MultiBucketExpression* temp = exchange_kind_.multi_target_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    exchange_kind_.multi_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel_MultiBucketExpression& ExchangeRel::_internal_multi_target() const {
  return _internal_has_multi_target()
      ? *exchange_kind_.multi_target_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel_MultiBucketExpression*>(&::substrait::proto::_ExchangeRel_MultiBucketExpression_default_instance_);
}
inline const ::substrait::proto::ExchangeRel_MultiBucketExpression& ExchangeRel::multi_target() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.multi_target)
  return _internal_multi_target();
}
inline ::substrait::proto::ExchangeRel_MultiBucketExpression* ExchangeRel::unsafe_arena_release_multi_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.multi_target)
  if (_internal_has_multi_target()) {
    clear_has_exchange_kind();
    ::substrait::proto::ExchangeRel_MultiBucketExpression* temp = exchange_kind_.multi_target_;
    exchange_kind_.multi_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_multi_target(::substrait::proto::ExchangeRel_MultiBucketExpression* multi_target) {
  clear_exchange_kind();
  if (multi_target) {
    set_has_multi_target();
    exchange_kind_.multi_target_ = multi_target;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.multi_target)
}
inline ::substrait::proto::ExchangeRel_MultiBucketExpression* ExchangeRel::_internal_mutable_multi_target() {
  if (!_internal_has_multi_target()) {
    clear_exchange_kind();
    set_has_multi_target();
    exchange_kind_.multi_target_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel_MultiBucketExpression >(GetArena());
  }
  return exchange_kind_.multi_target_;
}
inline ::substrait::proto::ExchangeRel_MultiBucketExpression* ExchangeRel::mutable_multi_target() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.multi_target)
  return _internal_mutable_multi_target();
}

// .substrait.proto.ExchangeRel.RoundRobin round_robin = 8;
inline bool ExchangeRel::_internal_has_round_robin() const {
  return exchange_kind_case() == kRoundRobin;
}
inline bool ExchangeRel::has_round_robin() const {
  return _internal_has_round_robin();
}
inline void ExchangeRel::set_has_round_robin() {
  _oneof_case_[0] = kRoundRobin;
}
inline void ExchangeRel::clear_round_robin() {
  if (_internal_has_round_robin()) {
    if (GetArena() == nullptr) {
      delete exchange_kind_.round_robin_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::proto::ExchangeRel_RoundRobin* ExchangeRel::release_round_robin() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.round_robin)
  if (_internal_has_round_robin()) {
    clear_has_exchange_kind();
      ::substrait::proto::ExchangeRel_RoundRobin* temp = exchange_kind_.round_robin_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    exchange_kind_.round_robin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel_RoundRobin& ExchangeRel::_internal_round_robin() const {
  return _internal_has_round_robin()
      ? *exchange_kind_.round_robin_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel_RoundRobin*>(&::substrait::proto::_ExchangeRel_RoundRobin_default_instance_);
}
inline const ::substrait::proto::ExchangeRel_RoundRobin& ExchangeRel::round_robin() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.round_robin)
  return _internal_round_robin();
}
inline ::substrait::proto::ExchangeRel_RoundRobin* ExchangeRel::unsafe_arena_release_round_robin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.round_robin)
  if (_internal_has_round_robin()) {
    clear_has_exchange_kind();
    ::substrait::proto::ExchangeRel_RoundRobin* temp = exchange_kind_.round_robin_;
    exchange_kind_.round_robin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_round_robin(::substrait::proto::ExchangeRel_RoundRobin* round_robin) {
  clear_exchange_kind();
  if (round_robin) {
    set_has_round_robin();
    exchange_kind_.round_robin_ = round_robin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.round_robin)
}
inline ::substrait::proto::ExchangeRel_RoundRobin* ExchangeRel::_internal_mutable_round_robin() {
  if (!_internal_has_round_robin()) {
    clear_exchange_kind();
    set_has_round_robin();
    exchange_kind_.round_robin_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel_RoundRobin >(GetArena());
  }
  return exchange_kind_.round_robin_;
}
inline ::substrait::proto::ExchangeRel_RoundRobin* ExchangeRel::mutable_round_robin() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.round_robin)
  return _internal_mutable_round_robin();
}

// .substrait.proto.ExchangeRel.Broadcast broadcast = 9;
inline bool ExchangeRel::_internal_has_broadcast() const {
  return exchange_kind_case() == kBroadcast;
}
inline bool ExchangeRel::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void ExchangeRel::set_has_broadcast() {
  _oneof_case_[0] = kBroadcast;
}
inline void ExchangeRel::clear_broadcast() {
  if (_internal_has_broadcast()) {
    if (GetArena() == nullptr) {
      delete exchange_kind_.broadcast_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::proto::ExchangeRel_Broadcast* ExchangeRel::release_broadcast() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.broadcast)
  if (_internal_has_broadcast()) {
    clear_has_exchange_kind();
      ::substrait::proto::ExchangeRel_Broadcast* temp = exchange_kind_.broadcast_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    exchange_kind_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel_Broadcast& ExchangeRel::_internal_broadcast() const {
  return _internal_has_broadcast()
      ? *exchange_kind_.broadcast_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel_Broadcast*>(&::substrait::proto::_ExchangeRel_Broadcast_default_instance_);
}
inline const ::substrait::proto::ExchangeRel_Broadcast& ExchangeRel::broadcast() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.broadcast)
  return _internal_broadcast();
}
inline ::substrait::proto::ExchangeRel_Broadcast* ExchangeRel::unsafe_arena_release_broadcast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExchangeRel.broadcast)
  if (_internal_has_broadcast()) {
    clear_has_exchange_kind();
    ::substrait::proto::ExchangeRel_Broadcast* temp = exchange_kind_.broadcast_;
    exchange_kind_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_broadcast(::substrait::proto::ExchangeRel_Broadcast* broadcast) {
  clear_exchange_kind();
  if (broadcast) {
    set_has_broadcast();
    exchange_kind_.broadcast_ = broadcast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.broadcast)
}
inline ::substrait::proto::ExchangeRel_Broadcast* ExchangeRel::_internal_mutable_broadcast() {
  if (!_internal_has_broadcast()) {
    clear_exchange_kind();
    set_has_broadcast();
    exchange_kind_.broadcast_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel_Broadcast >(GetArena());
  }
  return exchange_kind_.broadcast_;
}
inline ::substrait::proto::ExchangeRel_Broadcast* ExchangeRel::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.broadcast)
  return _internal_mutable_broadcast();
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool ExchangeRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ExchangeRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& ExchangeRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& ExchangeRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExchangeRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ExchangeRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExchangeRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* ExchangeRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ExchangeRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExchangeRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* ExchangeRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* ExchangeRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExchangeRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void ExchangeRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExchangeRel.advanced_extension)
}

inline bool ExchangeRel::has_exchange_kind() const {
  return exchange_kind_case() != EXCHANGE_KIND_NOT_SET;
}
inline void ExchangeRel::clear_has_exchange_kind() {
  _oneof_case_[0] = EXCHANGE_KIND_NOT_SET;
}
inline ExchangeRel::ExchangeKindCase ExchangeRel::exchange_kind_case() const {
  return ExchangeRel::ExchangeKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExpandRel_ExpandField

// .substrait.proto.ExpandRel.SwitchingField switching_field = 2;
inline bool ExpandRel_ExpandField::_internal_has_switching_field() const {
  return field_type_case() == kSwitchingField;
}
inline bool ExpandRel_ExpandField::has_switching_field() const {
  return _internal_has_switching_field();
}
inline void ExpandRel_ExpandField::set_has_switching_field() {
  _oneof_case_[0] = kSwitchingField;
}
inline void ExpandRel_ExpandField::clear_switching_field() {
  if (_internal_has_switching_field()) {
    if (GetArena() == nullptr) {
      delete field_type_.switching_field_;
    }
    clear_has_field_type();
  }
}
inline ::substrait::proto::ExpandRel_SwitchingField* ExpandRel_ExpandField::release_switching_field() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExpandRel.ExpandField.switching_field)
  if (_internal_has_switching_field()) {
    clear_has_field_type();
      ::substrait::proto::ExpandRel_SwitchingField* temp = field_type_.switching_field_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    field_type_.switching_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExpandRel_SwitchingField& ExpandRel_ExpandField::_internal_switching_field() const {
  return _internal_has_switching_field()
      ? *field_type_.switching_field_
      : *reinterpret_cast< ::substrait::proto::ExpandRel_SwitchingField*>(&::substrait::proto::_ExpandRel_SwitchingField_default_instance_);
}
inline const ::substrait::proto::ExpandRel_SwitchingField& ExpandRel_ExpandField::switching_field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.ExpandField.switching_field)
  return _internal_switching_field();
}
inline ::substrait::proto::ExpandRel_SwitchingField* ExpandRel_ExpandField::unsafe_arena_release_switching_field() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExpandRel.ExpandField.switching_field)
  if (_internal_has_switching_field()) {
    clear_has_field_type();
    ::substrait::proto::ExpandRel_SwitchingField* temp = field_type_.switching_field_;
    field_type_.switching_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExpandRel_ExpandField::unsafe_arena_set_allocated_switching_field(::substrait::proto::ExpandRel_SwitchingField* switching_field) {
  clear_field_type();
  if (switching_field) {
    set_has_switching_field();
    field_type_.switching_field_ = switching_field;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExpandRel.ExpandField.switching_field)
}
inline ::substrait::proto::ExpandRel_SwitchingField* ExpandRel_ExpandField::_internal_mutable_switching_field() {
  if (!_internal_has_switching_field()) {
    clear_field_type();
    set_has_switching_field();
    field_type_.switching_field_ = CreateMaybeMessage< ::substrait::proto::ExpandRel_SwitchingField >(GetArena());
  }
  return field_type_.switching_field_;
}
inline ::substrait::proto::ExpandRel_SwitchingField* ExpandRel_ExpandField::mutable_switching_field() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.ExpandField.switching_field)
  return _internal_mutable_switching_field();
}

// .substrait.proto.Expression consistent_field = 3;
inline bool ExpandRel_ExpandField::_internal_has_consistent_field() const {
  return field_type_case() == kConsistentField;
}
inline bool ExpandRel_ExpandField::has_consistent_field() const {
  return _internal_has_consistent_field();
}
inline void ExpandRel_ExpandField::set_has_consistent_field() {
  _oneof_case_[0] = kConsistentField;
}
inline void ExpandRel_ExpandField::clear_consistent_field() {
  if (_internal_has_consistent_field()) {
    if (GetArena() == nullptr) {
      delete field_type_.consistent_field_;
    }
    clear_has_field_type();
  }
}
inline ::substrait::proto::Expression* ExpandRel_ExpandField::release_consistent_field() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExpandRel.ExpandField.consistent_field)
  if (_internal_has_consistent_field()) {
    clear_has_field_type();
      ::substrait::proto::Expression* temp = field_type_.consistent_field_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    field_type_.consistent_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression& ExpandRel_ExpandField::_internal_consistent_field() const {
  return _internal_has_consistent_field()
      ? *field_type_.consistent_field_
      : *reinterpret_cast< ::substrait::proto::Expression*>(&::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& ExpandRel_ExpandField::consistent_field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.ExpandField.consistent_field)
  return _internal_consistent_field();
}
inline ::substrait::proto::Expression* ExpandRel_ExpandField::unsafe_arena_release_consistent_field() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.ExpandRel.ExpandField.consistent_field)
  if (_internal_has_consistent_field()) {
    clear_has_field_type();
    ::substrait::proto::Expression* temp = field_type_.consistent_field_;
    field_type_.consistent_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExpandRel_ExpandField::unsafe_arena_set_allocated_consistent_field(::substrait::proto::Expression* consistent_field) {
  clear_field_type();
  if (consistent_field) {
    set_has_consistent_field();
    field_type_.consistent_field_ = consistent_field;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExpandRel.ExpandField.consistent_field)
}
inline ::substrait::proto::Expression* ExpandRel_ExpandField::_internal_mutable_consistent_field() {
  if (!_internal_has_consistent_field()) {
    clear_field_type();
    set_has_consistent_field();
    field_type_.consistent_field_ = CreateMaybeMessage< ::substrait::proto::Expression >(GetArena());
  }
  return field_type_.consistent_field_;
}
inline ::substrait::proto::Expression* ExpandRel_ExpandField::mutable_consistent_field() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.ExpandField.consistent_field)
  return _internal_mutable_consistent_field();
}

inline bool ExpandRel_ExpandField::has_field_type() const {
  return field_type_case() != FIELD_TYPE_NOT_SET;
}
inline void ExpandRel_ExpandField::clear_has_field_type() {
  _oneof_case_[0] = FIELD_TYPE_NOT_SET;
}
inline ExpandRel_ExpandField::FieldTypeCase ExpandRel_ExpandField::field_type_case() const {
  return ExpandRel_ExpandField::FieldTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExpandRel_SwitchingField

// repeated .substrait.proto.Expression duplicates = 1;
inline int ExpandRel_SwitchingField::_internal_duplicates_size() const {
  return duplicates_.size();
}
inline int ExpandRel_SwitchingField::duplicates_size() const {
  return _internal_duplicates_size();
}
inline void ExpandRel_SwitchingField::clear_duplicates() {
  duplicates_.Clear();
}
inline ::substrait::proto::Expression* ExpandRel_SwitchingField::mutable_duplicates(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.SwitchingField.duplicates)
  return duplicates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
ExpandRel_SwitchingField::mutable_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExpandRel.SwitchingField.duplicates)
  return &duplicates_;
}
inline const ::substrait::proto::Expression& ExpandRel_SwitchingField::_internal_duplicates(int index) const {
  return duplicates_.Get(index);
}
inline const ::substrait::proto::Expression& ExpandRel_SwitchingField::duplicates(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.SwitchingField.duplicates)
  return _internal_duplicates(index);
}
inline ::substrait::proto::Expression* ExpandRel_SwitchingField::_internal_add_duplicates() {
  return duplicates_.Add();
}
inline ::substrait::proto::Expression* ExpandRel_SwitchingField::add_duplicates() {
  // @@protoc_insertion_point(field_add:substrait.proto.ExpandRel.SwitchingField.duplicates)
  return _internal_add_duplicates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
ExpandRel_SwitchingField::duplicates() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExpandRel.SwitchingField.duplicates)
  return duplicates_;
}

// -------------------------------------------------------------------

// ExpandRel

// .substrait.proto.RelCommon common = 1;
inline bool ExpandRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExpandRel::has_common() const {
  return _internal_has_common();
}
inline void ExpandRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& ExpandRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& ExpandRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.common)
  return _internal_common();
}
inline void ExpandRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExpandRel.common)
}
inline ::substrait::proto::RelCommon* ExpandRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* ExpandRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExpandRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* ExpandRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* ExpandRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.common)
  return _internal_mutable_common();
}
inline void ExpandRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpandRel.common)
}

// .substrait.proto.Rel input = 2;
inline bool ExpandRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ExpandRel::has_input() const {
  return _internal_has_input();
}
inline void ExpandRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& ExpandRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& ExpandRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.input)
  return _internal_input();
}
inline void ExpandRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExpandRel.input)
}
inline ::substrait::proto::Rel* ExpandRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* ExpandRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExpandRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* ExpandRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* ExpandRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.input)
  return _internal_mutable_input();
}
inline void ExpandRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExpandRel.input)
}

// repeated .substrait.proto.ExpandRel.ExpandField fields = 4;
inline int ExpandRel::_internal_fields_size() const {
  return fields_.size();
}
inline int ExpandRel::fields_size() const {
  return _internal_fields_size();
}
inline void ExpandRel::clear_fields() {
  fields_.Clear();
}
inline ::substrait::proto::ExpandRel_ExpandField* ExpandRel::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExpandRel.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExpandRel_ExpandField >*
ExpandRel::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.ExpandRel.fields)
  return &fields_;
}
inline const ::substrait::proto::ExpandRel_ExpandField& ExpandRel::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::substrait::proto::ExpandRel_ExpandField& ExpandRel::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExpandRel.fields)
  return _internal_fields(index);
}
inline ::substrait::proto::ExpandRel_ExpandField* ExpandRel::_internal_add_fields() {
  return fields_.Add();
}
inline ::substrait::proto::ExpandRel_ExpandField* ExpandRel::add_fields() {
  // @@protoc_insertion_point(field_add:substrait.proto.ExpandRel.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ExpandRel_ExpandField >&
ExpandRel::fields() const {
  // @@protoc_insertion_point(field_list:substrait.proto.ExpandRel.fields)
  return fields_;
}

// -------------------------------------------------------------------

// RelRoot

// .substrait.proto.Rel input = 1;
inline bool RelRoot::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool RelRoot::has_input() const {
  return _internal_has_input();
}
inline void RelRoot::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& RelRoot::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& RelRoot::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelRoot.input)
  return _internal_input();
}
inline void RelRoot::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.RelRoot.input)
}
inline ::substrait::proto::Rel* RelRoot::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* RelRoot::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.RelRoot.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* RelRoot::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* RelRoot::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelRoot.input)
  return _internal_mutable_input();
}
inline void RelRoot::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.RelRoot.input)
}

// repeated string names = 2;
inline int RelRoot::_internal_names_size() const {
  return names_.size();
}
inline int RelRoot::names_size() const {
  return _internal_names_size();
}
inline void RelRoot::clear_names() {
  names_.Clear();
}
inline std::string* RelRoot::add_names() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.RelRoot.names)
  return _internal_add_names();
}
inline const std::string& RelRoot::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& RelRoot::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.RelRoot.names)
  return _internal_names(index);
}
inline std::string* RelRoot::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.RelRoot.names)
  return names_.Mutable(index);
}
inline void RelRoot::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.RelRoot.names)
  names_.Mutable(index)->assign(value);
}
inline void RelRoot::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.RelRoot.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void RelRoot::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.RelRoot.names)
}
inline void RelRoot::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.RelRoot.names)
}
inline std::string* RelRoot::_internal_add_names() {
  return names_.Add();
}
inline void RelRoot::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.RelRoot.names)
}
inline void RelRoot::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.RelRoot.names)
}
inline void RelRoot::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.RelRoot.names)
}
inline void RelRoot::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.RelRoot.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelRoot::names() const {
  // @@protoc_insertion_point(field_list:substrait.proto.RelRoot.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelRoot::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.RelRoot.names)
  return &names_;
}

// -------------------------------------------------------------------

// Rel

// .substrait.proto.ReadRel read = 1;
inline bool Rel::_internal_has_read() const {
  return rel_type_case() == kRead;
}
inline bool Rel::has_read() const {
  return _internal_has_read();
}
inline void Rel::set_has_read() {
  _oneof_case_[0] = kRead;
}
inline void Rel::clear_read() {
  if (_internal_has_read()) {
    if (GetArena() == nullptr) {
      delete rel_type_.read_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ReadRel* Rel::release_read() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.read)
  if (_internal_has_read()) {
    clear_has_rel_type();
      ::substrait::proto::ReadRel* temp = rel_type_.read_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReadRel& Rel::_internal_read() const {
  return _internal_has_read()
      ? *rel_type_.read_
      : *reinterpret_cast< ::substrait::proto::ReadRel*>(&::substrait::proto::_ReadRel_default_instance_);
}
inline const ::substrait::proto::ReadRel& Rel::read() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.read)
  return _internal_read();
}
inline ::substrait::proto::ReadRel* Rel::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.read)
  if (_internal_has_read()) {
    clear_has_rel_type();
    ::substrait::proto::ReadRel* temp = rel_type_.read_;
    rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_read(::substrait::proto::ReadRel* read) {
  clear_rel_type();
  if (read) {
    set_has_read();
    rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.read)
}
inline ::substrait::proto::ReadRel* Rel::_internal_mutable_read() {
  if (!_internal_has_read()) {
    clear_rel_type();
    set_has_read();
    rel_type_.read_ = CreateMaybeMessage< ::substrait::proto::ReadRel >(GetArena());
  }
  return rel_type_.read_;
}
inline ::substrait::proto::ReadRel* Rel::mutable_read() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.read)
  return _internal_mutable_read();
}

// .substrait.proto.FilterRel filter = 2;
inline bool Rel::_internal_has_filter() const {
  return rel_type_case() == kFilter;
}
inline bool Rel::has_filter() const {
  return _internal_has_filter();
}
inline void Rel::set_has_filter() {
  _oneof_case_[0] = kFilter;
}
inline void Rel::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArena() == nullptr) {
      delete rel_type_.filter_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::FilterRel* Rel::release_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_rel_type();
      ::substrait::proto::FilterRel* temp = rel_type_.filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::FilterRel& Rel::_internal_filter() const {
  return _internal_has_filter()
      ? *rel_type_.filter_
      : *reinterpret_cast< ::substrait::proto::FilterRel*>(&::substrait::proto::_FilterRel_default_instance_);
}
inline const ::substrait::proto::FilterRel& Rel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.filter)
  return _internal_filter();
}
inline ::substrait::proto::FilterRel* Rel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_rel_type();
    ::substrait::proto::FilterRel* temp = rel_type_.filter_;
    rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_filter(::substrait::proto::FilterRel* filter) {
  clear_rel_type();
  if (filter) {
    set_has_filter();
    rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.filter)
}
inline ::substrait::proto::FilterRel* Rel::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_rel_type();
    set_has_filter();
    rel_type_.filter_ = CreateMaybeMessage< ::substrait::proto::FilterRel >(GetArena());
  }
  return rel_type_.filter_;
}
inline ::substrait::proto::FilterRel* Rel::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.filter)
  return _internal_mutable_filter();
}

// .substrait.proto.FetchRel fetch = 3;
inline bool Rel::_internal_has_fetch() const {
  return rel_type_case() == kFetch;
}
inline bool Rel::has_fetch() const {
  return _internal_has_fetch();
}
inline void Rel::set_has_fetch() {
  _oneof_case_[0] = kFetch;
}
inline void Rel::clear_fetch() {
  if (_internal_has_fetch()) {
    if (GetArena() == nullptr) {
      delete rel_type_.fetch_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::FetchRel* Rel::release_fetch() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_rel_type();
      ::substrait::proto::FetchRel* temp = rel_type_.fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::FetchRel& Rel::_internal_fetch() const {
  return _internal_has_fetch()
      ? *rel_type_.fetch_
      : *reinterpret_cast< ::substrait::proto::FetchRel*>(&::substrait::proto::_FetchRel_default_instance_);
}
inline const ::substrait::proto::FetchRel& Rel::fetch() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.fetch)
  return _internal_fetch();
}
inline ::substrait::proto::FetchRel* Rel::unsafe_arena_release_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_rel_type();
    ::substrait::proto::FetchRel* temp = rel_type_.fetch_;
    rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_fetch(::substrait::proto::FetchRel* fetch) {
  clear_rel_type();
  if (fetch) {
    set_has_fetch();
    rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.fetch)
}
inline ::substrait::proto::FetchRel* Rel::_internal_mutable_fetch() {
  if (!_internal_has_fetch()) {
    clear_rel_type();
    set_has_fetch();
    rel_type_.fetch_ = CreateMaybeMessage< ::substrait::proto::FetchRel >(GetArena());
  }
  return rel_type_.fetch_;
}
inline ::substrait::proto::FetchRel* Rel::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.fetch)
  return _internal_mutable_fetch();
}

// .substrait.proto.AggregateRel aggregate = 4;
inline bool Rel::_internal_has_aggregate() const {
  return rel_type_case() == kAggregate;
}
inline bool Rel::has_aggregate() const {
  return _internal_has_aggregate();
}
inline void Rel::set_has_aggregate() {
  _oneof_case_[0] = kAggregate;
}
inline void Rel::clear_aggregate() {
  if (_internal_has_aggregate()) {
    if (GetArena() == nullptr) {
      delete rel_type_.aggregate_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::AggregateRel* Rel::release_aggregate() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_rel_type();
      ::substrait::proto::AggregateRel* temp = rel_type_.aggregate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::AggregateRel& Rel::_internal_aggregate() const {
  return _internal_has_aggregate()
      ? *rel_type_.aggregate_
      : *reinterpret_cast< ::substrait::proto::AggregateRel*>(&::substrait::proto::_AggregateRel_default_instance_);
}
inline const ::substrait::proto::AggregateRel& Rel::aggregate() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.aggregate)
  return _internal_aggregate();
}
inline ::substrait::proto::AggregateRel* Rel::unsafe_arena_release_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_rel_type();
    ::substrait::proto::AggregateRel* temp = rel_type_.aggregate_;
    rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_aggregate(::substrait::proto::AggregateRel* aggregate) {
  clear_rel_type();
  if (aggregate) {
    set_has_aggregate();
    rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.aggregate)
}
inline ::substrait::proto::AggregateRel* Rel::_internal_mutable_aggregate() {
  if (!_internal_has_aggregate()) {
    clear_rel_type();
    set_has_aggregate();
    rel_type_.aggregate_ = CreateMaybeMessage< ::substrait::proto::AggregateRel >(GetArena());
  }
  return rel_type_.aggregate_;
}
inline ::substrait::proto::AggregateRel* Rel::mutable_aggregate() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.aggregate)
  return _internal_mutable_aggregate();
}

// .substrait.proto.SortRel sort = 5;
inline bool Rel::_internal_has_sort() const {
  return rel_type_case() == kSort;
}
inline bool Rel::has_sort() const {
  return _internal_has_sort();
}
inline void Rel::set_has_sort() {
  _oneof_case_[0] = kSort;
}
inline void Rel::clear_sort() {
  if (_internal_has_sort()) {
    if (GetArena() == nullptr) {
      delete rel_type_.sort_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::SortRel* Rel::release_sort() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_rel_type();
      ::substrait::proto::SortRel* temp = rel_type_.sort_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::SortRel& Rel::_internal_sort() const {
  return _internal_has_sort()
      ? *rel_type_.sort_
      : *reinterpret_cast< ::substrait::proto::SortRel*>(&::substrait::proto::_SortRel_default_instance_);
}
inline const ::substrait::proto::SortRel& Rel::sort() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.sort)
  return _internal_sort();
}
inline ::substrait::proto::SortRel* Rel::unsafe_arena_release_sort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_rel_type();
    ::substrait::proto::SortRel* temp = rel_type_.sort_;
    rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_sort(::substrait::proto::SortRel* sort) {
  clear_rel_type();
  if (sort) {
    set_has_sort();
    rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.sort)
}
inline ::substrait::proto::SortRel* Rel::_internal_mutable_sort() {
  if (!_internal_has_sort()) {
    clear_rel_type();
    set_has_sort();
    rel_type_.sort_ = CreateMaybeMessage< ::substrait::proto::SortRel >(GetArena());
  }
  return rel_type_.sort_;
}
inline ::substrait::proto::SortRel* Rel::mutable_sort() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.sort)
  return _internal_mutable_sort();
}

// .substrait.proto.JoinRel join = 6;
inline bool Rel::_internal_has_join() const {
  return rel_type_case() == kJoin;
}
inline bool Rel::has_join() const {
  return _internal_has_join();
}
inline void Rel::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void Rel::clear_join() {
  if (_internal_has_join()) {
    if (GetArena() == nullptr) {
      delete rel_type_.join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::JoinRel* Rel::release_join() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.join)
  if (_internal_has_join()) {
    clear_has_rel_type();
      ::substrait::proto::JoinRel* temp = rel_type_.join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::JoinRel& Rel::_internal_join() const {
  return _internal_has_join()
      ? *rel_type_.join_
      : *reinterpret_cast< ::substrait::proto::JoinRel*>(&::substrait::proto::_JoinRel_default_instance_);
}
inline const ::substrait::proto::JoinRel& Rel::join() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.join)
  return _internal_join();
}
inline ::substrait::proto::JoinRel* Rel::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.join)
  if (_internal_has_join()) {
    clear_has_rel_type();
    ::substrait::proto::JoinRel* temp = rel_type_.join_;
    rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_join(::substrait::proto::JoinRel* join) {
  clear_rel_type();
  if (join) {
    set_has_join();
    rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.join)
}
inline ::substrait::proto::JoinRel* Rel::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_rel_type();
    set_has_join();
    rel_type_.join_ = CreateMaybeMessage< ::substrait::proto::JoinRel >(GetArena());
  }
  return rel_type_.join_;
}
inline ::substrait::proto::JoinRel* Rel::mutable_join() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.join)
  return _internal_mutable_join();
}

// .substrait.proto.ProjectRel project = 7;
inline bool Rel::_internal_has_project() const {
  return rel_type_case() == kProject;
}
inline bool Rel::has_project() const {
  return _internal_has_project();
}
inline void Rel::set_has_project() {
  _oneof_case_[0] = kProject;
}
inline void Rel::clear_project() {
  if (_internal_has_project()) {
    if (GetArena() == nullptr) {
      delete rel_type_.project_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ProjectRel* Rel::release_project() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.project)
  if (_internal_has_project()) {
    clear_has_rel_type();
      ::substrait::proto::ProjectRel* temp = rel_type_.project_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ProjectRel& Rel::_internal_project() const {
  return _internal_has_project()
      ? *rel_type_.project_
      : *reinterpret_cast< ::substrait::proto::ProjectRel*>(&::substrait::proto::_ProjectRel_default_instance_);
}
inline const ::substrait::proto::ProjectRel& Rel::project() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.project)
  return _internal_project();
}
inline ::substrait::proto::ProjectRel* Rel::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.project)
  if (_internal_has_project()) {
    clear_has_rel_type();
    ::substrait::proto::ProjectRel* temp = rel_type_.project_;
    rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_project(::substrait::proto::ProjectRel* project) {
  clear_rel_type();
  if (project) {
    set_has_project();
    rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.project)
}
inline ::substrait::proto::ProjectRel* Rel::_internal_mutable_project() {
  if (!_internal_has_project()) {
    clear_rel_type();
    set_has_project();
    rel_type_.project_ = CreateMaybeMessage< ::substrait::proto::ProjectRel >(GetArena());
  }
  return rel_type_.project_;
}
inline ::substrait::proto::ProjectRel* Rel::mutable_project() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.project)
  return _internal_mutable_project();
}

// .substrait.proto.SetRel set = 8;
inline bool Rel::_internal_has_set() const {
  return rel_type_case() == kSet;
}
inline bool Rel::has_set() const {
  return _internal_has_set();
}
inline void Rel::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void Rel::clear_set() {
  if (_internal_has_set()) {
    if (GetArena() == nullptr) {
      delete rel_type_.set_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::SetRel* Rel::release_set() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.set)
  if (_internal_has_set()) {
    clear_has_rel_type();
      ::substrait::proto::SetRel* temp = rel_type_.set_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::SetRel& Rel::_internal_set() const {
  return _internal_has_set()
      ? *rel_type_.set_
      : *reinterpret_cast< ::substrait::proto::SetRel*>(&::substrait::proto::_SetRel_default_instance_);
}
inline const ::substrait::proto::SetRel& Rel::set() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.set)
  return _internal_set();
}
inline ::substrait::proto::SetRel* Rel::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.set)
  if (_internal_has_set()) {
    clear_has_rel_type();
    ::substrait::proto::SetRel* temp = rel_type_.set_;
    rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_set(::substrait::proto::SetRel* set) {
  clear_rel_type();
  if (set) {
    set_has_set();
    rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.set)
}
inline ::substrait::proto::SetRel* Rel::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_rel_type();
    set_has_set();
    rel_type_.set_ = CreateMaybeMessage< ::substrait::proto::SetRel >(GetArena());
  }
  return rel_type_.set_;
}
inline ::substrait::proto::SetRel* Rel::mutable_set() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.set)
  return _internal_mutable_set();
}

// .substrait.proto.ExtensionSingleRel extension_single = 9;
inline bool Rel::_internal_has_extension_single() const {
  return rel_type_case() == kExtensionSingle;
}
inline bool Rel::has_extension_single() const {
  return _internal_has_extension_single();
}
inline void Rel::set_has_extension_single() {
  _oneof_case_[0] = kExtensionSingle;
}
inline void Rel::clear_extension_single() {
  if (_internal_has_extension_single()) {
    if (GetArena() == nullptr) {
      delete rel_type_.extension_single_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ExtensionSingleRel* Rel::release_extension_single() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.extension_single)
  if (_internal_has_extension_single()) {
    clear_has_rel_type();
      ::substrait::proto::ExtensionSingleRel* temp = rel_type_.extension_single_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExtensionSingleRel& Rel::_internal_extension_single() const {
  return _internal_has_extension_single()
      ? *rel_type_.extension_single_
      : *reinterpret_cast< ::substrait::proto::ExtensionSingleRel*>(&::substrait::proto::_ExtensionSingleRel_default_instance_);
}
inline const ::substrait::proto::ExtensionSingleRel& Rel::extension_single() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.extension_single)
  return _internal_extension_single();
}
inline ::substrait::proto::ExtensionSingleRel* Rel::unsafe_arena_release_extension_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.extension_single)
  if (_internal_has_extension_single()) {
    clear_has_rel_type();
    ::substrait::proto::ExtensionSingleRel* temp = rel_type_.extension_single_;
    rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_single(::substrait::proto::ExtensionSingleRel* extension_single) {
  clear_rel_type();
  if (extension_single) {
    set_has_extension_single();
    rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.extension_single)
}
inline ::substrait::proto::ExtensionSingleRel* Rel::_internal_mutable_extension_single() {
  if (!_internal_has_extension_single()) {
    clear_rel_type();
    set_has_extension_single();
    rel_type_.extension_single_ = CreateMaybeMessage< ::substrait::proto::ExtensionSingleRel >(GetArena());
  }
  return rel_type_.extension_single_;
}
inline ::substrait::proto::ExtensionSingleRel* Rel::mutable_extension_single() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.extension_single)
  return _internal_mutable_extension_single();
}

// .substrait.proto.ExtensionMultiRel extension_multi = 10;
inline bool Rel::_internal_has_extension_multi() const {
  return rel_type_case() == kExtensionMulti;
}
inline bool Rel::has_extension_multi() const {
  return _internal_has_extension_multi();
}
inline void Rel::set_has_extension_multi() {
  _oneof_case_[0] = kExtensionMulti;
}
inline void Rel::clear_extension_multi() {
  if (_internal_has_extension_multi()) {
    if (GetArena() == nullptr) {
      delete rel_type_.extension_multi_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ExtensionMultiRel* Rel::release_extension_multi() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.extension_multi)
  if (_internal_has_extension_multi()) {
    clear_has_rel_type();
      ::substrait::proto::ExtensionMultiRel* temp = rel_type_.extension_multi_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExtensionMultiRel& Rel::_internal_extension_multi() const {
  return _internal_has_extension_multi()
      ? *rel_type_.extension_multi_
      : *reinterpret_cast< ::substrait::proto::ExtensionMultiRel*>(&::substrait::proto::_ExtensionMultiRel_default_instance_);
}
inline const ::substrait::proto::ExtensionMultiRel& Rel::extension_multi() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.extension_multi)
  return _internal_extension_multi();
}
inline ::substrait::proto::ExtensionMultiRel* Rel::unsafe_arena_release_extension_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.extension_multi)
  if (_internal_has_extension_multi()) {
    clear_has_rel_type();
    ::substrait::proto::ExtensionMultiRel* temp = rel_type_.extension_multi_;
    rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_multi(::substrait::proto::ExtensionMultiRel* extension_multi) {
  clear_rel_type();
  if (extension_multi) {
    set_has_extension_multi();
    rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.extension_multi)
}
inline ::substrait::proto::ExtensionMultiRel* Rel::_internal_mutable_extension_multi() {
  if (!_internal_has_extension_multi()) {
    clear_rel_type();
    set_has_extension_multi();
    rel_type_.extension_multi_ = CreateMaybeMessage< ::substrait::proto::ExtensionMultiRel >(GetArena());
  }
  return rel_type_.extension_multi_;
}
inline ::substrait::proto::ExtensionMultiRel* Rel::mutable_extension_multi() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.extension_multi)
  return _internal_mutable_extension_multi();
}

// .substrait.proto.ExtensionLeafRel extension_leaf = 11;
inline bool Rel::_internal_has_extension_leaf() const {
  return rel_type_case() == kExtensionLeaf;
}
inline bool Rel::has_extension_leaf() const {
  return _internal_has_extension_leaf();
}
inline void Rel::set_has_extension_leaf() {
  _oneof_case_[0] = kExtensionLeaf;
}
inline void Rel::clear_extension_leaf() {
  if (_internal_has_extension_leaf()) {
    if (GetArena() == nullptr) {
      delete rel_type_.extension_leaf_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ExtensionLeafRel* Rel::release_extension_leaf() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.extension_leaf)
  if (_internal_has_extension_leaf()) {
    clear_has_rel_type();
      ::substrait::proto::ExtensionLeafRel* temp = rel_type_.extension_leaf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExtensionLeafRel& Rel::_internal_extension_leaf() const {
  return _internal_has_extension_leaf()
      ? *rel_type_.extension_leaf_
      : *reinterpret_cast< ::substrait::proto::ExtensionLeafRel*>(&::substrait::proto::_ExtensionLeafRel_default_instance_);
}
inline const ::substrait::proto::ExtensionLeafRel& Rel::extension_leaf() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.extension_leaf)
  return _internal_extension_leaf();
}
inline ::substrait::proto::ExtensionLeafRel* Rel::unsafe_arena_release_extension_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.extension_leaf)
  if (_internal_has_extension_leaf()) {
    clear_has_rel_type();
    ::substrait::proto::ExtensionLeafRel* temp = rel_type_.extension_leaf_;
    rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_leaf(::substrait::proto::ExtensionLeafRel* extension_leaf) {
  clear_rel_type();
  if (extension_leaf) {
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.extension_leaf)
}
inline ::substrait::proto::ExtensionLeafRel* Rel::_internal_mutable_extension_leaf() {
  if (!_internal_has_extension_leaf()) {
    clear_rel_type();
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = CreateMaybeMessage< ::substrait::proto::ExtensionLeafRel >(GetArena());
  }
  return rel_type_.extension_leaf_;
}
inline ::substrait::proto::ExtensionLeafRel* Rel::mutable_extension_leaf() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.extension_leaf)
  return _internal_mutable_extension_leaf();
}

// .substrait.proto.CrossRel cross = 12;
inline bool Rel::_internal_has_cross() const {
  return rel_type_case() == kCross;
}
inline bool Rel::has_cross() const {
  return _internal_has_cross();
}
inline void Rel::set_has_cross() {
  _oneof_case_[0] = kCross;
}
inline void Rel::clear_cross() {
  if (_internal_has_cross()) {
    if (GetArena() == nullptr) {
      delete rel_type_.cross_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::CrossRel* Rel::release_cross() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.cross)
  if (_internal_has_cross()) {
    clear_has_rel_type();
      ::substrait::proto::CrossRel* temp = rel_type_.cross_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::CrossRel& Rel::_internal_cross() const {
  return _internal_has_cross()
      ? *rel_type_.cross_
      : *reinterpret_cast< ::substrait::proto::CrossRel*>(&::substrait::proto::_CrossRel_default_instance_);
}
inline const ::substrait::proto::CrossRel& Rel::cross() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.cross)
  return _internal_cross();
}
inline ::substrait::proto::CrossRel* Rel::unsafe_arena_release_cross() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.cross)
  if (_internal_has_cross()) {
    clear_has_rel_type();
    ::substrait::proto::CrossRel* temp = rel_type_.cross_;
    rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_cross(::substrait::proto::CrossRel* cross) {
  clear_rel_type();
  if (cross) {
    set_has_cross();
    rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.cross)
}
inline ::substrait::proto::CrossRel* Rel::_internal_mutable_cross() {
  if (!_internal_has_cross()) {
    clear_rel_type();
    set_has_cross();
    rel_type_.cross_ = CreateMaybeMessage< ::substrait::proto::CrossRel >(GetArena());
  }
  return rel_type_.cross_;
}
inline ::substrait::proto::CrossRel* Rel::mutable_cross() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.cross)
  return _internal_mutable_cross();
}

// .substrait.proto.ReferenceRel reference = 21;
inline bool Rel::_internal_has_reference() const {
  return rel_type_case() == kReference;
}
inline bool Rel::has_reference() const {
  return _internal_has_reference();
}
inline void Rel::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void Rel::clear_reference() {
  if (_internal_has_reference()) {
    if (GetArena() == nullptr) {
      delete rel_type_.reference_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ReferenceRel* Rel::release_reference() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.reference)
  if (_internal_has_reference()) {
    clear_has_rel_type();
      ::substrait::proto::ReferenceRel* temp = rel_type_.reference_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ReferenceRel& Rel::_internal_reference() const {
  return _internal_has_reference()
      ? *rel_type_.reference_
      : *reinterpret_cast< ::substrait::proto::ReferenceRel*>(&::substrait::proto::_ReferenceRel_default_instance_);
}
inline const ::substrait::proto::ReferenceRel& Rel::reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.reference)
  return _internal_reference();
}
inline ::substrait::proto::ReferenceRel* Rel::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.reference)
  if (_internal_has_reference()) {
    clear_has_rel_type();
    ::substrait::proto::ReferenceRel* temp = rel_type_.reference_;
    rel_type_.reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_reference(::substrait::proto::ReferenceRel* reference) {
  clear_rel_type();
  if (reference) {
    set_has_reference();
    rel_type_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.reference)
}
inline ::substrait::proto::ReferenceRel* Rel::_internal_mutable_reference() {
  if (!_internal_has_reference()) {
    clear_rel_type();
    set_has_reference();
    rel_type_.reference_ = CreateMaybeMessage< ::substrait::proto::ReferenceRel >(GetArena());
  }
  return rel_type_.reference_;
}
inline ::substrait::proto::ReferenceRel* Rel::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.reference)
  return _internal_mutable_reference();
}

// .substrait.proto.WriteRel write = 19;
inline bool Rel::_internal_has_write() const {
  return rel_type_case() == kWrite;
}
inline bool Rel::has_write() const {
  return _internal_has_write();
}
inline void Rel::set_has_write() {
  _oneof_case_[0] = kWrite;
}
inline void Rel::clear_write() {
  if (_internal_has_write()) {
    if (GetArena() == nullptr) {
      delete rel_type_.write_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::WriteRel* Rel::release_write() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.write)
  if (_internal_has_write()) {
    clear_has_rel_type();
      ::substrait::proto::WriteRel* temp = rel_type_.write_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::WriteRel& Rel::_internal_write() const {
  return _internal_has_write()
      ? *rel_type_.write_
      : *reinterpret_cast< ::substrait::proto::WriteRel*>(&::substrait::proto::_WriteRel_default_instance_);
}
inline const ::substrait::proto::WriteRel& Rel::write() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.write)
  return _internal_write();
}
inline ::substrait::proto::WriteRel* Rel::unsafe_arena_release_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.write)
  if (_internal_has_write()) {
    clear_has_rel_type();
    ::substrait::proto::WriteRel* temp = rel_type_.write_;
    rel_type_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_write(::substrait::proto::WriteRel* write) {
  clear_rel_type();
  if (write) {
    set_has_write();
    rel_type_.write_ = write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.write)
}
inline ::substrait::proto::WriteRel* Rel::_internal_mutable_write() {
  if (!_internal_has_write()) {
    clear_rel_type();
    set_has_write();
    rel_type_.write_ = CreateMaybeMessage< ::substrait::proto::WriteRel >(GetArena());
  }
  return rel_type_.write_;
}
inline ::substrait::proto::WriteRel* Rel::mutable_write() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.write)
  return _internal_mutable_write();
}

// .substrait.proto.DdlRel ddl = 20;
inline bool Rel::_internal_has_ddl() const {
  return rel_type_case() == kDdl;
}
inline bool Rel::has_ddl() const {
  return _internal_has_ddl();
}
inline void Rel::set_has_ddl() {
  _oneof_case_[0] = kDdl;
}
inline void Rel::clear_ddl() {
  if (_internal_has_ddl()) {
    if (GetArena() == nullptr) {
      delete rel_type_.ddl_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::DdlRel* Rel::release_ddl() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.ddl)
  if (_internal_has_ddl()) {
    clear_has_rel_type();
      ::substrait::proto::DdlRel* temp = rel_type_.ddl_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.ddl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::DdlRel& Rel::_internal_ddl() const {
  return _internal_has_ddl()
      ? *rel_type_.ddl_
      : *reinterpret_cast< ::substrait::proto::DdlRel*>(&::substrait::proto::_DdlRel_default_instance_);
}
inline const ::substrait::proto::DdlRel& Rel::ddl() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.ddl)
  return _internal_ddl();
}
inline ::substrait::proto::DdlRel* Rel::unsafe_arena_release_ddl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.ddl)
  if (_internal_has_ddl()) {
    clear_has_rel_type();
    ::substrait::proto::DdlRel* temp = rel_type_.ddl_;
    rel_type_.ddl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_ddl(::substrait::proto::DdlRel* ddl) {
  clear_rel_type();
  if (ddl) {
    set_has_ddl();
    rel_type_.ddl_ = ddl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.ddl)
}
inline ::substrait::proto::DdlRel* Rel::_internal_mutable_ddl() {
  if (!_internal_has_ddl()) {
    clear_rel_type();
    set_has_ddl();
    rel_type_.ddl_ = CreateMaybeMessage< ::substrait::proto::DdlRel >(GetArena());
  }
  return rel_type_.ddl_;
}
inline ::substrait::proto::DdlRel* Rel::mutable_ddl() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.ddl)
  return _internal_mutable_ddl();
}

// .substrait.proto.HashJoinRel hash_join = 13;
inline bool Rel::_internal_has_hash_join() const {
  return rel_type_case() == kHashJoin;
}
inline bool Rel::has_hash_join() const {
  return _internal_has_hash_join();
}
inline void Rel::set_has_hash_join() {
  _oneof_case_[0] = kHashJoin;
}
inline void Rel::clear_hash_join() {
  if (_internal_has_hash_join()) {
    if (GetArena() == nullptr) {
      delete rel_type_.hash_join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::HashJoinRel* Rel::release_hash_join() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.hash_join)
  if (_internal_has_hash_join()) {
    clear_has_rel_type();
      ::substrait::proto::HashJoinRel* temp = rel_type_.hash_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.hash_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::HashJoinRel& Rel::_internal_hash_join() const {
  return _internal_has_hash_join()
      ? *rel_type_.hash_join_
      : *reinterpret_cast< ::substrait::proto::HashJoinRel*>(&::substrait::proto::_HashJoinRel_default_instance_);
}
inline const ::substrait::proto::HashJoinRel& Rel::hash_join() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.hash_join)
  return _internal_hash_join();
}
inline ::substrait::proto::HashJoinRel* Rel::unsafe_arena_release_hash_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.hash_join)
  if (_internal_has_hash_join()) {
    clear_has_rel_type();
    ::substrait::proto::HashJoinRel* temp = rel_type_.hash_join_;
    rel_type_.hash_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_hash_join(::substrait::proto::HashJoinRel* hash_join) {
  clear_rel_type();
  if (hash_join) {
    set_has_hash_join();
    rel_type_.hash_join_ = hash_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.hash_join)
}
inline ::substrait::proto::HashJoinRel* Rel::_internal_mutable_hash_join() {
  if (!_internal_has_hash_join()) {
    clear_rel_type();
    set_has_hash_join();
    rel_type_.hash_join_ = CreateMaybeMessage< ::substrait::proto::HashJoinRel >(GetArena());
  }
  return rel_type_.hash_join_;
}
inline ::substrait::proto::HashJoinRel* Rel::mutable_hash_join() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.hash_join)
  return _internal_mutable_hash_join();
}

// .substrait.proto.MergeJoinRel merge_join = 14;
inline bool Rel::_internal_has_merge_join() const {
  return rel_type_case() == kMergeJoin;
}
inline bool Rel::has_merge_join() const {
  return _internal_has_merge_join();
}
inline void Rel::set_has_merge_join() {
  _oneof_case_[0] = kMergeJoin;
}
inline void Rel::clear_merge_join() {
  if (_internal_has_merge_join()) {
    if (GetArena() == nullptr) {
      delete rel_type_.merge_join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::MergeJoinRel* Rel::release_merge_join() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.merge_join)
  if (_internal_has_merge_join()) {
    clear_has_rel_type();
      ::substrait::proto::MergeJoinRel* temp = rel_type_.merge_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.merge_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::MergeJoinRel& Rel::_internal_merge_join() const {
  return _internal_has_merge_join()
      ? *rel_type_.merge_join_
      : *reinterpret_cast< ::substrait::proto::MergeJoinRel*>(&::substrait::proto::_MergeJoinRel_default_instance_);
}
inline const ::substrait::proto::MergeJoinRel& Rel::merge_join() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.merge_join)
  return _internal_merge_join();
}
inline ::substrait::proto::MergeJoinRel* Rel::unsafe_arena_release_merge_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.merge_join)
  if (_internal_has_merge_join()) {
    clear_has_rel_type();
    ::substrait::proto::MergeJoinRel* temp = rel_type_.merge_join_;
    rel_type_.merge_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_merge_join(::substrait::proto::MergeJoinRel* merge_join) {
  clear_rel_type();
  if (merge_join) {
    set_has_merge_join();
    rel_type_.merge_join_ = merge_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.merge_join)
}
inline ::substrait::proto::MergeJoinRel* Rel::_internal_mutable_merge_join() {
  if (!_internal_has_merge_join()) {
    clear_rel_type();
    set_has_merge_join();
    rel_type_.merge_join_ = CreateMaybeMessage< ::substrait::proto::MergeJoinRel >(GetArena());
  }
  return rel_type_.merge_join_;
}
inline ::substrait::proto::MergeJoinRel* Rel::mutable_merge_join() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.merge_join)
  return _internal_mutable_merge_join();
}

// .substrait.proto.NestedLoopJoinRel nested_loop_join = 18;
inline bool Rel::_internal_has_nested_loop_join() const {
  return rel_type_case() == kNestedLoopJoin;
}
inline bool Rel::has_nested_loop_join() const {
  return _internal_has_nested_loop_join();
}
inline void Rel::set_has_nested_loop_join() {
  _oneof_case_[0] = kNestedLoopJoin;
}
inline void Rel::clear_nested_loop_join() {
  if (_internal_has_nested_loop_join()) {
    if (GetArena() == nullptr) {
      delete rel_type_.nested_loop_join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::NestedLoopJoinRel* Rel::release_nested_loop_join() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.nested_loop_join)
  if (_internal_has_nested_loop_join()) {
    clear_has_rel_type();
      ::substrait::proto::NestedLoopJoinRel* temp = rel_type_.nested_loop_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.nested_loop_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::NestedLoopJoinRel& Rel::_internal_nested_loop_join() const {
  return _internal_has_nested_loop_join()
      ? *rel_type_.nested_loop_join_
      : *reinterpret_cast< ::substrait::proto::NestedLoopJoinRel*>(&::substrait::proto::_NestedLoopJoinRel_default_instance_);
}
inline const ::substrait::proto::NestedLoopJoinRel& Rel::nested_loop_join() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.nested_loop_join)
  return _internal_nested_loop_join();
}
inline ::substrait::proto::NestedLoopJoinRel* Rel::unsafe_arena_release_nested_loop_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.nested_loop_join)
  if (_internal_has_nested_loop_join()) {
    clear_has_rel_type();
    ::substrait::proto::NestedLoopJoinRel* temp = rel_type_.nested_loop_join_;
    rel_type_.nested_loop_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_nested_loop_join(::substrait::proto::NestedLoopJoinRel* nested_loop_join) {
  clear_rel_type();
  if (nested_loop_join) {
    set_has_nested_loop_join();
    rel_type_.nested_loop_join_ = nested_loop_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.nested_loop_join)
}
inline ::substrait::proto::NestedLoopJoinRel* Rel::_internal_mutable_nested_loop_join() {
  if (!_internal_has_nested_loop_join()) {
    clear_rel_type();
    set_has_nested_loop_join();
    rel_type_.nested_loop_join_ = CreateMaybeMessage< ::substrait::proto::NestedLoopJoinRel >(GetArena());
  }
  return rel_type_.nested_loop_join_;
}
inline ::substrait::proto::NestedLoopJoinRel* Rel::mutable_nested_loop_join() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.nested_loop_join)
  return _internal_mutable_nested_loop_join();
}

// .substrait.proto.ConsistentPartitionWindowRel window = 17;
inline bool Rel::_internal_has_window() const {
  return rel_type_case() == kWindow;
}
inline bool Rel::has_window() const {
  return _internal_has_window();
}
inline void Rel::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline void Rel::clear_window() {
  if (_internal_has_window()) {
    if (GetArena() == nullptr) {
      delete rel_type_.window_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ConsistentPartitionWindowRel* Rel::release_window() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.window)
  if (_internal_has_window()) {
    clear_has_rel_type();
      ::substrait::proto::ConsistentPartitionWindowRel* temp = rel_type_.window_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ConsistentPartitionWindowRel& Rel::_internal_window() const {
  return _internal_has_window()
      ? *rel_type_.window_
      : *reinterpret_cast< ::substrait::proto::ConsistentPartitionWindowRel*>(&::substrait::proto::_ConsistentPartitionWindowRel_default_instance_);
}
inline const ::substrait::proto::ConsistentPartitionWindowRel& Rel::window() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.window)
  return _internal_window();
}
inline ::substrait::proto::ConsistentPartitionWindowRel* Rel::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.window)
  if (_internal_has_window()) {
    clear_has_rel_type();
    ::substrait::proto::ConsistentPartitionWindowRel* temp = rel_type_.window_;
    rel_type_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_window(::substrait::proto::ConsistentPartitionWindowRel* window) {
  clear_rel_type();
  if (window) {
    set_has_window();
    rel_type_.window_ = window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.window)
}
inline ::substrait::proto::ConsistentPartitionWindowRel* Rel::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_rel_type();
    set_has_window();
    rel_type_.window_ = CreateMaybeMessage< ::substrait::proto::ConsistentPartitionWindowRel >(GetArena());
  }
  return rel_type_.window_;
}
inline ::substrait::proto::ConsistentPartitionWindowRel* Rel::mutable_window() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.window)
  return _internal_mutable_window();
}

// .substrait.proto.ExchangeRel exchange = 15;
inline bool Rel::_internal_has_exchange() const {
  return rel_type_case() == kExchange;
}
inline bool Rel::has_exchange() const {
  return _internal_has_exchange();
}
inline void Rel::set_has_exchange() {
  _oneof_case_[0] = kExchange;
}
inline void Rel::clear_exchange() {
  if (_internal_has_exchange()) {
    if (GetArena() == nullptr) {
      delete rel_type_.exchange_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ExchangeRel* Rel::release_exchange() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.exchange)
  if (_internal_has_exchange()) {
    clear_has_rel_type();
      ::substrait::proto::ExchangeRel* temp = rel_type_.exchange_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExchangeRel& Rel::_internal_exchange() const {
  return _internal_has_exchange()
      ? *rel_type_.exchange_
      : *reinterpret_cast< ::substrait::proto::ExchangeRel*>(&::substrait::proto::_ExchangeRel_default_instance_);
}
inline const ::substrait::proto::ExchangeRel& Rel::exchange() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.exchange)
  return _internal_exchange();
}
inline ::substrait::proto::ExchangeRel* Rel::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.exchange)
  if (_internal_has_exchange()) {
    clear_has_rel_type();
    ::substrait::proto::ExchangeRel* temp = rel_type_.exchange_;
    rel_type_.exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_exchange(::substrait::proto::ExchangeRel* exchange) {
  clear_rel_type();
  if (exchange) {
    set_has_exchange();
    rel_type_.exchange_ = exchange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.exchange)
}
inline ::substrait::proto::ExchangeRel* Rel::_internal_mutable_exchange() {
  if (!_internal_has_exchange()) {
    clear_rel_type();
    set_has_exchange();
    rel_type_.exchange_ = CreateMaybeMessage< ::substrait::proto::ExchangeRel >(GetArena());
  }
  return rel_type_.exchange_;
}
inline ::substrait::proto::ExchangeRel* Rel::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.exchange)
  return _internal_mutable_exchange();
}

// .substrait.proto.ExpandRel expand = 16;
inline bool Rel::_internal_has_expand() const {
  return rel_type_case() == kExpand;
}
inline bool Rel::has_expand() const {
  return _internal_has_expand();
}
inline void Rel::set_has_expand() {
  _oneof_case_[0] = kExpand;
}
inline void Rel::clear_expand() {
  if (_internal_has_expand()) {
    if (GetArena() == nullptr) {
      delete rel_type_.expand_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::proto::ExpandRel* Rel::release_expand() {
  // @@protoc_insertion_point(field_release:substrait.proto.Rel.expand)
  if (_internal_has_expand()) {
    clear_has_rel_type();
      ::substrait::proto::ExpandRel* temp = rel_type_.expand_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.expand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExpandRel& Rel::_internal_expand() const {
  return _internal_has_expand()
      ? *rel_type_.expand_
      : *reinterpret_cast< ::substrait::proto::ExpandRel*>(&::substrait::proto::_ExpandRel_default_instance_);
}
inline const ::substrait::proto::ExpandRel& Rel::expand() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Rel.expand)
  return _internal_expand();
}
inline ::substrait::proto::ExpandRel* Rel::unsafe_arena_release_expand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Rel.expand)
  if (_internal_has_expand()) {
    clear_has_rel_type();
    ::substrait::proto::ExpandRel* temp = rel_type_.expand_;
    rel_type_.expand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_expand(::substrait::proto::ExpandRel* expand) {
  clear_rel_type();
  if (expand) {
    set_has_expand();
    rel_type_.expand_ = expand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Rel.expand)
}
inline ::substrait::proto::ExpandRel* Rel::_internal_mutable_expand() {
  if (!_internal_has_expand()) {
    clear_rel_type();
    set_has_expand();
    rel_type_.expand_ = CreateMaybeMessage< ::substrait::proto::ExpandRel >(GetArena());
  }
  return rel_type_.expand_;
}
inline ::substrait::proto::ExpandRel* Rel::mutable_expand() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Rel.expand)
  return _internal_mutable_expand();
}

inline bool Rel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void Rel::clear_has_rel_type() {
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline Rel::RelTypeCase Rel::rel_type_case() const {
  return Rel::RelTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamedObjectWrite

// repeated string names = 1;
inline int NamedObjectWrite::_internal_names_size() const {
  return names_.size();
}
inline int NamedObjectWrite::names_size() const {
  return _internal_names_size();
}
inline void NamedObjectWrite::clear_names() {
  names_.Clear();
}
inline std::string* NamedObjectWrite::add_names() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.NamedObjectWrite.names)
  return _internal_add_names();
}
inline const std::string& NamedObjectWrite::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& NamedObjectWrite::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.NamedObjectWrite.names)
  return _internal_names(index);
}
inline std::string* NamedObjectWrite::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NamedObjectWrite.names)
  return names_.Mutable(index);
}
inline void NamedObjectWrite::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.NamedObjectWrite.names)
  names_.Mutable(index)->assign(value);
}
inline void NamedObjectWrite::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.NamedObjectWrite.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void NamedObjectWrite::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.NamedObjectWrite.names)
}
inline void NamedObjectWrite::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.NamedObjectWrite.names)
}
inline std::string* NamedObjectWrite::_internal_add_names() {
  return names_.Add();
}
inline void NamedObjectWrite::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.NamedObjectWrite.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NamedObjectWrite::names() const {
  // @@protoc_insertion_point(field_list:substrait.proto.NamedObjectWrite.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NamedObjectWrite::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.NamedObjectWrite.names)
  return &names_;
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool NamedObjectWrite::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool NamedObjectWrite::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& NamedObjectWrite::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& NamedObjectWrite::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NamedObjectWrite.advanced_extension)
  return _internal_advanced_extension();
}
inline void NamedObjectWrite::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NamedObjectWrite.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* NamedObjectWrite::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* NamedObjectWrite::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.NamedObjectWrite.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* NamedObjectWrite::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* NamedObjectWrite::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NamedObjectWrite.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void NamedObjectWrite::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NamedObjectWrite.advanced_extension)
}

// -------------------------------------------------------------------

// ExtensionObject

// .google.protobuf.Any detail = 1;
inline bool ExtensionObject::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionObject::has_detail() const {
  return _internal_has_detail();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionObject::_internal_detail() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtensionObject::detail() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ExtensionObject.detail)
  return _internal_detail();
}
inline void ExtensionObject::unsafe_arena_set_allocated_detail(
    PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ExtensionObject.detail)
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::release_detail() {
  auto temp = unsafe_arena_release_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.proto.ExtensionObject.detail)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    detail_ = p;
  }
  return detail_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ExtensionObject.detail)
  return _internal_mutable_detail();
}
inline void ExtensionObject::set_allocated_detail(PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail)->GetArena();
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ExtensionObject.detail)
}

// -------------------------------------------------------------------

// DdlRel

// .substrait.proto.NamedObjectWrite named_object = 1;
inline bool DdlRel::_internal_has_named_object() const {
  return write_type_case() == kNamedObject;
}
inline bool DdlRel::has_named_object() const {
  return _internal_has_named_object();
}
inline void DdlRel::set_has_named_object() {
  _oneof_case_[0] = kNamedObject;
}
inline void DdlRel::clear_named_object() {
  if (_internal_has_named_object()) {
    if (GetArena() == nullptr) {
      delete write_type_.named_object_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::proto::NamedObjectWrite* DdlRel::release_named_object() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.named_object)
  if (_internal_has_named_object()) {
    clear_has_write_type();
      ::substrait::proto::NamedObjectWrite* temp = write_type_.named_object_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_type_.named_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::NamedObjectWrite& DdlRel::_internal_named_object() const {
  return _internal_has_named_object()
      ? *write_type_.named_object_
      : *reinterpret_cast< ::substrait::proto::NamedObjectWrite*>(&::substrait::proto::_NamedObjectWrite_default_instance_);
}
inline const ::substrait::proto::NamedObjectWrite& DdlRel::named_object() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.named_object)
  return _internal_named_object();
}
inline ::substrait::proto::NamedObjectWrite* DdlRel::unsafe_arena_release_named_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.DdlRel.named_object)
  if (_internal_has_named_object()) {
    clear_has_write_type();
    ::substrait::proto::NamedObjectWrite* temp = write_type_.named_object_;
    write_type_.named_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DdlRel::unsafe_arena_set_allocated_named_object(::substrait::proto::NamedObjectWrite* named_object) {
  clear_write_type();
  if (named_object) {
    set_has_named_object();
    write_type_.named_object_ = named_object;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.named_object)
}
inline ::substrait::proto::NamedObjectWrite* DdlRel::_internal_mutable_named_object() {
  if (!_internal_has_named_object()) {
    clear_write_type();
    set_has_named_object();
    write_type_.named_object_ = CreateMaybeMessage< ::substrait::proto::NamedObjectWrite >(GetArena());
  }
  return write_type_.named_object_;
}
inline ::substrait::proto::NamedObjectWrite* DdlRel::mutable_named_object() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.named_object)
  return _internal_mutable_named_object();
}

// .substrait.proto.ExtensionObject extension_object = 2;
inline bool DdlRel::_internal_has_extension_object() const {
  return write_type_case() == kExtensionObject;
}
inline bool DdlRel::has_extension_object() const {
  return _internal_has_extension_object();
}
inline void DdlRel::set_has_extension_object() {
  _oneof_case_[0] = kExtensionObject;
}
inline void DdlRel::clear_extension_object() {
  if (_internal_has_extension_object()) {
    if (GetArena() == nullptr) {
      delete write_type_.extension_object_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::proto::ExtensionObject* DdlRel::release_extension_object() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.extension_object)
  if (_internal_has_extension_object()) {
    clear_has_write_type();
      ::substrait::proto::ExtensionObject* temp = write_type_.extension_object_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_type_.extension_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExtensionObject& DdlRel::_internal_extension_object() const {
  return _internal_has_extension_object()
      ? *write_type_.extension_object_
      : *reinterpret_cast< ::substrait::proto::ExtensionObject*>(&::substrait::proto::_ExtensionObject_default_instance_);
}
inline const ::substrait::proto::ExtensionObject& DdlRel::extension_object() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.extension_object)
  return _internal_extension_object();
}
inline ::substrait::proto::ExtensionObject* DdlRel::unsafe_arena_release_extension_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.DdlRel.extension_object)
  if (_internal_has_extension_object()) {
    clear_has_write_type();
    ::substrait::proto::ExtensionObject* temp = write_type_.extension_object_;
    write_type_.extension_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DdlRel::unsafe_arena_set_allocated_extension_object(::substrait::proto::ExtensionObject* extension_object) {
  clear_write_type();
  if (extension_object) {
    set_has_extension_object();
    write_type_.extension_object_ = extension_object;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.extension_object)
}
inline ::substrait::proto::ExtensionObject* DdlRel::_internal_mutable_extension_object() {
  if (!_internal_has_extension_object()) {
    clear_write_type();
    set_has_extension_object();
    write_type_.extension_object_ = CreateMaybeMessage< ::substrait::proto::ExtensionObject >(GetArena());
  }
  return write_type_.extension_object_;
}
inline ::substrait::proto::ExtensionObject* DdlRel::mutable_extension_object() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.extension_object)
  return _internal_mutable_extension_object();
}

// .substrait.proto.NamedStruct table_schema = 3;
inline bool DdlRel::_internal_has_table_schema() const {
  return this != internal_default_instance() && table_schema_ != nullptr;
}
inline bool DdlRel::has_table_schema() const {
  return _internal_has_table_schema();
}
inline const ::substrait::proto::NamedStruct& DdlRel::_internal_table_schema() const {
  const ::substrait::proto::NamedStruct* p = table_schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::NamedStruct*>(
      &::substrait::proto::_NamedStruct_default_instance_);
}
inline const ::substrait::proto::NamedStruct& DdlRel::table_schema() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.table_schema)
  return _internal_table_schema();
}
inline void DdlRel::unsafe_arena_set_allocated_table_schema(
    ::substrait::proto::NamedStruct* table_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema_);
  }
  table_schema_ = table_schema;
  if (table_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.table_schema)
}
inline ::substrait::proto::NamedStruct* DdlRel::release_table_schema() {
  auto temp = unsafe_arena_release_table_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::NamedStruct* DdlRel::unsafe_arena_release_table_schema() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.table_schema)
  
  ::substrait::proto::NamedStruct* temp = table_schema_;
  table_schema_ = nullptr;
  return temp;
}
inline ::substrait::proto::NamedStruct* DdlRel::_internal_mutable_table_schema() {
  
  if (table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::NamedStruct>(GetArena());
    table_schema_ = p;
  }
  return table_schema_;
}
inline ::substrait::proto::NamedStruct* DdlRel::mutable_table_schema() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.table_schema)
  return _internal_mutable_table_schema();
}
inline void DdlRel::set_allocated_table_schema(::substrait::proto::NamedStruct* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema)->GetArena();
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    
  } else {
    
  }
  table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.table_schema)
}

// .substrait.proto.Expression.Literal.Struct table_defaults = 4;
inline bool DdlRel::_internal_has_table_defaults() const {
  return this != internal_default_instance() && table_defaults_ != nullptr;
}
inline bool DdlRel::has_table_defaults() const {
  return _internal_has_table_defaults();
}
inline void DdlRel::clear_table_defaults() {
  if (GetArena() == nullptr && table_defaults_ != nullptr) {
    delete table_defaults_;
  }
  table_defaults_ = nullptr;
}
inline const ::substrait::proto::Expression_Literal_Struct& DdlRel::_internal_table_defaults() const {
  const ::substrait::proto::Expression_Literal_Struct* p = table_defaults_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_Literal_Struct*>(
      &::substrait::proto::_Expression_Literal_Struct_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_Struct& DdlRel::table_defaults() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.table_defaults)
  return _internal_table_defaults();
}
inline void DdlRel::unsafe_arena_set_allocated_table_defaults(
    ::substrait::proto::Expression_Literal_Struct* table_defaults) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_defaults_);
  }
  table_defaults_ = table_defaults;
  if (table_defaults) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.table_defaults)
}
inline ::substrait::proto::Expression_Literal_Struct* DdlRel::release_table_defaults() {
  auto temp = unsafe_arena_release_table_defaults();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_Literal_Struct* DdlRel::unsafe_arena_release_table_defaults() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.table_defaults)
  
  ::substrait::proto::Expression_Literal_Struct* temp = table_defaults_;
  table_defaults_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_Literal_Struct* DdlRel::_internal_mutable_table_defaults() {
  
  if (table_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_Literal_Struct>(GetArena());
    table_defaults_ = p;
  }
  return table_defaults_;
}
inline ::substrait::proto::Expression_Literal_Struct* DdlRel::mutable_table_defaults() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.table_defaults)
  return _internal_mutable_table_defaults();
}
inline void DdlRel::set_allocated_table_defaults(::substrait::proto::Expression_Literal_Struct* table_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_defaults_;
  }
  if (table_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_defaults);
    if (message_arena != submessage_arena) {
      table_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_defaults, submessage_arena);
    }
    
  } else {
    
  }
  table_defaults_ = table_defaults;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.table_defaults)
}

// .substrait.proto.DdlRel.DdlObject object = 5;
inline void DdlRel::clear_object() {
  object_ = 0;
}
inline ::substrait::proto::DdlRel_DdlObject DdlRel::_internal_object() const {
  return static_cast< ::substrait::proto::DdlRel_DdlObject >(object_);
}
inline ::substrait::proto::DdlRel_DdlObject DdlRel::object() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.object)
  return _internal_object();
}
inline void DdlRel::_internal_set_object(::substrait::proto::DdlRel_DdlObject value) {
  
  object_ = value;
}
inline void DdlRel::set_object(::substrait::proto::DdlRel_DdlObject value) {
  _internal_set_object(value);
  // @@protoc_insertion_point(field_set:substrait.proto.DdlRel.object)
}

// .substrait.proto.DdlRel.DdlOp op = 6;
inline void DdlRel::clear_op() {
  op_ = 0;
}
inline ::substrait::proto::DdlRel_DdlOp DdlRel::_internal_op() const {
  return static_cast< ::substrait::proto::DdlRel_DdlOp >(op_);
}
inline ::substrait::proto::DdlRel_DdlOp DdlRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.op)
  return _internal_op();
}
inline void DdlRel::_internal_set_op(::substrait::proto::DdlRel_DdlOp value) {
  
  op_ = value;
}
inline void DdlRel::set_op(::substrait::proto::DdlRel_DdlOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.DdlRel.op)
}

// .substrait.proto.Rel view_definition = 7;
inline bool DdlRel::_internal_has_view_definition() const {
  return this != internal_default_instance() && view_definition_ != nullptr;
}
inline bool DdlRel::has_view_definition() const {
  return _internal_has_view_definition();
}
inline void DdlRel::clear_view_definition() {
  if (GetArena() == nullptr && view_definition_ != nullptr) {
    delete view_definition_;
  }
  view_definition_ = nullptr;
}
inline const ::substrait::proto::Rel& DdlRel::_internal_view_definition() const {
  const ::substrait::proto::Rel* p = view_definition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& DdlRel::view_definition() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.view_definition)
  return _internal_view_definition();
}
inline void DdlRel::unsafe_arena_set_allocated_view_definition(
    ::substrait::proto::Rel* view_definition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_definition_);
  }
  view_definition_ = view_definition;
  if (view_definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.view_definition)
}
inline ::substrait::proto::Rel* DdlRel::release_view_definition() {
  auto temp = unsafe_arena_release_view_definition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* DdlRel::unsafe_arena_release_view_definition() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.view_definition)
  
  ::substrait::proto::Rel* temp = view_definition_;
  view_definition_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* DdlRel::_internal_mutable_view_definition() {
  
  if (view_definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    view_definition_ = p;
  }
  return view_definition_;
}
inline ::substrait::proto::Rel* DdlRel::mutable_view_definition() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.view_definition)
  return _internal_mutable_view_definition();
}
inline void DdlRel::set_allocated_view_definition(::substrait::proto::Rel* view_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete view_definition_;
  }
  if (view_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view_definition);
    if (message_arena != submessage_arena) {
      view_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_definition, submessage_arena);
    }
    
  } else {
    
  }
  view_definition_ = view_definition;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.view_definition)
}

// .substrait.proto.RelCommon common = 8;
inline bool DdlRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool DdlRel::has_common() const {
  return _internal_has_common();
}
inline void DdlRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& DdlRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& DdlRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.DdlRel.common)
  return _internal_common();
}
inline void DdlRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.DdlRel.common)
}
inline ::substrait::proto::RelCommon* DdlRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* DdlRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.DdlRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* DdlRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* DdlRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.DdlRel.common)
  return _internal_mutable_common();
}
inline void DdlRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.DdlRel.common)
}

inline bool DdlRel::has_write_type() const {
  return write_type_case() != WRITE_TYPE_NOT_SET;
}
inline void DdlRel::clear_has_write_type() {
  _oneof_case_[0] = WRITE_TYPE_NOT_SET;
}
inline DdlRel::WriteTypeCase DdlRel::write_type_case() const {
  return DdlRel::WriteTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WriteRel

// .substrait.proto.NamedObjectWrite named_table = 1;
inline bool WriteRel::_internal_has_named_table() const {
  return write_type_case() == kNamedTable;
}
inline bool WriteRel::has_named_table() const {
  return _internal_has_named_table();
}
inline void WriteRel::set_has_named_table() {
  _oneof_case_[0] = kNamedTable;
}
inline void WriteRel::clear_named_table() {
  if (_internal_has_named_table()) {
    if (GetArena() == nullptr) {
      delete write_type_.named_table_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::proto::NamedObjectWrite* WriteRel::release_named_table() {
  // @@protoc_insertion_point(field_release:substrait.proto.WriteRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_write_type();
      ::substrait::proto::NamedObjectWrite* temp = write_type_.named_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::NamedObjectWrite& WriteRel::_internal_named_table() const {
  return _internal_has_named_table()
      ? *write_type_.named_table_
      : *reinterpret_cast< ::substrait::proto::NamedObjectWrite*>(&::substrait::proto::_NamedObjectWrite_default_instance_);
}
inline const ::substrait::proto::NamedObjectWrite& WriteRel::named_table() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.named_table)
  return _internal_named_table();
}
inline ::substrait::proto::NamedObjectWrite* WriteRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.WriteRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_write_type();
    ::substrait::proto::NamedObjectWrite* temp = write_type_.named_table_;
    write_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteRel::unsafe_arena_set_allocated_named_table(::substrait::proto::NamedObjectWrite* named_table) {
  clear_write_type();
  if (named_table) {
    set_has_named_table();
    write_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.WriteRel.named_table)
}
inline ::substrait::proto::NamedObjectWrite* WriteRel::_internal_mutable_named_table() {
  if (!_internal_has_named_table()) {
    clear_write_type();
    set_has_named_table();
    write_type_.named_table_ = CreateMaybeMessage< ::substrait::proto::NamedObjectWrite >(GetArena());
  }
  return write_type_.named_table_;
}
inline ::substrait::proto::NamedObjectWrite* WriteRel::mutable_named_table() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.WriteRel.named_table)
  return _internal_mutable_named_table();
}

// .substrait.proto.ExtensionObject extension_table = 2;
inline bool WriteRel::_internal_has_extension_table() const {
  return write_type_case() == kExtensionTable;
}
inline bool WriteRel::has_extension_table() const {
  return _internal_has_extension_table();
}
inline void WriteRel::set_has_extension_table() {
  _oneof_case_[0] = kExtensionTable;
}
inline void WriteRel::clear_extension_table() {
  if (_internal_has_extension_table()) {
    if (GetArena() == nullptr) {
      delete write_type_.extension_table_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::proto::ExtensionObject* WriteRel::release_extension_table() {
  // @@protoc_insertion_point(field_release:substrait.proto.WriteRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_write_type();
      ::substrait::proto::ExtensionObject* temp = write_type_.extension_table_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    write_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::ExtensionObject& WriteRel::_internal_extension_table() const {
  return _internal_has_extension_table()
      ? *write_type_.extension_table_
      : *reinterpret_cast< ::substrait::proto::ExtensionObject*>(&::substrait::proto::_ExtensionObject_default_instance_);
}
inline const ::substrait::proto::ExtensionObject& WriteRel::extension_table() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.extension_table)
  return _internal_extension_table();
}
inline ::substrait::proto::ExtensionObject* WriteRel::unsafe_arena_release_extension_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.WriteRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_write_type();
    ::substrait::proto::ExtensionObject* temp = write_type_.extension_table_;
    write_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteRel::unsafe_arena_set_allocated_extension_table(::substrait::proto::ExtensionObject* extension_table) {
  clear_write_type();
  if (extension_table) {
    set_has_extension_table();
    write_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.WriteRel.extension_table)
}
inline ::substrait::proto::ExtensionObject* WriteRel::_internal_mutable_extension_table() {
  if (!_internal_has_extension_table()) {
    clear_write_type();
    set_has_extension_table();
    write_type_.extension_table_ = CreateMaybeMessage< ::substrait::proto::ExtensionObject >(GetArena());
  }
  return write_type_.extension_table_;
}
inline ::substrait::proto::ExtensionObject* WriteRel::mutable_extension_table() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.WriteRel.extension_table)
  return _internal_mutable_extension_table();
}

// .substrait.proto.NamedStruct table_schema = 3;
inline bool WriteRel::_internal_has_table_schema() const {
  return this != internal_default_instance() && table_schema_ != nullptr;
}
inline bool WriteRel::has_table_schema() const {
  return _internal_has_table_schema();
}
inline const ::substrait::proto::NamedStruct& WriteRel::_internal_table_schema() const {
  const ::substrait::proto::NamedStruct* p = table_schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::NamedStruct*>(
      &::substrait::proto::_NamedStruct_default_instance_);
}
inline const ::substrait::proto::NamedStruct& WriteRel::table_schema() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.table_schema)
  return _internal_table_schema();
}
inline void WriteRel::unsafe_arena_set_allocated_table_schema(
    ::substrait::proto::NamedStruct* table_schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema_);
  }
  table_schema_ = table_schema;
  if (table_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.WriteRel.table_schema)
}
inline ::substrait::proto::NamedStruct* WriteRel::release_table_schema() {
  auto temp = unsafe_arena_release_table_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::NamedStruct* WriteRel::unsafe_arena_release_table_schema() {
  // @@protoc_insertion_point(field_release:substrait.proto.WriteRel.table_schema)
  
  ::substrait::proto::NamedStruct* temp = table_schema_;
  table_schema_ = nullptr;
  return temp;
}
inline ::substrait::proto::NamedStruct* WriteRel::_internal_mutable_table_schema() {
  
  if (table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::NamedStruct>(GetArena());
    table_schema_ = p;
  }
  return table_schema_;
}
inline ::substrait::proto::NamedStruct* WriteRel::mutable_table_schema() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.WriteRel.table_schema)
  return _internal_mutable_table_schema();
}
inline void WriteRel::set_allocated_table_schema(::substrait::proto::NamedStruct* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema)->GetArena();
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    
  } else {
    
  }
  table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.WriteRel.table_schema)
}

// .substrait.proto.WriteRel.WriteOp op = 4;
inline void WriteRel::clear_op() {
  op_ = 0;
}
inline ::substrait::proto::WriteRel_WriteOp WriteRel::_internal_op() const {
  return static_cast< ::substrait::proto::WriteRel_WriteOp >(op_);
}
inline ::substrait::proto::WriteRel_WriteOp WriteRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.op)
  return _internal_op();
}
inline void WriteRel::_internal_set_op(::substrait::proto::WriteRel_WriteOp value) {
  
  op_ = value;
}
inline void WriteRel::set_op(::substrait::proto::WriteRel_WriteOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.WriteRel.op)
}

// .substrait.proto.Rel input = 5;
inline bool WriteRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool WriteRel::has_input() const {
  return _internal_has_input();
}
inline void WriteRel::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& WriteRel::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& WriteRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.input)
  return _internal_input();
}
inline void WriteRel::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.WriteRel.input)
}
inline ::substrait::proto::Rel* WriteRel::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* WriteRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.WriteRel.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* WriteRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* WriteRel::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.WriteRel.input)
  return _internal_mutable_input();
}
inline void WriteRel::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.WriteRel.input)
}

// .substrait.proto.WriteRel.OutputMode output = 6;
inline void WriteRel::clear_output() {
  output_ = 0;
}
inline ::substrait::proto::WriteRel_OutputMode WriteRel::_internal_output() const {
  return static_cast< ::substrait::proto::WriteRel_OutputMode >(output_);
}
inline ::substrait::proto::WriteRel_OutputMode WriteRel::output() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.output)
  return _internal_output();
}
inline void WriteRel::_internal_set_output(::substrait::proto::WriteRel_OutputMode value) {
  
  output_ = value;
}
inline void WriteRel::set_output(::substrait::proto::WriteRel_OutputMode value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:substrait.proto.WriteRel.output)
}

// .substrait.proto.RelCommon common = 7;
inline bool WriteRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool WriteRel::has_common() const {
  return _internal_has_common();
}
inline void WriteRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& WriteRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& WriteRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.WriteRel.common)
  return _internal_common();
}
inline void WriteRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.WriteRel.common)
}
inline ::substrait::proto::RelCommon* WriteRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* WriteRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.WriteRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* WriteRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* WriteRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.WriteRel.common)
  return _internal_mutable_common();
}
inline void WriteRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.WriteRel.common)
}

inline bool WriteRel::has_write_type() const {
  return write_type_case() != WRITE_TYPE_NOT_SET;
}
inline void WriteRel::clear_has_write_type() {
  _oneof_case_[0] = WRITE_TYPE_NOT_SET;
}
inline WriteRel::WriteTypeCase WriteRel::write_type_case() const {
  return WriteRel::WriteTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ComparisonJoinKey_ComparisonType

// .substrait.proto.ComparisonJoinKey.SimpleComparisonType simple = 1;
inline bool ComparisonJoinKey_ComparisonType::_internal_has_simple() const {
  return inner_type_case() == kSimple;
}
inline void ComparisonJoinKey_ComparisonType::set_has_simple() {
  _oneof_case_[0] = kSimple;
}
inline void ComparisonJoinKey_ComparisonType::clear_simple() {
  if (_internal_has_simple()) {
    inner_type_.simple_ = 0;
    clear_has_inner_type();
  }
}
inline ::substrait::proto::ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey_ComparisonType::_internal_simple() const {
  if (_internal_has_simple()) {
    return static_cast< ::substrait::proto::ComparisonJoinKey_SimpleComparisonType >(inner_type_.simple_);
  }
  return static_cast< ::substrait::proto::ComparisonJoinKey_SimpleComparisonType >(0);
}
inline ::substrait::proto::ComparisonJoinKey_SimpleComparisonType ComparisonJoinKey_ComparisonType::simple() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ComparisonJoinKey.ComparisonType.simple)
  return _internal_simple();
}
inline void ComparisonJoinKey_ComparisonType::_internal_set_simple(::substrait::proto::ComparisonJoinKey_SimpleComparisonType value) {
  if (!_internal_has_simple()) {
    clear_inner_type();
    set_has_simple();
  }
  inner_type_.simple_ = value;
}
inline void ComparisonJoinKey_ComparisonType::set_simple(::substrait::proto::ComparisonJoinKey_SimpleComparisonType value) {
  // @@protoc_insertion_point(field_set:substrait.proto.ComparisonJoinKey.ComparisonType.simple)
  _internal_set_simple(value);
}

// uint32 custom_function_reference = 2;
inline bool ComparisonJoinKey_ComparisonType::_internal_has_custom_function_reference() const {
  return inner_type_case() == kCustomFunctionReference;
}
inline void ComparisonJoinKey_ComparisonType::set_has_custom_function_reference() {
  _oneof_case_[0] = kCustomFunctionReference;
}
inline void ComparisonJoinKey_ComparisonType::clear_custom_function_reference() {
  if (_internal_has_custom_function_reference()) {
    inner_type_.custom_function_reference_ = 0u;
    clear_has_inner_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComparisonJoinKey_ComparisonType::_internal_custom_function_reference() const {
  if (_internal_has_custom_function_reference()) {
    return inner_type_.custom_function_reference_;
  }
  return 0u;
}
inline void ComparisonJoinKey_ComparisonType::_internal_set_custom_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_custom_function_reference()) {
    clear_inner_type();
    set_has_custom_function_reference();
  }
  inner_type_.custom_function_reference_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComparisonJoinKey_ComparisonType::custom_function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ComparisonJoinKey.ComparisonType.custom_function_reference)
  return _internal_custom_function_reference();
}
inline void ComparisonJoinKey_ComparisonType::set_custom_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ComparisonJoinKey.ComparisonType.custom_function_reference)
}

inline bool ComparisonJoinKey_ComparisonType::has_inner_type() const {
  return inner_type_case() != INNER_TYPE_NOT_SET;
}
inline void ComparisonJoinKey_ComparisonType::clear_has_inner_type() {
  _oneof_case_[0] = INNER_TYPE_NOT_SET;
}
inline ComparisonJoinKey_ComparisonType::InnerTypeCase ComparisonJoinKey_ComparisonType::inner_type_case() const {
  return ComparisonJoinKey_ComparisonType::InnerTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ComparisonJoinKey

// .substrait.proto.Expression.FieldReference left = 1;
inline bool ComparisonJoinKey::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool ComparisonJoinKey::has_left() const {
  return _internal_has_left();
}
inline void ComparisonJoinKey::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Expression_FieldReference& ComparisonJoinKey::_internal_left() const {
  const ::substrait::proto::Expression_FieldReference* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_FieldReference*>(
      &::substrait::proto::_Expression_FieldReference_default_instance_);
}
inline const ::substrait::proto::Expression_FieldReference& ComparisonJoinKey::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ComparisonJoinKey.left)
  return _internal_left();
}
inline void ComparisonJoinKey::unsafe_arena_set_allocated_left(
    ::substrait::proto::Expression_FieldReference* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ComparisonJoinKey.left)
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.ComparisonJoinKey.left)
  
  ::substrait::proto::Expression_FieldReference* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_FieldReference>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ComparisonJoinKey.left)
  return _internal_mutable_left();
}
inline void ComparisonJoinKey::set_allocated_left(::substrait::proto::Expression_FieldReference* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ComparisonJoinKey.left)
}

// .substrait.proto.Expression.FieldReference right = 2;
inline bool ComparisonJoinKey::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool ComparisonJoinKey::has_right() const {
  return _internal_has_right();
}
inline void ComparisonJoinKey::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Expression_FieldReference& ComparisonJoinKey::_internal_right() const {
  const ::substrait::proto::Expression_FieldReference* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_FieldReference*>(
      &::substrait::proto::_Expression_FieldReference_default_instance_);
}
inline const ::substrait::proto::Expression_FieldReference& ComparisonJoinKey::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ComparisonJoinKey.right)
  return _internal_right();
}
inline void ComparisonJoinKey::unsafe_arena_set_allocated_right(
    ::substrait::proto::Expression_FieldReference* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ComparisonJoinKey.right)
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.ComparisonJoinKey.right)
  
  ::substrait::proto::Expression_FieldReference* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_FieldReference>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Expression_FieldReference* ComparisonJoinKey::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ComparisonJoinKey.right)
  return _internal_mutable_right();
}
inline void ComparisonJoinKey::set_allocated_right(::substrait::proto::Expression_FieldReference* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ComparisonJoinKey.right)
}

// .substrait.proto.ComparisonJoinKey.ComparisonType comparison = 3;
inline bool ComparisonJoinKey::_internal_has_comparison() const {
  return this != internal_default_instance() && comparison_ != nullptr;
}
inline bool ComparisonJoinKey::has_comparison() const {
  return _internal_has_comparison();
}
inline void ComparisonJoinKey::clear_comparison() {
  if (GetArena() == nullptr && comparison_ != nullptr) {
    delete comparison_;
  }
  comparison_ = nullptr;
}
inline const ::substrait::proto::ComparisonJoinKey_ComparisonType& ComparisonJoinKey::_internal_comparison() const {
  const ::substrait::proto::ComparisonJoinKey_ComparisonType* p = comparison_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::ComparisonJoinKey_ComparisonType*>(
      &::substrait::proto::_ComparisonJoinKey_ComparisonType_default_instance_);
}
inline const ::substrait::proto::ComparisonJoinKey_ComparisonType& ComparisonJoinKey::comparison() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ComparisonJoinKey.comparison)
  return _internal_comparison();
}
inline void ComparisonJoinKey::unsafe_arena_set_allocated_comparison(
    ::substrait::proto::ComparisonJoinKey_ComparisonType* comparison) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comparison_);
  }
  comparison_ = comparison;
  if (comparison) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.ComparisonJoinKey.comparison)
}
inline ::substrait::proto::ComparisonJoinKey_ComparisonType* ComparisonJoinKey::release_comparison() {
  auto temp = unsafe_arena_release_comparison();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::ComparisonJoinKey_ComparisonType* ComparisonJoinKey::unsafe_arena_release_comparison() {
  // @@protoc_insertion_point(field_release:substrait.proto.ComparisonJoinKey.comparison)
  
  ::substrait::proto::ComparisonJoinKey_ComparisonType* temp = comparison_;
  comparison_ = nullptr;
  return temp;
}
inline ::substrait::proto::ComparisonJoinKey_ComparisonType* ComparisonJoinKey::_internal_mutable_comparison() {
  
  if (comparison_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::ComparisonJoinKey_ComparisonType>(GetArena());
    comparison_ = p;
  }
  return comparison_;
}
inline ::substrait::proto::ComparisonJoinKey_ComparisonType* ComparisonJoinKey::mutable_comparison() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.ComparisonJoinKey.comparison)
  return _internal_mutable_comparison();
}
inline void ComparisonJoinKey::set_allocated_comparison(::substrait::proto::ComparisonJoinKey_ComparisonType* comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete comparison_;
  }
  if (comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(comparison);
    if (message_arena != submessage_arena) {
      comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparison, submessage_arena);
    }
    
  } else {
    
  }
  comparison_ = comparison;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.ComparisonJoinKey.comparison)
}

// -------------------------------------------------------------------

// HashJoinRel

// .substrait.proto.RelCommon common = 1;
inline bool HashJoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool HashJoinRel::has_common() const {
  return _internal_has_common();
}
inline void HashJoinRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& HashJoinRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& HashJoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.common)
  return _internal_common();
}
inline void HashJoinRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.HashJoinRel.common)
}
inline ::substrait::proto::RelCommon* HashJoinRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* HashJoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.HashJoinRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* HashJoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* HashJoinRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.common)
  return _internal_mutable_common();
}
inline void HashJoinRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.HashJoinRel.common)
}

// .substrait.proto.Rel left = 2;
inline bool HashJoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool HashJoinRel::has_left() const {
  return _internal_has_left();
}
inline void HashJoinRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Rel& HashJoinRel::_internal_left() const {
  const ::substrait::proto::Rel* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& HashJoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.left)
  return _internal_left();
}
inline void HashJoinRel::unsafe_arena_set_allocated_left(
    ::substrait::proto::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.HashJoinRel.left)
}
inline ::substrait::proto::Rel* HashJoinRel::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* HashJoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.HashJoinRel.left)
  
  ::substrait::proto::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* HashJoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Rel* HashJoinRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.left)
  return _internal_mutable_left();
}
inline void HashJoinRel::set_allocated_left(::substrait::proto::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.HashJoinRel.left)
}

// .substrait.proto.Rel right = 3;
inline bool HashJoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool HashJoinRel::has_right() const {
  return _internal_has_right();
}
inline void HashJoinRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& HashJoinRel::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& HashJoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.right)
  return _internal_right();
}
inline void HashJoinRel::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.HashJoinRel.right)
}
inline ::substrait::proto::Rel* HashJoinRel::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* HashJoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.HashJoinRel.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* HashJoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* HashJoinRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.right)
  return _internal_mutable_right();
}
inline void HashJoinRel::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.HashJoinRel.right)
}

// repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
inline int HashJoinRel::_internal_left_keys_size() const {
  return left_keys_.size();
}
inline int HashJoinRel::left_keys_size() const {
  return _internal_left_keys_size();
}
inline void HashJoinRel::clear_left_keys() {
  left_keys_.Clear();
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::mutable_left_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.left_keys)
  return left_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
HashJoinRel::mutable_left_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.HashJoinRel.left_keys)
  return &left_keys_;
}
inline const ::substrait::proto::Expression_FieldReference& HashJoinRel::_internal_left_keys(int index) const {
  return left_keys_.Get(index);
}
inline const ::substrait::proto::Expression_FieldReference& HashJoinRel::left_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.left_keys)
  return _internal_left_keys(index);
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::_internal_add_left_keys() {
  return left_keys_.Add();
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::add_left_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.HashJoinRel.left_keys)
  return _internal_add_left_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
HashJoinRel::left_keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.HashJoinRel.left_keys)
  return left_keys_;
}

// repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
inline int HashJoinRel::_internal_right_keys_size() const {
  return right_keys_.size();
}
inline int HashJoinRel::right_keys_size() const {
  return _internal_right_keys_size();
}
inline void HashJoinRel::clear_right_keys() {
  right_keys_.Clear();
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::mutable_right_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.right_keys)
  return right_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
HashJoinRel::mutable_right_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.HashJoinRel.right_keys)
  return &right_keys_;
}
inline const ::substrait::proto::Expression_FieldReference& HashJoinRel::_internal_right_keys(int index) const {
  return right_keys_.Get(index);
}
inline const ::substrait::proto::Expression_FieldReference& HashJoinRel::right_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.right_keys)
  return _internal_right_keys(index);
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::_internal_add_right_keys() {
  return right_keys_.Add();
}
inline ::substrait::proto::Expression_FieldReference* HashJoinRel::add_right_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.HashJoinRel.right_keys)
  return _internal_add_right_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
HashJoinRel::right_keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.HashJoinRel.right_keys)
  return right_keys_;
}

// repeated .substrait.proto.ComparisonJoinKey keys = 8;
inline int HashJoinRel::_internal_keys_size() const {
  return keys_.size();
}
inline int HashJoinRel::keys_size() const {
  return _internal_keys_size();
}
inline void HashJoinRel::clear_keys() {
  keys_.Clear();
}
inline ::substrait::proto::ComparisonJoinKey* HashJoinRel::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >*
HashJoinRel::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.HashJoinRel.keys)
  return &keys_;
}
inline const ::substrait::proto::ComparisonJoinKey& HashJoinRel::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::substrait::proto::ComparisonJoinKey& HashJoinRel::keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.keys)
  return _internal_keys(index);
}
inline ::substrait::proto::ComparisonJoinKey* HashJoinRel::_internal_add_keys() {
  return keys_.Add();
}
inline ::substrait::proto::ComparisonJoinKey* HashJoinRel::add_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.HashJoinRel.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >&
HashJoinRel::keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.HashJoinRel.keys)
  return keys_;
}

// .substrait.proto.Expression post_join_filter = 6;
inline bool HashJoinRel::_internal_has_post_join_filter() const {
  return this != internal_default_instance() && post_join_filter_ != nullptr;
}
inline bool HashJoinRel::has_post_join_filter() const {
  return _internal_has_post_join_filter();
}
inline void HashJoinRel::clear_post_join_filter() {
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
}
inline const ::substrait::proto::Expression& HashJoinRel::_internal_post_join_filter() const {
  const ::substrait::proto::Expression* p = post_join_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& HashJoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void HashJoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::proto::Expression* post_join_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.HashJoinRel.post_join_filter)
}
inline ::substrait::proto::Expression* HashJoinRel::release_post_join_filter() {
  auto temp = unsafe_arena_release_post_join_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* HashJoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.HashJoinRel.post_join_filter)
  
  ::substrait::proto::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* HashJoinRel::_internal_mutable_post_join_filter() {
  
  if (post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    post_join_filter_ = p;
  }
  return post_join_filter_;
}
inline ::substrait::proto::Expression* HashJoinRel::mutable_post_join_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.post_join_filter)
  return _internal_mutable_post_join_filter();
}
inline void HashJoinRel::set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.HashJoinRel.post_join_filter)
}

// .substrait.proto.HashJoinRel.JoinType type = 7;
inline void HashJoinRel::clear_type() {
  type_ = 0;
}
inline ::substrait::proto::HashJoinRel_JoinType HashJoinRel::_internal_type() const {
  return static_cast< ::substrait::proto::HashJoinRel_JoinType >(type_);
}
inline ::substrait::proto::HashJoinRel_JoinType HashJoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.type)
  return _internal_type();
}
inline void HashJoinRel::_internal_set_type(::substrait::proto::HashJoinRel_JoinType value) {
  
  type_ = value;
}
inline void HashJoinRel::set_type(::substrait::proto::HashJoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.HashJoinRel.type)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool HashJoinRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool HashJoinRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& HashJoinRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& HashJoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.HashJoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void HashJoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.HashJoinRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* HashJoinRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* HashJoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.HashJoinRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* HashJoinRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* HashJoinRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.HashJoinRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void HashJoinRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.HashJoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// MergeJoinRel

// .substrait.proto.RelCommon common = 1;
inline bool MergeJoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool MergeJoinRel::has_common() const {
  return _internal_has_common();
}
inline void MergeJoinRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& MergeJoinRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& MergeJoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.common)
  return _internal_common();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.MergeJoinRel.common)
}
inline ::substrait::proto::RelCommon* MergeJoinRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* MergeJoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.MergeJoinRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* MergeJoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* MergeJoinRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.common)
  return _internal_mutable_common();
}
inline void MergeJoinRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.MergeJoinRel.common)
}

// .substrait.proto.Rel left = 2;
inline bool MergeJoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool MergeJoinRel::has_left() const {
  return _internal_has_left();
}
inline void MergeJoinRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Rel& MergeJoinRel::_internal_left() const {
  const ::substrait::proto::Rel* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& MergeJoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.left)
  return _internal_left();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_left(
    ::substrait::proto::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.MergeJoinRel.left)
}
inline ::substrait::proto::Rel* MergeJoinRel::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* MergeJoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.MergeJoinRel.left)
  
  ::substrait::proto::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* MergeJoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Rel* MergeJoinRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.left)
  return _internal_mutable_left();
}
inline void MergeJoinRel::set_allocated_left(::substrait::proto::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.MergeJoinRel.left)
}

// .substrait.proto.Rel right = 3;
inline bool MergeJoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool MergeJoinRel::has_right() const {
  return _internal_has_right();
}
inline void MergeJoinRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& MergeJoinRel::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& MergeJoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.right)
  return _internal_right();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.MergeJoinRel.right)
}
inline ::substrait::proto::Rel* MergeJoinRel::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* MergeJoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.MergeJoinRel.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* MergeJoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* MergeJoinRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.right)
  return _internal_mutable_right();
}
inline void MergeJoinRel::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.MergeJoinRel.right)
}

// repeated .substrait.proto.Expression.FieldReference left_keys = 4 [deprecated = true];
inline int MergeJoinRel::_internal_left_keys_size() const {
  return left_keys_.size();
}
inline int MergeJoinRel::left_keys_size() const {
  return _internal_left_keys_size();
}
inline void MergeJoinRel::clear_left_keys() {
  left_keys_.Clear();
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::mutable_left_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.left_keys)
  return left_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
MergeJoinRel::mutable_left_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.MergeJoinRel.left_keys)
  return &left_keys_;
}
inline const ::substrait::proto::Expression_FieldReference& MergeJoinRel::_internal_left_keys(int index) const {
  return left_keys_.Get(index);
}
inline const ::substrait::proto::Expression_FieldReference& MergeJoinRel::left_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.left_keys)
  return _internal_left_keys(index);
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::_internal_add_left_keys() {
  return left_keys_.Add();
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::add_left_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.MergeJoinRel.left_keys)
  return _internal_add_left_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
MergeJoinRel::left_keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.MergeJoinRel.left_keys)
  return left_keys_;
}

// repeated .substrait.proto.Expression.FieldReference right_keys = 5 [deprecated = true];
inline int MergeJoinRel::_internal_right_keys_size() const {
  return right_keys_.size();
}
inline int MergeJoinRel::right_keys_size() const {
  return _internal_right_keys_size();
}
inline void MergeJoinRel::clear_right_keys() {
  right_keys_.Clear();
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::mutable_right_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.right_keys)
  return right_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >*
MergeJoinRel::mutable_right_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.MergeJoinRel.right_keys)
  return &right_keys_;
}
inline const ::substrait::proto::Expression_FieldReference& MergeJoinRel::_internal_right_keys(int index) const {
  return right_keys_.Get(index);
}
inline const ::substrait::proto::Expression_FieldReference& MergeJoinRel::right_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.right_keys)
  return _internal_right_keys(index);
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::_internal_add_right_keys() {
  return right_keys_.Add();
}
inline ::substrait::proto::Expression_FieldReference* MergeJoinRel::add_right_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.MergeJoinRel.right_keys)
  return _internal_add_right_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_FieldReference >&
MergeJoinRel::right_keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.MergeJoinRel.right_keys)
  return right_keys_;
}

// repeated .substrait.proto.ComparisonJoinKey keys = 8;
inline int MergeJoinRel::_internal_keys_size() const {
  return keys_.size();
}
inline int MergeJoinRel::keys_size() const {
  return _internal_keys_size();
}
inline void MergeJoinRel::clear_keys() {
  keys_.Clear();
}
inline ::substrait::proto::ComparisonJoinKey* MergeJoinRel::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >*
MergeJoinRel::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.MergeJoinRel.keys)
  return &keys_;
}
inline const ::substrait::proto::ComparisonJoinKey& MergeJoinRel::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::substrait::proto::ComparisonJoinKey& MergeJoinRel::keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.keys)
  return _internal_keys(index);
}
inline ::substrait::proto::ComparisonJoinKey* MergeJoinRel::_internal_add_keys() {
  return keys_.Add();
}
inline ::substrait::proto::ComparisonJoinKey* MergeJoinRel::add_keys() {
  // @@protoc_insertion_point(field_add:substrait.proto.MergeJoinRel.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::ComparisonJoinKey >&
MergeJoinRel::keys() const {
  // @@protoc_insertion_point(field_list:substrait.proto.MergeJoinRel.keys)
  return keys_;
}

// .substrait.proto.Expression post_join_filter = 6;
inline bool MergeJoinRel::_internal_has_post_join_filter() const {
  return this != internal_default_instance() && post_join_filter_ != nullptr;
}
inline bool MergeJoinRel::has_post_join_filter() const {
  return _internal_has_post_join_filter();
}
inline void MergeJoinRel::clear_post_join_filter() {
  if (GetArena() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
}
inline const ::substrait::proto::Expression& MergeJoinRel::_internal_post_join_filter() const {
  const ::substrait::proto::Expression* p = post_join_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& MergeJoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::proto::Expression* post_join_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.MergeJoinRel.post_join_filter)
}
inline ::substrait::proto::Expression* MergeJoinRel::release_post_join_filter() {
  auto temp = unsafe_arena_release_post_join_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* MergeJoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.proto.MergeJoinRel.post_join_filter)
  
  ::substrait::proto::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* MergeJoinRel::_internal_mutable_post_join_filter() {
  
  if (post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    post_join_filter_ = p;
  }
  return post_join_filter_;
}
inline ::substrait::proto::Expression* MergeJoinRel::mutable_post_join_filter() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.post_join_filter)
  return _internal_mutable_post_join_filter();
}
inline void MergeJoinRel::set_allocated_post_join_filter(::substrait::proto::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.MergeJoinRel.post_join_filter)
}

// .substrait.proto.MergeJoinRel.JoinType type = 7;
inline void MergeJoinRel::clear_type() {
  type_ = 0;
}
inline ::substrait::proto::MergeJoinRel_JoinType MergeJoinRel::_internal_type() const {
  return static_cast< ::substrait::proto::MergeJoinRel_JoinType >(type_);
}
inline ::substrait::proto::MergeJoinRel_JoinType MergeJoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.type)
  return _internal_type();
}
inline void MergeJoinRel::_internal_set_type(::substrait::proto::MergeJoinRel_JoinType value) {
  
  type_ = value;
}
inline void MergeJoinRel::set_type(::substrait::proto::MergeJoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.MergeJoinRel.type)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool MergeJoinRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool MergeJoinRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& MergeJoinRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& MergeJoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.MergeJoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.MergeJoinRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* MergeJoinRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* MergeJoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.MergeJoinRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* MergeJoinRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* MergeJoinRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.MergeJoinRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void MergeJoinRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.MergeJoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// NestedLoopJoinRel

// .substrait.proto.RelCommon common = 1;
inline bool NestedLoopJoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool NestedLoopJoinRel::has_common() const {
  return _internal_has_common();
}
inline void NestedLoopJoinRel::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::proto::RelCommon& NestedLoopJoinRel::_internal_common() const {
  const ::substrait::proto::RelCommon* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::RelCommon*>(
      &::substrait::proto::_RelCommon_default_instance_);
}
inline const ::substrait::proto::RelCommon& NestedLoopJoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.common)
  return _internal_common();
}
inline void NestedLoopJoinRel::unsafe_arena_set_allocated_common(
    ::substrait::proto::RelCommon* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NestedLoopJoinRel.common)
}
inline ::substrait::proto::RelCommon* NestedLoopJoinRel::release_common() {
  auto temp = unsafe_arena_release_common();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::RelCommon* NestedLoopJoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.proto.NestedLoopJoinRel.common)
  
  ::substrait::proto::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::proto::RelCommon* NestedLoopJoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::RelCommon>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::substrait::proto::RelCommon* NestedLoopJoinRel::mutable_common() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NestedLoopJoinRel.common)
  return _internal_mutable_common();
}
inline void NestedLoopJoinRel::set_allocated_common(::substrait::proto::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NestedLoopJoinRel.common)
}

// .substrait.proto.Rel left = 2;
inline bool NestedLoopJoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool NestedLoopJoinRel::has_left() const {
  return _internal_has_left();
}
inline void NestedLoopJoinRel::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Rel& NestedLoopJoinRel::_internal_left() const {
  const ::substrait::proto::Rel* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& NestedLoopJoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.left)
  return _internal_left();
}
inline void NestedLoopJoinRel::unsafe_arena_set_allocated_left(
    ::substrait::proto::Rel* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NestedLoopJoinRel.left)
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.NestedLoopJoinRel.left)
  
  ::substrait::proto::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NestedLoopJoinRel.left)
  return _internal_mutable_left();
}
inline void NestedLoopJoinRel::set_allocated_left(::substrait::proto::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NestedLoopJoinRel.left)
}

// .substrait.proto.Rel right = 3;
inline bool NestedLoopJoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool NestedLoopJoinRel::has_right() const {
  return _internal_has_right();
}
inline void NestedLoopJoinRel::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& NestedLoopJoinRel::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& NestedLoopJoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.right)
  return _internal_right();
}
inline void NestedLoopJoinRel::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NestedLoopJoinRel.right)
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.NestedLoopJoinRel.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* NestedLoopJoinRel::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NestedLoopJoinRel.right)
  return _internal_mutable_right();
}
inline void NestedLoopJoinRel::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NestedLoopJoinRel.right)
}

// .substrait.proto.Expression expression = 4;
inline bool NestedLoopJoinRel::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool NestedLoopJoinRel::has_expression() const {
  return _internal_has_expression();
}
inline void NestedLoopJoinRel::clear_expression() {
  if (GetArena() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::substrait::proto::Expression& NestedLoopJoinRel::_internal_expression() const {
  const ::substrait::proto::Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& NestedLoopJoinRel::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.expression)
  return _internal_expression();
}
inline void NestedLoopJoinRel::unsafe_arena_set_allocated_expression(
    ::substrait::proto::Expression* expression) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NestedLoopJoinRel.expression)
}
inline ::substrait::proto::Expression* NestedLoopJoinRel::release_expression() {
  auto temp = unsafe_arena_release_expression();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* NestedLoopJoinRel::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.NestedLoopJoinRel.expression)
  
  ::substrait::proto::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* NestedLoopJoinRel::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    expression_ = p;
  }
  return expression_;
}
inline ::substrait::proto::Expression* NestedLoopJoinRel::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NestedLoopJoinRel.expression)
  return _internal_mutable_expression();
}
inline void NestedLoopJoinRel::set_allocated_expression(::substrait::proto::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NestedLoopJoinRel.expression)
}

// .substrait.proto.NestedLoopJoinRel.JoinType type = 5;
inline void NestedLoopJoinRel::clear_type() {
  type_ = 0;
}
inline ::substrait::proto::NestedLoopJoinRel_JoinType NestedLoopJoinRel::_internal_type() const {
  return static_cast< ::substrait::proto::NestedLoopJoinRel_JoinType >(type_);
}
inline ::substrait::proto::NestedLoopJoinRel_JoinType NestedLoopJoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.type)
  return _internal_type();
}
inline void NestedLoopJoinRel::_internal_set_type(::substrait::proto::NestedLoopJoinRel_JoinType value) {
  
  type_ = value;
}
inline void NestedLoopJoinRel::set_type(::substrait::proto::NestedLoopJoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.NestedLoopJoinRel.type)
}

// .substrait.proto.extensions.AdvancedExtension advanced_extension = 10;
inline bool NestedLoopJoinRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool NestedLoopJoinRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::proto::extensions::AdvancedExtension& NestedLoopJoinRel::_internal_advanced_extension() const {
  const ::substrait::proto::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::extensions::AdvancedExtension*>(
      &::substrait::proto::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::proto::extensions::AdvancedExtension& NestedLoopJoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.proto.NestedLoopJoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void NestedLoopJoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.NestedLoopJoinRel.advanced_extension)
}
inline ::substrait::proto::extensions::AdvancedExtension* NestedLoopJoinRel::release_advanced_extension() {
  auto temp = unsafe_arena_release_advanced_extension();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* NestedLoopJoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.proto.NestedLoopJoinRel.advanced_extension)
  
  ::substrait::proto::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::proto::extensions::AdvancedExtension* NestedLoopJoinRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::extensions::AdvancedExtension>(GetArena());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::proto::extensions::AdvancedExtension* NestedLoopJoinRel::mutable_advanced_extension() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.NestedLoopJoinRel.advanced_extension)
  return _internal_mutable_advanced_extension();
}
inline void NestedLoopJoinRel::set_allocated_advanced_extension(::substrait::proto::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension)->GetArena();
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.NestedLoopJoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// FunctionArgument

// string enum = 1;
inline bool FunctionArgument::_internal_has_enum_() const {
  return arg_type_case() == kEnum;
}
inline void FunctionArgument::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void FunctionArgument::clear_enum_() {
  if (_internal_has_enum_()) {
    arg_type_.enum__.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_arg_type();
  }
}
inline const std::string& FunctionArgument::enum_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FunctionArgument.enum)
  return _internal_enum_();
}
inline void FunctionArgument::set_enum_(const std::string& value) {
  _internal_set_enum_(value);
  // @@protoc_insertion_point(field_set:substrait.proto.FunctionArgument.enum)
}
inline std::string* FunctionArgument::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FunctionArgument.enum)
  return _internal_mutable_enum_();
}
inline const std::string& FunctionArgument::_internal_enum_() const {
  if (_internal_has_enum_()) {
    return arg_type_.enum__.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FunctionArgument::_internal_set_enum_(const std::string& value) {
  if (!_internal_has_enum_()) {
    clear_arg_type();
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_type_.enum__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FunctionArgument::set_enum_(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.FunctionArgument.enum)
  if (!_internal_has_enum_()) {
    clear_arg_type();
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_type_.enum__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.FunctionArgument.enum)
}
inline void FunctionArgument::set_enum_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_enum_()) {
    clear_arg_type();
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_type_.enum__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.FunctionArgument.enum)
}
inline void FunctionArgument::set_enum_(const char* value,
                             size_t size) {
  if (!_internal_has_enum_()) {
    clear_arg_type();
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  arg_type_.enum__.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.FunctionArgument.enum)
}
inline std::string* FunctionArgument::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_arg_type();
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return arg_type_.enum__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FunctionArgument::release_enum_() {
  // @@protoc_insertion_point(field_release:substrait.proto.FunctionArgument.enum)
  if (_internal_has_enum_()) {
    clear_has_arg_type();
    return arg_type_.enum__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::set_allocated_enum_(std::string* enum_) {
  if (has_arg_type()) {
    clear_arg_type();
  }
  if (enum_ != nullptr) {
    set_has_enum_();
    arg_type_.enum__.UnsafeSetDefault(enum_);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FunctionArgument.enum)
}
inline std::string* FunctionArgument::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.FunctionArgument.enum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_enum_()) {
    clear_has_arg_type();
    return arg_type_.enum__.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::unsafe_arena_set_allocated_enum_(std::string* enum_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_enum_()) {
    arg_type_.enum__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_arg_type();
  if (enum_) {
    set_has_enum_();
    arg_type_.enum__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enum_, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FunctionArgument.enum)
}

// .substrait.proto.Type type = 2;
inline bool FunctionArgument::_internal_has_type() const {
  return arg_type_case() == kType;
}
inline bool FunctionArgument::has_type() const {
  return _internal_has_type();
}
inline void FunctionArgument::set_has_type() {
  _oneof_case_[0] = kType;
}
inline ::substrait::proto::Type* FunctionArgument::release_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.FunctionArgument.type)
  if (_internal_has_type()) {
    clear_has_arg_type();
      ::substrait::proto::Type* temp = arg_type_.type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arg_type_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Type& FunctionArgument::_internal_type() const {
  return _internal_has_type()
      ? *arg_type_.type_
      : *reinterpret_cast< ::substrait::proto::Type*>(&::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& FunctionArgument::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FunctionArgument.type)
  return _internal_type();
}
inline ::substrait::proto::Type* FunctionArgument::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.FunctionArgument.type)
  if (_internal_has_type()) {
    clear_has_arg_type();
    ::substrait::proto::Type* temp = arg_type_.type_;
    arg_type_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::unsafe_arena_set_allocated_type(::substrait::proto::Type* type) {
  clear_arg_type();
  if (type) {
    set_has_type();
    arg_type_.type_ = type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FunctionArgument.type)
}
inline ::substrait::proto::Type* FunctionArgument::_internal_mutable_type() {
  if (!_internal_has_type()) {
    clear_arg_type();
    set_has_type();
    arg_type_.type_ = CreateMaybeMessage< ::substrait::proto::Type >(GetArena());
  }
  return arg_type_.type_;
}
inline ::substrait::proto::Type* FunctionArgument::mutable_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FunctionArgument.type)
  return _internal_mutable_type();
}

// .substrait.proto.Expression value = 3;
inline bool FunctionArgument::_internal_has_value() const {
  return arg_type_case() == kValue;
}
inline bool FunctionArgument::has_value() const {
  return _internal_has_value();
}
inline void FunctionArgument::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void FunctionArgument::clear_value() {
  if (_internal_has_value()) {
    if (GetArena() == nullptr) {
      delete arg_type_.value_;
    }
    clear_has_arg_type();
  }
}
inline ::substrait::proto::Expression* FunctionArgument::release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.FunctionArgument.value)
  if (_internal_has_value()) {
    clear_has_arg_type();
      ::substrait::proto::Expression* temp = arg_type_.value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    arg_type_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression& FunctionArgument::_internal_value() const {
  return _internal_has_value()
      ? *arg_type_.value_
      : *reinterpret_cast< ::substrait::proto::Expression*>(&::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& FunctionArgument::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FunctionArgument.value)
  return _internal_value();
}
inline ::substrait::proto::Expression* FunctionArgument::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.FunctionArgument.value)
  if (_internal_has_value()) {
    clear_has_arg_type();
    ::substrait::proto::Expression* temp = arg_type_.value_;
    arg_type_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::unsafe_arena_set_allocated_value(::substrait::proto::Expression* value) {
  clear_arg_type();
  if (value) {
    set_has_value();
    arg_type_.value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FunctionArgument.value)
}
inline ::substrait::proto::Expression* FunctionArgument::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_arg_type();
    set_has_value();
    arg_type_.value_ = CreateMaybeMessage< ::substrait::proto::Expression >(GetArena());
  }
  return arg_type_.value_;
}
inline ::substrait::proto::Expression* FunctionArgument::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FunctionArgument.value)
  return _internal_mutable_value();
}

inline bool FunctionArgument::has_arg_type() const {
  return arg_type_case() != ARG_TYPE_NOT_SET;
}
inline void FunctionArgument::clear_has_arg_type() {
  _oneof_case_[0] = ARG_TYPE_NOT_SET;
}
inline FunctionArgument::ArgTypeCase FunctionArgument::arg_type_case() const {
  return FunctionArgument::ArgTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FunctionOption

// string name = 1;
inline void FunctionOption::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FunctionOption::name() const {
  // @@protoc_insertion_point(field_get:substrait.proto.FunctionOption.name)
  return _internal_name();
}
inline void FunctionOption::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:substrait.proto.FunctionOption.name)
}
inline std::string* FunctionOption::mutable_name() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FunctionOption.name)
  return _internal_mutable_name();
}
inline const std::string& FunctionOption::_internal_name() const {
  return name_.Get();
}
inline void FunctionOption::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FunctionOption::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.FunctionOption.name)
}
inline void FunctionOption::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.FunctionOption.name)
}
inline void FunctionOption::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.FunctionOption.name)
}
inline std::string* FunctionOption::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FunctionOption::release_name() {
  // @@protoc_insertion_point(field_release:substrait.proto.FunctionOption.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FunctionOption::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.FunctionOption.name)
}
inline std::string* FunctionOption::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.FunctionOption.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FunctionOption::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.FunctionOption.name)
}

// repeated string preference = 2;
inline int FunctionOption::_internal_preference_size() const {
  return preference_.size();
}
inline int FunctionOption::preference_size() const {
  return _internal_preference_size();
}
inline void FunctionOption::clear_preference() {
  preference_.Clear();
}
inline std::string* FunctionOption::add_preference() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.FunctionOption.preference)
  return _internal_add_preference();
}
inline const std::string& FunctionOption::_internal_preference(int index) const {
  return preference_.Get(index);
}
inline const std::string& FunctionOption::preference(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.FunctionOption.preference)
  return _internal_preference(index);
}
inline std::string* FunctionOption::mutable_preference(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.FunctionOption.preference)
  return preference_.Mutable(index);
}
inline void FunctionOption::set_preference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.FunctionOption.preference)
  preference_.Mutable(index)->assign(value);
}
inline void FunctionOption::set_preference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.FunctionOption.preference)
  preference_.Mutable(index)->assign(std::move(value));
}
inline void FunctionOption::set_preference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.FunctionOption.preference)
}
inline void FunctionOption::set_preference(int index, const char* value, size_t size) {
  preference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.FunctionOption.preference)
}
inline std::string* FunctionOption::_internal_add_preference() {
  return preference_.Add();
}
inline void FunctionOption::add_preference(const std::string& value) {
  preference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.FunctionOption.preference)
}
inline void FunctionOption::add_preference(std::string&& value) {
  preference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.FunctionOption.preference)
}
inline void FunctionOption::add_preference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.FunctionOption.preference)
}
inline void FunctionOption::add_preference(const char* value, size_t size) {
  preference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.FunctionOption.preference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionOption::preference() const {
  // @@protoc_insertion_point(field_list:substrait.proto.FunctionOption.preference)
  return preference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FunctionOption::mutable_preference() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.FunctionOption.preference)
  return &preference_;
}

// -------------------------------------------------------------------

// Expression_Enum_Empty

// -------------------------------------------------------------------

// Expression_Enum

// string specified = 1;
inline bool Expression_Enum::_internal_has_specified() const {
  return enum_kind_case() == kSpecified;
}
inline void Expression_Enum::set_has_specified() {
  _oneof_case_[0] = kSpecified;
}
inline void Expression_Enum::clear_specified() {
  if (_internal_has_specified()) {
    enum_kind_.specified_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_enum_kind();
  }
}
inline const std::string& Expression_Enum::specified() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Enum.specified)
  return _internal_specified();
}
inline void Expression_Enum::set_specified(const std::string& value) {
  _internal_set_specified(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Enum.specified)
}
inline std::string* Expression_Enum::mutable_specified() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Enum.specified)
  return _internal_mutable_specified();
}
inline const std::string& Expression_Enum::_internal_specified() const {
  if (_internal_has_specified()) {
    return enum_kind_.specified_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Enum::_internal_set_specified(const std::string& value) {
  if (!_internal_has_specified()) {
    clear_enum_kind();
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  enum_kind_.specified_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Enum::set_specified(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Enum.specified)
  if (!_internal_has_specified()) {
    clear_enum_kind();
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  enum_kind_.specified_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Enum.specified)
}
inline void Expression_Enum::set_specified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_specified()) {
    clear_enum_kind();
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  enum_kind_.specified_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Enum.specified)
}
inline void Expression_Enum::set_specified(const char* value,
                             size_t size) {
  if (!_internal_has_specified()) {
    clear_enum_kind();
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  enum_kind_.specified_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Enum.specified)
}
inline std::string* Expression_Enum::_internal_mutable_specified() {
  if (!_internal_has_specified()) {
    clear_enum_kind();
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return enum_kind_.specified_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Enum::release_specified() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Enum.specified)
  if (_internal_has_specified()) {
    clear_has_enum_kind();
    return enum_kind_.specified_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Enum::set_allocated_specified(std::string* specified) {
  if (has_enum_kind()) {
    clear_enum_kind();
  }
  if (specified != nullptr) {
    set_has_specified();
    enum_kind_.specified_.UnsafeSetDefault(specified);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Enum.specified)
}
inline std::string* Expression_Enum::unsafe_arena_release_specified() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Enum.specified)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_specified()) {
    clear_has_enum_kind();
    return enum_kind_.specified_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Enum::unsafe_arena_set_allocated_specified(std::string* specified) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_specified()) {
    enum_kind_.specified_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_enum_kind();
  if (specified) {
    set_has_specified();
    enum_kind_.specified_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specified, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Enum.specified)
}

// .substrait.proto.Expression.Enum.Empty unspecified = 2;
inline bool Expression_Enum::_internal_has_unspecified() const {
  return enum_kind_case() == kUnspecified;
}
inline bool Expression_Enum::has_unspecified() const {
  return _internal_has_unspecified();
}
inline void Expression_Enum::set_has_unspecified() {
  _oneof_case_[0] = kUnspecified;
}
inline void Expression_Enum::clear_unspecified() {
  if (_internal_has_unspecified()) {
    if (GetArena() == nullptr) {
      delete enum_kind_.unspecified_;
    }
    clear_has_enum_kind();
  }
}
inline ::substrait::proto::Expression_Enum_Empty* Expression_Enum::release_unspecified() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Enum.unspecified)
  if (_internal_has_unspecified()) {
    clear_has_enum_kind();
      ::substrait::proto::Expression_Enum_Empty* temp = enum_kind_.unspecified_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    enum_kind_.unspecified_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Enum_Empty& Expression_Enum::_internal_unspecified() const {
  return _internal_has_unspecified()
      ? *enum_kind_.unspecified_
      : *reinterpret_cast< ::substrait::proto::Expression_Enum_Empty*>(&::substrait::proto::_Expression_Enum_Empty_default_instance_);
}
inline const ::substrait::proto::Expression_Enum_Empty& Expression_Enum::unspecified() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Enum.unspecified)
  return _internal_unspecified();
}
inline ::substrait::proto::Expression_Enum_Empty* Expression_Enum::unsafe_arena_release_unspecified() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Enum.unspecified)
  if (_internal_has_unspecified()) {
    clear_has_enum_kind();
    ::substrait::proto::Expression_Enum_Empty* temp = enum_kind_.unspecified_;
    enum_kind_.unspecified_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Enum::unsafe_arena_set_allocated_unspecified(::substrait::proto::Expression_Enum_Empty* unspecified) {
  clear_enum_kind();
  if (unspecified) {
    set_has_unspecified();
    enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Enum.unspecified)
}
inline ::substrait::proto::Expression_Enum_Empty* Expression_Enum::_internal_mutable_unspecified() {
  if (!_internal_has_unspecified()) {
    clear_enum_kind();
    set_has_unspecified();
    enum_kind_.unspecified_ = CreateMaybeMessage< ::substrait::proto::Expression_Enum_Empty >(GetArena());
  }
  return enum_kind_.unspecified_;
}
inline ::substrait::proto::Expression_Enum_Empty* Expression_Enum::mutable_unspecified() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Enum.unspecified)
  return _internal_mutable_unspecified();
}

inline bool Expression_Enum::has_enum_kind() const {
  return enum_kind_case() != ENUM_KIND_NOT_SET;
}
inline void Expression_Enum::clear_has_enum_kind() {
  _oneof_case_[0] = ENUM_KIND_NOT_SET;
}
inline Expression_Enum::EnumKindCase Expression_Enum::enum_kind_case() const {
  return Expression_Enum::EnumKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_Literal_VarChar

// string value = 1;
inline void Expression_Literal_VarChar::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_Literal_VarChar::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.VarChar.value)
  return _internal_value();
}
inline void Expression_Literal_VarChar::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.VarChar.value)
}
inline std::string* Expression_Literal_VarChar::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.VarChar.value)
  return _internal_mutable_value();
}
inline const std::string& Expression_Literal_VarChar::_internal_value() const {
  return value_.Get();
}
inline void Expression_Literal_VarChar::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal_VarChar::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.VarChar.value)
}
inline void Expression_Literal_VarChar::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.VarChar.value)
}
inline void Expression_Literal_VarChar::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.VarChar.value)
}
inline std::string* Expression_Literal_VarChar::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal_VarChar::release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.VarChar.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_Literal_VarChar::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.VarChar.value)
}
inline std::string* Expression_Literal_VarChar::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.VarChar.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_Literal_VarChar::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.VarChar.value)
}

// uint32 length = 2;
inline void Expression_Literal_VarChar::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal_VarChar::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal_VarChar::length() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.VarChar.length)
  return _internal_length();
}
inline void Expression_Literal_VarChar::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void Expression_Literal_VarChar::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.VarChar.length)
}

// -------------------------------------------------------------------

// Expression_Literal_Decimal

// bytes value = 1;
inline void Expression_Literal_Decimal::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_Literal_Decimal::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Decimal.value)
  return _internal_value();
}
inline void Expression_Literal_Decimal::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.Decimal.value)
}
inline std::string* Expression_Literal_Decimal::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.Decimal.value)
  return _internal_mutable_value();
}
inline const std::string& Expression_Literal_Decimal::_internal_value() const {
  return value_.Get();
}
inline void Expression_Literal_Decimal::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal_Decimal::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.Decimal.value)
}
inline void Expression_Literal_Decimal::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.Decimal.value)
}
inline void Expression_Literal_Decimal::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.Decimal.value)
}
inline std::string* Expression_Literal_Decimal::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal_Decimal::release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.Decimal.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_Literal_Decimal::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.Decimal.value)
}
inline std::string* Expression_Literal_Decimal::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.Decimal.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_Literal_Decimal::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.Decimal.value)
}

// int32 precision = 2;
inline void Expression_Literal_Decimal::clear_precision() {
  precision_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_Decimal::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_Decimal::precision() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Decimal.precision)
  return _internal_precision();
}
inline void Expression_Literal_Decimal::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  precision_ = value;
}
inline void Expression_Literal_Decimal::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.Decimal.precision)
}

// int32 scale = 3;
inline void Expression_Literal_Decimal::clear_scale() {
  scale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_Decimal::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_Decimal::scale() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Decimal.scale)
  return _internal_scale();
}
inline void Expression_Literal_Decimal::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale_ = value;
}
inline void Expression_Literal_Decimal::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.Decimal.scale)
}

// -------------------------------------------------------------------

// Expression_Literal_Map_KeyValue

// .substrait.proto.Expression.Literal key = 1;
inline bool Expression_Literal_Map_KeyValue::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool Expression_Literal_Map_KeyValue::has_key() const {
  return _internal_has_key();
}
inline void Expression_Literal_Map_KeyValue::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Map_KeyValue::_internal_key() const {
  const ::substrait::proto::Expression_Literal* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_Literal*>(
      &::substrait::proto::_Expression_Literal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Map_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Map.KeyValue.key)
  return _internal_key();
}
inline void Expression_Literal_Map_KeyValue::unsafe_arena_set_allocated_key(
    ::substrait::proto::Expression_Literal* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.Map.KeyValue.key)
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.Map.KeyValue.key)
  
  ::substrait::proto::Expression_Literal* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_Literal>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.Map.KeyValue.key)
  return _internal_mutable_key();
}
inline void Expression_Literal_Map_KeyValue::set_allocated_key(::substrait::proto::Expression_Literal* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.Map.KeyValue.key)
}

// .substrait.proto.Expression.Literal value = 2;
inline bool Expression_Literal_Map_KeyValue::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Expression_Literal_Map_KeyValue::has_value() const {
  return _internal_has_value();
}
inline void Expression_Literal_Map_KeyValue::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Map_KeyValue::_internal_value() const {
  const ::substrait::proto::Expression_Literal* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_Literal*>(
      &::substrait::proto::_Expression_Literal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Map_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Map.KeyValue.value)
  return _internal_value();
}
inline void Expression_Literal_Map_KeyValue::unsafe_arena_set_allocated_value(
    ::substrait::proto::Expression_Literal* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.Map.KeyValue.value)
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.Map.KeyValue.value)
  
  ::substrait::proto::Expression_Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_Literal>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Map_KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.Map.KeyValue.value)
  return _internal_mutable_value();
}
inline void Expression_Literal_Map_KeyValue::set_allocated_value(::substrait::proto::Expression_Literal* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.Map.KeyValue.value)
}

// -------------------------------------------------------------------

// Expression_Literal_Map

// repeated .substrait.proto.Expression.Literal.Map.KeyValue key_values = 1;
inline int Expression_Literal_Map::_internal_key_values_size() const {
  return key_values_.size();
}
inline int Expression_Literal_Map::key_values_size() const {
  return _internal_key_values_size();
}
inline void Expression_Literal_Map::clear_key_values() {
  key_values_.Clear();
}
inline ::substrait::proto::Expression_Literal_Map_KeyValue* Expression_Literal_Map::mutable_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.Map.key_values)
  return key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Map_KeyValue >*
Expression_Literal_Map::mutable_key_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Literal.Map.key_values)
  return &key_values_;
}
inline const ::substrait::proto::Expression_Literal_Map_KeyValue& Expression_Literal_Map::_internal_key_values(int index) const {
  return key_values_.Get(index);
}
inline const ::substrait::proto::Expression_Literal_Map_KeyValue& Expression_Literal_Map::key_values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Map.key_values)
  return _internal_key_values(index);
}
inline ::substrait::proto::Expression_Literal_Map_KeyValue* Expression_Literal_Map::_internal_add_key_values() {
  return key_values_.Add();
}
inline ::substrait::proto::Expression_Literal_Map_KeyValue* Expression_Literal_Map::add_key_values() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Literal.Map.key_values)
  return _internal_add_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal_Map_KeyValue >&
Expression_Literal_Map::key_values() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Literal.Map.key_values)
  return key_values_;
}

// -------------------------------------------------------------------

// Expression_Literal_IntervalYearToMonth

// int32 years = 1;
inline void Expression_Literal_IntervalYearToMonth::clear_years() {
  years_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalYearToMonth::_internal_years() const {
  return years_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalYearToMonth::years() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.IntervalYearToMonth.years)
  return _internal_years();
}
inline void Expression_Literal_IntervalYearToMonth::_internal_set_years(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  years_ = value;
}
inline void Expression_Literal_IntervalYearToMonth::set_years(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_years(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.IntervalYearToMonth.years)
}

// int32 months = 2;
inline void Expression_Literal_IntervalYearToMonth::clear_months() {
  months_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalYearToMonth::_internal_months() const {
  return months_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalYearToMonth::months() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.IntervalYearToMonth.months)
  return _internal_months();
}
inline void Expression_Literal_IntervalYearToMonth::_internal_set_months(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  months_ = value;
}
inline void Expression_Literal_IntervalYearToMonth::set_months(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_months(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.IntervalYearToMonth.months)
}

// -------------------------------------------------------------------

// Expression_Literal_IntervalDayToSecond

// int32 days = 1;
inline void Expression_Literal_IntervalDayToSecond::clear_days() {
  days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::days() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.IntervalDayToSecond.days)
  return _internal_days();
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_ = value;
}
inline void Expression_Literal_IntervalDayToSecond::set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.IntervalDayToSecond.days)
}

// int32 seconds = 2;
inline void Expression_Literal_IntervalDayToSecond::clear_seconds() {
  seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::seconds() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.IntervalDayToSecond.seconds)
  return _internal_seconds();
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seconds_ = value;
}
inline void Expression_Literal_IntervalDayToSecond::set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.IntervalDayToSecond.seconds)
}

// int32 microseconds = 3;
inline void Expression_Literal_IntervalDayToSecond::clear_microseconds() {
  microseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::_internal_microseconds() const {
  return microseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal_IntervalDayToSecond::microseconds() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.IntervalDayToSecond.microseconds)
  return _internal_microseconds();
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_microseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  microseconds_ = value;
}
inline void Expression_Literal_IntervalDayToSecond::set_microseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.IntervalDayToSecond.microseconds)
}

// -------------------------------------------------------------------

// Expression_Literal_Struct

// repeated .substrait.proto.Expression.Literal fields = 1;
inline int Expression_Literal_Struct::_internal_fields_size() const {
  return fields_.size();
}
inline int Expression_Literal_Struct::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_Literal_Struct::clear_fields() {
  fields_.Clear();
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Struct::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.Struct.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >*
Expression_Literal_Struct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Literal.Struct.fields)
  return &fields_;
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Struct::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_Struct::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.Struct.fields)
  return _internal_fields(index);
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Struct::_internal_add_fields() {
  return fields_.Add();
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_Struct::add_fields() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Literal.Struct.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >&
Expression_Literal_Struct::fields() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Literal.Struct.fields)
  return fields_;
}

// -------------------------------------------------------------------

// Expression_Literal_List

// repeated .substrait.proto.Expression.Literal values = 1;
inline int Expression_Literal_List::_internal_values_size() const {
  return values_.size();
}
inline int Expression_Literal_List::values_size() const {
  return _internal_values_size();
}
inline void Expression_Literal_List::clear_values() {
  values_.Clear();
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_List::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.List.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >*
Expression_Literal_List::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Literal.List.values)
  return &values_;
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_List::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::substrait::proto::Expression_Literal& Expression_Literal_List::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.List.values)
  return _internal_values(index);
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_List::_internal_add_values() {
  return values_.Add();
}
inline ::substrait::proto::Expression_Literal* Expression_Literal_List::add_values() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Literal.List.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Literal >&
Expression_Literal_List::values() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Literal.List.values)
  return values_;
}

// -------------------------------------------------------------------

// Expression_Literal_UserDefined

// uint32 type_reference = 1;
inline void Expression_Literal_UserDefined::clear_type_reference() {
  type_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal_UserDefined::_internal_type_reference() const {
  return type_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal_UserDefined::type_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.UserDefined.type_reference)
  return _internal_type_reference();
}
inline void Expression_Literal_UserDefined::_internal_set_type_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_reference_ = value;
}
inline void Expression_Literal_UserDefined::set_type_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.UserDefined.type_reference)
}

// repeated .substrait.proto.Type.Parameter type_parameters = 3;
inline int Expression_Literal_UserDefined::_internal_type_parameters_size() const {
  return type_parameters_.size();
}
inline int Expression_Literal_UserDefined::type_parameters_size() const {
  return _internal_type_parameters_size();
}
inline ::substrait::proto::Type_Parameter* Expression_Literal_UserDefined::mutable_type_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.UserDefined.type_parameters)
  return type_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Type_Parameter >*
Expression_Literal_UserDefined::mutable_type_parameters() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Literal.UserDefined.type_parameters)
  return &type_parameters_;
}
inline const ::substrait::proto::Type_Parameter& Expression_Literal_UserDefined::_internal_type_parameters(int index) const {
  return type_parameters_.Get(index);
}
inline const ::substrait::proto::Type_Parameter& Expression_Literal_UserDefined::type_parameters(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.UserDefined.type_parameters)
  return _internal_type_parameters(index);
}
inline ::substrait::proto::Type_Parameter* Expression_Literal_UserDefined::_internal_add_type_parameters() {
  return type_parameters_.Add();
}
inline ::substrait::proto::Type_Parameter* Expression_Literal_UserDefined::add_type_parameters() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Literal.UserDefined.type_parameters)
  return _internal_add_type_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Type_Parameter >&
Expression_Literal_UserDefined::type_parameters() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Literal.UserDefined.type_parameters)
  return type_parameters_;
}

// .google.protobuf.Any value = 2;
inline bool Expression_Literal_UserDefined::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Expression_Literal_UserDefined::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Expression_Literal_UserDefined::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Expression_Literal_UserDefined::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.UserDefined.value)
  return _internal_value();
}
inline void Expression_Literal_UserDefined::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::Any* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.UserDefined.value)
}
inline PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.UserDefined.value)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.UserDefined.value)
  return _internal_mutable_value();
}
inline void Expression_Literal_UserDefined::set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.UserDefined.value)
}

// -------------------------------------------------------------------

// Expression_Literal

// bool boolean = 1;
inline bool Expression_Literal::_internal_has_boolean() const {
  return literal_type_case() == kBoolean;
}
inline void Expression_Literal::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Expression_Literal::clear_boolean() {
  if (_internal_has_boolean()) {
    literal_type_.boolean_ = false;
    clear_has_literal_type();
  }
}
inline bool Expression_Literal::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return literal_type_.boolean_;
  }
  return false;
}
inline void Expression_Literal::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_literal_type();
    set_has_boolean();
  }
  literal_type_.boolean_ = value;
}
inline bool Expression_Literal::boolean() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.boolean)
  return _internal_boolean();
}
inline void Expression_Literal::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.boolean)
}

// int32 i8 = 2;
inline bool Expression_Literal::_internal_has_i8() const {
  return literal_type_case() == kI8;
}
inline void Expression_Literal::set_has_i8() {
  _oneof_case_[0] = kI8;
}
inline void Expression_Literal::clear_i8() {
  if (_internal_has_i8()) {
    literal_type_.i8_ = 0;
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::_internal_i8() const {
  if (_internal_has_i8()) {
    return literal_type_.i8_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_i8()) {
    clear_literal_type();
    set_has_i8();
  }
  literal_type_.i8_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::i8() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.i8)
  return _internal_i8();
}
inline void Expression_Literal::set_i8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i8(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.i8)
}

// int32 i16 = 3;
inline bool Expression_Literal::_internal_has_i16() const {
  return literal_type_case() == kI16;
}
inline void Expression_Literal::set_has_i16() {
  _oneof_case_[0] = kI16;
}
inline void Expression_Literal::clear_i16() {
  if (_internal_has_i16()) {
    literal_type_.i16_ = 0;
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::_internal_i16() const {
  if (_internal_has_i16()) {
    return literal_type_.i16_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_i16()) {
    clear_literal_type();
    set_has_i16();
  }
  literal_type_.i16_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::i16() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.i16)
  return _internal_i16();
}
inline void Expression_Literal::set_i16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i16(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.i16)
}

// int32 i32 = 5;
inline bool Expression_Literal::_internal_has_i32() const {
  return literal_type_case() == kI32;
}
inline void Expression_Literal::set_has_i32() {
  _oneof_case_[0] = kI32;
}
inline void Expression_Literal::clear_i32() {
  if (_internal_has_i32()) {
    literal_type_.i32_ = 0;
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::_internal_i32() const {
  if (_internal_has_i32()) {
    return literal_type_.i32_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_i32()) {
    clear_literal_type();
    set_has_i32();
  }
  literal_type_.i32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::i32() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.i32)
  return _internal_i32();
}
inline void Expression_Literal::set_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.i32)
}

// int64 i64 = 7;
inline bool Expression_Literal::_internal_has_i64() const {
  return literal_type_case() == kI64;
}
inline void Expression_Literal::set_has_i64() {
  _oneof_case_[0] = kI64;
}
inline void Expression_Literal::clear_i64() {
  if (_internal_has_i64()) {
    literal_type_.i64_ = PROTOBUF_LONGLONG(0);
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::_internal_i64() const {
  if (_internal_has_i64()) {
    return literal_type_.i64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Expression_Literal::_internal_set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i64()) {
    clear_literal_type();
    set_has_i64();
  }
  literal_type_.i64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::i64() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.i64)
  return _internal_i64();
}
inline void Expression_Literal::set_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.i64)
}

// float fp32 = 10;
inline bool Expression_Literal::_internal_has_fp32() const {
  return literal_type_case() == kFp32;
}
inline void Expression_Literal::set_has_fp32() {
  _oneof_case_[0] = kFp32;
}
inline void Expression_Literal::clear_fp32() {
  if (_internal_has_fp32()) {
    literal_type_.fp32_ = 0;
    clear_has_literal_type();
  }
}
inline float Expression_Literal::_internal_fp32() const {
  if (_internal_has_fp32()) {
    return literal_type_.fp32_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_fp32(float value) {
  if (!_internal_has_fp32()) {
    clear_literal_type();
    set_has_fp32();
  }
  literal_type_.fp32_ = value;
}
inline float Expression_Literal::fp32() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.fp32)
  return _internal_fp32();
}
inline void Expression_Literal::set_fp32(float value) {
  _internal_set_fp32(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fp32)
}

// double fp64 = 11;
inline bool Expression_Literal::_internal_has_fp64() const {
  return literal_type_case() == kFp64;
}
inline void Expression_Literal::set_has_fp64() {
  _oneof_case_[0] = kFp64;
}
inline void Expression_Literal::clear_fp64() {
  if (_internal_has_fp64()) {
    literal_type_.fp64_ = 0;
    clear_has_literal_type();
  }
}
inline double Expression_Literal::_internal_fp64() const {
  if (_internal_has_fp64()) {
    return literal_type_.fp64_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_fp64(double value) {
  if (!_internal_has_fp64()) {
    clear_literal_type();
    set_has_fp64();
  }
  literal_type_.fp64_ = value;
}
inline double Expression_Literal::fp64() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.fp64)
  return _internal_fp64();
}
inline void Expression_Literal::set_fp64(double value) {
  _internal_set_fp64(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fp64)
}

// string string = 12;
inline bool Expression_Literal::_internal_has_string() const {
  return literal_type_case() == kString;
}
inline void Expression_Literal::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Expression_Literal::clear_string() {
  if (_internal_has_string()) {
    literal_type_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::string() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.string)
  return _internal_string();
}
inline void Expression_Literal::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.string)
}
inline std::string* Expression_Literal::mutable_string() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.string)
  return _internal_mutable_string();
}
inline const std::string& Expression_Literal::_internal_string() const {
  if (_internal_has_string()) {
    return literal_type_.string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Literal::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_literal_type();
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.string)
  if (!_internal_has_string()) {
    clear_literal_type();
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.string)
}
inline void Expression_Literal::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_literal_type();
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.string)
}
inline void Expression_Literal::set_string(const char* value,
                             size_t size) {
  if (!_internal_has_string()) {
    clear_literal_type();
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.string)
}
inline std::string* Expression_Literal::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_literal_type();
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return literal_type_.string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal::release_string() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.string)
  if (_internal_has_string()) {
    clear_has_literal_type();
    return literal_type_.string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::set_allocated_string(std::string* string) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (string != nullptr) {
    set_has_string();
    literal_type_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.string)
}
inline std::string* Expression_Literal::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string()) {
    clear_has_literal_type();
    return literal_type_.string_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_string(std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string()) {
    literal_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_literal_type();
  if (string) {
    set_has_string();
    literal_type_.string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.string)
}

// bytes binary = 13;
inline bool Expression_Literal::_internal_has_binary() const {
  return literal_type_case() == kBinary;
}
inline void Expression_Literal::set_has_binary() {
  _oneof_case_[0] = kBinary;
}
inline void Expression_Literal::clear_binary() {
  if (_internal_has_binary()) {
    literal_type_.binary_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::binary() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.binary)
  return _internal_binary();
}
inline void Expression_Literal::set_binary(const std::string& value) {
  _internal_set_binary(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.binary)
}
inline std::string* Expression_Literal::mutable_binary() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.binary)
  return _internal_mutable_binary();
}
inline const std::string& Expression_Literal::_internal_binary() const {
  if (_internal_has_binary()) {
    return literal_type_.binary_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Literal::_internal_set_binary(const std::string& value) {
  if (!_internal_has_binary()) {
    clear_literal_type();
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal::set_binary(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.binary)
  if (!_internal_has_binary()) {
    clear_literal_type();
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.binary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.binary)
}
inline void Expression_Literal::set_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_binary()) {
    clear_literal_type();
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.binary)
}
inline void Expression_Literal::set_binary(const void* value,
                             size_t size) {
  if (!_internal_has_binary()) {
    clear_literal_type();
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.binary_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.binary)
}
inline std::string* Expression_Literal::_internal_mutable_binary() {
  if (!_internal_has_binary()) {
    clear_literal_type();
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return literal_type_.binary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal::release_binary() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.binary)
  if (_internal_has_binary()) {
    clear_has_literal_type();
    return literal_type_.binary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::set_allocated_binary(std::string* binary) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (binary != nullptr) {
    set_has_binary();
    literal_type_.binary_.UnsafeSetDefault(binary);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.binary)
}
inline std::string* Expression_Literal::unsafe_arena_release_binary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.binary)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_binary()) {
    clear_has_literal_type();
    return literal_type_.binary_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_binary(std::string* binary) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_binary()) {
    literal_type_.binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_literal_type();
  if (binary) {
    set_has_binary();
    literal_type_.binary_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.binary)
}

// int64 timestamp = 14;
inline bool Expression_Literal::_internal_has_timestamp() const {
  return literal_type_case() == kTimestamp;
}
inline void Expression_Literal::set_has_timestamp() {
  _oneof_case_[0] = kTimestamp;
}
inline void Expression_Literal::clear_timestamp() {
  if (_internal_has_timestamp()) {
    literal_type_.timestamp_ = PROTOBUF_LONGLONG(0);
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::_internal_timestamp() const {
  if (_internal_has_timestamp()) {
    return literal_type_.timestamp_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Expression_Literal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_timestamp()) {
    clear_literal_type();
    set_has_timestamp();
  }
  literal_type_.timestamp_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::timestamp() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.timestamp)
  return _internal_timestamp();
}
inline void Expression_Literal::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.timestamp)
}

// int32 date = 16;
inline bool Expression_Literal::_internal_has_date() const {
  return literal_type_case() == kDate;
}
inline void Expression_Literal::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline void Expression_Literal::clear_date() {
  if (_internal_has_date()) {
    literal_type_.date_ = 0;
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::_internal_date() const {
  if (_internal_has_date()) {
    return literal_type_.date_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_date()) {
    clear_literal_type();
    set_has_date();
  }
  literal_type_.date_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_Literal::date() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.date)
  return _internal_date();
}
inline void Expression_Literal::set_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.date)
}

// int64 time = 17;
inline bool Expression_Literal::_internal_has_time() const {
  return literal_type_case() == kTime;
}
inline void Expression_Literal::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline void Expression_Literal::clear_time() {
  if (_internal_has_time()) {
    literal_type_.time_ = PROTOBUF_LONGLONG(0);
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::_internal_time() const {
  if (_internal_has_time()) {
    return literal_type_.time_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Expression_Literal::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_time()) {
    clear_literal_type();
    set_has_time();
  }
  literal_type_.time_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::time() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.time)
  return _internal_time();
}
inline void Expression_Literal::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.time)
}

// .substrait.proto.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
inline bool Expression_Literal::_internal_has_interval_year_to_month() const {
  return literal_type_case() == kIntervalYearToMonth;
}
inline bool Expression_Literal::has_interval_year_to_month() const {
  return _internal_has_interval_year_to_month();
}
inline void Expression_Literal::set_has_interval_year_to_month() {
  _oneof_case_[0] = kIntervalYearToMonth;
}
inline void Expression_Literal::clear_interval_year_to_month() {
  if (_internal_has_interval_year_to_month()) {
    if (GetArena() == nullptr) {
      delete literal_type_.interval_year_to_month_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_IntervalYearToMonth* Expression_Literal::release_interval_year_to_month() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.interval_year_to_month)
  if (_internal_has_interval_year_to_month()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_IntervalYearToMonth* temp = literal_type_.interval_year_to_month_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.interval_year_to_month_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_IntervalYearToMonth& Expression_Literal::_internal_interval_year_to_month() const {
  return _internal_has_interval_year_to_month()
      ? *literal_type_.interval_year_to_month_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_IntervalYearToMonth*>(&::substrait::proto::_Expression_Literal_IntervalYearToMonth_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_IntervalYearToMonth& Expression_Literal::interval_year_to_month() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.interval_year_to_month)
  return _internal_interval_year_to_month();
}
inline ::substrait::proto::Expression_Literal_IntervalYearToMonth* Expression_Literal::unsafe_arena_release_interval_year_to_month() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.interval_year_to_month)
  if (_internal_has_interval_year_to_month()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_IntervalYearToMonth* temp = literal_type_.interval_year_to_month_;
    literal_type_.interval_year_to_month_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_interval_year_to_month(::substrait::proto::Expression_Literal_IntervalYearToMonth* interval_year_to_month) {
  clear_literal_type();
  if (interval_year_to_month) {
    set_has_interval_year_to_month();
    literal_type_.interval_year_to_month_ = interval_year_to_month;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.interval_year_to_month)
}
inline ::substrait::proto::Expression_Literal_IntervalYearToMonth* Expression_Literal::_internal_mutable_interval_year_to_month() {
  if (!_internal_has_interval_year_to_month()) {
    clear_literal_type();
    set_has_interval_year_to_month();
    literal_type_.interval_year_to_month_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_IntervalYearToMonth >(GetArena());
  }
  return literal_type_.interval_year_to_month_;
}
inline ::substrait::proto::Expression_Literal_IntervalYearToMonth* Expression_Literal::mutable_interval_year_to_month() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.interval_year_to_month)
  return _internal_mutable_interval_year_to_month();
}

// .substrait.proto.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
inline bool Expression_Literal::_internal_has_interval_day_to_second() const {
  return literal_type_case() == kIntervalDayToSecond;
}
inline bool Expression_Literal::has_interval_day_to_second() const {
  return _internal_has_interval_day_to_second();
}
inline void Expression_Literal::set_has_interval_day_to_second() {
  _oneof_case_[0] = kIntervalDayToSecond;
}
inline void Expression_Literal::clear_interval_day_to_second() {
  if (_internal_has_interval_day_to_second()) {
    if (GetArena() == nullptr) {
      delete literal_type_.interval_day_to_second_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_IntervalDayToSecond* Expression_Literal::release_interval_day_to_second() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.interval_day_to_second)
  if (_internal_has_interval_day_to_second()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_IntervalDayToSecond* temp = literal_type_.interval_day_to_second_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.interval_day_to_second_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_IntervalDayToSecond& Expression_Literal::_internal_interval_day_to_second() const {
  return _internal_has_interval_day_to_second()
      ? *literal_type_.interval_day_to_second_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_IntervalDayToSecond*>(&::substrait::proto::_Expression_Literal_IntervalDayToSecond_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_IntervalDayToSecond& Expression_Literal::interval_day_to_second() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.interval_day_to_second)
  return _internal_interval_day_to_second();
}
inline ::substrait::proto::Expression_Literal_IntervalDayToSecond* Expression_Literal::unsafe_arena_release_interval_day_to_second() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.interval_day_to_second)
  if (_internal_has_interval_day_to_second()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_IntervalDayToSecond* temp = literal_type_.interval_day_to_second_;
    literal_type_.interval_day_to_second_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_interval_day_to_second(::substrait::proto::Expression_Literal_IntervalDayToSecond* interval_day_to_second) {
  clear_literal_type();
  if (interval_day_to_second) {
    set_has_interval_day_to_second();
    literal_type_.interval_day_to_second_ = interval_day_to_second;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.interval_day_to_second)
}
inline ::substrait::proto::Expression_Literal_IntervalDayToSecond* Expression_Literal::_internal_mutable_interval_day_to_second() {
  if (!_internal_has_interval_day_to_second()) {
    clear_literal_type();
    set_has_interval_day_to_second();
    literal_type_.interval_day_to_second_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_IntervalDayToSecond >(GetArena());
  }
  return literal_type_.interval_day_to_second_;
}
inline ::substrait::proto::Expression_Literal_IntervalDayToSecond* Expression_Literal::mutable_interval_day_to_second() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.interval_day_to_second)
  return _internal_mutable_interval_day_to_second();
}

// string fixed_char = 21;
inline bool Expression_Literal::_internal_has_fixed_char() const {
  return literal_type_case() == kFixedChar;
}
inline void Expression_Literal::set_has_fixed_char() {
  _oneof_case_[0] = kFixedChar;
}
inline void Expression_Literal::clear_fixed_char() {
  if (_internal_has_fixed_char()) {
    literal_type_.fixed_char_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::fixed_char() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.fixed_char)
  return _internal_fixed_char();
}
inline void Expression_Literal::set_fixed_char(const std::string& value) {
  _internal_set_fixed_char(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fixed_char)
}
inline std::string* Expression_Literal::mutable_fixed_char() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.fixed_char)
  return _internal_mutable_fixed_char();
}
inline const std::string& Expression_Literal::_internal_fixed_char() const {
  if (_internal_has_fixed_char()) {
    return literal_type_.fixed_char_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Literal::_internal_set_fixed_char(const std::string& value) {
  if (!_internal_has_fixed_char()) {
    clear_literal_type();
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_char_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal::set_fixed_char(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fixed_char)
  if (!_internal_has_fixed_char()) {
    clear_literal_type();
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_char_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.fixed_char)
}
inline void Expression_Literal::set_fixed_char(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_fixed_char()) {
    clear_literal_type();
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_char_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.fixed_char)
}
inline void Expression_Literal::set_fixed_char(const char* value,
                             size_t size) {
  if (!_internal_has_fixed_char()) {
    clear_literal_type();
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_char_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.fixed_char)
}
inline std::string* Expression_Literal::_internal_mutable_fixed_char() {
  if (!_internal_has_fixed_char()) {
    clear_literal_type();
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return literal_type_.fixed_char_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal::release_fixed_char() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.fixed_char)
  if (_internal_has_fixed_char()) {
    clear_has_literal_type();
    return literal_type_.fixed_char_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::set_allocated_fixed_char(std::string* fixed_char) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (fixed_char != nullptr) {
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeSetDefault(fixed_char);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.fixed_char)
}
inline std::string* Expression_Literal::unsafe_arena_release_fixed_char() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.fixed_char)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_fixed_char()) {
    clear_has_literal_type();
    return literal_type_.fixed_char_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_fixed_char(std::string* fixed_char) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_fixed_char()) {
    literal_type_.fixed_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_literal_type();
  if (fixed_char) {
    set_has_fixed_char();
    literal_type_.fixed_char_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixed_char, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.fixed_char)
}

// .substrait.proto.Expression.Literal.VarChar var_char = 22;
inline bool Expression_Literal::_internal_has_var_char() const {
  return literal_type_case() == kVarChar;
}
inline bool Expression_Literal::has_var_char() const {
  return _internal_has_var_char();
}
inline void Expression_Literal::set_has_var_char() {
  _oneof_case_[0] = kVarChar;
}
inline void Expression_Literal::clear_var_char() {
  if (_internal_has_var_char()) {
    if (GetArena() == nullptr) {
      delete literal_type_.var_char_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_VarChar* Expression_Literal::release_var_char() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.var_char)
  if (_internal_has_var_char()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_VarChar* temp = literal_type_.var_char_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.var_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_VarChar& Expression_Literal::_internal_var_char() const {
  return _internal_has_var_char()
      ? *literal_type_.var_char_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_VarChar*>(&::substrait::proto::_Expression_Literal_VarChar_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_VarChar& Expression_Literal::var_char() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.var_char)
  return _internal_var_char();
}
inline ::substrait::proto::Expression_Literal_VarChar* Expression_Literal::unsafe_arena_release_var_char() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.var_char)
  if (_internal_has_var_char()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_VarChar* temp = literal_type_.var_char_;
    literal_type_.var_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_var_char(::substrait::proto::Expression_Literal_VarChar* var_char) {
  clear_literal_type();
  if (var_char) {
    set_has_var_char();
    literal_type_.var_char_ = var_char;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.var_char)
}
inline ::substrait::proto::Expression_Literal_VarChar* Expression_Literal::_internal_mutable_var_char() {
  if (!_internal_has_var_char()) {
    clear_literal_type();
    set_has_var_char();
    literal_type_.var_char_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_VarChar >(GetArena());
  }
  return literal_type_.var_char_;
}
inline ::substrait::proto::Expression_Literal_VarChar* Expression_Literal::mutable_var_char() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.var_char)
  return _internal_mutable_var_char();
}

// bytes fixed_binary = 23;
inline bool Expression_Literal::_internal_has_fixed_binary() const {
  return literal_type_case() == kFixedBinary;
}
inline void Expression_Literal::set_has_fixed_binary() {
  _oneof_case_[0] = kFixedBinary;
}
inline void Expression_Literal::clear_fixed_binary() {
  if (_internal_has_fixed_binary()) {
    literal_type_.fixed_binary_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::fixed_binary() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.fixed_binary)
  return _internal_fixed_binary();
}
inline void Expression_Literal::set_fixed_binary(const std::string& value) {
  _internal_set_fixed_binary(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fixed_binary)
}
inline std::string* Expression_Literal::mutable_fixed_binary() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.fixed_binary)
  return _internal_mutable_fixed_binary();
}
inline const std::string& Expression_Literal::_internal_fixed_binary() const {
  if (_internal_has_fixed_binary()) {
    return literal_type_.fixed_binary_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Literal::_internal_set_fixed_binary(const std::string& value) {
  if (!_internal_has_fixed_binary()) {
    clear_literal_type();
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal::set_fixed_binary(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.fixed_binary)
  if (!_internal_has_fixed_binary()) {
    clear_literal_type();
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_binary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.fixed_binary)
}
inline void Expression_Literal::set_fixed_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_fixed_binary()) {
    clear_literal_type();
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.fixed_binary)
}
inline void Expression_Literal::set_fixed_binary(const void* value,
                             size_t size) {
  if (!_internal_has_fixed_binary()) {
    clear_literal_type();
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.fixed_binary_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.fixed_binary)
}
inline std::string* Expression_Literal::_internal_mutable_fixed_binary() {
  if (!_internal_has_fixed_binary()) {
    clear_literal_type();
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return literal_type_.fixed_binary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal::release_fixed_binary() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.fixed_binary)
  if (_internal_has_fixed_binary()) {
    clear_has_literal_type();
    return literal_type_.fixed_binary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::set_allocated_fixed_binary(std::string* fixed_binary) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (fixed_binary != nullptr) {
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeSetDefault(fixed_binary);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.fixed_binary)
}
inline std::string* Expression_Literal::unsafe_arena_release_fixed_binary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.fixed_binary)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_fixed_binary()) {
    clear_has_literal_type();
    return literal_type_.fixed_binary_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_fixed_binary(std::string* fixed_binary) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_fixed_binary()) {
    literal_type_.fixed_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_literal_type();
  if (fixed_binary) {
    set_has_fixed_binary();
    literal_type_.fixed_binary_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixed_binary, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.fixed_binary)
}

// .substrait.proto.Expression.Literal.Decimal decimal = 24;
inline bool Expression_Literal::_internal_has_decimal() const {
  return literal_type_case() == kDecimal;
}
inline bool Expression_Literal::has_decimal() const {
  return _internal_has_decimal();
}
inline void Expression_Literal::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline void Expression_Literal::clear_decimal() {
  if (_internal_has_decimal()) {
    if (GetArena() == nullptr) {
      delete literal_type_.decimal_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_Decimal* Expression_Literal::release_decimal() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.decimal)
  if (_internal_has_decimal()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_Decimal* temp = literal_type_.decimal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.decimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_Decimal& Expression_Literal::_internal_decimal() const {
  return _internal_has_decimal()
      ? *literal_type_.decimal_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_Decimal*>(&::substrait::proto::_Expression_Literal_Decimal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_Decimal& Expression_Literal::decimal() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.decimal)
  return _internal_decimal();
}
inline ::substrait::proto::Expression_Literal_Decimal* Expression_Literal::unsafe_arena_release_decimal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.decimal)
  if (_internal_has_decimal()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_Decimal* temp = literal_type_.decimal_;
    literal_type_.decimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_decimal(::substrait::proto::Expression_Literal_Decimal* decimal) {
  clear_literal_type();
  if (decimal) {
    set_has_decimal();
    literal_type_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.decimal)
}
inline ::substrait::proto::Expression_Literal_Decimal* Expression_Literal::_internal_mutable_decimal() {
  if (!_internal_has_decimal()) {
    clear_literal_type();
    set_has_decimal();
    literal_type_.decimal_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_Decimal >(GetArena());
  }
  return literal_type_.decimal_;
}
inline ::substrait::proto::Expression_Literal_Decimal* Expression_Literal::mutable_decimal() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.decimal)
  return _internal_mutable_decimal();
}

// .substrait.proto.Expression.Literal.Struct struct = 25;
inline bool Expression_Literal::_internal_has_struct_() const {
  return literal_type_case() == kStruct;
}
inline bool Expression_Literal::has_struct_() const {
  return _internal_has_struct_();
}
inline void Expression_Literal::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void Expression_Literal::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArena() == nullptr) {
      delete literal_type_.struct__;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_Struct* Expression_Literal::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.struct)
  if (_internal_has_struct_()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_Struct* temp = literal_type_.struct__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_Struct& Expression_Literal::_internal_struct_() const {
  return _internal_has_struct_()
      ? *literal_type_.struct__
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_Struct*>(&::substrait::proto::_Expression_Literal_Struct_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_Struct& Expression_Literal::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.struct)
  return _internal_struct_();
}
inline ::substrait::proto::Expression_Literal_Struct* Expression_Literal::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.struct)
  if (_internal_has_struct_()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_Struct* temp = literal_type_.struct__;
    literal_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_struct_(::substrait::proto::Expression_Literal_Struct* struct_) {
  clear_literal_type();
  if (struct_) {
    set_has_struct_();
    literal_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.struct)
}
inline ::substrait::proto::Expression_Literal_Struct* Expression_Literal::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_literal_type();
    set_has_struct_();
    literal_type_.struct__ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_Struct >(GetArena());
  }
  return literal_type_.struct__;
}
inline ::substrait::proto::Expression_Literal_Struct* Expression_Literal::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.struct)
  return _internal_mutable_struct_();
}

// .substrait.proto.Expression.Literal.Map map = 26;
inline bool Expression_Literal::_internal_has_map() const {
  return literal_type_case() == kMap;
}
inline bool Expression_Literal::has_map() const {
  return _internal_has_map();
}
inline void Expression_Literal::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void Expression_Literal::clear_map() {
  if (_internal_has_map()) {
    if (GetArena() == nullptr) {
      delete literal_type_.map_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_Map* Expression_Literal::release_map() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.map)
  if (_internal_has_map()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_Map* temp = literal_type_.map_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_Map& Expression_Literal::_internal_map() const {
  return _internal_has_map()
      ? *literal_type_.map_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_Map*>(&::substrait::proto::_Expression_Literal_Map_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_Map& Expression_Literal::map() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.map)
  return _internal_map();
}
inline ::substrait::proto::Expression_Literal_Map* Expression_Literal::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.map)
  if (_internal_has_map()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_Map* temp = literal_type_.map_;
    literal_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_map(::substrait::proto::Expression_Literal_Map* map) {
  clear_literal_type();
  if (map) {
    set_has_map();
    literal_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.map)
}
inline ::substrait::proto::Expression_Literal_Map* Expression_Literal::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_literal_type();
    set_has_map();
    literal_type_.map_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_Map >(GetArena());
  }
  return literal_type_.map_;
}
inline ::substrait::proto::Expression_Literal_Map* Expression_Literal::mutable_map() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.map)
  return _internal_mutable_map();
}

// int64 timestamp_tz = 27;
inline bool Expression_Literal::_internal_has_timestamp_tz() const {
  return literal_type_case() == kTimestampTz;
}
inline void Expression_Literal::set_has_timestamp_tz() {
  _oneof_case_[0] = kTimestampTz;
}
inline void Expression_Literal::clear_timestamp_tz() {
  if (_internal_has_timestamp_tz()) {
    literal_type_.timestamp_tz_ = PROTOBUF_LONGLONG(0);
    clear_has_literal_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::_internal_timestamp_tz() const {
  if (_internal_has_timestamp_tz()) {
    return literal_type_.timestamp_tz_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Expression_Literal::_internal_set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_timestamp_tz()) {
    clear_literal_type();
    set_has_timestamp_tz();
  }
  literal_type_.timestamp_tz_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_Literal::timestamp_tz() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.timestamp_tz)
  return _internal_timestamp_tz();
}
inline void Expression_Literal::set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_tz(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.timestamp_tz)
}

// bytes uuid = 28;
inline bool Expression_Literal::_internal_has_uuid() const {
  return literal_type_case() == kUuid;
}
inline void Expression_Literal::set_has_uuid() {
  _oneof_case_[0] = kUuid;
}
inline void Expression_Literal::clear_uuid() {
  if (_internal_has_uuid()) {
    literal_type_.uuid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::uuid() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.uuid)
  return _internal_uuid();
}
inline void Expression_Literal::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.uuid)
}
inline std::string* Expression_Literal::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Expression_Literal::_internal_uuid() const {
  if (_internal_has_uuid()) {
    return literal_type_.uuid_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expression_Literal::_internal_set_uuid(const std::string& value) {
  if (!_internal_has_uuid()) {
    clear_literal_type();
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_Literal::set_uuid(std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.uuid)
  if (!_internal_has_uuid()) {
    clear_literal_type();
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.Literal.uuid)
}
inline void Expression_Literal::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uuid()) {
    clear_literal_type();
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.Literal.uuid)
}
inline void Expression_Literal::set_uuid(const void* value,
                             size_t size) {
  if (!_internal_has_uuid()) {
    clear_literal_type();
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  literal_type_.uuid_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.Literal.uuid)
}
inline std::string* Expression_Literal::_internal_mutable_uuid() {
  if (!_internal_has_uuid()) {
    clear_literal_type();
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return literal_type_.uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_Literal::release_uuid() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.uuid)
  if (_internal_has_uuid()) {
    clear_has_literal_type();
    return literal_type_.uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::set_allocated_uuid(std::string* uuid) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (uuid != nullptr) {
    set_has_uuid();
    literal_type_.uuid_.UnsafeSetDefault(uuid);
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Literal.uuid)
}
inline std::string* Expression_Literal::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_uuid()) {
    clear_has_literal_type();
    return literal_type_.uuid_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_uuid(std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_uuid()) {
    literal_type_.uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_literal_type();
  if (uuid) {
    set_has_uuid();
    literal_type_.uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.uuid)
}

// .substrait.proto.Type null = 29;
inline bool Expression_Literal::_internal_has_null() const {
  return literal_type_case() == kNull;
}
inline bool Expression_Literal::has_null() const {
  return _internal_has_null();
}
inline void Expression_Literal::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline ::substrait::proto::Type* Expression_Literal::release_null() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.null)
  if (_internal_has_null()) {
    clear_has_literal_type();
      ::substrait::proto::Type* temp = literal_type_.null_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Type& Expression_Literal::_internal_null() const {
  return _internal_has_null()
      ? *literal_type_.null_
      : *reinterpret_cast< ::substrait::proto::Type*>(&::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& Expression_Literal::null() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.null)
  return _internal_null();
}
inline ::substrait::proto::Type* Expression_Literal::unsafe_arena_release_null() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.null)
  if (_internal_has_null()) {
    clear_has_literal_type();
    ::substrait::proto::Type* temp = literal_type_.null_;
    literal_type_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_null(::substrait::proto::Type* null) {
  clear_literal_type();
  if (null) {
    set_has_null();
    literal_type_.null_ = null;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.null)
}
inline ::substrait::proto::Type* Expression_Literal::_internal_mutable_null() {
  if (!_internal_has_null()) {
    clear_literal_type();
    set_has_null();
    literal_type_.null_ = CreateMaybeMessage< ::substrait::proto::Type >(GetArena());
  }
  return literal_type_.null_;
}
inline ::substrait::proto::Type* Expression_Literal::mutable_null() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.null)
  return _internal_mutable_null();
}

// .substrait.proto.Expression.Literal.List list = 30;
inline bool Expression_Literal::_internal_has_list() const {
  return literal_type_case() == kList;
}
inline bool Expression_Literal::has_list() const {
  return _internal_has_list();
}
inline void Expression_Literal::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Expression_Literal::clear_list() {
  if (_internal_has_list()) {
    if (GetArena() == nullptr) {
      delete literal_type_.list_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_List* Expression_Literal::release_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.list)
  if (_internal_has_list()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_List* temp = literal_type_.list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_List& Expression_Literal::_internal_list() const {
  return _internal_has_list()
      ? *literal_type_.list_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_List*>(&::substrait::proto::_Expression_Literal_List_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_List& Expression_Literal::list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.list)
  return _internal_list();
}
inline ::substrait::proto::Expression_Literal_List* Expression_Literal::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.list)
  if (_internal_has_list()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_List* temp = literal_type_.list_;
    literal_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_list(::substrait::proto::Expression_Literal_List* list) {
  clear_literal_type();
  if (list) {
    set_has_list();
    literal_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.list)
}
inline ::substrait::proto::Expression_Literal_List* Expression_Literal::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_literal_type();
    set_has_list();
    literal_type_.list_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_List >(GetArena());
  }
  return literal_type_.list_;
}
inline ::substrait::proto::Expression_Literal_List* Expression_Literal::mutable_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.list)
  return _internal_mutable_list();
}

// .substrait.proto.Type.List empty_list = 31;
inline bool Expression_Literal::_internal_has_empty_list() const {
  return literal_type_case() == kEmptyList;
}
inline bool Expression_Literal::has_empty_list() const {
  return _internal_has_empty_list();
}
inline void Expression_Literal::set_has_empty_list() {
  _oneof_case_[0] = kEmptyList;
}
inline ::substrait::proto::Type_List* Expression_Literal::release_empty_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.empty_list)
  if (_internal_has_empty_list()) {
    clear_has_literal_type();
      ::substrait::proto::Type_List* temp = literal_type_.empty_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.empty_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Type_List& Expression_Literal::_internal_empty_list() const {
  return _internal_has_empty_list()
      ? *literal_type_.empty_list_
      : *reinterpret_cast< ::substrait::proto::Type_List*>(&::substrait::proto::_Type_List_default_instance_);
}
inline const ::substrait::proto::Type_List& Expression_Literal::empty_list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.empty_list)
  return _internal_empty_list();
}
inline ::substrait::proto::Type_List* Expression_Literal::unsafe_arena_release_empty_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.empty_list)
  if (_internal_has_empty_list()) {
    clear_has_literal_type();
    ::substrait::proto::Type_List* temp = literal_type_.empty_list_;
    literal_type_.empty_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_empty_list(::substrait::proto::Type_List* empty_list) {
  clear_literal_type();
  if (empty_list) {
    set_has_empty_list();
    literal_type_.empty_list_ = empty_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.empty_list)
}
inline ::substrait::proto::Type_List* Expression_Literal::_internal_mutable_empty_list() {
  if (!_internal_has_empty_list()) {
    clear_literal_type();
    set_has_empty_list();
    literal_type_.empty_list_ = CreateMaybeMessage< ::substrait::proto::Type_List >(GetArena());
  }
  return literal_type_.empty_list_;
}
inline ::substrait::proto::Type_List* Expression_Literal::mutable_empty_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.empty_list)
  return _internal_mutable_empty_list();
}

// .substrait.proto.Type.Map empty_map = 32;
inline bool Expression_Literal::_internal_has_empty_map() const {
  return literal_type_case() == kEmptyMap;
}
inline bool Expression_Literal::has_empty_map() const {
  return _internal_has_empty_map();
}
inline void Expression_Literal::set_has_empty_map() {
  _oneof_case_[0] = kEmptyMap;
}
inline ::substrait::proto::Type_Map* Expression_Literal::release_empty_map() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.empty_map)
  if (_internal_has_empty_map()) {
    clear_has_literal_type();
      ::substrait::proto::Type_Map* temp = literal_type_.empty_map_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.empty_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Type_Map& Expression_Literal::_internal_empty_map() const {
  return _internal_has_empty_map()
      ? *literal_type_.empty_map_
      : *reinterpret_cast< ::substrait::proto::Type_Map*>(&::substrait::proto::_Type_Map_default_instance_);
}
inline const ::substrait::proto::Type_Map& Expression_Literal::empty_map() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.empty_map)
  return _internal_empty_map();
}
inline ::substrait::proto::Type_Map* Expression_Literal::unsafe_arena_release_empty_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.empty_map)
  if (_internal_has_empty_map()) {
    clear_has_literal_type();
    ::substrait::proto::Type_Map* temp = literal_type_.empty_map_;
    literal_type_.empty_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_empty_map(::substrait::proto::Type_Map* empty_map) {
  clear_literal_type();
  if (empty_map) {
    set_has_empty_map();
    literal_type_.empty_map_ = empty_map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.empty_map)
}
inline ::substrait::proto::Type_Map* Expression_Literal::_internal_mutable_empty_map() {
  if (!_internal_has_empty_map()) {
    clear_literal_type();
    set_has_empty_map();
    literal_type_.empty_map_ = CreateMaybeMessage< ::substrait::proto::Type_Map >(GetArena());
  }
  return literal_type_.empty_map_;
}
inline ::substrait::proto::Type_Map* Expression_Literal::mutable_empty_map() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.empty_map)
  return _internal_mutable_empty_map();
}

// .substrait.proto.Expression.Literal.UserDefined user_defined = 33;
inline bool Expression_Literal::_internal_has_user_defined() const {
  return literal_type_case() == kUserDefined;
}
inline bool Expression_Literal::has_user_defined() const {
  return _internal_has_user_defined();
}
inline void Expression_Literal::set_has_user_defined() {
  _oneof_case_[0] = kUserDefined;
}
inline void Expression_Literal::clear_user_defined() {
  if (_internal_has_user_defined()) {
    if (GetArena() == nullptr) {
      delete literal_type_.user_defined_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::proto::Expression_Literal_UserDefined* Expression_Literal::release_user_defined() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Literal.user_defined)
  if (_internal_has_user_defined()) {
    clear_has_literal_type();
      ::substrait::proto::Expression_Literal_UserDefined* temp = literal_type_.user_defined_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    literal_type_.user_defined_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal_UserDefined& Expression_Literal::_internal_user_defined() const {
  return _internal_has_user_defined()
      ? *literal_type_.user_defined_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal_UserDefined*>(&::substrait::proto::_Expression_Literal_UserDefined_default_instance_);
}
inline const ::substrait::proto::Expression_Literal_UserDefined& Expression_Literal::user_defined() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.user_defined)
  return _internal_user_defined();
}
inline ::substrait::proto::Expression_Literal_UserDefined* Expression_Literal::unsafe_arena_release_user_defined() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Literal.user_defined)
  if (_internal_has_user_defined()) {
    clear_has_literal_type();
    ::substrait::proto::Expression_Literal_UserDefined* temp = literal_type_.user_defined_;
    literal_type_.user_defined_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_user_defined(::substrait::proto::Expression_Literal_UserDefined* user_defined) {
  clear_literal_type();
  if (user_defined) {
    set_has_user_defined();
    literal_type_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Literal.user_defined)
}
inline ::substrait::proto::Expression_Literal_UserDefined* Expression_Literal::_internal_mutable_user_defined() {
  if (!_internal_has_user_defined()) {
    clear_literal_type();
    set_has_user_defined();
    literal_type_.user_defined_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal_UserDefined >(GetArena());
  }
  return literal_type_.user_defined_;
}
inline ::substrait::proto::Expression_Literal_UserDefined* Expression_Literal::mutable_user_defined() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Literal.user_defined)
  return _internal_mutable_user_defined();
}

// bool nullable = 50;
inline void Expression_Literal::clear_nullable() {
  nullable_ = false;
}
inline bool Expression_Literal::_internal_nullable() const {
  return nullable_;
}
inline bool Expression_Literal::nullable() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.nullable)
  return _internal_nullable();
}
inline void Expression_Literal::_internal_set_nullable(bool value) {
  
  nullable_ = value;
}
inline void Expression_Literal::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.nullable)
}

// uint32 type_variation_reference = 51;
inline void Expression_Literal::clear_type_variation_reference() {
  type_variation_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal::_internal_type_variation_reference() const {
  return type_variation_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Literal::type_variation_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Literal.type_variation_reference)
  return _internal_type_variation_reference();
}
inline void Expression_Literal::_internal_set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_variation_reference_ = value;
}
inline void Expression_Literal::set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_variation_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Literal.type_variation_reference)
}

inline bool Expression_Literal::has_literal_type() const {
  return literal_type_case() != LITERAL_TYPE_NOT_SET;
}
inline void Expression_Literal::clear_has_literal_type() {
  _oneof_case_[0] = LITERAL_TYPE_NOT_SET;
}
inline Expression_Literal::LiteralTypeCase Expression_Literal::literal_type_case() const {
  return Expression_Literal::LiteralTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_Nested_Map_KeyValue

// .substrait.proto.Expression key = 1;
inline bool Expression_Nested_Map_KeyValue::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool Expression_Nested_Map_KeyValue::has_key() const {
  return _internal_has_key();
}
inline void Expression_Nested_Map_KeyValue::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_Nested_Map_KeyValue::_internal_key() const {
  const ::substrait::proto::Expression* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_Nested_Map_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.Map.KeyValue.key)
  return _internal_key();
}
inline void Expression_Nested_Map_KeyValue::unsafe_arena_set_allocated_key(
    ::substrait::proto::Expression* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Nested.Map.KeyValue.key)
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::release_key() {
  auto temp = unsafe_arena_release_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Nested.Map.KeyValue.key)
  
  ::substrait::proto::Expression* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.Map.KeyValue.key)
  return _internal_mutable_key();
}
inline void Expression_Nested_Map_KeyValue::set_allocated_key(::substrait::proto::Expression* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Nested.Map.KeyValue.key)
}

// .substrait.proto.Expression value = 2;
inline bool Expression_Nested_Map_KeyValue::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Expression_Nested_Map_KeyValue::has_value() const {
  return _internal_has_value();
}
inline void Expression_Nested_Map_KeyValue::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_Nested_Map_KeyValue::_internal_value() const {
  const ::substrait::proto::Expression* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_Nested_Map_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.Map.KeyValue.value)
  return _internal_value();
}
inline void Expression_Nested_Map_KeyValue::unsafe_arena_set_allocated_value(
    ::substrait::proto::Expression* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Nested.Map.KeyValue.value)
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Nested.Map.KeyValue.value)
  
  ::substrait::proto::Expression* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::substrait::proto::Expression* Expression_Nested_Map_KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.Map.KeyValue.value)
  return _internal_mutable_value();
}
inline void Expression_Nested_Map_KeyValue::set_allocated_value(::substrait::proto::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Nested.Map.KeyValue.value)
}

// -------------------------------------------------------------------

// Expression_Nested_Map

// repeated .substrait.proto.Expression.Nested.Map.KeyValue key_values = 1;
inline int Expression_Nested_Map::_internal_key_values_size() const {
  return key_values_.size();
}
inline int Expression_Nested_Map::key_values_size() const {
  return _internal_key_values_size();
}
inline void Expression_Nested_Map::clear_key_values() {
  key_values_.Clear();
}
inline ::substrait::proto::Expression_Nested_Map_KeyValue* Expression_Nested_Map::mutable_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.Map.key_values)
  return key_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Nested_Map_KeyValue >*
Expression_Nested_Map::mutable_key_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Nested.Map.key_values)
  return &key_values_;
}
inline const ::substrait::proto::Expression_Nested_Map_KeyValue& Expression_Nested_Map::_internal_key_values(int index) const {
  return key_values_.Get(index);
}
inline const ::substrait::proto::Expression_Nested_Map_KeyValue& Expression_Nested_Map::key_values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.Map.key_values)
  return _internal_key_values(index);
}
inline ::substrait::proto::Expression_Nested_Map_KeyValue* Expression_Nested_Map::_internal_add_key_values() {
  return key_values_.Add();
}
inline ::substrait::proto::Expression_Nested_Map_KeyValue* Expression_Nested_Map::add_key_values() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Nested.Map.key_values)
  return _internal_add_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_Nested_Map_KeyValue >&
Expression_Nested_Map::key_values() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Nested.Map.key_values)
  return key_values_;
}

// -------------------------------------------------------------------

// Expression_Nested_Struct

// repeated .substrait.proto.Expression fields = 1;
inline int Expression_Nested_Struct::_internal_fields_size() const {
  return fields_.size();
}
inline int Expression_Nested_Struct::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_Nested_Struct::clear_fields() {
  fields_.Clear();
}
inline ::substrait::proto::Expression* Expression_Nested_Struct::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.Struct.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_Nested_Struct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Nested.Struct.fields)
  return &fields_;
}
inline const ::substrait::proto::Expression& Expression_Nested_Struct::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_Nested_Struct::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.Struct.fields)
  return _internal_fields(index);
}
inline ::substrait::proto::Expression* Expression_Nested_Struct::_internal_add_fields() {
  return fields_.Add();
}
inline ::substrait::proto::Expression* Expression_Nested_Struct::add_fields() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Nested.Struct.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_Nested_Struct::fields() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Nested.Struct.fields)
  return fields_;
}

// -------------------------------------------------------------------

// Expression_Nested_List

// repeated .substrait.proto.Expression values = 1;
inline int Expression_Nested_List::_internal_values_size() const {
  return values_.size();
}
inline int Expression_Nested_List::values_size() const {
  return _internal_values_size();
}
inline void Expression_Nested_List::clear_values() {
  values_.Clear();
}
inline ::substrait::proto::Expression* Expression_Nested_List::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.List.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_Nested_List::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Nested.List.values)
  return &values_;
}
inline const ::substrait::proto::Expression& Expression_Nested_List::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_Nested_List::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.List.values)
  return _internal_values(index);
}
inline ::substrait::proto::Expression* Expression_Nested_List::_internal_add_values() {
  return values_.Add();
}
inline ::substrait::proto::Expression* Expression_Nested_List::add_values() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Nested.List.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_Nested_List::values() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Nested.List.values)
  return values_;
}

// -------------------------------------------------------------------

// Expression_Nested

// bool nullable = 1;
inline void Expression_Nested::clear_nullable() {
  nullable_ = false;
}
inline bool Expression_Nested::_internal_nullable() const {
  return nullable_;
}
inline bool Expression_Nested::nullable() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.nullable)
  return _internal_nullable();
}
inline void Expression_Nested::_internal_set_nullable(bool value) {
  
  nullable_ = value;
}
inline void Expression_Nested::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Nested.nullable)
}

// uint32 type_variation_reference = 2;
inline void Expression_Nested::clear_type_variation_reference() {
  type_variation_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Nested::_internal_type_variation_reference() const {
  return type_variation_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_Nested::type_variation_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.type_variation_reference)
  return _internal_type_variation_reference();
}
inline void Expression_Nested::_internal_set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_variation_reference_ = value;
}
inline void Expression_Nested::set_type_variation_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type_variation_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Nested.type_variation_reference)
}

// .substrait.proto.Expression.Nested.Struct struct = 3;
inline bool Expression_Nested::_internal_has_struct_() const {
  return nested_type_case() == kStruct;
}
inline bool Expression_Nested::has_struct_() const {
  return _internal_has_struct_();
}
inline void Expression_Nested::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void Expression_Nested::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArena() == nullptr) {
      delete nested_type_.struct__;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::proto::Expression_Nested_Struct* Expression_Nested::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Nested.struct)
  if (_internal_has_struct_()) {
    clear_has_nested_type();
      ::substrait::proto::Expression_Nested_Struct* temp = nested_type_.struct__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nested_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Nested_Struct& Expression_Nested::_internal_struct_() const {
  return _internal_has_struct_()
      ? *nested_type_.struct__
      : *reinterpret_cast< ::substrait::proto::Expression_Nested_Struct*>(&::substrait::proto::_Expression_Nested_Struct_default_instance_);
}
inline const ::substrait::proto::Expression_Nested_Struct& Expression_Nested::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.struct)
  return _internal_struct_();
}
inline ::substrait::proto::Expression_Nested_Struct* Expression_Nested::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Nested.struct)
  if (_internal_has_struct_()) {
    clear_has_nested_type();
    ::substrait::proto::Expression_Nested_Struct* temp = nested_type_.struct__;
    nested_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_struct_(::substrait::proto::Expression_Nested_Struct* struct_) {
  clear_nested_type();
  if (struct_) {
    set_has_struct_();
    nested_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Nested.struct)
}
inline ::substrait::proto::Expression_Nested_Struct* Expression_Nested::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_nested_type();
    set_has_struct_();
    nested_type_.struct__ = CreateMaybeMessage< ::substrait::proto::Expression_Nested_Struct >(GetArena());
  }
  return nested_type_.struct__;
}
inline ::substrait::proto::Expression_Nested_Struct* Expression_Nested::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.struct)
  return _internal_mutable_struct_();
}

// .substrait.proto.Expression.Nested.List list = 4;
inline bool Expression_Nested::_internal_has_list() const {
  return nested_type_case() == kList;
}
inline bool Expression_Nested::has_list() const {
  return _internal_has_list();
}
inline void Expression_Nested::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Expression_Nested::clear_list() {
  if (_internal_has_list()) {
    if (GetArena() == nullptr) {
      delete nested_type_.list_;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::proto::Expression_Nested_List* Expression_Nested::release_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Nested.list)
  if (_internal_has_list()) {
    clear_has_nested_type();
      ::substrait::proto::Expression_Nested_List* temp = nested_type_.list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nested_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Nested_List& Expression_Nested::_internal_list() const {
  return _internal_has_list()
      ? *nested_type_.list_
      : *reinterpret_cast< ::substrait::proto::Expression_Nested_List*>(&::substrait::proto::_Expression_Nested_List_default_instance_);
}
inline const ::substrait::proto::Expression_Nested_List& Expression_Nested::list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.list)
  return _internal_list();
}
inline ::substrait::proto::Expression_Nested_List* Expression_Nested::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Nested.list)
  if (_internal_has_list()) {
    clear_has_nested_type();
    ::substrait::proto::Expression_Nested_List* temp = nested_type_.list_;
    nested_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_list(::substrait::proto::Expression_Nested_List* list) {
  clear_nested_type();
  if (list) {
    set_has_list();
    nested_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Nested.list)
}
inline ::substrait::proto::Expression_Nested_List* Expression_Nested::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_nested_type();
    set_has_list();
    nested_type_.list_ = CreateMaybeMessage< ::substrait::proto::Expression_Nested_List >(GetArena());
  }
  return nested_type_.list_;
}
inline ::substrait::proto::Expression_Nested_List* Expression_Nested::mutable_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.list)
  return _internal_mutable_list();
}

// .substrait.proto.Expression.Nested.Map map = 5;
inline bool Expression_Nested::_internal_has_map() const {
  return nested_type_case() == kMap;
}
inline bool Expression_Nested::has_map() const {
  return _internal_has_map();
}
inline void Expression_Nested::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void Expression_Nested::clear_map() {
  if (_internal_has_map()) {
    if (GetArena() == nullptr) {
      delete nested_type_.map_;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::proto::Expression_Nested_Map* Expression_Nested::release_map() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Nested.map)
  if (_internal_has_map()) {
    clear_has_nested_type();
      ::substrait::proto::Expression_Nested_Map* temp = nested_type_.map_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nested_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Nested_Map& Expression_Nested::_internal_map() const {
  return _internal_has_map()
      ? *nested_type_.map_
      : *reinterpret_cast< ::substrait::proto::Expression_Nested_Map*>(&::substrait::proto::_Expression_Nested_Map_default_instance_);
}
inline const ::substrait::proto::Expression_Nested_Map& Expression_Nested::map() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Nested.map)
  return _internal_map();
}
inline ::substrait::proto::Expression_Nested_Map* Expression_Nested::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Nested.map)
  if (_internal_has_map()) {
    clear_has_nested_type();
    ::substrait::proto::Expression_Nested_Map* temp = nested_type_.map_;
    nested_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_map(::substrait::proto::Expression_Nested_Map* map) {
  clear_nested_type();
  if (map) {
    set_has_map();
    nested_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Nested.map)
}
inline ::substrait::proto::Expression_Nested_Map* Expression_Nested::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_nested_type();
    set_has_map();
    nested_type_.map_ = CreateMaybeMessage< ::substrait::proto::Expression_Nested_Map >(GetArena());
  }
  return nested_type_.map_;
}
inline ::substrait::proto::Expression_Nested_Map* Expression_Nested::mutable_map() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Nested.map)
  return _internal_mutable_map();
}

inline bool Expression_Nested::has_nested_type() const {
  return nested_type_case() != NESTED_TYPE_NOT_SET;
}
inline void Expression_Nested::clear_has_nested_type() {
  _oneof_case_[0] = NESTED_TYPE_NOT_SET;
}
inline Expression_Nested::NestedTypeCase Expression_Nested::nested_type_case() const {
  return Expression_Nested::NestedTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_ScalarFunction

// uint32 function_reference = 1;
inline void Expression_ScalarFunction::clear_function_reference() {
  function_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_ScalarFunction::_internal_function_reference() const {
  return function_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_ScalarFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ScalarFunction.function_reference)
  return _internal_function_reference();
}
inline void Expression_ScalarFunction::_internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  function_reference_ = value;
}
inline void Expression_ScalarFunction::set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.ScalarFunction.function_reference)
}

// repeated .substrait.proto.FunctionArgument arguments = 4;
inline int Expression_ScalarFunction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Expression_ScalarFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_ScalarFunction::clear_arguments() {
  arguments_.Clear();
}
inline ::substrait::proto::FunctionArgument* Expression_ScalarFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ScalarFunction.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
Expression_ScalarFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.ScalarFunction.arguments)
  return &arguments_;
}
inline const ::substrait::proto::FunctionArgument& Expression_ScalarFunction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::substrait::proto::FunctionArgument& Expression_ScalarFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ScalarFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::proto::FunctionArgument* Expression_ScalarFunction::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::substrait::proto::FunctionArgument* Expression_ScalarFunction::add_arguments() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.ScalarFunction.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
Expression_ScalarFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.ScalarFunction.arguments)
  return arguments_;
}

// repeated .substrait.proto.FunctionOption options = 5;
inline int Expression_ScalarFunction::_internal_options_size() const {
  return options_.size();
}
inline int Expression_ScalarFunction::options_size() const {
  return _internal_options_size();
}
inline void Expression_ScalarFunction::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::FunctionOption* Expression_ScalarFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ScalarFunction.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
Expression_ScalarFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.ScalarFunction.options)
  return &options_;
}
inline const ::substrait::proto::FunctionOption& Expression_ScalarFunction::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::FunctionOption& Expression_ScalarFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ScalarFunction.options)
  return _internal_options(index);
}
inline ::substrait::proto::FunctionOption* Expression_ScalarFunction::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::FunctionOption* Expression_ScalarFunction::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.ScalarFunction.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
Expression_ScalarFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.ScalarFunction.options)
  return options_;
}

// .substrait.proto.Type output_type = 3;
inline bool Expression_ScalarFunction::_internal_has_output_type() const {
  return this != internal_default_instance() && output_type_ != nullptr;
}
inline bool Expression_ScalarFunction::has_output_type() const {
  return _internal_has_output_type();
}
inline const ::substrait::proto::Type& Expression_ScalarFunction::_internal_output_type() const {
  const ::substrait::proto::Type* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& Expression_ScalarFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ScalarFunction.output_type)
  return _internal_output_type();
}
inline void Expression_ScalarFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::proto::Type* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ScalarFunction.output_type)
}
inline ::substrait::proto::Type* Expression_ScalarFunction::release_output_type() {
  auto temp = unsafe_arena_release_output_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* Expression_ScalarFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ScalarFunction.output_type)
  
  ::substrait::proto::Type* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* Expression_ScalarFunction::_internal_mutable_output_type() {
  
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::substrait::proto::Type* Expression_ScalarFunction::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ScalarFunction.output_type)
  return _internal_mutable_output_type();
}
inline void Expression_ScalarFunction::set_allocated_output_type(::substrait::proto::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type)->GetArena();
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    
  } else {
    
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ScalarFunction.output_type)
}

// repeated .substrait.proto.Expression args = 2 [deprecated = true];
inline int Expression_ScalarFunction::_internal_args_size() const {
  return args_.size();
}
inline int Expression_ScalarFunction::args_size() const {
  return _internal_args_size();
}
inline void Expression_ScalarFunction::clear_args() {
  args_.Clear();
}
inline ::substrait::proto::Expression* Expression_ScalarFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ScalarFunction.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_ScalarFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.ScalarFunction.args)
  return &args_;
}
inline const ::substrait::proto::Expression& Expression_ScalarFunction::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_ScalarFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ScalarFunction.args)
  return _internal_args(index);
}
inline ::substrait::proto::Expression* Expression_ScalarFunction::_internal_add_args() {
  return args_.Add();
}
inline ::substrait::proto::Expression* Expression_ScalarFunction::add_args() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.ScalarFunction.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_ScalarFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.ScalarFunction.args)
  return args_;
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Preceding

// int64 offset = 1;
inline void Expression_WindowFunction_Bound_Preceding::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_WindowFunction_Bound_Preceding::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_WindowFunction_Bound_Preceding::offset() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.Preceding.offset)
  return _internal_offset();
}
inline void Expression_WindowFunction_Bound_Preceding::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void Expression_WindowFunction_Bound_Preceding::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.Bound.Preceding.offset)
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Following

// int64 offset = 1;
inline void Expression_WindowFunction_Bound_Following::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_WindowFunction_Bound_Following::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expression_WindowFunction_Bound_Following::offset() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.Following.offset)
  return _internal_offset();
}
inline void Expression_WindowFunction_Bound_Following::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void Expression_WindowFunction_Bound_Following::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.Bound.Following.offset)
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_CurrentRow

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Unbounded

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound

// .substrait.proto.Expression.WindowFunction.Bound.Preceding preceding = 1;
inline bool Expression_WindowFunction_Bound::_internal_has_preceding() const {
  return kind_case() == kPreceding;
}
inline bool Expression_WindowFunction_Bound::has_preceding() const {
  return _internal_has_preceding();
}
inline void Expression_WindowFunction_Bound::set_has_preceding() {
  _oneof_case_[0] = kPreceding;
}
inline void Expression_WindowFunction_Bound::clear_preceding() {
  if (_internal_has_preceding()) {
    if (GetArena() == nullptr) {
      delete kind_.preceding_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::release_preceding() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.Bound.preceding)
  if (_internal_has_preceding()) {
    clear_has_kind();
      ::substrait::proto::Expression_WindowFunction_Bound_Preceding* temp = kind_.preceding_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.preceding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Preceding& Expression_WindowFunction_Bound::_internal_preceding() const {
  return _internal_has_preceding()
      ? *kind_.preceding_
      : *reinterpret_cast< ::substrait::proto::Expression_WindowFunction_Bound_Preceding*>(&::substrait::proto::_Expression_WindowFunction_Bound_Preceding_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Preceding& Expression_WindowFunction_Bound::preceding() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.preceding)
  return _internal_preceding();
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::unsafe_arena_release_preceding() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.WindowFunction.Bound.preceding)
  if (_internal_has_preceding()) {
    clear_has_kind();
    ::substrait::proto::Expression_WindowFunction_Bound_Preceding* temp = kind_.preceding_;
    kind_.preceding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_preceding(::substrait::proto::Expression_WindowFunction_Bound_Preceding* preceding) {
  clear_kind();
  if (preceding) {
    set_has_preceding();
    kind_.preceding_ = preceding;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.Bound.preceding)
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::_internal_mutable_preceding() {
  if (!_internal_has_preceding()) {
    clear_kind();
    set_has_preceding();
    kind_.preceding_ = CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Preceding >(GetArena());
  }
  return kind_.preceding_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::mutable_preceding() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.Bound.preceding)
  return _internal_mutable_preceding();
}

// .substrait.proto.Expression.WindowFunction.Bound.Following following = 2;
inline bool Expression_WindowFunction_Bound::_internal_has_following() const {
  return kind_case() == kFollowing;
}
inline bool Expression_WindowFunction_Bound::has_following() const {
  return _internal_has_following();
}
inline void Expression_WindowFunction_Bound::set_has_following() {
  _oneof_case_[0] = kFollowing;
}
inline void Expression_WindowFunction_Bound::clear_following() {
  if (_internal_has_following()) {
    if (GetArena() == nullptr) {
      delete kind_.following_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::release_following() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.Bound.following)
  if (_internal_has_following()) {
    clear_has_kind();
      ::substrait::proto::Expression_WindowFunction_Bound_Following* temp = kind_.following_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.following_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Following& Expression_WindowFunction_Bound::_internal_following() const {
  return _internal_has_following()
      ? *kind_.following_
      : *reinterpret_cast< ::substrait::proto::Expression_WindowFunction_Bound_Following*>(&::substrait::proto::_Expression_WindowFunction_Bound_Following_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Following& Expression_WindowFunction_Bound::following() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.following)
  return _internal_following();
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::unsafe_arena_release_following() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.WindowFunction.Bound.following)
  if (_internal_has_following()) {
    clear_has_kind();
    ::substrait::proto::Expression_WindowFunction_Bound_Following* temp = kind_.following_;
    kind_.following_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_following(::substrait::proto::Expression_WindowFunction_Bound_Following* following) {
  clear_kind();
  if (following) {
    set_has_following();
    kind_.following_ = following;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.Bound.following)
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::_internal_mutable_following() {
  if (!_internal_has_following()) {
    clear_kind();
    set_has_following();
    kind_.following_ = CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Following >(GetArena());
  }
  return kind_.following_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::mutable_following() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.Bound.following)
  return _internal_mutable_following();
}

// .substrait.proto.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
inline bool Expression_WindowFunction_Bound::_internal_has_current_row() const {
  return kind_case() == kCurrentRow;
}
inline bool Expression_WindowFunction_Bound::has_current_row() const {
  return _internal_has_current_row();
}
inline void Expression_WindowFunction_Bound::set_has_current_row() {
  _oneof_case_[0] = kCurrentRow;
}
inline void Expression_WindowFunction_Bound::clear_current_row() {
  if (_internal_has_current_row()) {
    if (GetArena() == nullptr) {
      delete kind_.current_row_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::release_current_row() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.Bound.current_row)
  if (_internal_has_current_row()) {
    clear_has_kind();
      ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* temp = kind_.current_row_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.current_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow& Expression_WindowFunction_Bound::_internal_current_row() const {
  return _internal_has_current_row()
      ? *kind_.current_row_
      : *reinterpret_cast< ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow*>(&::substrait::proto::_Expression_WindowFunction_Bound_CurrentRow_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow& Expression_WindowFunction_Bound::current_row() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.current_row)
  return _internal_current_row();
}
inline ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::unsafe_arena_release_current_row() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.WindowFunction.Bound.current_row)
  if (_internal_has_current_row()) {
    clear_has_kind();
    ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* temp = kind_.current_row_;
    kind_.current_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_current_row(::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* current_row) {
  clear_kind();
  if (current_row) {
    set_has_current_row();
    kind_.current_row_ = current_row;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.Bound.current_row)
}
inline ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::_internal_mutable_current_row() {
  if (!_internal_has_current_row()) {
    clear_kind();
    set_has_current_row();
    kind_.current_row_ = CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow >(GetArena());
  }
  return kind_.current_row_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::mutable_current_row() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.Bound.current_row)
  return _internal_mutable_current_row();
}

// .substrait.proto.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
inline bool Expression_WindowFunction_Bound::_internal_has_unbounded() const {
  return kind_case() == kUnbounded;
}
inline bool Expression_WindowFunction_Bound::has_unbounded() const {
  return _internal_has_unbounded();
}
inline void Expression_WindowFunction_Bound::set_has_unbounded() {
  _oneof_case_[0] = kUnbounded;
}
inline void Expression_WindowFunction_Bound::clear_unbounded() {
  if (_internal_has_unbounded()) {
    if (GetArena() == nullptr) {
      delete kind_.unbounded_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::release_unbounded() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.Bound.unbounded)
  if (_internal_has_unbounded()) {
    clear_has_kind();
      ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* temp = kind_.unbounded_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded& Expression_WindowFunction_Bound::_internal_unbounded() const {
  return _internal_has_unbounded()
      ? *kind_.unbounded_
      : *reinterpret_cast< ::substrait::proto::Expression_WindowFunction_Bound_Unbounded*>(&::substrait::proto::_Expression_WindowFunction_Bound_Unbounded_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound_Unbounded& Expression_WindowFunction_Bound::unbounded() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.Bound.unbounded)
  return _internal_unbounded();
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::unsafe_arena_release_unbounded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.WindowFunction.Bound.unbounded)
  if (_internal_has_unbounded()) {
    clear_has_kind();
    ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* temp = kind_.unbounded_;
    kind_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_unbounded(::substrait::proto::Expression_WindowFunction_Bound_Unbounded* unbounded) {
  clear_kind();
  if (unbounded) {
    set_has_unbounded();
    kind_.unbounded_ = unbounded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.Bound.unbounded)
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::_internal_mutable_unbounded() {
  if (!_internal_has_unbounded()) {
    clear_kind();
    set_has_unbounded();
    kind_.unbounded_ = CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction_Bound_Unbounded >(GetArena());
  }
  return kind_.unbounded_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::mutable_unbounded() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.Bound.unbounded)
  return _internal_mutable_unbounded();
}

inline bool Expression_WindowFunction_Bound::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Expression_WindowFunction_Bound::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Expression_WindowFunction_Bound::KindCase Expression_WindowFunction_Bound::kind_case() const {
  return Expression_WindowFunction_Bound::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_WindowFunction

// uint32 function_reference = 1;
inline void Expression_WindowFunction::clear_function_reference() {
  function_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_WindowFunction::_internal_function_reference() const {
  return function_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_WindowFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.function_reference)
  return _internal_function_reference();
}
inline void Expression_WindowFunction::_internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  function_reference_ = value;
}
inline void Expression_WindowFunction::set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.function_reference)
}

// repeated .substrait.proto.FunctionArgument arguments = 9;
inline int Expression_WindowFunction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Expression_WindowFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_WindowFunction::clear_arguments() {
  arguments_.Clear();
}
inline ::substrait::proto::FunctionArgument* Expression_WindowFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
Expression_WindowFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.WindowFunction.arguments)
  return &arguments_;
}
inline const ::substrait::proto::FunctionArgument& Expression_WindowFunction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::substrait::proto::FunctionArgument& Expression_WindowFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::proto::FunctionArgument* Expression_WindowFunction::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::substrait::proto::FunctionArgument* Expression_WindowFunction::add_arguments() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.WindowFunction.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
Expression_WindowFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.WindowFunction.arguments)
  return arguments_;
}

// repeated .substrait.proto.FunctionOption options = 11;
inline int Expression_WindowFunction::_internal_options_size() const {
  return options_.size();
}
inline int Expression_WindowFunction::options_size() const {
  return _internal_options_size();
}
inline void Expression_WindowFunction::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::FunctionOption* Expression_WindowFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
Expression_WindowFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.WindowFunction.options)
  return &options_;
}
inline const ::substrait::proto::FunctionOption& Expression_WindowFunction::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::FunctionOption& Expression_WindowFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.options)
  return _internal_options(index);
}
inline ::substrait::proto::FunctionOption* Expression_WindowFunction::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::FunctionOption* Expression_WindowFunction::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.WindowFunction.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
Expression_WindowFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.WindowFunction.options)
  return options_;
}

// .substrait.proto.Type output_type = 7;
inline bool Expression_WindowFunction::_internal_has_output_type() const {
  return this != internal_default_instance() && output_type_ != nullptr;
}
inline bool Expression_WindowFunction::has_output_type() const {
  return _internal_has_output_type();
}
inline const ::substrait::proto::Type& Expression_WindowFunction::_internal_output_type() const {
  const ::substrait::proto::Type* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& Expression_WindowFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.output_type)
  return _internal_output_type();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::proto::Type* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.output_type)
}
inline ::substrait::proto::Type* Expression_WindowFunction::release_output_type() {
  auto temp = unsafe_arena_release_output_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* Expression_WindowFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.output_type)
  
  ::substrait::proto::Type* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* Expression_WindowFunction::_internal_mutable_output_type() {
  
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::substrait::proto::Type* Expression_WindowFunction::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.output_type)
  return _internal_mutable_output_type();
}
inline void Expression_WindowFunction::set_allocated_output_type(::substrait::proto::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type)->GetArena();
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    
  } else {
    
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.output_type)
}

// .substrait.proto.AggregationPhase phase = 6;
inline void Expression_WindowFunction::clear_phase() {
  phase_ = 0;
}
inline ::substrait::proto::AggregationPhase Expression_WindowFunction::_internal_phase() const {
  return static_cast< ::substrait::proto::AggregationPhase >(phase_);
}
inline ::substrait::proto::AggregationPhase Expression_WindowFunction::phase() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.phase)
  return _internal_phase();
}
inline void Expression_WindowFunction::_internal_set_phase(::substrait::proto::AggregationPhase value) {
  
  phase_ = value;
}
inline void Expression_WindowFunction::set_phase(::substrait::proto::AggregationPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.phase)
}

// repeated .substrait.proto.SortField sorts = 3;
inline int Expression_WindowFunction::_internal_sorts_size() const {
  return sorts_.size();
}
inline int Expression_WindowFunction::sorts_size() const {
  return _internal_sorts_size();
}
inline void Expression_WindowFunction::clear_sorts() {
  sorts_.Clear();
}
inline ::substrait::proto::SortField* Expression_WindowFunction::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
Expression_WindowFunction::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.WindowFunction.sorts)
  return &sorts_;
}
inline const ::substrait::proto::SortField& Expression_WindowFunction::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::substrait::proto::SortField& Expression_WindowFunction::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.sorts)
  return _internal_sorts(index);
}
inline ::substrait::proto::SortField* Expression_WindowFunction::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::substrait::proto::SortField* Expression_WindowFunction::add_sorts() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.WindowFunction.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
Expression_WindowFunction::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.WindowFunction.sorts)
  return sorts_;
}

// .substrait.proto.AggregateFunction.AggregationInvocation invocation = 10;
inline void Expression_WindowFunction::clear_invocation() {
  invocation_ = 0;
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation Expression_WindowFunction::_internal_invocation() const {
  return static_cast< ::substrait::proto::AggregateFunction_AggregationInvocation >(invocation_);
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation Expression_WindowFunction::invocation() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.invocation)
  return _internal_invocation();
}
inline void Expression_WindowFunction::_internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  
  invocation_ = value;
}
inline void Expression_WindowFunction::set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  _internal_set_invocation(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.invocation)
}

// repeated .substrait.proto.Expression partitions = 2;
inline int Expression_WindowFunction::_internal_partitions_size() const {
  return partitions_.size();
}
inline int Expression_WindowFunction::partitions_size() const {
  return _internal_partitions_size();
}
inline void Expression_WindowFunction::clear_partitions() {
  partitions_.Clear();
}
inline ::substrait::proto::Expression* Expression_WindowFunction::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.partitions)
  return partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_WindowFunction::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.WindowFunction.partitions)
  return &partitions_;
}
inline const ::substrait::proto::Expression& Expression_WindowFunction::_internal_partitions(int index) const {
  return partitions_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_WindowFunction::partitions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.partitions)
  return _internal_partitions(index);
}
inline ::substrait::proto::Expression* Expression_WindowFunction::_internal_add_partitions() {
  return partitions_.Add();
}
inline ::substrait::proto::Expression* Expression_WindowFunction::add_partitions() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.WindowFunction.partitions)
  return _internal_add_partitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_WindowFunction::partitions() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.WindowFunction.partitions)
  return partitions_;
}

// .substrait.proto.Expression.WindowFunction.BoundsType bounds_type = 12;
inline void Expression_WindowFunction::clear_bounds_type() {
  bounds_type_ = 0;
}
inline ::substrait::proto::Expression_WindowFunction_BoundsType Expression_WindowFunction::_internal_bounds_type() const {
  return static_cast< ::substrait::proto::Expression_WindowFunction_BoundsType >(bounds_type_);
}
inline ::substrait::proto::Expression_WindowFunction_BoundsType Expression_WindowFunction::bounds_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.bounds_type)
  return _internal_bounds_type();
}
inline void Expression_WindowFunction::_internal_set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value) {
  
  bounds_type_ = value;
}
inline void Expression_WindowFunction::set_bounds_type(::substrait::proto::Expression_WindowFunction_BoundsType value) {
  _internal_set_bounds_type(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.WindowFunction.bounds_type)
}

// .substrait.proto.Expression.WindowFunction.Bound lower_bound = 5;
inline bool Expression_WindowFunction::_internal_has_lower_bound() const {
  return this != internal_default_instance() && lower_bound_ != nullptr;
}
inline bool Expression_WindowFunction::has_lower_bound() const {
  return _internal_has_lower_bound();
}
inline void Expression_WindowFunction::clear_lower_bound() {
  if (GetArena() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& Expression_WindowFunction::_internal_lower_bound() const {
  const ::substrait::proto::Expression_WindowFunction_Bound* p = lower_bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_WindowFunction_Bound*>(
      &::substrait::proto::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& Expression_WindowFunction::lower_bound() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.lower_bound)
  return _internal_lower_bound();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_lower_bound(
    ::substrait::proto::Expression_WindowFunction_Bound* lower_bound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_bound_);
  }
  lower_bound_ = lower_bound;
  if (lower_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.lower_bound)
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::release_lower_bound() {
  auto temp = unsafe_arena_release_lower_bound();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::unsafe_arena_release_lower_bound() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.lower_bound)
  
  ::substrait::proto::Expression_WindowFunction_Bound* temp = lower_bound_;
  lower_bound_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::_internal_mutable_lower_bound() {
  
  if (lower_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound>(GetArena());
    lower_bound_ = p;
  }
  return lower_bound_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.lower_bound)
  return _internal_mutable_lower_bound();
}
inline void Expression_WindowFunction::set_allocated_lower_bound(::substrait::proto::Expression_WindowFunction_Bound* lower_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_bound_;
  }
  if (lower_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_bound);
    if (message_arena != submessage_arena) {
      lower_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    
  } else {
    
  }
  lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.lower_bound)
}

// .substrait.proto.Expression.WindowFunction.Bound upper_bound = 4;
inline bool Expression_WindowFunction::_internal_has_upper_bound() const {
  return this != internal_default_instance() && upper_bound_ != nullptr;
}
inline bool Expression_WindowFunction::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void Expression_WindowFunction::clear_upper_bound() {
  if (GetArena() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& Expression_WindowFunction::_internal_upper_bound() const {
  const ::substrait::proto::Expression_WindowFunction_Bound* p = upper_bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_WindowFunction_Bound*>(
      &::substrait::proto::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction_Bound& Expression_WindowFunction::upper_bound() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.upper_bound)
  return _internal_upper_bound();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_upper_bound(
    ::substrait::proto::Expression_WindowFunction_Bound* upper_bound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_bound_);
  }
  upper_bound_ = upper_bound;
  if (upper_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.WindowFunction.upper_bound)
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::release_upper_bound() {
  auto temp = unsafe_arena_release_upper_bound();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::unsafe_arena_release_upper_bound() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.WindowFunction.upper_bound)
  
  ::substrait::proto::Expression_WindowFunction_Bound* temp = upper_bound_;
  upper_bound_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::_internal_mutable_upper_bound() {
  
  if (upper_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_WindowFunction_Bound>(GetArena());
    upper_bound_ = p;
  }
  return upper_bound_;
}
inline ::substrait::proto::Expression_WindowFunction_Bound* Expression_WindowFunction::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.upper_bound)
  return _internal_mutable_upper_bound();
}
inline void Expression_WindowFunction::set_allocated_upper_bound(::substrait::proto::Expression_WindowFunction_Bound* upper_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_bound_;
  }
  if (upper_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_bound);
    if (message_arena != submessage_arena) {
      upper_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    
  } else {
    
  }
  upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.WindowFunction.upper_bound)
}

// repeated .substrait.proto.Expression args = 8 [deprecated = true];
inline int Expression_WindowFunction::_internal_args_size() const {
  return args_.size();
}
inline int Expression_WindowFunction::args_size() const {
  return _internal_args_size();
}
inline void Expression_WindowFunction::clear_args() {
  args_.Clear();
}
inline ::substrait::proto::Expression* Expression_WindowFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.WindowFunction.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_WindowFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.WindowFunction.args)
  return &args_;
}
inline const ::substrait::proto::Expression& Expression_WindowFunction::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_WindowFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.WindowFunction.args)
  return _internal_args(index);
}
inline ::substrait::proto::Expression* Expression_WindowFunction::_internal_add_args() {
  return args_.Add();
}
inline ::substrait::proto::Expression* Expression_WindowFunction::add_args() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.WindowFunction.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_WindowFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.WindowFunction.args)
  return args_;
}

// -------------------------------------------------------------------

// Expression_IfThen_IfClause

// .substrait.proto.Expression if = 1;
inline bool Expression_IfThen_IfClause::_internal_has_if_() const {
  return this != internal_default_instance() && if__ != nullptr;
}
inline bool Expression_IfThen_IfClause::has_if_() const {
  return _internal_has_if_();
}
inline void Expression_IfThen_IfClause::clear_if_() {
  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_IfThen_IfClause::_internal_if_() const {
  const ::substrait::proto::Expression* p = if__;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_IfThen_IfClause::if_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.IfThen.IfClause.if)
  return _internal_if_();
}
inline void Expression_IfThen_IfClause::unsafe_arena_set_allocated_if_(
    ::substrait::proto::Expression* if_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(if__);
  }
  if__ = if_;
  if (if_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.IfThen.IfClause.if)
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::release_if_() {
  auto temp = unsafe_arena_release_if_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::unsafe_arena_release_if_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.IfThen.IfClause.if)
  
  ::substrait::proto::Expression* temp = if__;
  if__ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::_internal_mutable_if_() {
  
  if (if__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    if__ = p;
  }
  return if__;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::mutable_if_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.IfThen.IfClause.if)
  return _internal_mutable_if_();
}
inline void Expression_IfThen_IfClause::set_allocated_if_(::substrait::proto::Expression* if_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete if__;
  }
  if (if_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(if_);
    if (message_arena != submessage_arena) {
      if_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_, submessage_arena);
    }
    
  } else {
    
  }
  if__ = if_;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.IfThen.IfClause.if)
}

// .substrait.proto.Expression then = 2;
inline bool Expression_IfThen_IfClause::_internal_has_then() const {
  return this != internal_default_instance() && then_ != nullptr;
}
inline bool Expression_IfThen_IfClause::has_then() const {
  return _internal_has_then();
}
inline void Expression_IfThen_IfClause::clear_then() {
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_IfThen_IfClause::_internal_then() const {
  const ::substrait::proto::Expression* p = then_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_IfThen_IfClause::then() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.IfThen.IfClause.then)
  return _internal_then();
}
inline void Expression_IfThen_IfClause::unsafe_arena_set_allocated_then(
    ::substrait::proto::Expression* then) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(then_);
  }
  then_ = then;
  if (then) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.IfThen.IfClause.then)
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::release_then() {
  auto temp = unsafe_arena_release_then();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::unsafe_arena_release_then() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.IfThen.IfClause.then)
  
  ::substrait::proto::Expression* temp = then_;
  then_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::_internal_mutable_then() {
  
  if (then_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    then_ = p;
  }
  return then_;
}
inline ::substrait::proto::Expression* Expression_IfThen_IfClause::mutable_then() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.IfThen.IfClause.then)
  return _internal_mutable_then();
}
inline void Expression_IfThen_IfClause::set_allocated_then(::substrait::proto::Expression* then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete then_;
  }
  if (then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(then);
    if (message_arena != submessage_arena) {
      then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then, submessage_arena);
    }
    
  } else {
    
  }
  then_ = then;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.IfThen.IfClause.then)
}

// -------------------------------------------------------------------

// Expression_IfThen

// repeated .substrait.proto.Expression.IfThen.IfClause ifs = 1;
inline int Expression_IfThen::_internal_ifs_size() const {
  return ifs_.size();
}
inline int Expression_IfThen::ifs_size() const {
  return _internal_ifs_size();
}
inline void Expression_IfThen::clear_ifs() {
  ifs_.Clear();
}
inline ::substrait::proto::Expression_IfThen_IfClause* Expression_IfThen::mutable_ifs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.IfThen.ifs)
  return ifs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_IfThen_IfClause >*
Expression_IfThen::mutable_ifs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.IfThen.ifs)
  return &ifs_;
}
inline const ::substrait::proto::Expression_IfThen_IfClause& Expression_IfThen::_internal_ifs(int index) const {
  return ifs_.Get(index);
}
inline const ::substrait::proto::Expression_IfThen_IfClause& Expression_IfThen::ifs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.IfThen.ifs)
  return _internal_ifs(index);
}
inline ::substrait::proto::Expression_IfThen_IfClause* Expression_IfThen::_internal_add_ifs() {
  return ifs_.Add();
}
inline ::substrait::proto::Expression_IfThen_IfClause* Expression_IfThen::add_ifs() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.IfThen.ifs)
  return _internal_add_ifs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_IfThen_IfClause >&
Expression_IfThen::ifs() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.IfThen.ifs)
  return ifs_;
}

// .substrait.proto.Expression else = 2;
inline bool Expression_IfThen::_internal_has_else_() const {
  return this != internal_default_instance() && else__ != nullptr;
}
inline bool Expression_IfThen::has_else_() const {
  return _internal_has_else_();
}
inline void Expression_IfThen::clear_else_() {
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_IfThen::_internal_else_() const {
  const ::substrait::proto::Expression* p = else__;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_IfThen::else_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.IfThen.else)
  return _internal_else_();
}
inline void Expression_IfThen::unsafe_arena_set_allocated_else_(
    ::substrait::proto::Expression* else_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(else__);
  }
  else__ = else_;
  if (else_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.IfThen.else)
}
inline ::substrait::proto::Expression* Expression_IfThen::release_else_() {
  auto temp = unsafe_arena_release_else_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen::unsafe_arena_release_else_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.IfThen.else)
  
  ::substrait::proto::Expression* temp = else__;
  else__ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_IfThen::_internal_mutable_else_() {
  
  if (else__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    else__ = p;
  }
  return else__;
}
inline ::substrait::proto::Expression* Expression_IfThen::mutable_else_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.IfThen.else)
  return _internal_mutable_else_();
}
inline void Expression_IfThen::set_allocated_else_(::substrait::proto::Expression* else_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete else__;
  }
  if (else_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(else_);
    if (message_arena != submessage_arena) {
      else_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, else_, submessage_arena);
    }
    
  } else {
    
  }
  else__ = else_;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.IfThen.else)
}

// -------------------------------------------------------------------

// Expression_Cast

// .substrait.proto.Type type = 1;
inline bool Expression_Cast::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Expression_Cast::has_type() const {
  return _internal_has_type();
}
inline const ::substrait::proto::Type& Expression_Cast::_internal_type() const {
  const ::substrait::proto::Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& Expression_Cast::type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Cast.type)
  return _internal_type();
}
inline void Expression_Cast::unsafe_arena_set_allocated_type(
    ::substrait::proto::Type* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Cast.type)
}
inline ::substrait::proto::Type* Expression_Cast::release_type() {
  auto temp = unsafe_arena_release_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* Expression_Cast::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Cast.type)
  
  ::substrait::proto::Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* Expression_Cast::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::substrait::proto::Type* Expression_Cast::mutable_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Cast.type)
  return _internal_mutable_type();
}
inline void Expression_Cast::set_allocated_type(::substrait::proto::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Cast.type)
}

// .substrait.proto.Expression input = 2;
inline bool Expression_Cast::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Expression_Cast::has_input() const {
  return _internal_has_input();
}
inline void Expression_Cast::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_Cast::_internal_input() const {
  const ::substrait::proto::Expression* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_Cast::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Cast.input)
  return _internal_input();
}
inline void Expression_Cast::unsafe_arena_set_allocated_input(
    ::substrait::proto::Expression* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Cast.input)
}
inline ::substrait::proto::Expression* Expression_Cast::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_Cast::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Cast.input)
  
  ::substrait::proto::Expression* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_Cast::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Expression* Expression_Cast::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Cast.input)
  return _internal_mutable_input();
}
inline void Expression_Cast::set_allocated_input(::substrait::proto::Expression* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Cast.input)
}

// .substrait.proto.Expression.Cast.FailureBehavior failure_behavior = 3;
inline void Expression_Cast::clear_failure_behavior() {
  failure_behavior_ = 0;
}
inline ::substrait::proto::Expression_Cast_FailureBehavior Expression_Cast::_internal_failure_behavior() const {
  return static_cast< ::substrait::proto::Expression_Cast_FailureBehavior >(failure_behavior_);
}
inline ::substrait::proto::Expression_Cast_FailureBehavior Expression_Cast::failure_behavior() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Cast.failure_behavior)
  return _internal_failure_behavior();
}
inline void Expression_Cast::_internal_set_failure_behavior(::substrait::proto::Expression_Cast_FailureBehavior value) {
  
  failure_behavior_ = value;
}
inline void Expression_Cast::set_failure_behavior(::substrait::proto::Expression_Cast_FailureBehavior value) {
  _internal_set_failure_behavior(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Cast.failure_behavior)
}

// -------------------------------------------------------------------

// Expression_SwitchExpression_IfValue

// .substrait.proto.Expression.Literal if = 1;
inline bool Expression_SwitchExpression_IfValue::_internal_has_if_() const {
  return this != internal_default_instance() && if__ != nullptr;
}
inline bool Expression_SwitchExpression_IfValue::has_if_() const {
  return _internal_has_if_();
}
inline void Expression_SwitchExpression_IfValue::clear_if_() {
  if (GetArena() == nullptr && if__ != nullptr) {
    delete if__;
  }
  if__ = nullptr;
}
inline const ::substrait::proto::Expression_Literal& Expression_SwitchExpression_IfValue::_internal_if_() const {
  const ::substrait::proto::Expression_Literal* p = if__;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_Literal*>(
      &::substrait::proto::_Expression_Literal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal& Expression_SwitchExpression_IfValue::if_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SwitchExpression.IfValue.if)
  return _internal_if_();
}
inline void Expression_SwitchExpression_IfValue::unsafe_arena_set_allocated_if_(
    ::substrait::proto::Expression_Literal* if_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(if__);
  }
  if__ = if_;
  if (if_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.SwitchExpression.IfValue.if)
}
inline ::substrait::proto::Expression_Literal* Expression_SwitchExpression_IfValue::release_if_() {
  auto temp = unsafe_arena_release_if_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_SwitchExpression_IfValue::unsafe_arena_release_if_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.SwitchExpression.IfValue.if)
  
  ::substrait::proto::Expression_Literal* temp = if__;
  if__ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_SwitchExpression_IfValue::_internal_mutable_if_() {
  
  if (if__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_Literal>(GetArena());
    if__ = p;
  }
  return if__;
}
inline ::substrait::proto::Expression_Literal* Expression_SwitchExpression_IfValue::mutable_if_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SwitchExpression.IfValue.if)
  return _internal_mutable_if_();
}
inline void Expression_SwitchExpression_IfValue::set_allocated_if_(::substrait::proto::Expression_Literal* if_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete if__;
  }
  if (if_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(if_);
    if (message_arena != submessage_arena) {
      if_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_, submessage_arena);
    }
    
  } else {
    
  }
  if__ = if_;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.SwitchExpression.IfValue.if)
}

// .substrait.proto.Expression then = 2;
inline bool Expression_SwitchExpression_IfValue::_internal_has_then() const {
  return this != internal_default_instance() && then_ != nullptr;
}
inline bool Expression_SwitchExpression_IfValue::has_then() const {
  return _internal_has_then();
}
inline void Expression_SwitchExpression_IfValue::clear_then() {
  if (GetArena() == nullptr && then_ != nullptr) {
    delete then_;
  }
  then_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression_IfValue::_internal_then() const {
  const ::substrait::proto::Expression* p = then_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression_IfValue::then() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SwitchExpression.IfValue.then)
  return _internal_then();
}
inline void Expression_SwitchExpression_IfValue::unsafe_arena_set_allocated_then(
    ::substrait::proto::Expression* then) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(then_);
  }
  then_ = then;
  if (then) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.SwitchExpression.IfValue.then)
}
inline ::substrait::proto::Expression* Expression_SwitchExpression_IfValue::release_then() {
  auto temp = unsafe_arena_release_then();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression_IfValue::unsafe_arena_release_then() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.SwitchExpression.IfValue.then)
  
  ::substrait::proto::Expression* temp = then_;
  then_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression_IfValue::_internal_mutable_then() {
  
  if (then_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    then_ = p;
  }
  return then_;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression_IfValue::mutable_then() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SwitchExpression.IfValue.then)
  return _internal_mutable_then();
}
inline void Expression_SwitchExpression_IfValue::set_allocated_then(::substrait::proto::Expression* then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete then_;
  }
  if (then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(then);
    if (message_arena != submessage_arena) {
      then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then, submessage_arena);
    }
    
  } else {
    
  }
  then_ = then;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.SwitchExpression.IfValue.then)
}

// -------------------------------------------------------------------

// Expression_SwitchExpression

// .substrait.proto.Expression match = 3;
inline bool Expression_SwitchExpression::_internal_has_match() const {
  return this != internal_default_instance() && match_ != nullptr;
}
inline bool Expression_SwitchExpression::has_match() const {
  return _internal_has_match();
}
inline void Expression_SwitchExpression::clear_match() {
  if (GetArena() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression::_internal_match() const {
  const ::substrait::proto::Expression* p = match_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression::match() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SwitchExpression.match)
  return _internal_match();
}
inline void Expression_SwitchExpression::unsafe_arena_set_allocated_match(
    ::substrait::proto::Expression* match) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.SwitchExpression.match)
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::release_match() {
  auto temp = unsafe_arena_release_match();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.SwitchExpression.match)
  
  ::substrait::proto::Expression* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::_internal_mutable_match() {
  
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    match_ = p;
  }
  return match_;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::mutable_match() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SwitchExpression.match)
  return _internal_mutable_match();
}
inline void Expression_SwitchExpression::set_allocated_match(::substrait::proto::Expression* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete match_;
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    
  } else {
    
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.SwitchExpression.match)
}

// repeated .substrait.proto.Expression.SwitchExpression.IfValue ifs = 1;
inline int Expression_SwitchExpression::_internal_ifs_size() const {
  return ifs_.size();
}
inline int Expression_SwitchExpression::ifs_size() const {
  return _internal_ifs_size();
}
inline void Expression_SwitchExpression::clear_ifs() {
  ifs_.Clear();
}
inline ::substrait::proto::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::mutable_ifs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SwitchExpression.ifs)
  return ifs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_SwitchExpression_IfValue >*
Expression_SwitchExpression::mutable_ifs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.SwitchExpression.ifs)
  return &ifs_;
}
inline const ::substrait::proto::Expression_SwitchExpression_IfValue& Expression_SwitchExpression::_internal_ifs(int index) const {
  return ifs_.Get(index);
}
inline const ::substrait::proto::Expression_SwitchExpression_IfValue& Expression_SwitchExpression::ifs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SwitchExpression.ifs)
  return _internal_ifs(index);
}
inline ::substrait::proto::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::_internal_add_ifs() {
  return ifs_.Add();
}
inline ::substrait::proto::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::add_ifs() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.SwitchExpression.ifs)
  return _internal_add_ifs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_SwitchExpression_IfValue >&
Expression_SwitchExpression::ifs() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.SwitchExpression.ifs)
  return ifs_;
}

// .substrait.proto.Expression else = 2;
inline bool Expression_SwitchExpression::_internal_has_else_() const {
  return this != internal_default_instance() && else__ != nullptr;
}
inline bool Expression_SwitchExpression::has_else_() const {
  return _internal_has_else_();
}
inline void Expression_SwitchExpression::clear_else_() {
  if (GetArena() == nullptr && else__ != nullptr) {
    delete else__;
  }
  else__ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression::_internal_else_() const {
  const ::substrait::proto::Expression* p = else__;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_SwitchExpression::else_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SwitchExpression.else)
  return _internal_else_();
}
inline void Expression_SwitchExpression::unsafe_arena_set_allocated_else_(
    ::substrait::proto::Expression* else_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(else__);
  }
  else__ = else_;
  if (else_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.SwitchExpression.else)
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::release_else_() {
  auto temp = unsafe_arena_release_else_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::unsafe_arena_release_else_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.SwitchExpression.else)
  
  ::substrait::proto::Expression* temp = else__;
  else__ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::_internal_mutable_else_() {
  
  if (else__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    else__ = p;
  }
  return else__;
}
inline ::substrait::proto::Expression* Expression_SwitchExpression::mutable_else_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SwitchExpression.else)
  return _internal_mutable_else_();
}
inline void Expression_SwitchExpression::set_allocated_else_(::substrait::proto::Expression* else_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete else__;
  }
  if (else_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(else_);
    if (message_arena != submessage_arena) {
      else_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, else_, submessage_arena);
    }
    
  } else {
    
  }
  else__ = else_;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.SwitchExpression.else)
}

// -------------------------------------------------------------------

// Expression_SingularOrList

// .substrait.proto.Expression value = 1;
inline bool Expression_SingularOrList::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Expression_SingularOrList::has_value() const {
  return _internal_has_value();
}
inline void Expression_SingularOrList::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_SingularOrList::_internal_value() const {
  const ::substrait::proto::Expression* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_SingularOrList::value() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SingularOrList.value)
  return _internal_value();
}
inline void Expression_SingularOrList::unsafe_arena_set_allocated_value(
    ::substrait::proto::Expression* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.SingularOrList.value)
}
inline ::substrait::proto::Expression* Expression_SingularOrList::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_SingularOrList::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.SingularOrList.value)
  
  ::substrait::proto::Expression* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_SingularOrList::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::substrait::proto::Expression* Expression_SingularOrList::mutable_value() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SingularOrList.value)
  return _internal_mutable_value();
}
inline void Expression_SingularOrList::set_allocated_value(::substrait::proto::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.SingularOrList.value)
}

// repeated .substrait.proto.Expression options = 2;
inline int Expression_SingularOrList::_internal_options_size() const {
  return options_.size();
}
inline int Expression_SingularOrList::options_size() const {
  return _internal_options_size();
}
inline void Expression_SingularOrList::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::Expression* Expression_SingularOrList::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.SingularOrList.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_SingularOrList::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.SingularOrList.options)
  return &options_;
}
inline const ::substrait::proto::Expression& Expression_SingularOrList::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_SingularOrList::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.SingularOrList.options)
  return _internal_options(index);
}
inline ::substrait::proto::Expression* Expression_SingularOrList::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::Expression* Expression_SingularOrList::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.SingularOrList.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_SingularOrList::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.SingularOrList.options)
  return options_;
}

// -------------------------------------------------------------------

// Expression_MultiOrList_Record

// repeated .substrait.proto.Expression fields = 1;
inline int Expression_MultiOrList_Record::_internal_fields_size() const {
  return fields_.size();
}
inline int Expression_MultiOrList_Record::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_MultiOrList_Record::clear_fields() {
  fields_.Clear();
}
inline ::substrait::proto::Expression* Expression_MultiOrList_Record::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MultiOrList.Record.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_MultiOrList_Record::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.MultiOrList.Record.fields)
  return &fields_;
}
inline const ::substrait::proto::Expression& Expression_MultiOrList_Record::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_MultiOrList_Record::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MultiOrList.Record.fields)
  return _internal_fields(index);
}
inline ::substrait::proto::Expression* Expression_MultiOrList_Record::_internal_add_fields() {
  return fields_.Add();
}
inline ::substrait::proto::Expression* Expression_MultiOrList_Record::add_fields() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.MultiOrList.Record.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_MultiOrList_Record::fields() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.MultiOrList.Record.fields)
  return fields_;
}

// -------------------------------------------------------------------

// Expression_MultiOrList

// repeated .substrait.proto.Expression value = 1;
inline int Expression_MultiOrList::_internal_value_size() const {
  return value_.size();
}
inline int Expression_MultiOrList::value_size() const {
  return _internal_value_size();
}
inline void Expression_MultiOrList::clear_value() {
  value_.Clear();
}
inline ::substrait::proto::Expression* Expression_MultiOrList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MultiOrList.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_MultiOrList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.MultiOrList.value)
  return &value_;
}
inline const ::substrait::proto::Expression& Expression_MultiOrList::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_MultiOrList::value(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MultiOrList.value)
  return _internal_value(index);
}
inline ::substrait::proto::Expression* Expression_MultiOrList::_internal_add_value() {
  return value_.Add();
}
inline ::substrait::proto::Expression* Expression_MultiOrList::add_value() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.MultiOrList.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_MultiOrList::value() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.MultiOrList.value)
  return value_;
}

// repeated .substrait.proto.Expression.MultiOrList.Record options = 2;
inline int Expression_MultiOrList::_internal_options_size() const {
  return options_.size();
}
inline int Expression_MultiOrList::options_size() const {
  return _internal_options_size();
}
inline void Expression_MultiOrList::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::Expression_MultiOrList_Record* Expression_MultiOrList::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MultiOrList.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MultiOrList_Record >*
Expression_MultiOrList::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.MultiOrList.options)
  return &options_;
}
inline const ::substrait::proto::Expression_MultiOrList_Record& Expression_MultiOrList::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::Expression_MultiOrList_Record& Expression_MultiOrList::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MultiOrList.options)
  return _internal_options(index);
}
inline ::substrait::proto::Expression_MultiOrList_Record* Expression_MultiOrList::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::Expression_MultiOrList_Record* Expression_MultiOrList::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.MultiOrList.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MultiOrList_Record >&
Expression_MultiOrList::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.MultiOrList.options)
  return options_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction_PythonPickleFunction

// bytes function = 1;
inline void Expression_EmbeddedFunction_PythonPickleFunction::clear_function() {
  function_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::function() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return _internal_function();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_function(const std::string& value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::mutable_function() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return _internal_mutable_function();
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::_internal_function() const {
  return function_.Get();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::_internal_set_function(const std::string& value) {
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_function(std::string&& value) {
  
  function_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_function(const void* value,
    size_t size) {
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::_internal_mutable_function() {
  
  return function_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::release_function() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return function_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::unsafe_arena_set_allocated_function(
    std::string* function) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (function != nullptr) {
    
  } else {
    
  }
  function_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      function, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.function)
}

// repeated string prerequisite = 2;
inline int Expression_EmbeddedFunction_PythonPickleFunction::_internal_prerequisite_size() const {
  return prerequisite_.size();
}
inline int Expression_EmbeddedFunction_PythonPickleFunction::prerequisite_size() const {
  return _internal_prerequisite_size();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::clear_prerequisite() {
  prerequisite_.Clear();
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_add_prerequisite();
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::_internal_prerequisite(int index) const {
  return prerequisite_.Get(index);
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::prerequisite(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_prerequisite(index);
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::mutable_prerequisite(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return prerequisite_.Mutable(index);
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  prerequisite_.Mutable(index)->assign(value);
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  prerequisite_.Mutable(index)->assign(std::move(value));
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prerequisite_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const char* value, size_t size) {
  prerequisite_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::_internal_add_prerequisite() {
  return prerequisite_.Add();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const std::string& value) {
  prerequisite_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(std::string&& value) {
  prerequisite_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prerequisite_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const char* value, size_t size) {
  prerequisite_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_PythonPickleFunction::prerequisite() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return prerequisite_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Expression_EmbeddedFunction_PythonPickleFunction::mutable_prerequisite() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return &prerequisite_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction_WebAssemblyFunction

// bytes script = 1;
inline void Expression_EmbeddedFunction_WebAssemblyFunction::clear_script() {
  script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::script() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return _internal_script();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_script(const std::string& value) {
  _internal_set_script(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::mutable_script() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return _internal_mutable_script();
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::_internal_script() const {
  return script_.Get();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::_internal_set_script(const std::string& value) {
  
  script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_script(std::string&& value) {
  
  script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_script(const void* value,
    size_t size) {
  
  script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::_internal_mutable_script() {
  
  return script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::release_script() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::unsafe_arena_release_script() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return script_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::unsafe_arena_set_allocated_script(
    std::string* script) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (script != nullptr) {
    
  } else {
    
  }
  script_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      script, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}

// repeated string prerequisite = 2;
inline int Expression_EmbeddedFunction_WebAssemblyFunction::_internal_prerequisite_size() const {
  return prerequisite_.size();
}
inline int Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite_size() const {
  return _internal_prerequisite_size();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::clear_prerequisite() {
  prerequisite_.Clear();
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite() {
  // @@protoc_insertion_point(field_add_mutable:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_add_prerequisite();
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::_internal_prerequisite(int index) const {
  return prerequisite_.Get(index);
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_prerequisite(index);
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::mutable_prerequisite(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return prerequisite_.Mutable(index);
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  prerequisite_.Mutable(index)->assign(value);
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  prerequisite_.Mutable(index)->assign(std::move(value));
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prerequisite_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const char* value, size_t size) {
  prerequisite_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::_internal_add_prerequisite() {
  return prerequisite_.Add();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const std::string& value) {
  prerequisite_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(std::string&& value) {
  prerequisite_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prerequisite_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const char* value, size_t size) {
  prerequisite_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return prerequisite_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Expression_EmbeddedFunction_WebAssemblyFunction::mutable_prerequisite() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return &prerequisite_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction

// repeated .substrait.proto.Expression arguments = 1;
inline int Expression_EmbeddedFunction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Expression_EmbeddedFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_EmbeddedFunction::clear_arguments() {
  arguments_.Clear();
}
inline ::substrait::proto::Expression* Expression_EmbeddedFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_EmbeddedFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.EmbeddedFunction.arguments)
  return &arguments_;
}
inline const ::substrait::proto::Expression& Expression_EmbeddedFunction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_EmbeddedFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::proto::Expression* Expression_EmbeddedFunction::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::substrait::proto::Expression* Expression_EmbeddedFunction::add_arguments() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.EmbeddedFunction.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_EmbeddedFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.EmbeddedFunction.arguments)
  return arguments_;
}

// .substrait.proto.Type output_type = 2;
inline bool Expression_EmbeddedFunction::_internal_has_output_type() const {
  return this != internal_default_instance() && output_type_ != nullptr;
}
inline bool Expression_EmbeddedFunction::has_output_type() const {
  return _internal_has_output_type();
}
inline const ::substrait::proto::Type& Expression_EmbeddedFunction::_internal_output_type() const {
  const ::substrait::proto::Type* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& Expression_EmbeddedFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.output_type)
  return _internal_output_type();
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::proto::Type* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.EmbeddedFunction.output_type)
}
inline ::substrait::proto::Type* Expression_EmbeddedFunction::release_output_type() {
  auto temp = unsafe_arena_release_output_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* Expression_EmbeddedFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.EmbeddedFunction.output_type)
  
  ::substrait::proto::Type* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* Expression_EmbeddedFunction::_internal_mutable_output_type() {
  
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::substrait::proto::Type* Expression_EmbeddedFunction::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.output_type)
  return _internal_mutable_output_type();
}
inline void Expression_EmbeddedFunction::set_allocated_output_type(::substrait::proto::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type)->GetArena();
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    
  } else {
    
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.EmbeddedFunction.output_type)
}

// .substrait.proto.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
inline bool Expression_EmbeddedFunction::_internal_has_python_pickle_function() const {
  return kind_case() == kPythonPickleFunction;
}
inline bool Expression_EmbeddedFunction::has_python_pickle_function() const {
  return _internal_has_python_pickle_function();
}
inline void Expression_EmbeddedFunction::set_has_python_pickle_function() {
  _oneof_case_[0] = kPythonPickleFunction;
}
inline void Expression_EmbeddedFunction::clear_python_pickle_function() {
  if (_internal_has_python_pickle_function()) {
    if (GetArena() == nullptr) {
      delete kind_.python_pickle_function_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::release_python_pickle_function() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
  if (_internal_has_python_pickle_function()) {
    clear_has_kind();
      ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* temp = kind_.python_pickle_function_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.python_pickle_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction& Expression_EmbeddedFunction::_internal_python_pickle_function() const {
  return _internal_has_python_pickle_function()
      ? *kind_.python_pickle_function_
      : *reinterpret_cast< ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction*>(&::substrait::proto::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_);
}
inline const ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction& Expression_EmbeddedFunction::python_pickle_function() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
  return _internal_python_pickle_function();
}
inline ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::unsafe_arena_release_python_pickle_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
  if (_internal_has_python_pickle_function()) {
    clear_has_kind();
    ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* temp = kind_.python_pickle_function_;
    kind_.python_pickle_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_python_pickle_function(::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function) {
  clear_kind();
  if (python_pickle_function) {
    set_has_python_pickle_function();
    kind_.python_pickle_function_ = python_pickle_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
}
inline ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::_internal_mutable_python_pickle_function() {
  if (!_internal_has_python_pickle_function()) {
    clear_kind();
    set_has_python_pickle_function();
    kind_.python_pickle_function_ = CreateMaybeMessage< ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction >(GetArena());
  }
  return kind_.python_pickle_function_;
}
inline ::substrait::proto::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::mutable_python_pickle_function() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.python_pickle_function)
  return _internal_mutable_python_pickle_function();
}

// .substrait.proto.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
inline bool Expression_EmbeddedFunction::_internal_has_web_assembly_function() const {
  return kind_case() == kWebAssemblyFunction;
}
inline bool Expression_EmbeddedFunction::has_web_assembly_function() const {
  return _internal_has_web_assembly_function();
}
inline void Expression_EmbeddedFunction::set_has_web_assembly_function() {
  _oneof_case_[0] = kWebAssemblyFunction;
}
inline void Expression_EmbeddedFunction::clear_web_assembly_function() {
  if (_internal_has_web_assembly_function()) {
    if (GetArena() == nullptr) {
      delete kind_.web_assembly_function_;
    }
    clear_has_kind();
  }
}
inline ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::release_web_assembly_function() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
  if (_internal_has_web_assembly_function()) {
    clear_has_kind();
      ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* temp = kind_.web_assembly_function_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.web_assembly_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction& Expression_EmbeddedFunction::_internal_web_assembly_function() const {
  return _internal_has_web_assembly_function()
      ? *kind_.web_assembly_function_
      : *reinterpret_cast< ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction*>(&::substrait::proto::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_);
}
inline const ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction& Expression_EmbeddedFunction::web_assembly_function() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
  return _internal_web_assembly_function();
}
inline ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::unsafe_arena_release_web_assembly_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
  if (_internal_has_web_assembly_function()) {
    clear_has_kind();
    ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* temp = kind_.web_assembly_function_;
    kind_.web_assembly_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_web_assembly_function(::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function) {
  clear_kind();
  if (web_assembly_function) {
    set_has_web_assembly_function();
    kind_.web_assembly_function_ = web_assembly_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
}
inline ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::_internal_mutable_web_assembly_function() {
  if (!_internal_has_web_assembly_function()) {
    clear_kind();
    set_has_web_assembly_function();
    kind_.web_assembly_function_ = CreateMaybeMessage< ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction >(GetArena());
  }
  return kind_.web_assembly_function_;
}
inline ::substrait::proto::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::mutable_web_assembly_function() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.EmbeddedFunction.web_assembly_function)
  return _internal_mutable_web_assembly_function();
}

inline bool Expression_EmbeddedFunction::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Expression_EmbeddedFunction::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Expression_EmbeddedFunction::KindCase Expression_EmbeddedFunction::kind_case() const {
  return Expression_EmbeddedFunction::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_ReferenceSegment_MapKey

// .substrait.proto.Expression.Literal map_key = 1;
inline bool Expression_ReferenceSegment_MapKey::_internal_has_map_key() const {
  return this != internal_default_instance() && map_key_ != nullptr;
}
inline bool Expression_ReferenceSegment_MapKey::has_map_key() const {
  return _internal_has_map_key();
}
inline void Expression_ReferenceSegment_MapKey::clear_map_key() {
  if (GetArena() == nullptr && map_key_ != nullptr) {
    delete map_key_;
  }
  map_key_ = nullptr;
}
inline const ::substrait::proto::Expression_Literal& Expression_ReferenceSegment_MapKey::_internal_map_key() const {
  const ::substrait::proto::Expression_Literal* p = map_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_Literal*>(
      &::substrait::proto::_Expression_Literal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal& Expression_ReferenceSegment_MapKey::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.MapKey.map_key)
  return _internal_map_key();
}
inline void Expression_ReferenceSegment_MapKey::unsafe_arena_set_allocated_map_key(
    ::substrait::proto::Expression_Literal* map_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key_);
  }
  map_key_ = map_key;
  if (map_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.MapKey.map_key)
}
inline ::substrait::proto::Expression_Literal* Expression_ReferenceSegment_MapKey::release_map_key() {
  auto temp = unsafe_arena_release_map_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_ReferenceSegment_MapKey::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.MapKey.map_key)
  
  ::substrait::proto::Expression_Literal* temp = map_key_;
  map_key_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_Literal* Expression_ReferenceSegment_MapKey::_internal_mutable_map_key() {
  
  if (map_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_Literal>(GetArena());
    map_key_ = p;
  }
  return map_key_;
}
inline ::substrait::proto::Expression_Literal* Expression_ReferenceSegment_MapKey::mutable_map_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.MapKey.map_key)
  return _internal_mutable_map_key();
}
inline void Expression_ReferenceSegment_MapKey::set_allocated_map_key(::substrait::proto::Expression_Literal* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key_;
  }
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    
  } else {
    
  }
  map_key_ = map_key;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.MapKey.map_key)
}

// .substrait.proto.Expression.ReferenceSegment child = 2;
inline bool Expression_ReferenceSegment_MapKey::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_ReferenceSegment_MapKey::has_child() const {
  return _internal_has_child();
}
inline void Expression_ReferenceSegment_MapKey::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_MapKey::_internal_child() const {
  const ::substrait::proto::Expression_ReferenceSegment* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_ReferenceSegment*>(
      &::substrait::proto::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_MapKey::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.MapKey.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_MapKey::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_ReferenceSegment* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.MapKey.child)
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.MapKey.child)
  
  ::substrait::proto::Expression_ReferenceSegment* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.MapKey.child)
  return _internal_mutable_child();
}
inline void Expression_ReferenceSegment_MapKey::set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.MapKey.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment_StructField

// int32 field = 1;
inline void Expression_ReferenceSegment_StructField::clear_field() {
  field_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_ReferenceSegment_StructField::_internal_field() const {
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_ReferenceSegment_StructField::field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.StructField.field)
  return _internal_field();
}
inline void Expression_ReferenceSegment_StructField::_internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  field_ = value;
}
inline void Expression_ReferenceSegment_StructField::set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.ReferenceSegment.StructField.field)
}

// .substrait.proto.Expression.ReferenceSegment child = 2;
inline bool Expression_ReferenceSegment_StructField::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_ReferenceSegment_StructField::has_child() const {
  return _internal_has_child();
}
inline void Expression_ReferenceSegment_StructField::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_StructField::_internal_child() const {
  const ::substrait::proto::Expression_ReferenceSegment* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_ReferenceSegment*>(
      &::substrait::proto::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_StructField::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.StructField.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_StructField::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_ReferenceSegment* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.StructField.child)
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.StructField.child)
  
  ::substrait::proto::Expression_ReferenceSegment* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.StructField.child)
  return _internal_mutable_child();
}
inline void Expression_ReferenceSegment_StructField::set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.StructField.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment_ListElement

// int32 offset = 1;
inline void Expression_ReferenceSegment_ListElement::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_ReferenceSegment_ListElement::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_ReferenceSegment_ListElement::offset() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.ListElement.offset)
  return _internal_offset();
}
inline void Expression_ReferenceSegment_ListElement::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void Expression_ReferenceSegment_ListElement::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.ReferenceSegment.ListElement.offset)
}

// .substrait.proto.Expression.ReferenceSegment child = 2;
inline bool Expression_ReferenceSegment_ListElement::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_ReferenceSegment_ListElement::has_child() const {
  return _internal_has_child();
}
inline void Expression_ReferenceSegment_ListElement::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_ListElement::_internal_child() const {
  const ::substrait::proto::Expression_ReferenceSegment* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_ReferenceSegment*>(
      &::substrait::proto::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_ReferenceSegment_ListElement::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.ListElement.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_ListElement::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_ReferenceSegment* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.ListElement.child)
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.ListElement.child)
  
  ::substrait::proto::Expression_ReferenceSegment* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_ReferenceSegment>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.ListElement.child)
  return _internal_mutable_child();
}
inline void Expression_ReferenceSegment_ListElement::set_allocated_child(::substrait::proto::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.ReferenceSegment.ListElement.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment

// .substrait.proto.Expression.ReferenceSegment.MapKey map_key = 1;
inline bool Expression_ReferenceSegment::_internal_has_map_key() const {
  return reference_type_case() == kMapKey;
}
inline bool Expression_ReferenceSegment::has_map_key() const {
  return _internal_has_map_key();
}
inline void Expression_ReferenceSegment::set_has_map_key() {
  _oneof_case_[0] = kMapKey;
}
inline void Expression_ReferenceSegment::clear_map_key() {
  if (_internal_has_map_key()) {
    if (GetArena() == nullptr) {
      delete reference_type_.map_key_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::proto::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.map_key)
  if (_internal_has_map_key()) {
    clear_has_reference_type();
      ::substrait::proto::Expression_ReferenceSegment_MapKey* temp = reference_type_.map_key_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_type_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_ReferenceSegment_MapKey& Expression_ReferenceSegment::_internal_map_key() const {
  return _internal_has_map_key()
      ? *reference_type_.map_key_
      : *reinterpret_cast< ::substrait::proto::Expression_ReferenceSegment_MapKey*>(&::substrait::proto::_Expression_ReferenceSegment_MapKey_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment_MapKey& Expression_ReferenceSegment::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.map_key)
  return _internal_map_key();
}
inline ::substrait::proto::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.ReferenceSegment.map_key)
  if (_internal_has_map_key()) {
    clear_has_reference_type();
    ::substrait::proto::Expression_ReferenceSegment_MapKey* temp = reference_type_.map_key_;
    reference_type_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_map_key(::substrait::proto::Expression_ReferenceSegment_MapKey* map_key) {
  clear_reference_type();
  if (map_key) {
    set_has_map_key();
    reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.map_key)
}
inline ::substrait::proto::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::_internal_mutable_map_key() {
  if (!_internal_has_map_key()) {
    clear_reference_type();
    set_has_map_key();
    reference_type_.map_key_ = CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_MapKey >(GetArena());
  }
  return reference_type_.map_key_;
}
inline ::substrait::proto::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::mutable_map_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.map_key)
  return _internal_mutable_map_key();
}

// .substrait.proto.Expression.ReferenceSegment.StructField struct_field = 2;
inline bool Expression_ReferenceSegment::_internal_has_struct_field() const {
  return reference_type_case() == kStructField;
}
inline bool Expression_ReferenceSegment::has_struct_field() const {
  return _internal_has_struct_field();
}
inline void Expression_ReferenceSegment::set_has_struct_field() {
  _oneof_case_[0] = kStructField;
}
inline void Expression_ReferenceSegment::clear_struct_field() {
  if (_internal_has_struct_field()) {
    if (GetArena() == nullptr) {
      delete reference_type_.struct_field_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::proto::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::release_struct_field() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.struct_field)
  if (_internal_has_struct_field()) {
    clear_has_reference_type();
      ::substrait::proto::Expression_ReferenceSegment_StructField* temp = reference_type_.struct_field_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_type_.struct_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_ReferenceSegment_StructField& Expression_ReferenceSegment::_internal_struct_field() const {
  return _internal_has_struct_field()
      ? *reference_type_.struct_field_
      : *reinterpret_cast< ::substrait::proto::Expression_ReferenceSegment_StructField*>(&::substrait::proto::_Expression_ReferenceSegment_StructField_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment_StructField& Expression_ReferenceSegment::struct_field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.struct_field)
  return _internal_struct_field();
}
inline ::substrait::proto::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::unsafe_arena_release_struct_field() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.ReferenceSegment.struct_field)
  if (_internal_has_struct_field()) {
    clear_has_reference_type();
    ::substrait::proto::Expression_ReferenceSegment_StructField* temp = reference_type_.struct_field_;
    reference_type_.struct_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_struct_field(::substrait::proto::Expression_ReferenceSegment_StructField* struct_field) {
  clear_reference_type();
  if (struct_field) {
    set_has_struct_field();
    reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.struct_field)
}
inline ::substrait::proto::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::_internal_mutable_struct_field() {
  if (!_internal_has_struct_field()) {
    clear_reference_type();
    set_has_struct_field();
    reference_type_.struct_field_ = CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_StructField >(GetArena());
  }
  return reference_type_.struct_field_;
}
inline ::substrait::proto::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::mutable_struct_field() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.struct_field)
  return _internal_mutable_struct_field();
}

// .substrait.proto.Expression.ReferenceSegment.ListElement list_element = 3;
inline bool Expression_ReferenceSegment::_internal_has_list_element() const {
  return reference_type_case() == kListElement;
}
inline bool Expression_ReferenceSegment::has_list_element() const {
  return _internal_has_list_element();
}
inline void Expression_ReferenceSegment::set_has_list_element() {
  _oneof_case_[0] = kListElement;
}
inline void Expression_ReferenceSegment::clear_list_element() {
  if (_internal_has_list_element()) {
    if (GetArena() == nullptr) {
      delete reference_type_.list_element_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::proto::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::release_list_element() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.ReferenceSegment.list_element)
  if (_internal_has_list_element()) {
    clear_has_reference_type();
      ::substrait::proto::Expression_ReferenceSegment_ListElement* temp = reference_type_.list_element_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_type_.list_element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_ReferenceSegment_ListElement& Expression_ReferenceSegment::_internal_list_element() const {
  return _internal_has_list_element()
      ? *reference_type_.list_element_
      : *reinterpret_cast< ::substrait::proto::Expression_ReferenceSegment_ListElement*>(&::substrait::proto::_Expression_ReferenceSegment_ListElement_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment_ListElement& Expression_ReferenceSegment::list_element() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.ReferenceSegment.list_element)
  return _internal_list_element();
}
inline ::substrait::proto::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::unsafe_arena_release_list_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.ReferenceSegment.list_element)
  if (_internal_has_list_element()) {
    clear_has_reference_type();
    ::substrait::proto::Expression_ReferenceSegment_ListElement* temp = reference_type_.list_element_;
    reference_type_.list_element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_list_element(::substrait::proto::Expression_ReferenceSegment_ListElement* list_element) {
  clear_reference_type();
  if (list_element) {
    set_has_list_element();
    reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.ReferenceSegment.list_element)
}
inline ::substrait::proto::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::_internal_mutable_list_element() {
  if (!_internal_has_list_element()) {
    clear_reference_type();
    set_has_list_element();
    reference_type_.list_element_ = CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment_ListElement >(GetArena());
  }
  return reference_type_.list_element_;
}
inline ::substrait::proto::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::mutable_list_element() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.ReferenceSegment.list_element)
  return _internal_mutable_list_element();
}

inline bool Expression_ReferenceSegment::has_reference_type() const {
  return reference_type_case() != REFERENCE_TYPE_NOT_SET;
}
inline void Expression_ReferenceSegment::clear_has_reference_type() {
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}
inline Expression_ReferenceSegment::ReferenceTypeCase Expression_ReferenceSegment::reference_type_case() const {
  return Expression_ReferenceSegment::ReferenceTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_Select

// .substrait.proto.Expression.MaskExpression.StructSelect struct = 1;
inline bool Expression_MaskExpression_Select::_internal_has_struct_() const {
  return type_case() == kStruct;
}
inline bool Expression_MaskExpression_Select::has_struct_() const {
  return _internal_has_struct_();
}
inline void Expression_MaskExpression_Select::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void Expression_MaskExpression_Select::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArena() == nullptr) {
      delete type_.struct__;
    }
    clear_has_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.Select.struct)
  if (_internal_has_struct_()) {
    clear_has_type();
      ::substrait::proto::Expression_MaskExpression_StructSelect* temp = type_.struct__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_StructSelect& Expression_MaskExpression_Select::_internal_struct_() const {
  return _internal_has_struct_()
      ? *type_.struct__
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_StructSelect*>(&::substrait::proto::_Expression_MaskExpression_StructSelect_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_StructSelect& Expression_MaskExpression_Select::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.Select.struct)
  return _internal_struct_();
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.Select.struct)
  if (_internal_has_struct_()) {
    clear_has_type();
    ::substrait::proto::Expression_MaskExpression_StructSelect* temp = type_.struct__;
    type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_struct_(::substrait::proto::Expression_MaskExpression_StructSelect* struct_) {
  clear_type();
  if (struct_) {
    set_has_struct_();
    type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.Select.struct)
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_type();
    set_has_struct_();
    type_.struct__ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_StructSelect >(GetArena());
  }
  return type_.struct__;
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.Select.struct)
  return _internal_mutable_struct_();
}

// .substrait.proto.Expression.MaskExpression.ListSelect list = 2;
inline bool Expression_MaskExpression_Select::_internal_has_list() const {
  return type_case() == kList;
}
inline bool Expression_MaskExpression_Select::has_list() const {
  return _internal_has_list();
}
inline void Expression_MaskExpression_Select::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Expression_MaskExpression_Select::clear_list() {
  if (_internal_has_list()) {
    if (GetArena() == nullptr) {
      delete type_.list_;
    }
    clear_has_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::release_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.Select.list)
  if (_internal_has_list()) {
    clear_has_type();
      ::substrait::proto::Expression_MaskExpression_ListSelect* temp = type_.list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect& Expression_MaskExpression_Select::_internal_list() const {
  return _internal_has_list()
      ? *type_.list_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_ListSelect*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect& Expression_MaskExpression_Select::list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.Select.list)
  return _internal_list();
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.Select.list)
  if (_internal_has_list()) {
    clear_has_type();
    ::substrait::proto::Expression_MaskExpression_ListSelect* temp = type_.list_;
    type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_list(::substrait::proto::Expression_MaskExpression_ListSelect* list) {
  clear_type();
  if (list) {
    set_has_list();
    type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.Select.list)
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_type();
    set_has_list();
    type_.list_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect >(GetArena());
  }
  return type_.list_;
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::mutable_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.Select.list)
  return _internal_mutable_list();
}

// .substrait.proto.Expression.MaskExpression.MapSelect map = 3;
inline bool Expression_MaskExpression_Select::_internal_has_map() const {
  return type_case() == kMap;
}
inline bool Expression_MaskExpression_Select::has_map() const {
  return _internal_has_map();
}
inline void Expression_MaskExpression_Select::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void Expression_MaskExpression_Select::clear_map() {
  if (_internal_has_map()) {
    if (GetArena() == nullptr) {
      delete type_.map_;
    }
    clear_has_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::release_map() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.Select.map)
  if (_internal_has_map()) {
    clear_has_type();
      ::substrait::proto::Expression_MaskExpression_MapSelect* temp = type_.map_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect& Expression_MaskExpression_Select::_internal_map() const {
  return _internal_has_map()
      ? *type_.map_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_MapSelect*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect& Expression_MaskExpression_Select::map() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.Select.map)
  return _internal_map();
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.Select.map)
  if (_internal_has_map()) {
    clear_has_type();
    ::substrait::proto::Expression_MaskExpression_MapSelect* temp = type_.map_;
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_map(::substrait::proto::Expression_MaskExpression_MapSelect* map) {
  clear_type();
  if (map) {
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.Select.map)
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_type();
    set_has_map();
    type_.map_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect >(GetArena());
  }
  return type_.map_;
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::mutable_map() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.Select.map)
  return _internal_mutable_map();
}

inline bool Expression_MaskExpression_Select::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Expression_MaskExpression_Select::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Expression_MaskExpression_Select::TypeCase Expression_MaskExpression_Select::type_case() const {
  return Expression_MaskExpression_Select::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_StructSelect

// repeated .substrait.proto.Expression.MaskExpression.StructItem struct_items = 1;
inline int Expression_MaskExpression_StructSelect::_internal_struct_items_size() const {
  return struct_items_.size();
}
inline int Expression_MaskExpression_StructSelect::struct_items_size() const {
  return _internal_struct_items_size();
}
inline void Expression_MaskExpression_StructSelect::clear_struct_items() {
  struct_items_.Clear();
}
inline ::substrait::proto::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::mutable_struct_items(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.StructSelect.struct_items)
  return struct_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_StructItem >*
Expression_MaskExpression_StructSelect::mutable_struct_items() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.MaskExpression.StructSelect.struct_items)
  return &struct_items_;
}
inline const ::substrait::proto::Expression_MaskExpression_StructItem& Expression_MaskExpression_StructSelect::_internal_struct_items(int index) const {
  return struct_items_.Get(index);
}
inline const ::substrait::proto::Expression_MaskExpression_StructItem& Expression_MaskExpression_StructSelect::struct_items(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_struct_items(index);
}
inline ::substrait::proto::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::_internal_add_struct_items() {
  return struct_items_.Add();
}
inline ::substrait::proto::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::add_struct_items() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_add_struct_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_StructItem >&
Expression_MaskExpression_StructSelect::struct_items() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.MaskExpression.StructSelect.struct_items)
  return struct_items_;
}

// -------------------------------------------------------------------

// Expression_MaskExpression_StructItem

// int32 field = 1;
inline void Expression_MaskExpression_StructItem::clear_field() {
  field_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_StructItem::_internal_field() const {
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_StructItem::field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.StructItem.field)
  return _internal_field();
}
inline void Expression_MaskExpression_StructItem::_internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  field_ = value;
}
inline void Expression_MaskExpression_StructItem::set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.StructItem.field)
}

// .substrait.proto.Expression.MaskExpression.Select child = 2;
inline bool Expression_MaskExpression_StructItem::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_MaskExpression_StructItem::has_child() const {
  return _internal_has_child();
}
inline void Expression_MaskExpression_StructItem::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_StructItem::_internal_child() const {
  const ::substrait::proto::Expression_MaskExpression_Select* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_MaskExpression_Select*>(
      &::substrait::proto::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_StructItem::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.StructItem.child)
  return _internal_child();
}
inline void Expression_MaskExpression_StructItem::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_MaskExpression_Select* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.StructItem.child)
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.StructItem.child)
  
  ::substrait::proto::Expression_MaskExpression_Select* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_Select>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.StructItem.child)
  return _internal_mutable_child();
}
inline void Expression_MaskExpression_StructItem::set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.StructItem.child)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem_ListElement

// int32 field = 1;
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::clear_field() {
  field_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_internal_field() const {
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::field() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement.field)
  return _internal_field();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_internal_set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  field_ = value;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement.field)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice

// int32 start = 1;
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::start() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.start)
  return _internal_start();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.start)
}

// int32 end = 2;
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::end() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.end)
  return _internal_end();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.end)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem

// .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::_internal_has_item() const {
  return type_case() == kItem;
}
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_item() const {
  return _internal_has_item();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_item() {
  if (_internal_has_item()) {
    if (GetArena() == nullptr) {
      delete type_.item_;
    }
    clear_has_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::release_item() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  if (_internal_has_item()) {
    clear_has_type();
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* temp = type_.item_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& Expression_MaskExpression_ListSelect_ListSelectItem::_internal_item() const {
  return _internal_has_item()
      ? *type_.item_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& Expression_MaskExpression_ListSelect_ListSelectItem::item() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  return _internal_item();
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  if (_internal_has_item()) {
    clear_has_type();
    ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* temp = type_.item_;
    type_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_set_allocated_item(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  clear_type();
  if (item) {
    set_has_item();
    type_.item_ = item;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::_internal_mutable_item() {
  if (!_internal_has_item()) {
    clear_type();
    set_has_item();
    type_.item_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(GetArena());
  }
  return type_.item_;
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  return _internal_mutable_item();
}

// .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::_internal_has_slice() const {
  return type_case() == kSlice;
}
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_slice() const {
  return _internal_has_slice();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::set_has_slice() {
  _oneof_case_[0] = kSlice;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_slice() {
  if (_internal_has_slice()) {
    if (GetArena() == nullptr) {
      delete type_.slice_;
    }
    clear_has_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::release_slice() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  if (_internal_has_slice()) {
    clear_has_type();
      ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* temp = type_.slice_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& Expression_MaskExpression_ListSelect_ListSelectItem::_internal_slice() const {
  return _internal_has_slice()
      ? *type_.slice_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*>(&::substrait::proto::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& Expression_MaskExpression_ListSelect_ListSelectItem::slice() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  return _internal_slice();
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_release_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  if (_internal_has_slice()) {
    clear_has_type();
    ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* temp = type_.slice_;
    type_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_set_allocated_slice(::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  clear_type();
  if (slice) {
    set_has_slice();
    type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::_internal_mutable_slice() {
  if (!_internal_has_slice()) {
    clear_type();
    set_has_slice();
    type_.slice_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(GetArena());
  }
  return type_.slice_;
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::mutable_slice() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  return _internal_mutable_slice();
}

inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Expression_MaskExpression_ListSelect_ListSelectItem::TypeCase Expression_MaskExpression_ListSelect_ListSelectItem::type_case() const {
  return Expression_MaskExpression_ListSelect_ListSelectItem::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect

// repeated .substrait.proto.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
inline int Expression_MaskExpression_ListSelect::_internal_selection_size() const {
  return selection_.size();
}
inline int Expression_MaskExpression_ListSelect::selection_size() const {
  return _internal_selection_size();
}
inline void Expression_MaskExpression_ListSelect::clear_selection() {
  selection_.Clear();
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::mutable_selection(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.ListSelect.selection)
  return selection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >*
Expression_MaskExpression_ListSelect::mutable_selection() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.MaskExpression.ListSelect.selection)
  return &selection_;
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem& Expression_MaskExpression_ListSelect::_internal_selection(int index) const {
  return selection_.Get(index);
}
inline const ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem& Expression_MaskExpression_ListSelect::selection(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.selection)
  return _internal_selection(index);
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::_internal_add_selection() {
  return selection_.Add();
}
inline ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::add_selection() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.MaskExpression.ListSelect.selection)
  return _internal_add_selection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression_MaskExpression_ListSelect_ListSelectItem >&
Expression_MaskExpression_ListSelect::selection() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.MaskExpression.ListSelect.selection)
  return selection_;
}

// .substrait.proto.Expression.MaskExpression.Select child = 2;
inline bool Expression_MaskExpression_ListSelect::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_MaskExpression_ListSelect::has_child() const {
  return _internal_has_child();
}
inline void Expression_MaskExpression_ListSelect::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_ListSelect::_internal_child() const {
  const ::substrait::proto::Expression_MaskExpression_Select* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_MaskExpression_Select*>(
      &::substrait::proto::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_ListSelect::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.ListSelect.child)
  return _internal_child();
}
inline void Expression_MaskExpression_ListSelect::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_MaskExpression_Select* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.child)
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.ListSelect.child)
  
  ::substrait::proto::Expression_MaskExpression_Select* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_Select>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.ListSelect.child)
  return _internal_mutable_child();
}
inline void Expression_MaskExpression_ListSelect::set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.ListSelect.child)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect_MapKey

// string map_key = 1;
inline void Expression_MaskExpression_MapSelect_MapKey::clear_map_key() {
  map_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKey::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return _internal_map_key();
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_map_key(const std::string& value) {
  _internal_set_map_key(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::mutable_map_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return _internal_mutable_map_key();
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKey::_internal_map_key() const {
  return map_key_.Get();
}
inline void Expression_MaskExpression_MapSelect_MapKey::_internal_set_map_key(const std::string& value) {
  
  map_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_map_key(std::string&& value) {
  
  map_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_map_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_map_key(const char* value,
    size_t size) {
  
  map_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::_internal_mutable_map_key() {
  
  return map_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return map_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_allocated_map_key(std::string* map_key) {
  if (map_key != nullptr) {
    
  } else {
    
  }
  map_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKey::unsafe_arena_set_allocated_map_key(
    std::string* map_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_key != nullptr) {
    
  } else {
    
  }
  map_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.MapKey.map_key)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect_MapKeyExpression

// string map_key_expression = 1;
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::clear_map_key_expression() {
  map_key_expression_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKeyExpression::map_key_expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return _internal_map_key_expression();
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_map_key_expression(const std::string& value) {
  _internal_set_map_key_expression(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::mutable_map_key_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return _internal_mutable_map_key_expression();
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_map_key_expression() const {
  return map_key_expression_.Get();
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_set_map_key_expression(const std::string& value) {
  
  map_key_expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_map_key_expression(std::string&& value) {
  
  map_key_expression_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_map_key_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_key_expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_map_key_expression(const char* value,
    size_t size) {
  
  map_key_expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_mutable_map_key_expression() {
  
  return map_key_expression_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::release_map_key_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return map_key_expression_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_allocated_map_key_expression(std::string* map_key_expression) {
  if (map_key_expression != nullptr) {
    
  } else {
    
  }
  map_key_expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_key_expression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::unsafe_arena_release_map_key_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return map_key_expression_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::unsafe_arena_set_allocated_map_key_expression(
    std::string* map_key_expression) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (map_key_expression != nullptr) {
    
  } else {
    
  }
  map_key_expression_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      map_key_expression, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect

// .substrait.proto.Expression.MaskExpression.MapSelect.MapKey key = 1;
inline bool Expression_MaskExpression_MapSelect::_internal_has_key() const {
  return select_case() == kKey;
}
inline bool Expression_MaskExpression_MapSelect::has_key() const {
  return _internal_has_key();
}
inline void Expression_MaskExpression_MapSelect::set_has_key() {
  _oneof_case_[0] = kKey;
}
inline void Expression_MaskExpression_MapSelect::clear_key() {
  if (_internal_has_key()) {
    if (GetArena() == nullptr) {
      delete select_.key_;
    }
    clear_has_select();
  }
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::release_key() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.MapSelect.key)
  if (_internal_has_key()) {
    clear_has_select();
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* temp = select_.key_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    select_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey& Expression_MaskExpression_MapSelect::_internal_key() const {
  return _internal_has_key()
      ? *select_.key_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_MapKey_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey& Expression_MaskExpression_MapSelect::key() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.MapSelect.key)
  return _internal_key();
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.MapSelect.key)
  if (_internal_has_key()) {
    clear_has_select();
    ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* temp = select_.key_;
    select_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_key(::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* key) {
  clear_select();
  if (key) {
    set_has_key();
    select_.key_ = key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.key)
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::_internal_mutable_key() {
  if (!_internal_has_key()) {
    clear_select();
    set_has_key();
    select_.key_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey >(GetArena());
  }
  return select_.key_;
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::mutable_key() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.MapSelect.key)
  return _internal_mutable_key();
}

// .substrait.proto.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
inline bool Expression_MaskExpression_MapSelect::_internal_has_expression() const {
  return select_case() == kExpression;
}
inline bool Expression_MaskExpression_MapSelect::has_expression() const {
  return _internal_has_expression();
}
inline void Expression_MaskExpression_MapSelect::set_has_expression() {
  _oneof_case_[0] = kExpression;
}
inline void Expression_MaskExpression_MapSelect::clear_expression() {
  if (_internal_has_expression()) {
    if (GetArena() == nullptr) {
      delete select_.expression_;
    }
    clear_has_select();
  }
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.MapSelect.expression)
  if (_internal_has_expression()) {
    clear_has_select();
      ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* temp = select_.expression_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    select_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression& Expression_MaskExpression_MapSelect::_internal_expression() const {
  return _internal_has_expression()
      ? *select_.expression_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression*>(&::substrait::proto::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression& Expression_MaskExpression_MapSelect::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.MapSelect.expression)
  return _internal_expression();
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.MaskExpression.MapSelect.expression)
  if (_internal_has_expression()) {
    clear_has_select();
    ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* temp = select_.expression_;
    select_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_expression(::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* expression) {
  clear_select();
  if (expression) {
    set_has_expression();
    select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.expression)
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::_internal_mutable_expression() {
  if (!_internal_has_expression()) {
    clear_select();
    set_has_expression();
    select_.expression_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression >(GetArena());
  }
  return select_.expression_;
}
inline ::substrait::proto::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.MapSelect.expression)
  return _internal_mutable_expression();
}

// .substrait.proto.Expression.MaskExpression.Select child = 3;
inline bool Expression_MaskExpression_MapSelect::_internal_has_child() const {
  return this != internal_default_instance() && child_ != nullptr;
}
inline bool Expression_MaskExpression_MapSelect::has_child() const {
  return _internal_has_child();
}
inline void Expression_MaskExpression_MapSelect::clear_child() {
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_MapSelect::_internal_child() const {
  const ::substrait::proto::Expression_MaskExpression_Select* p = child_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_MaskExpression_Select*>(
      &::substrait::proto::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_Select& Expression_MaskExpression_MapSelect::child() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.MapSelect.child)
  return _internal_child();
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_child(
    ::substrait::proto::Expression_MaskExpression_Select* child) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.child)
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::release_child() {
  auto temp = unsafe_arena_release_child();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.MapSelect.child)
  
  ::substrait::proto::Expression_MaskExpression_Select* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::_internal_mutable_child() {
  
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_Select>(GetArena());
    child_ = p;
  }
  return child_;
}
inline ::substrait::proto::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::mutable_child() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.MapSelect.child)
  return _internal_mutable_child();
}
inline void Expression_MaskExpression_MapSelect::set_allocated_child(::substrait::proto::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    
  } else {
    
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.MapSelect.child)
}

inline bool Expression_MaskExpression_MapSelect::has_select() const {
  return select_case() != SELECT_NOT_SET;
}
inline void Expression_MaskExpression_MapSelect::clear_has_select() {
  _oneof_case_[0] = SELECT_NOT_SET;
}
inline Expression_MaskExpression_MapSelect::SelectCase Expression_MaskExpression_MapSelect::select_case() const {
  return Expression_MaskExpression_MapSelect::SelectCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression

// .substrait.proto.Expression.MaskExpression.StructSelect select = 1;
inline bool Expression_MaskExpression::_internal_has_select() const {
  return this != internal_default_instance() && select_ != nullptr;
}
inline bool Expression_MaskExpression::has_select() const {
  return _internal_has_select();
}
inline void Expression_MaskExpression::clear_select() {
  if (GetArena() == nullptr && select_ != nullptr) {
    delete select_;
  }
  select_ = nullptr;
}
inline const ::substrait::proto::Expression_MaskExpression_StructSelect& Expression_MaskExpression::_internal_select() const {
  const ::substrait::proto::Expression_MaskExpression_StructSelect* p = select_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression_MaskExpression_StructSelect*>(
      &::substrait::proto::_Expression_MaskExpression_StructSelect_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression_StructSelect& Expression_MaskExpression::select() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.select)
  return _internal_select();
}
inline void Expression_MaskExpression::unsafe_arena_set_allocated_select(
    ::substrait::proto::Expression_MaskExpression_StructSelect* select) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_);
  }
  select_ = select;
  if (select) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.MaskExpression.select)
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression::release_select() {
  auto temp = unsafe_arena_release_select();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression::unsafe_arena_release_select() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.MaskExpression.select)
  
  ::substrait::proto::Expression_MaskExpression_StructSelect* temp = select_;
  select_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression::_internal_mutable_select() {
  
  if (select_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression_MaskExpression_StructSelect>(GetArena());
    select_ = p;
  }
  return select_;
}
inline ::substrait::proto::Expression_MaskExpression_StructSelect* Expression_MaskExpression::mutable_select() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.MaskExpression.select)
  return _internal_mutable_select();
}
inline void Expression_MaskExpression::set_allocated_select(::substrait::proto::Expression_MaskExpression_StructSelect* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_;
  }
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    
  } else {
    
  }
  select_ = select;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.MaskExpression.select)
}

// bool maintain_singular_struct = 2;
inline void Expression_MaskExpression::clear_maintain_singular_struct() {
  maintain_singular_struct_ = false;
}
inline bool Expression_MaskExpression::_internal_maintain_singular_struct() const {
  return maintain_singular_struct_;
}
inline bool Expression_MaskExpression::maintain_singular_struct() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.MaskExpression.maintain_singular_struct)
  return _internal_maintain_singular_struct();
}
inline void Expression_MaskExpression::_internal_set_maintain_singular_struct(bool value) {
  
  maintain_singular_struct_ = value;
}
inline void Expression_MaskExpression::set_maintain_singular_struct(bool value) {
  _internal_set_maintain_singular_struct(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.MaskExpression.maintain_singular_struct)
}

// -------------------------------------------------------------------

// Expression_FieldReference_RootReference

// -------------------------------------------------------------------

// Expression_FieldReference_OuterReference

// uint32 steps_out = 1;
inline void Expression_FieldReference_OuterReference::clear_steps_out() {
  steps_out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_FieldReference_OuterReference::_internal_steps_out() const {
  return steps_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expression_FieldReference_OuterReference::steps_out() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.OuterReference.steps_out)
  return _internal_steps_out();
}
inline void Expression_FieldReference_OuterReference::_internal_set_steps_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  steps_out_ = value;
}
inline void Expression_FieldReference_OuterReference::set_steps_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steps_out(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.FieldReference.OuterReference.steps_out)
}

// -------------------------------------------------------------------

// Expression_FieldReference

// .substrait.proto.Expression.ReferenceSegment direct_reference = 1;
inline bool Expression_FieldReference::_internal_has_direct_reference() const {
  return reference_type_case() == kDirectReference;
}
inline bool Expression_FieldReference::has_direct_reference() const {
  return _internal_has_direct_reference();
}
inline void Expression_FieldReference::set_has_direct_reference() {
  _oneof_case_[0] = kDirectReference;
}
inline void Expression_FieldReference::clear_direct_reference() {
  if (_internal_has_direct_reference()) {
    if (GetArena() == nullptr) {
      delete reference_type_.direct_reference_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_FieldReference::release_direct_reference() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.FieldReference.direct_reference)
  if (_internal_has_direct_reference()) {
    clear_has_reference_type();
      ::substrait::proto::Expression_ReferenceSegment* temp = reference_type_.direct_reference_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_type_.direct_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_FieldReference::_internal_direct_reference() const {
  return _internal_has_direct_reference()
      ? *reference_type_.direct_reference_
      : *reinterpret_cast< ::substrait::proto::Expression_ReferenceSegment*>(&::substrait::proto::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::proto::Expression_ReferenceSegment& Expression_FieldReference::direct_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.direct_reference)
  return _internal_direct_reference();
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_FieldReference::unsafe_arena_release_direct_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.FieldReference.direct_reference)
  if (_internal_has_direct_reference()) {
    clear_has_reference_type();
    ::substrait::proto::Expression_ReferenceSegment* temp = reference_type_.direct_reference_;
    reference_type_.direct_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_direct_reference(::substrait::proto::Expression_ReferenceSegment* direct_reference) {
  clear_reference_type();
  if (direct_reference) {
    set_has_direct_reference();
    reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.FieldReference.direct_reference)
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_FieldReference::_internal_mutable_direct_reference() {
  if (!_internal_has_direct_reference()) {
    clear_reference_type();
    set_has_direct_reference();
    reference_type_.direct_reference_ = CreateMaybeMessage< ::substrait::proto::Expression_ReferenceSegment >(GetArena());
  }
  return reference_type_.direct_reference_;
}
inline ::substrait::proto::Expression_ReferenceSegment* Expression_FieldReference::mutable_direct_reference() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.FieldReference.direct_reference)
  return _internal_mutable_direct_reference();
}

// .substrait.proto.Expression.MaskExpression masked_reference = 2;
inline bool Expression_FieldReference::_internal_has_masked_reference() const {
  return reference_type_case() == kMaskedReference;
}
inline bool Expression_FieldReference::has_masked_reference() const {
  return _internal_has_masked_reference();
}
inline void Expression_FieldReference::set_has_masked_reference() {
  _oneof_case_[0] = kMaskedReference;
}
inline void Expression_FieldReference::clear_masked_reference() {
  if (_internal_has_masked_reference()) {
    if (GetArena() == nullptr) {
      delete reference_type_.masked_reference_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::proto::Expression_MaskExpression* Expression_FieldReference::release_masked_reference() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.FieldReference.masked_reference)
  if (_internal_has_masked_reference()) {
    clear_has_reference_type();
      ::substrait::proto::Expression_MaskExpression* temp = reference_type_.masked_reference_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_type_.masked_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MaskExpression& Expression_FieldReference::_internal_masked_reference() const {
  return _internal_has_masked_reference()
      ? *reference_type_.masked_reference_
      : *reinterpret_cast< ::substrait::proto::Expression_MaskExpression*>(&::substrait::proto::_Expression_MaskExpression_default_instance_);
}
inline const ::substrait::proto::Expression_MaskExpression& Expression_FieldReference::masked_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.masked_reference)
  return _internal_masked_reference();
}
inline ::substrait::proto::Expression_MaskExpression* Expression_FieldReference::unsafe_arena_release_masked_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.FieldReference.masked_reference)
  if (_internal_has_masked_reference()) {
    clear_has_reference_type();
    ::substrait::proto::Expression_MaskExpression* temp = reference_type_.masked_reference_;
    reference_type_.masked_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_masked_reference(::substrait::proto::Expression_MaskExpression* masked_reference) {
  clear_reference_type();
  if (masked_reference) {
    set_has_masked_reference();
    reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.FieldReference.masked_reference)
}
inline ::substrait::proto::Expression_MaskExpression* Expression_FieldReference::_internal_mutable_masked_reference() {
  if (!_internal_has_masked_reference()) {
    clear_reference_type();
    set_has_masked_reference();
    reference_type_.masked_reference_ = CreateMaybeMessage< ::substrait::proto::Expression_MaskExpression >(GetArena());
  }
  return reference_type_.masked_reference_;
}
inline ::substrait::proto::Expression_MaskExpression* Expression_FieldReference::mutable_masked_reference() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.FieldReference.masked_reference)
  return _internal_mutable_masked_reference();
}

// .substrait.proto.Expression expression = 3;
inline bool Expression_FieldReference::_internal_has_expression() const {
  return root_type_case() == kExpression;
}
inline bool Expression_FieldReference::has_expression() const {
  return _internal_has_expression();
}
inline void Expression_FieldReference::set_has_expression() {
  _oneof_case_[1] = kExpression;
}
inline void Expression_FieldReference::clear_expression() {
  if (_internal_has_expression()) {
    if (GetArena() == nullptr) {
      delete root_type_.expression_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::proto::Expression* Expression_FieldReference::release_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.FieldReference.expression)
  if (_internal_has_expression()) {
    clear_has_root_type();
      ::substrait::proto::Expression* temp = root_type_.expression_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    root_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression& Expression_FieldReference::_internal_expression() const {
  return _internal_has_expression()
      ? *root_type_.expression_
      : *reinterpret_cast< ::substrait::proto::Expression*>(&::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_FieldReference::expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.expression)
  return _internal_expression();
}
inline ::substrait::proto::Expression* Expression_FieldReference::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.FieldReference.expression)
  if (_internal_has_expression()) {
    clear_has_root_type();
    ::substrait::proto::Expression* temp = root_type_.expression_;
    root_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_expression(::substrait::proto::Expression* expression) {
  clear_root_type();
  if (expression) {
    set_has_expression();
    root_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.FieldReference.expression)
}
inline ::substrait::proto::Expression* Expression_FieldReference::_internal_mutable_expression() {
  if (!_internal_has_expression()) {
    clear_root_type();
    set_has_expression();
    root_type_.expression_ = CreateMaybeMessage< ::substrait::proto::Expression >(GetArena());
  }
  return root_type_.expression_;
}
inline ::substrait::proto::Expression* Expression_FieldReference::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.FieldReference.expression)
  return _internal_mutable_expression();
}

// .substrait.proto.Expression.FieldReference.RootReference root_reference = 4;
inline bool Expression_FieldReference::_internal_has_root_reference() const {
  return root_type_case() == kRootReference;
}
inline bool Expression_FieldReference::has_root_reference() const {
  return _internal_has_root_reference();
}
inline void Expression_FieldReference::set_has_root_reference() {
  _oneof_case_[1] = kRootReference;
}
inline void Expression_FieldReference::clear_root_reference() {
  if (_internal_has_root_reference()) {
    if (GetArena() == nullptr) {
      delete root_type_.root_reference_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::proto::Expression_FieldReference_RootReference* Expression_FieldReference::release_root_reference() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.FieldReference.root_reference)
  if (_internal_has_root_reference()) {
    clear_has_root_type();
      ::substrait::proto::Expression_FieldReference_RootReference* temp = root_type_.root_reference_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    root_type_.root_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_FieldReference_RootReference& Expression_FieldReference::_internal_root_reference() const {
  return _internal_has_root_reference()
      ? *root_type_.root_reference_
      : *reinterpret_cast< ::substrait::proto::Expression_FieldReference_RootReference*>(&::substrait::proto::_Expression_FieldReference_RootReference_default_instance_);
}
inline const ::substrait::proto::Expression_FieldReference_RootReference& Expression_FieldReference::root_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.root_reference)
  return _internal_root_reference();
}
inline ::substrait::proto::Expression_FieldReference_RootReference* Expression_FieldReference::unsafe_arena_release_root_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.FieldReference.root_reference)
  if (_internal_has_root_reference()) {
    clear_has_root_type();
    ::substrait::proto::Expression_FieldReference_RootReference* temp = root_type_.root_reference_;
    root_type_.root_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_root_reference(::substrait::proto::Expression_FieldReference_RootReference* root_reference) {
  clear_root_type();
  if (root_reference) {
    set_has_root_reference();
    root_type_.root_reference_ = root_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.FieldReference.root_reference)
}
inline ::substrait::proto::Expression_FieldReference_RootReference* Expression_FieldReference::_internal_mutable_root_reference() {
  if (!_internal_has_root_reference()) {
    clear_root_type();
    set_has_root_reference();
    root_type_.root_reference_ = CreateMaybeMessage< ::substrait::proto::Expression_FieldReference_RootReference >(GetArena());
  }
  return root_type_.root_reference_;
}
inline ::substrait::proto::Expression_FieldReference_RootReference* Expression_FieldReference::mutable_root_reference() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.FieldReference.root_reference)
  return _internal_mutable_root_reference();
}

// .substrait.proto.Expression.FieldReference.OuterReference outer_reference = 5;
inline bool Expression_FieldReference::_internal_has_outer_reference() const {
  return root_type_case() == kOuterReference;
}
inline bool Expression_FieldReference::has_outer_reference() const {
  return _internal_has_outer_reference();
}
inline void Expression_FieldReference::set_has_outer_reference() {
  _oneof_case_[1] = kOuterReference;
}
inline void Expression_FieldReference::clear_outer_reference() {
  if (_internal_has_outer_reference()) {
    if (GetArena() == nullptr) {
      delete root_type_.outer_reference_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::proto::Expression_FieldReference_OuterReference* Expression_FieldReference::release_outer_reference() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.FieldReference.outer_reference)
  if (_internal_has_outer_reference()) {
    clear_has_root_type();
      ::substrait::proto::Expression_FieldReference_OuterReference* temp = root_type_.outer_reference_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    root_type_.outer_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_FieldReference_OuterReference& Expression_FieldReference::_internal_outer_reference() const {
  return _internal_has_outer_reference()
      ? *root_type_.outer_reference_
      : *reinterpret_cast< ::substrait::proto::Expression_FieldReference_OuterReference*>(&::substrait::proto::_Expression_FieldReference_OuterReference_default_instance_);
}
inline const ::substrait::proto::Expression_FieldReference_OuterReference& Expression_FieldReference::outer_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.FieldReference.outer_reference)
  return _internal_outer_reference();
}
inline ::substrait::proto::Expression_FieldReference_OuterReference* Expression_FieldReference::unsafe_arena_release_outer_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.FieldReference.outer_reference)
  if (_internal_has_outer_reference()) {
    clear_has_root_type();
    ::substrait::proto::Expression_FieldReference_OuterReference* temp = root_type_.outer_reference_;
    root_type_.outer_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_outer_reference(::substrait::proto::Expression_FieldReference_OuterReference* outer_reference) {
  clear_root_type();
  if (outer_reference) {
    set_has_outer_reference();
    root_type_.outer_reference_ = outer_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.FieldReference.outer_reference)
}
inline ::substrait::proto::Expression_FieldReference_OuterReference* Expression_FieldReference::_internal_mutable_outer_reference() {
  if (!_internal_has_outer_reference()) {
    clear_root_type();
    set_has_outer_reference();
    root_type_.outer_reference_ = CreateMaybeMessage< ::substrait::proto::Expression_FieldReference_OuterReference >(GetArena());
  }
  return root_type_.outer_reference_;
}
inline ::substrait::proto::Expression_FieldReference_OuterReference* Expression_FieldReference::mutable_outer_reference() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.FieldReference.outer_reference)
  return _internal_mutable_outer_reference();
}

inline bool Expression_FieldReference::has_reference_type() const {
  return reference_type_case() != REFERENCE_TYPE_NOT_SET;
}
inline void Expression_FieldReference::clear_has_reference_type() {
  _oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}
inline bool Expression_FieldReference::has_root_type() const {
  return root_type_case() != ROOT_TYPE_NOT_SET;
}
inline void Expression_FieldReference::clear_has_root_type() {
  _oneof_case_[1] = ROOT_TYPE_NOT_SET;
}
inline Expression_FieldReference::ReferenceTypeCase Expression_FieldReference::reference_type_case() const {
  return Expression_FieldReference::ReferenceTypeCase(_oneof_case_[0]);
}
inline Expression_FieldReference::RootTypeCase Expression_FieldReference::root_type_case() const {
  return Expression_FieldReference::RootTypeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Expression_Subquery_Scalar

// .substrait.proto.Rel input = 1;
inline bool Expression_Subquery_Scalar::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Expression_Subquery_Scalar::has_input() const {
  return _internal_has_input();
}
inline void Expression_Subquery_Scalar::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::proto::Rel& Expression_Subquery_Scalar::_internal_input() const {
  const ::substrait::proto::Rel* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& Expression_Subquery_Scalar::input() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.Scalar.input)
  return _internal_input();
}
inline void Expression_Subquery_Scalar::unsafe_arena_set_allocated_input(
    ::substrait::proto::Rel* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.Scalar.input)
}
inline ::substrait::proto::Rel* Expression_Subquery_Scalar::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_Scalar::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.Scalar.input)
  
  ::substrait::proto::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_Scalar::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::substrait::proto::Rel* Expression_Subquery_Scalar::mutable_input() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.Scalar.input)
  return _internal_mutable_input();
}
inline void Expression_Subquery_Scalar::set_allocated_input(::substrait::proto::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.Scalar.input)
}

// -------------------------------------------------------------------

// Expression_Subquery_InPredicate

// repeated .substrait.proto.Expression needles = 1;
inline int Expression_Subquery_InPredicate::_internal_needles_size() const {
  return needles_.size();
}
inline int Expression_Subquery_InPredicate::needles_size() const {
  return _internal_needles_size();
}
inline void Expression_Subquery_InPredicate::clear_needles() {
  needles_.Clear();
}
inline ::substrait::proto::Expression* Expression_Subquery_InPredicate::mutable_needles(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.InPredicate.needles)
  return needles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
Expression_Subquery_InPredicate::mutable_needles() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.Expression.Subquery.InPredicate.needles)
  return &needles_;
}
inline const ::substrait::proto::Expression& Expression_Subquery_InPredicate::_internal_needles(int index) const {
  return needles_.Get(index);
}
inline const ::substrait::proto::Expression& Expression_Subquery_InPredicate::needles(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.InPredicate.needles)
  return _internal_needles(index);
}
inline ::substrait::proto::Expression* Expression_Subquery_InPredicate::_internal_add_needles() {
  return needles_.Add();
}
inline ::substrait::proto::Expression* Expression_Subquery_InPredicate::add_needles() {
  // @@protoc_insertion_point(field_add:substrait.proto.Expression.Subquery.InPredicate.needles)
  return _internal_add_needles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
Expression_Subquery_InPredicate::needles() const {
  // @@protoc_insertion_point(field_list:substrait.proto.Expression.Subquery.InPredicate.needles)
  return needles_;
}

// .substrait.proto.Rel haystack = 2;
inline bool Expression_Subquery_InPredicate::_internal_has_haystack() const {
  return this != internal_default_instance() && haystack_ != nullptr;
}
inline bool Expression_Subquery_InPredicate::has_haystack() const {
  return _internal_has_haystack();
}
inline void Expression_Subquery_InPredicate::clear_haystack() {
  if (GetArena() == nullptr && haystack_ != nullptr) {
    delete haystack_;
  }
  haystack_ = nullptr;
}
inline const ::substrait::proto::Rel& Expression_Subquery_InPredicate::_internal_haystack() const {
  const ::substrait::proto::Rel* p = haystack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& Expression_Subquery_InPredicate::haystack() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.InPredicate.haystack)
  return _internal_haystack();
}
inline void Expression_Subquery_InPredicate::unsafe_arena_set_allocated_haystack(
    ::substrait::proto::Rel* haystack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(haystack_);
  }
  haystack_ = haystack;
  if (haystack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.InPredicate.haystack)
}
inline ::substrait::proto::Rel* Expression_Subquery_InPredicate::release_haystack() {
  auto temp = unsafe_arena_release_haystack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_InPredicate::unsafe_arena_release_haystack() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.InPredicate.haystack)
  
  ::substrait::proto::Rel* temp = haystack_;
  haystack_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_InPredicate::_internal_mutable_haystack() {
  
  if (haystack_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    haystack_ = p;
  }
  return haystack_;
}
inline ::substrait::proto::Rel* Expression_Subquery_InPredicate::mutable_haystack() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.InPredicate.haystack)
  return _internal_mutable_haystack();
}
inline void Expression_Subquery_InPredicate::set_allocated_haystack(::substrait::proto::Rel* haystack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete haystack_;
  }
  if (haystack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(haystack);
    if (message_arena != submessage_arena) {
      haystack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, haystack, submessage_arena);
    }
    
  } else {
    
  }
  haystack_ = haystack;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.InPredicate.haystack)
}

// -------------------------------------------------------------------

// Expression_Subquery_SetPredicate

// .substrait.proto.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
inline void Expression_Subquery_SetPredicate::clear_predicate_op() {
  predicate_op_ = 0;
}
inline ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::_internal_predicate_op() const {
  return static_cast< ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp >(predicate_op_);
}
inline ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::predicate_op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetPredicate.predicate_op)
  return _internal_predicate_op();
}
inline void Expression_Subquery_SetPredicate::_internal_set_predicate_op(::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp value) {
  
  predicate_op_ = value;
}
inline void Expression_Subquery_SetPredicate::set_predicate_op(::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp value) {
  _internal_set_predicate_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Subquery.SetPredicate.predicate_op)
}

// .substrait.proto.Rel tuples = 2;
inline bool Expression_Subquery_SetPredicate::_internal_has_tuples() const {
  return this != internal_default_instance() && tuples_ != nullptr;
}
inline bool Expression_Subquery_SetPredicate::has_tuples() const {
  return _internal_has_tuples();
}
inline void Expression_Subquery_SetPredicate::clear_tuples() {
  if (GetArena() == nullptr && tuples_ != nullptr) {
    delete tuples_;
  }
  tuples_ = nullptr;
}
inline const ::substrait::proto::Rel& Expression_Subquery_SetPredicate::_internal_tuples() const {
  const ::substrait::proto::Rel* p = tuples_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& Expression_Subquery_SetPredicate::tuples() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetPredicate.tuples)
  return _internal_tuples();
}
inline void Expression_Subquery_SetPredicate::unsafe_arena_set_allocated_tuples(
    ::substrait::proto::Rel* tuples) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuples_);
  }
  tuples_ = tuples;
  if (tuples) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.SetPredicate.tuples)
}
inline ::substrait::proto::Rel* Expression_Subquery_SetPredicate::release_tuples() {
  auto temp = unsafe_arena_release_tuples();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetPredicate::unsafe_arena_release_tuples() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.SetPredicate.tuples)
  
  ::substrait::proto::Rel* temp = tuples_;
  tuples_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetPredicate::_internal_mutable_tuples() {
  
  if (tuples_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    tuples_ = p;
  }
  return tuples_;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetPredicate::mutable_tuples() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.SetPredicate.tuples)
  return _internal_mutable_tuples();
}
inline void Expression_Subquery_SetPredicate::set_allocated_tuples(::substrait::proto::Rel* tuples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuples_;
  }
  if (tuples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuples);
    if (message_arena != submessage_arena) {
      tuples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuples, submessage_arena);
    }
    
  } else {
    
  }
  tuples_ = tuples;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.SetPredicate.tuples)
}

// -------------------------------------------------------------------

// Expression_Subquery_SetComparison

// .substrait.proto.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
inline void Expression_Subquery_SetComparison::clear_reduction_op() {
  reduction_op_ = 0;
}
inline ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::_internal_reduction_op() const {
  return static_cast< ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp >(reduction_op_);
}
inline ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::reduction_op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetComparison.reduction_op)
  return _internal_reduction_op();
}
inline void Expression_Subquery_SetComparison::_internal_set_reduction_op(::substrait::proto::Expression_Subquery_SetComparison_ReductionOp value) {
  
  reduction_op_ = value;
}
inline void Expression_Subquery_SetComparison::set_reduction_op(::substrait::proto::Expression_Subquery_SetComparison_ReductionOp value) {
  _internal_set_reduction_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Subquery.SetComparison.reduction_op)
}

// .substrait.proto.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
inline void Expression_Subquery_SetComparison::clear_comparison_op() {
  comparison_op_ = 0;
}
inline ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::_internal_comparison_op() const {
  return static_cast< ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp >(comparison_op_);
}
inline ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::comparison_op() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetComparison.comparison_op)
  return _internal_comparison_op();
}
inline void Expression_Subquery_SetComparison::_internal_set_comparison_op(::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp value) {
  
  comparison_op_ = value;
}
inline void Expression_Subquery_SetComparison::set_comparison_op(::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp value) {
  _internal_set_comparison_op(value);
  // @@protoc_insertion_point(field_set:substrait.proto.Expression.Subquery.SetComparison.comparison_op)
}

// .substrait.proto.Expression left = 3;
inline bool Expression_Subquery_SetComparison::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool Expression_Subquery_SetComparison::has_left() const {
  return _internal_has_left();
}
inline void Expression_Subquery_SetComparison::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::proto::Expression& Expression_Subquery_SetComparison::_internal_left() const {
  const ::substrait::proto::Expression* p = left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& Expression_Subquery_SetComparison::left() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetComparison.left)
  return _internal_left();
}
inline void Expression_Subquery_SetComparison::unsafe_arena_set_allocated_left(
    ::substrait::proto::Expression* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.SetComparison.left)
}
inline ::substrait::proto::Expression* Expression_Subquery_SetComparison::release_left() {
  auto temp = unsafe_arena_release_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* Expression_Subquery_SetComparison::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.SetComparison.left)
  
  ::substrait::proto::Expression* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* Expression_Subquery_SetComparison::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::substrait::proto::Expression* Expression_Subquery_SetComparison::mutable_left() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.SetComparison.left)
  return _internal_mutable_left();
}
inline void Expression_Subquery_SetComparison::set_allocated_left(::substrait::proto::Expression* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.SetComparison.left)
}

// .substrait.proto.Rel right = 4;
inline bool Expression_Subquery_SetComparison::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool Expression_Subquery_SetComparison::has_right() const {
  return _internal_has_right();
}
inline void Expression_Subquery_SetComparison::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::proto::Rel& Expression_Subquery_SetComparison::_internal_right() const {
  const ::substrait::proto::Rel* p = right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Rel*>(
      &::substrait::proto::_Rel_default_instance_);
}
inline const ::substrait::proto::Rel& Expression_Subquery_SetComparison::right() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.SetComparison.right)
  return _internal_right();
}
inline void Expression_Subquery_SetComparison::unsafe_arena_set_allocated_right(
    ::substrait::proto::Rel* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.SetComparison.right)
}
inline ::substrait::proto::Rel* Expression_Subquery_SetComparison::release_right() {
  auto temp = unsafe_arena_release_right();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetComparison::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.SetComparison.right)
  
  ::substrait::proto::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetComparison::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Rel>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::substrait::proto::Rel* Expression_Subquery_SetComparison::mutable_right() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.SetComparison.right)
  return _internal_mutable_right();
}
inline void Expression_Subquery_SetComparison::set_allocated_right(::substrait::proto::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.Expression.Subquery.SetComparison.right)
}

// -------------------------------------------------------------------

// Expression_Subquery

// .substrait.proto.Expression.Subquery.Scalar scalar = 1;
inline bool Expression_Subquery::_internal_has_scalar() const {
  return subquery_type_case() == kScalar;
}
inline bool Expression_Subquery::has_scalar() const {
  return _internal_has_scalar();
}
inline void Expression_Subquery::set_has_scalar() {
  _oneof_case_[0] = kScalar;
}
inline void Expression_Subquery::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArena() == nullptr) {
      delete subquery_type_.scalar_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::proto::Expression_Subquery_Scalar* Expression_Subquery::release_scalar() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.scalar)
  if (_internal_has_scalar()) {
    clear_has_subquery_type();
      ::substrait::proto::Expression_Subquery_Scalar* temp = subquery_type_.scalar_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subquery_type_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Subquery_Scalar& Expression_Subquery::_internal_scalar() const {
  return _internal_has_scalar()
      ? *subquery_type_.scalar_
      : *reinterpret_cast< ::substrait::proto::Expression_Subquery_Scalar*>(&::substrait::proto::_Expression_Subquery_Scalar_default_instance_);
}
inline const ::substrait::proto::Expression_Subquery_Scalar& Expression_Subquery::scalar() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.scalar)
  return _internal_scalar();
}
inline ::substrait::proto::Expression_Subquery_Scalar* Expression_Subquery::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Subquery.scalar)
  if (_internal_has_scalar()) {
    clear_has_subquery_type();
    ::substrait::proto::Expression_Subquery_Scalar* temp = subquery_type_.scalar_;
    subquery_type_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_scalar(::substrait::proto::Expression_Subquery_Scalar* scalar) {
  clear_subquery_type();
  if (scalar) {
    set_has_scalar();
    subquery_type_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.scalar)
}
inline ::substrait::proto::Expression_Subquery_Scalar* Expression_Subquery::_internal_mutable_scalar() {
  if (!_internal_has_scalar()) {
    clear_subquery_type();
    set_has_scalar();
    subquery_type_.scalar_ = CreateMaybeMessage< ::substrait::proto::Expression_Subquery_Scalar >(GetArena());
  }
  return subquery_type_.scalar_;
}
inline ::substrait::proto::Expression_Subquery_Scalar* Expression_Subquery::mutable_scalar() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.scalar)
  return _internal_mutable_scalar();
}

// .substrait.proto.Expression.Subquery.InPredicate in_predicate = 2;
inline bool Expression_Subquery::_internal_has_in_predicate() const {
  return subquery_type_case() == kInPredicate;
}
inline bool Expression_Subquery::has_in_predicate() const {
  return _internal_has_in_predicate();
}
inline void Expression_Subquery::set_has_in_predicate() {
  _oneof_case_[0] = kInPredicate;
}
inline void Expression_Subquery::clear_in_predicate() {
  if (_internal_has_in_predicate()) {
    if (GetArena() == nullptr) {
      delete subquery_type_.in_predicate_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::proto::Expression_Subquery_InPredicate* Expression_Subquery::release_in_predicate() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.in_predicate)
  if (_internal_has_in_predicate()) {
    clear_has_subquery_type();
      ::substrait::proto::Expression_Subquery_InPredicate* temp = subquery_type_.in_predicate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subquery_type_.in_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Subquery_InPredicate& Expression_Subquery::_internal_in_predicate() const {
  return _internal_has_in_predicate()
      ? *subquery_type_.in_predicate_
      : *reinterpret_cast< ::substrait::proto::Expression_Subquery_InPredicate*>(&::substrait::proto::_Expression_Subquery_InPredicate_default_instance_);
}
inline const ::substrait::proto::Expression_Subquery_InPredicate& Expression_Subquery::in_predicate() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.in_predicate)
  return _internal_in_predicate();
}
inline ::substrait::proto::Expression_Subquery_InPredicate* Expression_Subquery::unsafe_arena_release_in_predicate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Subquery.in_predicate)
  if (_internal_has_in_predicate()) {
    clear_has_subquery_type();
    ::substrait::proto::Expression_Subquery_InPredicate* temp = subquery_type_.in_predicate_;
    subquery_type_.in_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_in_predicate(::substrait::proto::Expression_Subquery_InPredicate* in_predicate) {
  clear_subquery_type();
  if (in_predicate) {
    set_has_in_predicate();
    subquery_type_.in_predicate_ = in_predicate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.in_predicate)
}
inline ::substrait::proto::Expression_Subquery_InPredicate* Expression_Subquery::_internal_mutable_in_predicate() {
  if (!_internal_has_in_predicate()) {
    clear_subquery_type();
    set_has_in_predicate();
    subquery_type_.in_predicate_ = CreateMaybeMessage< ::substrait::proto::Expression_Subquery_InPredicate >(GetArena());
  }
  return subquery_type_.in_predicate_;
}
inline ::substrait::proto::Expression_Subquery_InPredicate* Expression_Subquery::mutable_in_predicate() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.in_predicate)
  return _internal_mutable_in_predicate();
}

// .substrait.proto.Expression.Subquery.SetPredicate set_predicate = 3;
inline bool Expression_Subquery::_internal_has_set_predicate() const {
  return subquery_type_case() == kSetPredicate;
}
inline bool Expression_Subquery::has_set_predicate() const {
  return _internal_has_set_predicate();
}
inline void Expression_Subquery::set_has_set_predicate() {
  _oneof_case_[0] = kSetPredicate;
}
inline void Expression_Subquery::clear_set_predicate() {
  if (_internal_has_set_predicate()) {
    if (GetArena() == nullptr) {
      delete subquery_type_.set_predicate_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::proto::Expression_Subquery_SetPredicate* Expression_Subquery::release_set_predicate() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.set_predicate)
  if (_internal_has_set_predicate()) {
    clear_has_subquery_type();
      ::substrait::proto::Expression_Subquery_SetPredicate* temp = subquery_type_.set_predicate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subquery_type_.set_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Subquery_SetPredicate& Expression_Subquery::_internal_set_predicate() const {
  return _internal_has_set_predicate()
      ? *subquery_type_.set_predicate_
      : *reinterpret_cast< ::substrait::proto::Expression_Subquery_SetPredicate*>(&::substrait::proto::_Expression_Subquery_SetPredicate_default_instance_);
}
inline const ::substrait::proto::Expression_Subquery_SetPredicate& Expression_Subquery::set_predicate() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.set_predicate)
  return _internal_set_predicate();
}
inline ::substrait::proto::Expression_Subquery_SetPredicate* Expression_Subquery::unsafe_arena_release_set_predicate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Subquery.set_predicate)
  if (_internal_has_set_predicate()) {
    clear_has_subquery_type();
    ::substrait::proto::Expression_Subquery_SetPredicate* temp = subquery_type_.set_predicate_;
    subquery_type_.set_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_set_predicate(::substrait::proto::Expression_Subquery_SetPredicate* set_predicate) {
  clear_subquery_type();
  if (set_predicate) {
    set_has_set_predicate();
    subquery_type_.set_predicate_ = set_predicate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.set_predicate)
}
inline ::substrait::proto::Expression_Subquery_SetPredicate* Expression_Subquery::_internal_mutable_set_predicate() {
  if (!_internal_has_set_predicate()) {
    clear_subquery_type();
    set_has_set_predicate();
    subquery_type_.set_predicate_ = CreateMaybeMessage< ::substrait::proto::Expression_Subquery_SetPredicate >(GetArena());
  }
  return subquery_type_.set_predicate_;
}
inline ::substrait::proto::Expression_Subquery_SetPredicate* Expression_Subquery::mutable_set_predicate() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.set_predicate)
  return _internal_mutable_set_predicate();
}

// .substrait.proto.Expression.Subquery.SetComparison set_comparison = 4;
inline bool Expression_Subquery::_internal_has_set_comparison() const {
  return subquery_type_case() == kSetComparison;
}
inline bool Expression_Subquery::has_set_comparison() const {
  return _internal_has_set_comparison();
}
inline void Expression_Subquery::set_has_set_comparison() {
  _oneof_case_[0] = kSetComparison;
}
inline void Expression_Subquery::clear_set_comparison() {
  if (_internal_has_set_comparison()) {
    if (GetArena() == nullptr) {
      delete subquery_type_.set_comparison_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::proto::Expression_Subquery_SetComparison* Expression_Subquery::release_set_comparison() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.Subquery.set_comparison)
  if (_internal_has_set_comparison()) {
    clear_has_subquery_type();
      ::substrait::proto::Expression_Subquery_SetComparison* temp = subquery_type_.set_comparison_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subquery_type_.set_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Subquery_SetComparison& Expression_Subquery::_internal_set_comparison() const {
  return _internal_has_set_comparison()
      ? *subquery_type_.set_comparison_
      : *reinterpret_cast< ::substrait::proto::Expression_Subquery_SetComparison*>(&::substrait::proto::_Expression_Subquery_SetComparison_default_instance_);
}
inline const ::substrait::proto::Expression_Subquery_SetComparison& Expression_Subquery::set_comparison() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.Subquery.set_comparison)
  return _internal_set_comparison();
}
inline ::substrait::proto::Expression_Subquery_SetComparison* Expression_Subquery::unsafe_arena_release_set_comparison() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.Subquery.set_comparison)
  if (_internal_has_set_comparison()) {
    clear_has_subquery_type();
    ::substrait::proto::Expression_Subquery_SetComparison* temp = subquery_type_.set_comparison_;
    subquery_type_.set_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_set_comparison(::substrait::proto::Expression_Subquery_SetComparison* set_comparison) {
  clear_subquery_type();
  if (set_comparison) {
    set_has_set_comparison();
    subquery_type_.set_comparison_ = set_comparison;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.Subquery.set_comparison)
}
inline ::substrait::proto::Expression_Subquery_SetComparison* Expression_Subquery::_internal_mutable_set_comparison() {
  if (!_internal_has_set_comparison()) {
    clear_subquery_type();
    set_has_set_comparison();
    subquery_type_.set_comparison_ = CreateMaybeMessage< ::substrait::proto::Expression_Subquery_SetComparison >(GetArena());
  }
  return subquery_type_.set_comparison_;
}
inline ::substrait::proto::Expression_Subquery_SetComparison* Expression_Subquery::mutable_set_comparison() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.Subquery.set_comparison)
  return _internal_mutable_set_comparison();
}

inline bool Expression_Subquery::has_subquery_type() const {
  return subquery_type_case() != SUBQUERY_TYPE_NOT_SET;
}
inline void Expression_Subquery::clear_has_subquery_type() {
  _oneof_case_[0] = SUBQUERY_TYPE_NOT_SET;
}
inline Expression_Subquery::SubqueryTypeCase Expression_Subquery::subquery_type_case() const {
  return Expression_Subquery::SubqueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression

// .substrait.proto.Expression.Literal literal = 1;
inline bool Expression::_internal_has_literal() const {
  return rex_type_case() == kLiteral;
}
inline bool Expression::has_literal() const {
  return _internal_has_literal();
}
inline void Expression::set_has_literal() {
  _oneof_case_[0] = kLiteral;
}
inline void Expression::clear_literal() {
  if (_internal_has_literal()) {
    if (GetArena() == nullptr) {
      delete rex_type_.literal_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_Literal* Expression::release_literal() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.literal)
  if (_internal_has_literal()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_Literal* temp = rex_type_.literal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Literal& Expression::_internal_literal() const {
  return _internal_has_literal()
      ? *rex_type_.literal_
      : *reinterpret_cast< ::substrait::proto::Expression_Literal*>(&::substrait::proto::_Expression_Literal_default_instance_);
}
inline const ::substrait::proto::Expression_Literal& Expression::literal() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.literal)
  return _internal_literal();
}
inline ::substrait::proto::Expression_Literal* Expression::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.literal)
  if (_internal_has_literal()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_Literal* temp = rex_type_.literal_;
    rex_type_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_literal(::substrait::proto::Expression_Literal* literal) {
  clear_rex_type();
  if (literal) {
    set_has_literal();
    rex_type_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.literal)
}
inline ::substrait::proto::Expression_Literal* Expression::_internal_mutable_literal() {
  if (!_internal_has_literal()) {
    clear_rex_type();
    set_has_literal();
    rex_type_.literal_ = CreateMaybeMessage< ::substrait::proto::Expression_Literal >(GetArena());
  }
  return rex_type_.literal_;
}
inline ::substrait::proto::Expression_Literal* Expression::mutable_literal() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.literal)
  return _internal_mutable_literal();
}

// .substrait.proto.Expression.FieldReference selection = 2;
inline bool Expression::_internal_has_selection() const {
  return rex_type_case() == kSelection;
}
inline bool Expression::has_selection() const {
  return _internal_has_selection();
}
inline void Expression::set_has_selection() {
  _oneof_case_[0] = kSelection;
}
inline void Expression::clear_selection() {
  if (_internal_has_selection()) {
    if (GetArena() == nullptr) {
      delete rex_type_.selection_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_FieldReference* Expression::release_selection() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.selection)
  if (_internal_has_selection()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_FieldReference* temp = rex_type_.selection_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_FieldReference& Expression::_internal_selection() const {
  return _internal_has_selection()
      ? *rex_type_.selection_
      : *reinterpret_cast< ::substrait::proto::Expression_FieldReference*>(&::substrait::proto::_Expression_FieldReference_default_instance_);
}
inline const ::substrait::proto::Expression_FieldReference& Expression::selection() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.selection)
  return _internal_selection();
}
inline ::substrait::proto::Expression_FieldReference* Expression::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.selection)
  if (_internal_has_selection()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_FieldReference* temp = rex_type_.selection_;
    rex_type_.selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_selection(::substrait::proto::Expression_FieldReference* selection) {
  clear_rex_type();
  if (selection) {
    set_has_selection();
    rex_type_.selection_ = selection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.selection)
}
inline ::substrait::proto::Expression_FieldReference* Expression::_internal_mutable_selection() {
  if (!_internal_has_selection()) {
    clear_rex_type();
    set_has_selection();
    rex_type_.selection_ = CreateMaybeMessage< ::substrait::proto::Expression_FieldReference >(GetArena());
  }
  return rex_type_.selection_;
}
inline ::substrait::proto::Expression_FieldReference* Expression::mutable_selection() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.selection)
  return _internal_mutable_selection();
}

// .substrait.proto.Expression.ScalarFunction scalar_function = 3;
inline bool Expression::_internal_has_scalar_function() const {
  return rex_type_case() == kScalarFunction;
}
inline bool Expression::has_scalar_function() const {
  return _internal_has_scalar_function();
}
inline void Expression::set_has_scalar_function() {
  _oneof_case_[0] = kScalarFunction;
}
inline void Expression::clear_scalar_function() {
  if (_internal_has_scalar_function()) {
    if (GetArena() == nullptr) {
      delete rex_type_.scalar_function_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_ScalarFunction* Expression::release_scalar_function() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.scalar_function)
  if (_internal_has_scalar_function()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_ScalarFunction* temp = rex_type_.scalar_function_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.scalar_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_ScalarFunction& Expression::_internal_scalar_function() const {
  return _internal_has_scalar_function()
      ? *rex_type_.scalar_function_
      : *reinterpret_cast< ::substrait::proto::Expression_ScalarFunction*>(&::substrait::proto::_Expression_ScalarFunction_default_instance_);
}
inline const ::substrait::proto::Expression_ScalarFunction& Expression::scalar_function() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.scalar_function)
  return _internal_scalar_function();
}
inline ::substrait::proto::Expression_ScalarFunction* Expression::unsafe_arena_release_scalar_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.scalar_function)
  if (_internal_has_scalar_function()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_ScalarFunction* temp = rex_type_.scalar_function_;
    rex_type_.scalar_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_scalar_function(::substrait::proto::Expression_ScalarFunction* scalar_function) {
  clear_rex_type();
  if (scalar_function) {
    set_has_scalar_function();
    rex_type_.scalar_function_ = scalar_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.scalar_function)
}
inline ::substrait::proto::Expression_ScalarFunction* Expression::_internal_mutable_scalar_function() {
  if (!_internal_has_scalar_function()) {
    clear_rex_type();
    set_has_scalar_function();
    rex_type_.scalar_function_ = CreateMaybeMessage< ::substrait::proto::Expression_ScalarFunction >(GetArena());
  }
  return rex_type_.scalar_function_;
}
inline ::substrait::proto::Expression_ScalarFunction* Expression::mutable_scalar_function() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.scalar_function)
  return _internal_mutable_scalar_function();
}

// .substrait.proto.Expression.WindowFunction window_function = 5;
inline bool Expression::_internal_has_window_function() const {
  return rex_type_case() == kWindowFunction;
}
inline bool Expression::has_window_function() const {
  return _internal_has_window_function();
}
inline void Expression::set_has_window_function() {
  _oneof_case_[0] = kWindowFunction;
}
inline void Expression::clear_window_function() {
  if (_internal_has_window_function()) {
    if (GetArena() == nullptr) {
      delete rex_type_.window_function_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_WindowFunction* Expression::release_window_function() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.window_function)
  if (_internal_has_window_function()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_WindowFunction* temp = rex_type_.window_function_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_WindowFunction& Expression::_internal_window_function() const {
  return _internal_has_window_function()
      ? *rex_type_.window_function_
      : *reinterpret_cast< ::substrait::proto::Expression_WindowFunction*>(&::substrait::proto::_Expression_WindowFunction_default_instance_);
}
inline const ::substrait::proto::Expression_WindowFunction& Expression::window_function() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.window_function)
  return _internal_window_function();
}
inline ::substrait::proto::Expression_WindowFunction* Expression::unsafe_arena_release_window_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.window_function)
  if (_internal_has_window_function()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_WindowFunction* temp = rex_type_.window_function_;
    rex_type_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_window_function(::substrait::proto::Expression_WindowFunction* window_function) {
  clear_rex_type();
  if (window_function) {
    set_has_window_function();
    rex_type_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.window_function)
}
inline ::substrait::proto::Expression_WindowFunction* Expression::_internal_mutable_window_function() {
  if (!_internal_has_window_function()) {
    clear_rex_type();
    set_has_window_function();
    rex_type_.window_function_ = CreateMaybeMessage< ::substrait::proto::Expression_WindowFunction >(GetArena());
  }
  return rex_type_.window_function_;
}
inline ::substrait::proto::Expression_WindowFunction* Expression::mutable_window_function() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.window_function)
  return _internal_mutable_window_function();
}

// .substrait.proto.Expression.IfThen if_then = 6;
inline bool Expression::_internal_has_if_then() const {
  return rex_type_case() == kIfThen;
}
inline bool Expression::has_if_then() const {
  return _internal_has_if_then();
}
inline void Expression::set_has_if_then() {
  _oneof_case_[0] = kIfThen;
}
inline void Expression::clear_if_then() {
  if (_internal_has_if_then()) {
    if (GetArena() == nullptr) {
      delete rex_type_.if_then_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_IfThen* Expression::release_if_then() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.if_then)
  if (_internal_has_if_then()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_IfThen* temp = rex_type_.if_then_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.if_then_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_IfThen& Expression::_internal_if_then() const {
  return _internal_has_if_then()
      ? *rex_type_.if_then_
      : *reinterpret_cast< ::substrait::proto::Expression_IfThen*>(&::substrait::proto::_Expression_IfThen_default_instance_);
}
inline const ::substrait::proto::Expression_IfThen& Expression::if_then() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.if_then)
  return _internal_if_then();
}
inline ::substrait::proto::Expression_IfThen* Expression::unsafe_arena_release_if_then() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.if_then)
  if (_internal_has_if_then()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_IfThen* temp = rex_type_.if_then_;
    rex_type_.if_then_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_if_then(::substrait::proto::Expression_IfThen* if_then) {
  clear_rex_type();
  if (if_then) {
    set_has_if_then();
    rex_type_.if_then_ = if_then;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.if_then)
}
inline ::substrait::proto::Expression_IfThen* Expression::_internal_mutable_if_then() {
  if (!_internal_has_if_then()) {
    clear_rex_type();
    set_has_if_then();
    rex_type_.if_then_ = CreateMaybeMessage< ::substrait::proto::Expression_IfThen >(GetArena());
  }
  return rex_type_.if_then_;
}
inline ::substrait::proto::Expression_IfThen* Expression::mutable_if_then() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.if_then)
  return _internal_mutable_if_then();
}

// .substrait.proto.Expression.SwitchExpression switch_expression = 7;
inline bool Expression::_internal_has_switch_expression() const {
  return rex_type_case() == kSwitchExpression;
}
inline bool Expression::has_switch_expression() const {
  return _internal_has_switch_expression();
}
inline void Expression::set_has_switch_expression() {
  _oneof_case_[0] = kSwitchExpression;
}
inline void Expression::clear_switch_expression() {
  if (_internal_has_switch_expression()) {
    if (GetArena() == nullptr) {
      delete rex_type_.switch_expression_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_SwitchExpression* Expression::release_switch_expression() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.switch_expression)
  if (_internal_has_switch_expression()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_SwitchExpression* temp = rex_type_.switch_expression_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.switch_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_SwitchExpression& Expression::_internal_switch_expression() const {
  return _internal_has_switch_expression()
      ? *rex_type_.switch_expression_
      : *reinterpret_cast< ::substrait::proto::Expression_SwitchExpression*>(&::substrait::proto::_Expression_SwitchExpression_default_instance_);
}
inline const ::substrait::proto::Expression_SwitchExpression& Expression::switch_expression() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.switch_expression)
  return _internal_switch_expression();
}
inline ::substrait::proto::Expression_SwitchExpression* Expression::unsafe_arena_release_switch_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.switch_expression)
  if (_internal_has_switch_expression()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_SwitchExpression* temp = rex_type_.switch_expression_;
    rex_type_.switch_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_switch_expression(::substrait::proto::Expression_SwitchExpression* switch_expression) {
  clear_rex_type();
  if (switch_expression) {
    set_has_switch_expression();
    rex_type_.switch_expression_ = switch_expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.switch_expression)
}
inline ::substrait::proto::Expression_SwitchExpression* Expression::_internal_mutable_switch_expression() {
  if (!_internal_has_switch_expression()) {
    clear_rex_type();
    set_has_switch_expression();
    rex_type_.switch_expression_ = CreateMaybeMessage< ::substrait::proto::Expression_SwitchExpression >(GetArena());
  }
  return rex_type_.switch_expression_;
}
inline ::substrait::proto::Expression_SwitchExpression* Expression::mutable_switch_expression() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.switch_expression)
  return _internal_mutable_switch_expression();
}

// .substrait.proto.Expression.SingularOrList singular_or_list = 8;
inline bool Expression::_internal_has_singular_or_list() const {
  return rex_type_case() == kSingularOrList;
}
inline bool Expression::has_singular_or_list() const {
  return _internal_has_singular_or_list();
}
inline void Expression::set_has_singular_or_list() {
  _oneof_case_[0] = kSingularOrList;
}
inline void Expression::clear_singular_or_list() {
  if (_internal_has_singular_or_list()) {
    if (GetArena() == nullptr) {
      delete rex_type_.singular_or_list_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_SingularOrList* Expression::release_singular_or_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.singular_or_list)
  if (_internal_has_singular_or_list()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_SingularOrList* temp = rex_type_.singular_or_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.singular_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_SingularOrList& Expression::_internal_singular_or_list() const {
  return _internal_has_singular_or_list()
      ? *rex_type_.singular_or_list_
      : *reinterpret_cast< ::substrait::proto::Expression_SingularOrList*>(&::substrait::proto::_Expression_SingularOrList_default_instance_);
}
inline const ::substrait::proto::Expression_SingularOrList& Expression::singular_or_list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.singular_or_list)
  return _internal_singular_or_list();
}
inline ::substrait::proto::Expression_SingularOrList* Expression::unsafe_arena_release_singular_or_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.singular_or_list)
  if (_internal_has_singular_or_list()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_SingularOrList* temp = rex_type_.singular_or_list_;
    rex_type_.singular_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_singular_or_list(::substrait::proto::Expression_SingularOrList* singular_or_list) {
  clear_rex_type();
  if (singular_or_list) {
    set_has_singular_or_list();
    rex_type_.singular_or_list_ = singular_or_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.singular_or_list)
}
inline ::substrait::proto::Expression_SingularOrList* Expression::_internal_mutable_singular_or_list() {
  if (!_internal_has_singular_or_list()) {
    clear_rex_type();
    set_has_singular_or_list();
    rex_type_.singular_or_list_ = CreateMaybeMessage< ::substrait::proto::Expression_SingularOrList >(GetArena());
  }
  return rex_type_.singular_or_list_;
}
inline ::substrait::proto::Expression_SingularOrList* Expression::mutable_singular_or_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.singular_or_list)
  return _internal_mutable_singular_or_list();
}

// .substrait.proto.Expression.MultiOrList multi_or_list = 9;
inline bool Expression::_internal_has_multi_or_list() const {
  return rex_type_case() == kMultiOrList;
}
inline bool Expression::has_multi_or_list() const {
  return _internal_has_multi_or_list();
}
inline void Expression::set_has_multi_or_list() {
  _oneof_case_[0] = kMultiOrList;
}
inline void Expression::clear_multi_or_list() {
  if (_internal_has_multi_or_list()) {
    if (GetArena() == nullptr) {
      delete rex_type_.multi_or_list_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_MultiOrList* Expression::release_multi_or_list() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.multi_or_list)
  if (_internal_has_multi_or_list()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_MultiOrList* temp = rex_type_.multi_or_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.multi_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_MultiOrList& Expression::_internal_multi_or_list() const {
  return _internal_has_multi_or_list()
      ? *rex_type_.multi_or_list_
      : *reinterpret_cast< ::substrait::proto::Expression_MultiOrList*>(&::substrait::proto::_Expression_MultiOrList_default_instance_);
}
inline const ::substrait::proto::Expression_MultiOrList& Expression::multi_or_list() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.multi_or_list)
  return _internal_multi_or_list();
}
inline ::substrait::proto::Expression_MultiOrList* Expression::unsafe_arena_release_multi_or_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.multi_or_list)
  if (_internal_has_multi_or_list()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_MultiOrList* temp = rex_type_.multi_or_list_;
    rex_type_.multi_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_multi_or_list(::substrait::proto::Expression_MultiOrList* multi_or_list) {
  clear_rex_type();
  if (multi_or_list) {
    set_has_multi_or_list();
    rex_type_.multi_or_list_ = multi_or_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.multi_or_list)
}
inline ::substrait::proto::Expression_MultiOrList* Expression::_internal_mutable_multi_or_list() {
  if (!_internal_has_multi_or_list()) {
    clear_rex_type();
    set_has_multi_or_list();
    rex_type_.multi_or_list_ = CreateMaybeMessage< ::substrait::proto::Expression_MultiOrList >(GetArena());
  }
  return rex_type_.multi_or_list_;
}
inline ::substrait::proto::Expression_MultiOrList* Expression::mutable_multi_or_list() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.multi_or_list)
  return _internal_mutable_multi_or_list();
}

// .substrait.proto.Expression.Cast cast = 11;
inline bool Expression::_internal_has_cast() const {
  return rex_type_case() == kCast;
}
inline bool Expression::has_cast() const {
  return _internal_has_cast();
}
inline void Expression::set_has_cast() {
  _oneof_case_[0] = kCast;
}
inline void Expression::clear_cast() {
  if (_internal_has_cast()) {
    if (GetArena() == nullptr) {
      delete rex_type_.cast_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_Cast* Expression::release_cast() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.cast)
  if (_internal_has_cast()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_Cast* temp = rex_type_.cast_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.cast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Cast& Expression::_internal_cast() const {
  return _internal_has_cast()
      ? *rex_type_.cast_
      : *reinterpret_cast< ::substrait::proto::Expression_Cast*>(&::substrait::proto::_Expression_Cast_default_instance_);
}
inline const ::substrait::proto::Expression_Cast& Expression::cast() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.cast)
  return _internal_cast();
}
inline ::substrait::proto::Expression_Cast* Expression::unsafe_arena_release_cast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.cast)
  if (_internal_has_cast()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_Cast* temp = rex_type_.cast_;
    rex_type_.cast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_cast(::substrait::proto::Expression_Cast* cast) {
  clear_rex_type();
  if (cast) {
    set_has_cast();
    rex_type_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.cast)
}
inline ::substrait::proto::Expression_Cast* Expression::_internal_mutable_cast() {
  if (!_internal_has_cast()) {
    clear_rex_type();
    set_has_cast();
    rex_type_.cast_ = CreateMaybeMessage< ::substrait::proto::Expression_Cast >(GetArena());
  }
  return rex_type_.cast_;
}
inline ::substrait::proto::Expression_Cast* Expression::mutable_cast() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.cast)
  return _internal_mutable_cast();
}

// .substrait.proto.Expression.Subquery subquery = 12;
inline bool Expression::_internal_has_subquery() const {
  return rex_type_case() == kSubquery;
}
inline bool Expression::has_subquery() const {
  return _internal_has_subquery();
}
inline void Expression::set_has_subquery() {
  _oneof_case_[0] = kSubquery;
}
inline void Expression::clear_subquery() {
  if (_internal_has_subquery()) {
    if (GetArena() == nullptr) {
      delete rex_type_.subquery_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_Subquery* Expression::release_subquery() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.subquery)
  if (_internal_has_subquery()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_Subquery* temp = rex_type_.subquery_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.subquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Subquery& Expression::_internal_subquery() const {
  return _internal_has_subquery()
      ? *rex_type_.subquery_
      : *reinterpret_cast< ::substrait::proto::Expression_Subquery*>(&::substrait::proto::_Expression_Subquery_default_instance_);
}
inline const ::substrait::proto::Expression_Subquery& Expression::subquery() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.subquery)
  return _internal_subquery();
}
inline ::substrait::proto::Expression_Subquery* Expression::unsafe_arena_release_subquery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.subquery)
  if (_internal_has_subquery()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_Subquery* temp = rex_type_.subquery_;
    rex_type_.subquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_subquery(::substrait::proto::Expression_Subquery* subquery) {
  clear_rex_type();
  if (subquery) {
    set_has_subquery();
    rex_type_.subquery_ = subquery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.subquery)
}
inline ::substrait::proto::Expression_Subquery* Expression::_internal_mutable_subquery() {
  if (!_internal_has_subquery()) {
    clear_rex_type();
    set_has_subquery();
    rex_type_.subquery_ = CreateMaybeMessage< ::substrait::proto::Expression_Subquery >(GetArena());
  }
  return rex_type_.subquery_;
}
inline ::substrait::proto::Expression_Subquery* Expression::mutable_subquery() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.subquery)
  return _internal_mutable_subquery();
}

// .substrait.proto.Expression.Nested nested = 13;
inline bool Expression::_internal_has_nested() const {
  return rex_type_case() == kNested;
}
inline bool Expression::has_nested() const {
  return _internal_has_nested();
}
inline void Expression::set_has_nested() {
  _oneof_case_[0] = kNested;
}
inline void Expression::clear_nested() {
  if (_internal_has_nested()) {
    if (GetArena() == nullptr) {
      delete rex_type_.nested_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_Nested* Expression::release_nested() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.nested)
  if (_internal_has_nested()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_Nested* temp = rex_type_.nested_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.nested_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Nested& Expression::_internal_nested() const {
  return _internal_has_nested()
      ? *rex_type_.nested_
      : *reinterpret_cast< ::substrait::proto::Expression_Nested*>(&::substrait::proto::_Expression_Nested_default_instance_);
}
inline const ::substrait::proto::Expression_Nested& Expression::nested() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.nested)
  return _internal_nested();
}
inline ::substrait::proto::Expression_Nested* Expression::unsafe_arena_release_nested() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.nested)
  if (_internal_has_nested()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_Nested* temp = rex_type_.nested_;
    rex_type_.nested_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_nested(::substrait::proto::Expression_Nested* nested) {
  clear_rex_type();
  if (nested) {
    set_has_nested();
    rex_type_.nested_ = nested;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.nested)
}
inline ::substrait::proto::Expression_Nested* Expression::_internal_mutable_nested() {
  if (!_internal_has_nested()) {
    clear_rex_type();
    set_has_nested();
    rex_type_.nested_ = CreateMaybeMessage< ::substrait::proto::Expression_Nested >(GetArena());
  }
  return rex_type_.nested_;
}
inline ::substrait::proto::Expression_Nested* Expression::mutable_nested() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.nested)
  return _internal_mutable_nested();
}

// .substrait.proto.Expression.Enum enum = 10 [deprecated = true];
inline bool Expression::_internal_has_enum_() const {
  return rex_type_case() == kEnum;
}
inline bool Expression::has_enum_() const {
  return _internal_has_enum_();
}
inline void Expression::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void Expression::clear_enum_() {
  if (_internal_has_enum_()) {
    if (GetArena() == nullptr) {
      delete rex_type_.enum__;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::proto::Expression_Enum* Expression::release_enum_() {
  // @@protoc_insertion_point(field_release:substrait.proto.Expression.enum)
  if (_internal_has_enum_()) {
    clear_has_rex_type();
      ::substrait::proto::Expression_Enum* temp = rex_type_.enum__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rex_type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::proto::Expression_Enum& Expression::_internal_enum_() const {
  return _internal_has_enum_()
      ? *rex_type_.enum__
      : *reinterpret_cast< ::substrait::proto::Expression_Enum*>(&::substrait::proto::_Expression_Enum_default_instance_);
}
inline const ::substrait::proto::Expression_Enum& Expression::enum_() const {
  // @@protoc_insertion_point(field_get:substrait.proto.Expression.enum)
  return _internal_enum_();
}
inline ::substrait::proto::Expression_Enum* Expression::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.proto.Expression.enum)
  if (_internal_has_enum_()) {
    clear_has_rex_type();
    ::substrait::proto::Expression_Enum* temp = rex_type_.enum__;
    rex_type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_enum_(::substrait::proto::Expression_Enum* enum_) {
  clear_rex_type();
  if (enum_) {
    set_has_enum_();
    rex_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.Expression.enum)
}
inline ::substrait::proto::Expression_Enum* Expression::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_rex_type();
    set_has_enum_();
    rex_type_.enum__ = CreateMaybeMessage< ::substrait::proto::Expression_Enum >(GetArena());
  }
  return rex_type_.enum__;
}
inline ::substrait::proto::Expression_Enum* Expression::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.Expression.enum)
  return _internal_mutable_enum_();
}

inline bool Expression::has_rex_type() const {
  return rex_type_case() != REX_TYPE_NOT_SET;
}
inline void Expression::clear_has_rex_type() {
  _oneof_case_[0] = REX_TYPE_NOT_SET;
}
inline Expression::RexTypeCase Expression::rex_type_case() const {
  return Expression::RexTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SortField

// .substrait.proto.Expression expr = 1;
inline bool SortField::_internal_has_expr() const {
  return this != internal_default_instance() && expr_ != nullptr;
}
inline bool SortField::has_expr() const {
  return _internal_has_expr();
}
inline void SortField::clear_expr() {
  if (GetArena() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
}
inline const ::substrait::proto::Expression& SortField::_internal_expr() const {
  const ::substrait::proto::Expression* p = expr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Expression*>(
      &::substrait::proto::_Expression_default_instance_);
}
inline const ::substrait::proto::Expression& SortField::expr() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortField.expr)
  return _internal_expr();
}
inline void SortField::unsafe_arena_set_allocated_expr(
    ::substrait::proto::Expression* expr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expr_);
  }
  expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.SortField.expr)
}
inline ::substrait::proto::Expression* SortField::release_expr() {
  auto temp = unsafe_arena_release_expr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Expression* SortField::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_release:substrait.proto.SortField.expr)
  
  ::substrait::proto::Expression* temp = expr_;
  expr_ = nullptr;
  return temp;
}
inline ::substrait::proto::Expression* SortField::_internal_mutable_expr() {
  
  if (expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Expression>(GetArena());
    expr_ = p;
  }
  return expr_;
}
inline ::substrait::proto::Expression* SortField::mutable_expr() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.SortField.expr)
  return _internal_mutable_expr();
}
inline void SortField::set_allocated_expr(::substrait::proto::Expression* expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expr_;
  }
  if (expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expr);
    if (message_arena != submessage_arena) {
      expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    
  } else {
    
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.SortField.expr)
}

// .substrait.proto.SortField.SortDirection direction = 2;
inline bool SortField::_internal_has_direction() const {
  return sort_kind_case() == kDirection;
}
inline void SortField::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline void SortField::clear_direction() {
  if (_internal_has_direction()) {
    sort_kind_.direction_ = 0;
    clear_has_sort_kind();
  }
}
inline ::substrait::proto::SortField_SortDirection SortField::_internal_direction() const {
  if (_internal_has_direction()) {
    return static_cast< ::substrait::proto::SortField_SortDirection >(sort_kind_.direction_);
  }
  return static_cast< ::substrait::proto::SortField_SortDirection >(0);
}
inline ::substrait::proto::SortField_SortDirection SortField::direction() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortField.direction)
  return _internal_direction();
}
inline void SortField::_internal_set_direction(::substrait::proto::SortField_SortDirection value) {
  if (!_internal_has_direction()) {
    clear_sort_kind();
    set_has_direction();
  }
  sort_kind_.direction_ = value;
}
inline void SortField::set_direction(::substrait::proto::SortField_SortDirection value) {
  // @@protoc_insertion_point(field_set:substrait.proto.SortField.direction)
  _internal_set_direction(value);
}

// uint32 comparison_function_reference = 3;
inline bool SortField::_internal_has_comparison_function_reference() const {
  return sort_kind_case() == kComparisonFunctionReference;
}
inline void SortField::set_has_comparison_function_reference() {
  _oneof_case_[0] = kComparisonFunctionReference;
}
inline void SortField::clear_comparison_function_reference() {
  if (_internal_has_comparison_function_reference()) {
    sort_kind_.comparison_function_reference_ = 0u;
    clear_has_sort_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SortField::_internal_comparison_function_reference() const {
  if (_internal_has_comparison_function_reference()) {
    return sort_kind_.comparison_function_reference_;
  }
  return 0u;
}
inline void SortField::_internal_set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_comparison_function_reference()) {
    clear_sort_kind();
    set_has_comparison_function_reference();
  }
  sort_kind_.comparison_function_reference_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SortField::comparison_function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.SortField.comparison_function_reference)
  return _internal_comparison_function_reference();
}
inline void SortField::set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_comparison_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.SortField.comparison_function_reference)
}

inline bool SortField::has_sort_kind() const {
  return sort_kind_case() != SORT_KIND_NOT_SET;
}
inline void SortField::clear_has_sort_kind() {
  _oneof_case_[0] = SORT_KIND_NOT_SET;
}
inline SortField::SortKindCase SortField::sort_kind_case() const {
  return SortField::SortKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AggregateFunction

// uint32 function_reference = 1;
inline void AggregateFunction::clear_function_reference() {
  function_reference_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregateFunction::_internal_function_reference() const {
  return function_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregateFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.function_reference)
  return _internal_function_reference();
}
inline void AggregateFunction::_internal_set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  function_reference_ = value;
}
inline void AggregateFunction::set_function_reference(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.proto.AggregateFunction.function_reference)
}

// repeated .substrait.proto.FunctionArgument arguments = 7;
inline int AggregateFunction::_internal_arguments_size() const {
  return arguments_.size();
}
inline int AggregateFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void AggregateFunction::clear_arguments() {
  arguments_.Clear();
}
inline ::substrait::proto::FunctionArgument* AggregateFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateFunction.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >*
AggregateFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateFunction.arguments)
  return &arguments_;
}
inline const ::substrait::proto::FunctionArgument& AggregateFunction::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::substrait::proto::FunctionArgument& AggregateFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::proto::FunctionArgument* AggregateFunction::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::substrait::proto::FunctionArgument* AggregateFunction::add_arguments() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateFunction.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionArgument >&
AggregateFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateFunction.arguments)
  return arguments_;
}

// repeated .substrait.proto.FunctionOption options = 8;
inline int AggregateFunction::_internal_options_size() const {
  return options_.size();
}
inline int AggregateFunction::options_size() const {
  return _internal_options_size();
}
inline void AggregateFunction::clear_options() {
  options_.Clear();
}
inline ::substrait::proto::FunctionOption* AggregateFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateFunction.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >*
AggregateFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateFunction.options)
  return &options_;
}
inline const ::substrait::proto::FunctionOption& AggregateFunction::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::substrait::proto::FunctionOption& AggregateFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.options)
  return _internal_options(index);
}
inline ::substrait::proto::FunctionOption* AggregateFunction::_internal_add_options() {
  return options_.Add();
}
inline ::substrait::proto::FunctionOption* AggregateFunction::add_options() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateFunction.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::FunctionOption >&
AggregateFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateFunction.options)
  return options_;
}

// .substrait.proto.Type output_type = 5;
inline bool AggregateFunction::_internal_has_output_type() const {
  return this != internal_default_instance() && output_type_ != nullptr;
}
inline bool AggregateFunction::has_output_type() const {
  return _internal_has_output_type();
}
inline const ::substrait::proto::Type& AggregateFunction::_internal_output_type() const {
  const ::substrait::proto::Type* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::substrait::proto::Type*>(
      &::substrait::proto::_Type_default_instance_);
}
inline const ::substrait::proto::Type& AggregateFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.output_type)
  return _internal_output_type();
}
inline void AggregateFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::proto::Type* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.proto.AggregateFunction.output_type)
}
inline ::substrait::proto::Type* AggregateFunction::release_output_type() {
  auto temp = unsafe_arena_release_output_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::substrait::proto::Type* AggregateFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.proto.AggregateFunction.output_type)
  
  ::substrait::proto::Type* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::substrait::proto::Type* AggregateFunction::_internal_mutable_output_type() {
  
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::proto::Type>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::substrait::proto::Type* AggregateFunction::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateFunction.output_type)
  return _internal_mutable_output_type();
}
inline void AggregateFunction::set_allocated_output_type(::substrait::proto::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type)->GetArena();
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    
  } else {
    
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.proto.AggregateFunction.output_type)
}

// .substrait.proto.AggregationPhase phase = 4;
inline void AggregateFunction::clear_phase() {
  phase_ = 0;
}
inline ::substrait::proto::AggregationPhase AggregateFunction::_internal_phase() const {
  return static_cast< ::substrait::proto::AggregationPhase >(phase_);
}
inline ::substrait::proto::AggregationPhase AggregateFunction::phase() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.phase)
  return _internal_phase();
}
inline void AggregateFunction::_internal_set_phase(::substrait::proto::AggregationPhase value) {
  
  phase_ = value;
}
inline void AggregateFunction::set_phase(::substrait::proto::AggregationPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:substrait.proto.AggregateFunction.phase)
}

// repeated .substrait.proto.SortField sorts = 3;
inline int AggregateFunction::_internal_sorts_size() const {
  return sorts_.size();
}
inline int AggregateFunction::sorts_size() const {
  return _internal_sorts_size();
}
inline void AggregateFunction::clear_sorts() {
  sorts_.Clear();
}
inline ::substrait::proto::SortField* AggregateFunction::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateFunction.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >*
AggregateFunction::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateFunction.sorts)
  return &sorts_;
}
inline const ::substrait::proto::SortField& AggregateFunction::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::substrait::proto::SortField& AggregateFunction::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.sorts)
  return _internal_sorts(index);
}
inline ::substrait::proto::SortField* AggregateFunction::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::substrait::proto::SortField* AggregateFunction::add_sorts() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateFunction.sorts)
  return _internal_add_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::SortField >&
AggregateFunction::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateFunction.sorts)
  return sorts_;
}

// .substrait.proto.AggregateFunction.AggregationInvocation invocation = 6;
inline void AggregateFunction::clear_invocation() {
  invocation_ = 0;
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation AggregateFunction::_internal_invocation() const {
  return static_cast< ::substrait::proto::AggregateFunction_AggregationInvocation >(invocation_);
}
inline ::substrait::proto::AggregateFunction_AggregationInvocation AggregateFunction::invocation() const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.invocation)
  return _internal_invocation();
}
inline void AggregateFunction::_internal_set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  
  invocation_ = value;
}
inline void AggregateFunction::set_invocation(::substrait::proto::AggregateFunction_AggregationInvocation value) {
  _internal_set_invocation(value);
  // @@protoc_insertion_point(field_set:substrait.proto.AggregateFunction.invocation)
}

// repeated .substrait.proto.Expression args = 2 [deprecated = true];
inline int AggregateFunction::_internal_args_size() const {
  return args_.size();
}
inline int AggregateFunction::args_size() const {
  return _internal_args_size();
}
inline void AggregateFunction::clear_args() {
  args_.Clear();
}
inline ::substrait::proto::Expression* AggregateFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.proto.AggregateFunction.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >*
AggregateFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.proto.AggregateFunction.args)
  return &args_;
}
inline const ::substrait::proto::Expression& AggregateFunction::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::substrait::proto::Expression& AggregateFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.proto.AggregateFunction.args)
  return _internal_args(index);
}
inline ::substrait::proto::Expression* AggregateFunction::_internal_add_args() {
  return args_.Add();
}
inline ::substrait::proto::Expression* AggregateFunction::add_args() {
  // @@protoc_insertion_point(field_add:substrait.proto.AggregateFunction.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::proto::Expression >&
AggregateFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.proto.AggregateFunction.args)
  return args_;
}

// -------------------------------------------------------------------

// ReferenceRel

// int32 subtree_ordinal = 1;
inline void ReferenceRel::clear_subtree_ordinal() {
  subtree_ordinal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceRel::_internal_subtree_ordinal() const {
  return subtree_ordinal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceRel::subtree_ordinal() const {
  // @@protoc_insertion_point(field_get:substrait.proto.ReferenceRel.subtree_ordinal)
  return _internal_subtree_ordinal();
}
inline void ReferenceRel::_internal_set_subtree_ordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtree_ordinal_ = value;
}
inline void ReferenceRel::set_subtree_ordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtree_ordinal(value);
  // @@protoc_insertion_point(field_set:substrait.proto.ReferenceRel.subtree_ordinal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace substrait

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::substrait::proto::JoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::JoinRel_JoinType>() {
  return ::substrait::proto::JoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::SetRel_SetOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::SetRel_SetOp>() {
  return ::substrait::proto::SetRel_SetOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::DdlRel_DdlObject> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::DdlRel_DdlObject>() {
  return ::substrait::proto::DdlRel_DdlObject_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::DdlRel_DdlOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::DdlRel_DdlOp>() {
  return ::substrait::proto::DdlRel_DdlOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::WriteRel_WriteOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::WriteRel_WriteOp>() {
  return ::substrait::proto::WriteRel_WriteOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::WriteRel_OutputMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::WriteRel_OutputMode>() {
  return ::substrait::proto::WriteRel_OutputMode_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::ComparisonJoinKey_SimpleComparisonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::ComparisonJoinKey_SimpleComparisonType>() {
  return ::substrait::proto::ComparisonJoinKey_SimpleComparisonType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::HashJoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::HashJoinRel_JoinType>() {
  return ::substrait::proto::HashJoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::MergeJoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::MergeJoinRel_JoinType>() {
  return ::substrait::proto::MergeJoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::NestedLoopJoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::NestedLoopJoinRel_JoinType>() {
  return ::substrait::proto::NestedLoopJoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::Expression_WindowFunction_BoundsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::Expression_WindowFunction_BoundsType>() {
  return ::substrait::proto::Expression_WindowFunction_BoundsType_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::Expression_Cast_FailureBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::Expression_Cast_FailureBehavior>() {
  return ::substrait::proto::Expression_Cast_FailureBehavior_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp>() {
  return ::substrait::proto::Expression_Subquery_SetPredicate_PredicateOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp>() {
  return ::substrait::proto::Expression_Subquery_SetComparison_ComparisonOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp>() {
  return ::substrait::proto::Expression_Subquery_SetComparison_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::SortField_SortDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::SortField_SortDirection>() {
  return ::substrait::proto::SortField_SortDirection_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::AggregateFunction_AggregationInvocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::AggregateFunction_AggregationInvocation>() {
  return ::substrait::proto::AggregateFunction_AggregationInvocation_descriptor();
}
template <> struct is_proto_enum< ::substrait::proto::AggregationPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::proto::AggregationPhase>() {
  return ::substrait::proto::AggregationPhase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_2fproto_2falgebra_2eproto
