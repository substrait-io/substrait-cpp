# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
  message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
  message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(
  _cmake_expected_target IN
  ITEMS substrait_common
        substrait_io
        plantransformer
        substrait_type
        substrait_expression
        substrait_function
        substrait_proto
        planconverter
        substrait_textplan_converter
        substrait_base_proto_visitor
        substrait_textplan_normalizer
        textplan_grammar
        planparser
        substrait_textplan_loader
        error_listener
        parse_result
        symbol_table
        planloader)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text
                 "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text
                 "${_cmake_targets_not_defined}")
  message(
    FATAL_ERROR
      "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n"
  )
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)

# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target substrait_common
add_library(substrait_common STATIC IMPORTED)

set_target_properties(substrait_common PROPERTIES INTERFACE_LINK_LIBRARIES
                                                  "fmt::fmt-header-only")

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_common
    INTERFACE FILE_SET
              "HEADERS"
              TYPE
              "HEADERS"
              BASE_DIRS
              "${_IMPORT_PREFIX}/include"
              FILES
              "${_IMPORT_PREFIX}/include/substrait/common/Exceptions.h")
else()
  set_property(
    TARGET substrait_common
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target substrait_io
add_library(substrait_io STATIC IMPORTED)

set_target_properties(
  substrait_io
  PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
    INTERFACE_LINK_LIBRARIES
    "substrait_proto;substrait_textplan_converter;substrait_textplan_loader;absl::status;absl::statusor"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_io
    INTERFACE FILE_SET
              "HEADERS"
              TYPE
              "HEADERS"
              BASE_DIRS
              "${_IMPORT_PREFIX}/include"
              FILES
              "${_IMPORT_PREFIX}/include/substrait/common/Io.h")
else()
  set_property(
    TARGET substrait_io
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target plantransformer
add_executable(plantransformer IMPORTED)

# Create imported target substrait_type
add_library(substrait_type STATIC IMPORTED)

set_target_properties(substrait_type PROPERTIES INTERFACE_LINK_LIBRARIES
                                                "substrait_common")

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_type
    INTERFACE FILE_SET
              "HEADERS"
              TYPE
              "HEADERS"
              BASE_DIRS
              "${_IMPORT_PREFIX}/include"
              FILES
              "${_IMPORT_PREFIX}/include/substrait/type/Type.h")
else()
  set_property(
    TARGET substrait_type
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target substrait_expression
add_library(substrait_expression STATIC IMPORTED)

set_target_properties(
  substrait_expression PROPERTIES INTERFACE_LINK_LIBRARIES
                                  "substrait_proto;absl::numeric;absl::strings")

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_expression
    INTERFACE FILE_SET
              "HEADERS"
              TYPE
              "HEADERS"
              BASE_DIRS
              "${_IMPORT_PREFIX}/include"
              FILES
              "${_IMPORT_PREFIX}/include/substrait/expression/DecimalLiteral.h")
else()
  set_property(
    TARGET substrait_expression
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target substrait_function
add_library(substrait_function STATIC IMPORTED)

set_target_properties(substrait_function PROPERTIES INTERFACE_LINK_LIBRARIES
                                                    "substrait_type;yaml-cpp")

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_function
    INTERFACE FILE_SET
              "HEADERS"
              TYPE
              "HEADERS"
              BASE_DIRS
              "${_IMPORT_PREFIX}/include"
              FILES
              "${_IMPORT_PREFIX}/include/substrait/function/Extension.h"
              "${_IMPORT_PREFIX}/include/substrait/function/Function.h"
              "${_IMPORT_PREFIX}/include/substrait/function/FunctionLookup.h"
              "${_IMPORT_PREFIX}/include/substrait/function/FunctionSignature.h"
  )
else()
  set_property(
    TARGET substrait_function
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target substrait_proto
add_library(substrait_proto STATIC IMPORTED)

set_target_properties(
  substrait_proto
  PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
             "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include"
             INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf")

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(
    substrait_proto
    INTERFACE
      FILE_SET
      "HEADERS"
      TYPE
      "HEADERS"
      BASE_DIRS
      "${_IMPORT_PREFIX}/include"
      FILES
      "${_IMPORT_PREFIX}/include/substrait/proto/algebra.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/capabilities.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/extended_expression.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/function.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/parameterized_types.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/plan.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/type.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/type_expressions.pb.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/ProtoUtils.h"
      "${_IMPORT_PREFIX}/include/substrait/proto/extensions/extensions.pb.h")
else()
  set_property(
    TARGET substrait_proto
    APPEND
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include")
endif()

# Create imported target planconverter
add_executable(planconverter IMPORTED)

# Create imported target substrait_textplan_converter
add_library(substrait_textplan_converter STATIC IMPORTED)

set_target_properties(
  substrait_textplan_converter
  PROPERTIES
    INTERFACE_LINK_LIBRARIES
    "substrait_base_proto_visitor;substrait_common;substrait_proto;symbol_table;error_listener;fmt::fmt-header-only;absl::status;absl::statusor"
)

# Create imported target substrait_base_proto_visitor
add_library(substrait_base_proto_visitor STATIC IMPORTED)

set_target_properties(
  substrait_base_proto_visitor
  PROPERTIES
    INTERFACE_LINK_LIBRARIES
    "substrait_common;substrait_proto;error_listener;fmt::fmt-header-only;absl::status;absl::statusor"
)

# Create imported target substrait_textplan_normalizer
add_library(substrait_textplan_normalizer STATIC IMPORTED)

set_target_properties(
  substrait_textplan_normalizer PROPERTIES INTERFACE_LINK_LIBRARIES
                                           "substrait_textplan_converter")

# Create imported target textplan_grammar
add_library(textplan_grammar STATIC IMPORTED)

set_target_properties(
  textplan_grammar PROPERTIES INTERFACE_COMPILE_DEFINITIONS "ANTLR4CPP_STATIC"
                              INTERFACE_LINK_LIBRARIES "antlr4_static")

# Create imported target planparser
add_executable(planparser IMPORTED)

# Create imported target substrait_textplan_loader
add_library(substrait_textplan_loader STATIC IMPORTED)

set_target_properties(
  substrait_textplan_loader
  PROPERTIES
    INTERFACE_LINK_LIBRARIES
    "symbol_table;error_listener;substrait_proto;substrait_type;substrait_expression;textplan_grammar;fmt::fmt-header-only;date::date;date::date-tz;absl::status;absl::statusor"
)

# Create imported target error_listener
add_library(error_listener STATIC IMPORTED)

# Create imported target parse_result
add_library(parse_result STATIC IMPORTED)

# Create imported target symbol_table
add_library(symbol_table STATIC IMPORTED)

set_target_properties(
  symbol_table
  PROPERTIES
    INTERFACE_LINK_LIBRARIES
    "substrait_base_proto_visitor;substrait_proto;substrait_common;substrait_expression;absl::strings;fmt::fmt-header-only;date::date"
)

# Create imported target planloader
add_library(planloader SHARED IMPORTED)

set_target_properties(planloader PROPERTIES INTERFACE_LINK_LIBRARIES
                                            "substrait_io")

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(
    FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files
     "${CMAKE_CURRENT_LIST_DIR}/SubstraitTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(
        FATAL_ERROR
          "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(
  _target
  "fmt::fmt-header-only"
  "absl::status"
  "absl::statusor"
  "absl::numeric"
  "absl::strings"
  "yaml-cpp"
  "date::date"
  "date::date-tz")
  if(NOT TARGET "${_target}")
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets
        "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}"
    )
  else()
    message(
      FATAL_ERROR
        "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}"
    )
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
