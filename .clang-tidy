# SPDX-License-Identifier: Apache-2.0
---
# Configure clang-tidy for this project.

# Here is an explanation for why some of the checks are disabled:
#
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -modernize-avoid-c-arrays: We only use C arrays when they seem to be the
#      right tool for the job, such as `char foo[] = "hello"`. In these cases,
#      avoiding C arrays often makes the code less readable, and std::array is
#      not a drop-in replacement because it doesn't deduce the size.
#
#  -performance-move-const-arg: This warning requires the developer to
#      know/care more about the implementation details of types/functions than
#      should be necessary. For example, `A a; F(std::move(a));` will trigger a
#      warning IFF `A` is a trivial type (and therefore the move is
#      meaningless). It would also warn if `F` accepts by `const&`, which is
#      another detail that the caller need not care about.
#
#  -readability-redundant-declaration: A friend declaration inside a class
#      counts as a declaration, so if we also declare that friend outside the
#      class in order to document it as part of the public API, that will
#      trigger a redundant declaration warning from this check.
#
#  -readability-function-cognitive-complexity: too many false positives with
#      clang-tidy-12. We need to disable this check in macros, and that setting
#      only appears in clang-tidy-13.
#
#  -bugprone-narrowing-conversions: too many false positives around
#      `std::size_t`  vs. `*::difference_type`.
#
#  -bugprone-easily-swappable-parameters: too many false positives.
#
#  -bugprone-implicit-widening-of-multiplication-result: too many false positives.
#     Almost any expression of the form `2 * variable` or `long x = a_int * b_int;`
#     generates an error.
#
#  -bugprone-unchecked-optional-access: too many false positives in tests.
#     Despite what the documentation says, this warning appears after
#     `ASSERT_TRUE(variable)` or `ASSERT_TRUE(variable.has_value())`.
Checks: >
  -*,
  bugprone-*,
  google-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -google-runtime-references,
  -google-readability-todo,
  -google-build-using-namespace,
  -google-readability-casting,
  -modernize-return-braced-init-list,
  -modernize-use-trailing-return-type,
  -modernize-avoid-c-arrays,
  -performance-move-const-arg,
  -performance-inefficient-vector-operation,
  -readability-identifier-length,
  -readability-qualified-auto,
  -readability-inconsistent-declaration-parameter-name,
  -readability-magic-numbers,
  -readability-named-parameter,
  -readability-else-after-return,
  -readability-redundant-declaration,
  -readability-function-cognitive-complexity,
  -readability-implicit-bool-conversion,
  -bugprone-branch-clone,
  -bugprone-exception-escape,
  -bugprone-easily-swappable-parameters,
  -bugprone-implicit-widening-of-multiplication-result,
  -bugprone-unchecked-optional-access
WarningsAsErrors: '*'
HeaderFilterRegex: 'io/substrait/.*\\.h$'
AnalyzeTemporaryDtors: false
FormatStyle: none
CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,                            value: lower_case}
  - { key: readability-identifier-naming.ClassCase ,                               value: CamelCase }
  - { key: readability-identifier-naming.StructCase,                               value: CamelCase }
  - { key: readability-identifier-naming.EnumCase,                                 value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase,                    value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase,                             value: camelBack }
  - { key: readability-identifier-naming.VariableCase,                             value: camelBack }
  - { key: readability-identifier-naming.PublicMemberCase,                         value: camelBack }
  - { key: readability-identifier-naming.PublicMethodCase,                         value: camelBack }
  - { key: readability-identifier-naming.ProtectedMemberCase,                      value: camelBack }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,                    value: _         }
  - { key: readability-identifier-naming.ProtectedMethodCase,                      value: camelBack }
  - { key: readability-identifier-naming.PrivateMemberSuffix,                      value: _         }
  - { key: readability-identifier-naming.PrivateMemberCase,                        value: camelBack }
  - { key: readability-identifier-naming.PrivateMethodCase,                        value: camelBack }
  - { key: readability-identifier-naming.EnumConstantCase,                         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,                       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,                    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,                  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,                       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,                     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,                       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,                     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,                       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,                     value: k         }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,            value: 1         }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,            value: 1         }
  - { key: readability-function-cognitive-complexity.IgnoreMacros,                 value: 1         }
